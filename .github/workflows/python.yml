---

name: Python

"on":
  pull_request:
    branches:
      - develop
      - main
    paths:
      - "external/**"
      - "grpc/clients/python/**"
      - "grpc/examples/python/**"
      - "proto/**"
      - "rest/examples/python/**"
  push:
    branches:
      - develop
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"  # release
      - "v[0-9]+.[0-9]+.[0-9]+-a[0-9]+"  # alpha
      - "v[0-9]+.[0-9]+.[0-9]+-pre[0-9]+" # pre-release / rc

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Lint with flake8
        run: |
          command -v flake8 1>/dev/null || pip install flake8
          make flake8

      - name: Lint with black
        run: |
          command -v black 1>/dev/null || pip install black
          make blackcheck

      - name: Type-check with mypy
        run: |
          sudo apt update
          sudo env DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends python-virtualenv
          make mypy

      - name: Test with pytest
        env:
          GRPC_NODE: ${{ secrets.GRPC_NODE }}
          FAUCETSERVER: ${{ secrets.FAUCETSERVER }}
          WALLETSERVER: ${{ secrets.WALLETSERVER }}
        run: |
          cd grpc/clients/python
          command -v pipenv 1>/dev/null || pip install pipenv
          make test

      - name: Check archive file counts
        run: |
          cd grpc/clients/python
          python3 setup.py sdist bdist_wheel
          make check_dist

      - name: Run example scripts for gRPC
        env:
          NODE_URL_GRPC: ${{ secrets.GRPC_NODE }}
          WALLET_NAME: ${{ secrets.WALLET_NAME }}
          WALLET_PASSPHRASE: ${{ secrets.WALLET_PASSPHRASE }}
          WALLETSERVER_URL: ${{ secrets.WALLETSERVER }}
        run: |
          command -v pipenv 1>/dev/null || pip install pipenv
          cd grpc/examples/python
          make
        if: ${{ matrix.python-version == '3.9' }}

      - name: Run example scripts for GraphQL
        env:
          NODE_URL_REST: ${{ secrets.NODE_URL_REST }}
          WALLET_NAME: ${{ secrets.WALLET_NAME }}
          WALLET_PASSPHRASE: ${{ secrets.WALLET_PASSPHRASE }}
          WALLETSERVER_URL: ${{ secrets.WALLETSERVER }}
        run: |
          command -v pipenv 1>/dev/null || pip install pipenv
          cd graphql/examples/python
          make
        if: ${{ matrix.python-version == '3.9' }}

      - name: Run example scripts for REST
        env:
          NODE_URL_REST: ${{ secrets.NODE_URL_REST }}
          WALLET_NAME: ${{ secrets.WALLET_NAME }}
          WALLET_PASSPHRASE: ${{ secrets.WALLET_PASSPHRASE }}
          WALLETSERVER_URL: ${{ secrets.WALLETSERVER }}
        run: |
          command -v pipenv 1>/dev/null || pip install pipenv
          cd rest/examples/python
          make
        if: ${{ matrix.python-version == '3.9' }}

      - name: Push release to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.python-version == '3.8' }}
        env:
          TWINE_USERNAME: __token__
          twine_test_password: ${{ secrets.TWINE_TEST_PASSWORD }}
          twine_prod_password: ${{ secrets.TWINE_PASSWORD }}
        run: |
          cd grpc/clients/python
          github_tag="${GITHUB_REF#refs/tags/v}"
          if [[ "$v" =~ ^v[0-9]+.[0-9]+.[0-9]+-a[0-9]+$ ]] ; then
            echo "This is an alpha release."
            # Inject the version, rather than requiring it in setup.py.
            sed --in-place -e 's#^VERSION.*$#VERSION = "'"$github_tag"'"#' setup.py
            make_target=dist_test
            export TWINE_PASSWORD="$twine_test_password"
          else
            echo "This is a (pre)release."
            setuppy_tag="$(python -c "$(awk '/^VERSION = /' setup.py); print(VERSION)")"
            make_target=dist
            export TWINE_PASSWORD="$twine_prod_password"
          fi
          if [[ "$github_tag" != "$setuppy_tag" ]] ; then
            echo "Tags do not match."
            echo "Github:   $github_tag"
            echo "setup.py: $setuppy_tag"
            exit 1
          fi
          command -v twine 1>/dev/null || pip install twine
          make "$make_target"
