// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: api/trading.proto

package api

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	proto1 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto"
	v1 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto/commands/v1"
	v11 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto/events/v1"
	v12 "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto/oracles/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Blockchain transaction type
type SubmitTransactionRequest_Type int32

const (
	SubmitTransactionRequest_TYPE_UNSPECIFIED SubmitTransactionRequest_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitTransactionRequest_TYPE_ASYNC SubmitTransactionRequest_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitTransactionRequest_TYPE_SYNC SubmitTransactionRequest_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitTransactionRequest_TYPE_COMMIT SubmitTransactionRequest_Type = 3
)

// Enum value maps for SubmitTransactionRequest_Type.
var (
	SubmitTransactionRequest_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ASYNC",
		2: "TYPE_SYNC",
		3: "TYPE_COMMIT",
	}
	SubmitTransactionRequest_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ASYNC":       1,
		"TYPE_SYNC":        2,
		"TYPE_COMMIT":      3,
	}
)

func (x SubmitTransactionRequest_Type) Enum() *SubmitTransactionRequest_Type {
	p := new(SubmitTransactionRequest_Type)
	*p = x
	return p
}

func (x SubmitTransactionRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitTransactionRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_trading_proto_enumTypes[0].Descriptor()
}

func (SubmitTransactionRequest_Type) Type() protoreflect.EnumType {
	return &file_api_trading_proto_enumTypes[0]
}

func (x SubmitTransactionRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitTransactionRequest_Type.Descriptor instead.
func (SubmitTransactionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{2, 0}
}

// Blockchain transaction type
type SubmitTransactionV2Request_Type int32

const (
	SubmitTransactionV2Request_TYPE_UNSPECIFIED SubmitTransactionV2Request_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitTransactionV2Request_TYPE_ASYNC SubmitTransactionV2Request_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitTransactionV2Request_TYPE_SYNC SubmitTransactionV2Request_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitTransactionV2Request_TYPE_COMMIT SubmitTransactionV2Request_Type = 3
)

// Enum value maps for SubmitTransactionV2Request_Type.
var (
	SubmitTransactionV2Request_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ASYNC",
		2: "TYPE_SYNC",
		3: "TYPE_COMMIT",
	}
	SubmitTransactionV2Request_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ASYNC":       1,
		"TYPE_SYNC":        2,
		"TYPE_COMMIT":      3,
	}
)

func (x SubmitTransactionV2Request_Type) Enum() *SubmitTransactionV2Request_Type {
	p := new(SubmitTransactionV2Request_Type)
	*p = x
	return p
}

func (x SubmitTransactionV2Request_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitTransactionV2Request_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_trading_proto_enumTypes[1].Descriptor()
}

func (SubmitTransactionV2Request_Type) Type() protoreflect.EnumType {
	return &file_api_trading_proto_enumTypes[1]
}

func (x SubmitTransactionV2Request_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitTransactionV2Request_Type.Descriptor instead.
func (SubmitTransactionV2Request_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{4, 0}
}

// Request for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain event
	Evt *v1.ChainEvent `protobuf:"bytes,1,opt,name=evt,proto3" json:"evt,omitempty"`
	// Public key
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Signature
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PropagateChainEventRequest) Reset() {
	*x = PropagateChainEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagateChainEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagateChainEventRequest) ProtoMessage() {}

func (x *PropagateChainEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagateChainEventRequest.ProtoReflect.Descriptor instead.
func (*PropagateChainEventRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{0}
}

func (x *PropagateChainEventRequest) GetEvt() *v1.ChainEvent {
	if x != nil {
		return x.Evt
	}
	return nil
}

func (x *PropagateChainEventRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *PropagateChainEventRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Response for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the event was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PropagateChainEventResponse) Reset() {
	*x = PropagateChainEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagateChainEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagateChainEventResponse) ProtoMessage() {}

func (x *PropagateChainEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagateChainEventResponse.ProtoReflect.Descriptor instead.
func (*PropagateChainEventResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{1}
}

func (x *PropagateChainEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request for submitting a transaction on Vega
type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
	Tx *proto1.SignedBundle `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type SubmitTransactionRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.v1.SubmitTransactionRequest_Type" json:"type,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitTransactionRequest) GetTx() *proto1.SignedBundle {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SubmitTransactionRequest) GetType() SubmitTransactionRequest_Type {
	if x != nil {
		return x.Type
	}
	return SubmitTransactionRequest_TYPE_UNSPECIFIED
}

// Response for submitting a transaction on Vega
type SubmitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitTransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request for submitting a transaction v2 on Vega
type SubmitTransactionV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
	Tx *v1.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type SubmitTransactionV2Request_Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.v1.SubmitTransactionV2Request_Type" json:"type,omitempty"`
}

func (x *SubmitTransactionV2Request) Reset() {
	*x = SubmitTransactionV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionV2Request) ProtoMessage() {}

func (x *SubmitTransactionV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionV2Request.ProtoReflect.Descriptor instead.
func (*SubmitTransactionV2Request) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitTransactionV2Request) GetTx() *v1.Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SubmitTransactionV2Request) GetType() SubmitTransactionV2Request_Type {
	if x != nil {
		return x.Type
	}
	return SubmitTransactionV2Request_TYPE_UNSPECIFIED
}

// Response for submitting a transaction v2 on Vega
type SubmitTransactionV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SubmitTransactionV2Response) Reset() {
	*x = SubmitTransactionV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionV2Response) ProtoMessage() {}

func (x *SubmitTransactionV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionV2Response.ProtoReflect.Descriptor instead.
func (*SubmitTransactionV2Response) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitTransactionV2Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request for preparing a withdrawal
type PrepareWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An asset withdrawal
	Withdraw *v1.WithdrawSubmission `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
}

func (x *PrepareWithdrawRequest) Reset() {
	*x = PrepareWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareWithdrawRequest) ProtoMessage() {}

func (x *PrepareWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareWithdrawRequest.ProtoReflect.Descriptor instead.
func (*PrepareWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareWithdrawRequest) GetWithdraw() *v1.WithdrawSubmission {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

// Response for preparing a withdrawal
type PrepareWithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Blob is an encoded representation of the withdrawal ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareWithdrawResponse) Reset() {
	*x = PrepareWithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareWithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareWithdrawResponse) ProtoMessage() {}

func (x *PrepareWithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareWithdrawResponse.ProtoReflect.Descriptor instead.
func (*PrepareWithdrawResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{7}
}

func (x *PrepareWithdrawResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Response for preparing an order submission
type PrepareSubmitOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Blob is an encoded representation of the order submission ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// Submission identifier (order reference)
	SubmitId string `protobuf:"bytes,2,opt,name=submit_id,json=submitId,proto3" json:"submit_id,omitempty"`
}

func (x *PrepareSubmitOrderResponse) Reset() {
	*x = PrepareSubmitOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSubmitOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSubmitOrderResponse) ProtoMessage() {}

func (x *PrepareSubmitOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSubmitOrderResponse.ProtoReflect.Descriptor instead.
func (*PrepareSubmitOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{8}
}

func (x *PrepareSubmitOrderResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *PrepareSubmitOrderResponse) GetSubmitId() string {
	if x != nil {
		return x.SubmitId
	}
	return ""
}

// Response for preparing an order cancellation
type PrepareCancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Blob is an encoded representation of the order cancellation ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareCancelOrderResponse) Reset() {
	*x = PrepareCancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCancelOrderResponse) ProtoMessage() {}

func (x *PrepareCancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCancelOrderResponse.ProtoReflect.Descriptor instead.
func (*PrepareCancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{9}
}

func (x *PrepareCancelOrderResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Response for preparing an order amendment
type PrepareAmendOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Blob is an encoded representation of the order amendment ready to sign using the Vega Wallet and then submit as a transaction.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareAmendOrderResponse) Reset() {
	*x = PrepareAmendOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareAmendOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAmendOrderResponse) ProtoMessage() {}

func (x *PrepareAmendOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareAmendOrderResponse.ProtoReflect.Descriptor instead.
func (*PrepareAmendOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{10}
}

func (x *PrepareAmendOrderResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Request to submit a new order
type PrepareSubmitOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order submission
	Submission *v1.OrderSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *PrepareSubmitOrderRequest) Reset() {
	*x = PrepareSubmitOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSubmitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSubmitOrderRequest) ProtoMessage() {}

func (x *PrepareSubmitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSubmitOrderRequest.ProtoReflect.Descriptor instead.
func (*PrepareSubmitOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{11}
}

func (x *PrepareSubmitOrderRequest) GetSubmission() *v1.OrderSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// Request to cancel an existing order
type PrepareCancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order cancellation
	Cancellation *v1.OrderCancellation `protobuf:"bytes,1,opt,name=cancellation,proto3" json:"cancellation,omitempty"`
}

func (x *PrepareCancelOrderRequest) Reset() {
	*x = PrepareCancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCancelOrderRequest) ProtoMessage() {}

func (x *PrepareCancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCancelOrderRequest.ProtoReflect.Descriptor instead.
func (*PrepareCancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{12}
}

func (x *PrepareCancelOrderRequest) GetCancellation() *v1.OrderCancellation {
	if x != nil {
		return x.Cancellation
	}
	return nil
}

// Request to amend an existing order
type PrepareAmendOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order amendment
	Amendment *v1.OrderAmendment `protobuf:"bytes,1,opt,name=amendment,proto3" json:"amendment,omitempty"`
}

func (x *PrepareAmendOrderRequest) Reset() {
	*x = PrepareAmendOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareAmendOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAmendOrderRequest) ProtoMessage() {}

func (x *PrepareAmendOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareAmendOrderRequest.ProtoReflect.Descriptor instead.
func (*PrepareAmendOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{13}
}

func (x *PrepareAmendOrderRequest) GetAmendment() *v1.OrderAmendment {
	if x != nil {
		return x.Amendment
	}
	return nil
}

// Request for a list of all assets enabled on Vega
type AssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetsRequest) Reset() {
	*x = AssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsRequest) ProtoMessage() {}

func (x *AssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsRequest.ProtoReflect.Descriptor instead.
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{14}
}

// Response for a list of all assets enabled on Vega
type AssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more assets
	Assets []*proto1.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *AssetsResponse) Reset() {
	*x = AssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsResponse) ProtoMessage() {}

func (x *AssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsResponse.ProtoReflect.Descriptor instead.
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{15}
}

func (x *AssetsResponse) GetAssets() []*proto1.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

// Request for an asset given an asset identifier
type AssetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier, required field
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AssetByIDRequest) Reset() {
	*x = AssetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetByIDRequest) ProtoMessage() {}

func (x *AssetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetByIDRequest.ProtoReflect.Descriptor instead.
func (*AssetByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{16}
}

func (x *AssetByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for an asset given an asset identifier
type AssetByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An asset record, if found
	Asset *proto1.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *AssetByIDResponse) Reset() {
	*x = AssetByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetByIDResponse) ProtoMessage() {}

func (x *AssetByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetByIDResponse.ProtoReflect.Descriptor instead.
func (*AssetByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{17}
}

func (x *AssetByIDResponse) GetAsset() *proto1.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// Request to specify the identifier of the resource we want to retrieve aggregated signatures for
type GetNodeSignaturesAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource identifier, required field
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNodeSignaturesAggregateRequest) Reset() {
	*x = GetNodeSignaturesAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSignaturesAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSignaturesAggregateRequest) ProtoMessage() {}

func (x *GetNodeSignaturesAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSignaturesAggregateRequest.ProtoReflect.Descriptor instead.
func (*GetNodeSignaturesAggregateRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{18}
}

func (x *GetNodeSignaturesAggregateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to specify the identifier of the resource we want to retrieve aggregated signatures for
type GetNodeSignaturesAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more signatures
	Signatures []*v1.NodeSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *GetNodeSignaturesAggregateResponse) Reset() {
	*x = GetNodeSignaturesAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSignaturesAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSignaturesAggregateResponse) ProtoMessage() {}

func (x *GetNodeSignaturesAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSignaturesAggregateResponse.ProtoReflect.Descriptor instead.
func (*GetNodeSignaturesAggregateResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{19}
}

func (x *GetNodeSignaturesAggregateResponse) GetSignatures() []*v1.NodeSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Optional proposal state
type OptionalProposalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal state value
	Value proto1.Proposal_State `protobuf:"varint,1,opt,name=value,proto3,enum=vega.Proposal_State" json:"value,omitempty"`
}

func (x *OptionalProposalState) Reset() {
	*x = OptionalProposalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalProposalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalProposalState) ProtoMessage() {}

func (x *OptionalProposalState) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalProposalState.ProtoReflect.Descriptor instead.
func (*OptionalProposalState) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{20}
}

func (x *OptionalProposalState) GetValue() proto1.Proposal_State {
	if x != nil {
		return x.Value
	}
	return proto1.Proposal_STATE_UNSPECIFIED
}

// Request for a list of proposals
type GetProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetProposalsRequest) Reset() {
	*x = GetProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsRequest) ProtoMessage() {}

func (x *GetProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetProposalsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{21}
}

func (x *GetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of proposals
type GetProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*proto1.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalsResponse) Reset() {
	*x = GetProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsResponse) ProtoMessage() {}

func (x *GetProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetProposalsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{22}
}

func (x *GetProposalsResponse) GetData() []*proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of proposals for a party
type GetProposalsByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,2,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetProposalsByPartyRequest) Reset() {
	*x = GetProposalsByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsByPartyRequest) ProtoMessage() {}

func (x *GetProposalsByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsByPartyRequest.ProtoReflect.Descriptor instead.
func (*GetProposalsByPartyRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{23}
}

func (x *GetProposalsByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *GetProposalsByPartyRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of proposals for a party
type GetProposalsByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*proto1.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalsByPartyResponse) Reset() {
	*x = GetProposalsByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsByPartyResponse) ProtoMessage() {}

func (x *GetProposalsByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsByPartyResponse.ProtoReflect.Descriptor instead.
func (*GetProposalsByPartyResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{24}
}

func (x *GetProposalsByPartyResponse) GetData() []*proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of votes for a party
type GetVotesByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *GetVotesByPartyRequest) Reset() {
	*x = GetVotesByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVotesByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByPartyRequest) ProtoMessage() {}

func (x *GetVotesByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByPartyRequest.ProtoReflect.Descriptor instead.
func (*GetVotesByPartyRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{25}
}

func (x *GetVotesByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Response for a list of votes for a party
type GetVotesByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more votes
	Votes []*proto1.Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *GetVotesByPartyResponse) Reset() {
	*x = GetVotesByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVotesByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByPartyResponse) ProtoMessage() {}

func (x *GetVotesByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByPartyResponse.ProtoReflect.Descriptor instead.
func (*GetVotesByPartyResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{26}
}

func (x *GetVotesByPartyResponse) GetVotes() []*proto1.Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

// Request for a list of new market proposals
type GetNewMarketProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetNewMarketProposalsRequest) Reset() {
	*x = GetNewMarketProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewMarketProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMarketProposalsRequest) ProtoMessage() {}

func (x *GetNewMarketProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMarketProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNewMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{27}
}

func (x *GetNewMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of new market proposals
type GetNewMarketProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*proto1.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNewMarketProposalsResponse) Reset() {
	*x = GetNewMarketProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewMarketProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMarketProposalsResponse) ProtoMessage() {}

func (x *GetNewMarketProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMarketProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNewMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{28}
}

func (x *GetNewMarketProposalsResponse) GetData() []*proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of update market proposals
type GetUpdateMarketProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,2,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetUpdateMarketProposalsRequest) Reset() {
	*x = GetUpdateMarketProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateMarketProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateMarketProposalsRequest) ProtoMessage() {}

func (x *GetUpdateMarketProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateMarketProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetUpdateMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{29}
}

func (x *GetUpdateMarketProposalsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *GetUpdateMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of update market proposals
type GetUpdateMarketProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*proto1.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUpdateMarketProposalsResponse) Reset() {
	*x = GetUpdateMarketProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateMarketProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateMarketProposalsResponse) ProtoMessage() {}

func (x *GetUpdateMarketProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateMarketProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetUpdateMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{30}
}

func (x *GetUpdateMarketProposalsResponse) GetData() []*proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of network parameter proposals
type GetNetworkParametersProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetNetworkParametersProposalsRequest) Reset() {
	*x = GetNetworkParametersProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkParametersProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkParametersProposalsRequest) ProtoMessage() {}

func (x *GetNetworkParametersProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkParametersProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkParametersProposalsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{31}
}

func (x *GetNetworkParametersProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of network parameter proposals
type GetNetworkParametersProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*proto1.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNetworkParametersProposalsResponse) Reset() {
	*x = GetNetworkParametersProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkParametersProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkParametersProposalsResponse) ProtoMessage() {}

func (x *GetNetworkParametersProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkParametersProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkParametersProposalsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{32}
}

func (x *GetNetworkParametersProposalsResponse) GetData() []*proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of new asset proposals
type GetNewAssetProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetNewAssetProposalsRequest) Reset() {
	*x = GetNewAssetProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAssetProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAssetProposalsRequest) ProtoMessage() {}

func (x *GetNewAssetProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAssetProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNewAssetProposalsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{33}
}

func (x *GetNewAssetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of new asset proposals
type GetNewAssetProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*proto1.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNewAssetProposalsResponse) Reset() {
	*x = GetNewAssetProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAssetProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAssetProposalsResponse) ProtoMessage() {}

func (x *GetNewAssetProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAssetProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNewAssetProposalsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{34}
}

func (x *GetNewAssetProposalsResponse) GetData() []*proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a governance proposal given a proposal identifier
type GetProposalByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal identifier, required field
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *GetProposalByIDRequest) Reset() {
	*x = GetProposalByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByIDRequest) ProtoMessage() {}

func (x *GetProposalByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByIDRequest.ProtoReflect.Descriptor instead.
func (*GetProposalByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{35}
}

func (x *GetProposalByIDRequest) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

// Response for a governance proposal given a proposal identifier
type GetProposalByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Governance data, if found
	Data *proto1.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalByIDResponse) Reset() {
	*x = GetProposalByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByIDResponse) ProtoMessage() {}

func (x *GetProposalByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByIDResponse.ProtoReflect.Descriptor instead.
func (*GetProposalByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{36}
}

func (x *GetProposalByIDResponse) GetData() *proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a governance proposal given a proposal reference
type GetProposalByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal reference. Required field
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *GetProposalByReferenceRequest) Reset() {
	*x = GetProposalByReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByReferenceRequest) ProtoMessage() {}

func (x *GetProposalByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetProposalByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{37}
}

func (x *GetProposalByReferenceRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Response for a governance proposal given a proposal reference
type GetProposalByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Governance data, if found
	Data *proto1.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalByReferenceResponse) Reset() {
	*x = GetProposalByReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByReferenceResponse) ProtoMessage() {}

func (x *GetProposalByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetProposalByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{38}
}

func (x *GetProposalByReferenceResponse) GetData() *proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to obsever all event related to governance
type ObserveGovernanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObserveGovernanceRequest) Reset() {
	*x = ObserveGovernanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveGovernanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveGovernanceRequest) ProtoMessage() {}

func (x *ObserveGovernanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveGovernanceRequest.ProtoReflect.Descriptor instead.
func (*ObserveGovernanceRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{39}
}

// All events related to governance
type ObserveGovernanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *proto1.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ObserveGovernanceResponse) Reset() {
	*x = ObserveGovernanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveGovernanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveGovernanceResponse) ProtoMessage() {}

func (x *ObserveGovernanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveGovernanceResponse.ProtoReflect.Descriptor instead.
func (*ObserveGovernanceResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{40}
}

func (x *ObserveGovernanceResponse) GetData() *proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to subscribe to a stream of governance proposals for a party
type ObservePartyProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *ObservePartyProposalsRequest) Reset() {
	*x = ObservePartyProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyProposalsRequest) ProtoMessage() {}

func (x *ObservePartyProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyProposalsRequest.ProtoReflect.Descriptor instead.
func (*ObservePartyProposalsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{41}
}

func (x *ObservePartyProposalsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

type ObservePartyProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *proto1.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ObservePartyProposalsResponse) Reset() {
	*x = ObservePartyProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyProposalsResponse) ProtoMessage() {}

func (x *ObservePartyProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyProposalsResponse.ProtoReflect.Descriptor instead.
func (*ObservePartyProposalsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{42}
}

func (x *ObservePartyProposalsResponse) GetData() *proto1.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to subscribe to a stream of governance votes for a proposal
type ObserveProposalVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal identifier, required field
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *ObserveProposalVotesRequest) Reset() {
	*x = ObserveProposalVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveProposalVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveProposalVotesRequest) ProtoMessage() {}

func (x *ObserveProposalVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveProposalVotesRequest.ProtoReflect.Descriptor instead.
func (*ObserveProposalVotesRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{43}
}

func (x *ObserveProposalVotesRequest) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

type ObserveProposalVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *proto1.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *ObserveProposalVotesResponse) Reset() {
	*x = ObserveProposalVotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveProposalVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveProposalVotesResponse) ProtoMessage() {}

func (x *ObserveProposalVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveProposalVotesResponse.ProtoReflect.Descriptor instead.
func (*ObserveProposalVotesResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{44}
}

func (x *ObserveProposalVotesResponse) GetVote() *proto1.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// Request to subscribe to a stream of governance votes for a party
type ObservePartyVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *ObservePartyVotesRequest) Reset() {
	*x = ObservePartyVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyVotesRequest) ProtoMessage() {}

func (x *ObservePartyVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyVotesRequest.ProtoReflect.Descriptor instead.
func (*ObservePartyVotesRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{45}
}

func (x *ObservePartyVotesRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

type ObservePartyVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *proto1.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *ObservePartyVotesResponse) Reset() {
	*x = ObservePartyVotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyVotesResponse) ProtoMessage() {}

func (x *ObservePartyVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyVotesResponse.ProtoReflect.Descriptor instead.
func (*ObservePartyVotesResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{46}
}

func (x *ObservePartyVotesResponse) GetVote() *proto1.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// Request to subscribe to a stream of MarginLevels data matching the given party identifier
// Optionally, the list can be additionally filtered by market
type MarginLevelsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarginLevelsSubscribeRequest) Reset() {
	*x = MarginLevelsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsSubscribeRequest) ProtoMessage() {}

func (x *MarginLevelsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarginLevelsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{47}
}

func (x *MarginLevelsSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MarginLevelsSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarginLevelsSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarginLevels *proto1.MarginLevels `protobuf:"bytes,1,opt,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
}

func (x *MarginLevelsSubscribeResponse) Reset() {
	*x = MarginLevelsSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsSubscribeResponse) ProtoMessage() {}

func (x *MarginLevelsSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarginLevelsSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{48}
}

func (x *MarginLevelsSubscribeResponse) GetMarginLevels() *proto1.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request for margin levels for a party
type MarginLevelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarginLevelsRequest) Reset() {
	*x = MarginLevelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsRequest) ProtoMessage() {}

func (x *MarginLevelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsRequest.ProtoReflect.Descriptor instead.
func (*MarginLevelsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{49}
}

func (x *MarginLevelsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MarginLevelsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for margin levels for a party
type MarginLevelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more margin levels
	MarginLevels []*proto1.MarginLevels `protobuf:"bytes,1,rep,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
}

func (x *MarginLevelsResponse) Reset() {
	*x = MarginLevelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsResponse) ProtoMessage() {}

func (x *MarginLevelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsResponse.ProtoReflect.Descriptor instead.
func (*MarginLevelsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{50}
}

func (x *MarginLevelsResponse) GetMarginLevels() []*proto1.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of MarketsData
// Optionally, the list can be additionally filtered by market
type MarketsDataSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketsDataSubscribeRequest) Reset() {
	*x = MarketsDataSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataSubscribeRequest) ProtoMessage() {}

func (x *MarketsDataSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketsDataSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{51}
}

func (x *MarketsDataSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarketsDataSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketData *proto1.MarketData `protobuf:"bytes,1,opt,name=market_data,json=marketData,proto3" json:"market_data,omitempty"`
}

func (x *MarketsDataSubscribeResponse) Reset() {
	*x = MarketsDataSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataSubscribeResponse) ProtoMessage() {}

func (x *MarketsDataSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarketsDataSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{52}
}

func (x *MarketsDataSubscribeResponse) GetMarketData() *proto1.MarketData {
	if x != nil {
		return x.MarketData
	}
	return nil
}

// Request for market data for a market
type MarketDataByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketDataByIDRequest) Reset() {
	*x = MarketDataByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataByIDRequest) ProtoMessage() {}

func (x *MarketDataByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataByIDRequest.ProtoReflect.Descriptor instead.
func (*MarketDataByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{53}
}

func (x *MarketDataByIDRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for market data for a market
type MarketDataByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market data, if found
	MarketData *proto1.MarketData `protobuf:"bytes,1,opt,name=market_data,json=marketData,proto3" json:"market_data,omitempty"`
}

func (x *MarketDataByIDResponse) Reset() {
	*x = MarketDataByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataByIDResponse) ProtoMessage() {}

func (x *MarketDataByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataByIDResponse.ProtoReflect.Descriptor instead.
func (*MarketDataByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{54}
}

func (x *MarketDataByIDResponse) GetMarketData() *proto1.MarketData {
	if x != nil {
		return x.MarketData
	}
	return nil
}

// Request for market data
type MarketsDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketsDataRequest) Reset() {
	*x = MarketsDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataRequest) ProtoMessage() {}

func (x *MarketsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataRequest.ProtoReflect.Descriptor instead.
func (*MarketsDataRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{55}
}

// Response for market data
type MarketsDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more market data
	MarketsData []*proto1.MarketData `protobuf:"bytes,1,rep,name=markets_data,json=marketsData,proto3" json:"markets_data,omitempty"`
}

func (x *MarketsDataResponse) Reset() {
	*x = MarketsDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataResponse) ProtoMessage() {}

func (x *MarketsDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataResponse.ProtoReflect.Descriptor instead.
func (*MarketsDataResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{56}
}

func (x *MarketsDataResponse) GetMarketsData() []*proto1.MarketData {
	if x != nil {
		return x.MarketsData
	}
	return nil
}

// Request for the latest trade that occurred on Vega for a given market
type LastTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LastTradeRequest) Reset() {
	*x = LastTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastTradeRequest) ProtoMessage() {}

func (x *LastTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastTradeRequest.ProtoReflect.Descriptor instead.
func (*LastTradeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{57}
}

func (x *LastTradeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for the latest trade that occurred on Vega for a given market
type LastTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A trade, if found
	Trade *proto1.Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *LastTradeResponse) Reset() {
	*x = LastTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastTradeResponse) ProtoMessage() {}

func (x *LastTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastTradeResponse.ProtoReflect.Descriptor instead.
func (*LastTradeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{58}
}

func (x *LastTradeResponse) GetTrade() *proto1.Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

// Request for a market given a market identifier
type MarketByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketByIDRequest) Reset() {
	*x = MarketByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByIDRequest) ProtoMessage() {}

func (x *MarketByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByIDRequest.ProtoReflect.Descriptor instead.
func (*MarketByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{59}
}

func (x *MarketByIDRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for a market given a market identifier
type MarketByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A market, if found
	Market *proto1.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *MarketByIDResponse) Reset() {
	*x = MarketByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByIDResponse) ProtoMessage() {}

func (x *MarketByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByIDResponse.ProtoReflect.Descriptor instead.
func (*MarketByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{60}
}

func (x *MarketByIDResponse) GetMarket() *proto1.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

// Request for a party given a party identifier
type PartyByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *PartyByIDRequest) Reset() {
	*x = PartyByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyByIDRequest) ProtoMessage() {}

func (x *PartyByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyByIDRequest.ProtoReflect.Descriptor instead.
func (*PartyByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{61}
}

func (x *PartyByIDRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Response for a party given a party identifier
type PartyByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A party, if found
	Party *proto1.Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *PartyByIDResponse) Reset() {
	*x = PartyByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyByIDResponse) ProtoMessage() {}

func (x *PartyByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyByIDResponse.ProtoReflect.Descriptor instead.
func (*PartyByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{62}
}

func (x *PartyByIDResponse) GetParty() *proto1.Party {
	if x != nil {
		return x.Party
	}
	return nil
}

// Request for a list of all parties
type PartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartiesRequest) Reset() {
	*x = PartiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiesRequest) ProtoMessage() {}

func (x *PartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiesRequest.ProtoReflect.Descriptor instead.
func (*PartiesRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{63}
}

// Response to a request for a list of parties
type PartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more parties
	Parties []*proto1.Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *PartiesResponse) Reset() {
	*x = PartiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiesResponse) ProtoMessage() {}

func (x *PartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiesResponse.ProtoReflect.Descriptor instead.
func (*PartiesResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{64}
}

func (x *PartiesResponse) GetParties() []*proto1.Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

// Request for a list of trades relating to the given party
// Optionally, the list can be additionally filtered for trades by market
type TradesByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TradesByPartyRequest) Reset() {
	*x = TradesByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByPartyRequest) ProtoMessage() {}

func (x *TradesByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByPartyRequest.ProtoReflect.Descriptor instead.
func (*TradesByPartyRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{65}
}

func (x *TradesByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *TradesByPartyRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *TradesByPartyRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of trades relating to a party
type TradesByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*proto1.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByPartyResponse) Reset() {
	*x = TradesByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByPartyResponse) ProtoMessage() {}

func (x *TradesByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByPartyResponse.ProtoReflect.Descriptor instead.
func (*TradesByPartyResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{66}
}

func (x *TradesByPartyResponse) GetTrades() []*proto1.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request for a list of trades related to an order
type TradesByOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *TradesByOrderRequest) Reset() {
	*x = TradesByOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByOrderRequest) ProtoMessage() {}

func (x *TradesByOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByOrderRequest.ProtoReflect.Descriptor instead.
func (*TradesByOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{67}
}

func (x *TradesByOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// Response for a list of trades related to an order
type TradesByOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*proto1.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByOrderResponse) Reset() {
	*x = TradesByOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByOrderResponse) ProtoMessage() {}

func (x *TradesByOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByOrderResponse.ProtoReflect.Descriptor instead.
func (*TradesByOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{68}
}

func (x *TradesByOrderResponse) GetTrades() []*proto1.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request to subscribe to a stream of (Accounts)[#vega.Account]
type AccountsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// Account type to subscribe to, required field
	Type proto1.AccountType `protobuf:"varint,4,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
}

func (x *AccountsSubscribeRequest) Reset() {
	*x = AccountsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsSubscribeRequest) ProtoMessage() {}

func (x *AccountsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*AccountsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{69}
}

func (x *AccountsSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetType() proto1.AccountType {
	if x != nil {
		return x.Type
	}
	return proto1.AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

type AccountsSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *proto1.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountsSubscribeResponse) Reset() {
	*x = AccountsSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsSubscribeResponse) ProtoMessage() {}

func (x *AccountsSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsSubscribeResponse.ProtoReflect.Descriptor instead.
func (*AccountsSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{70}
}

func (x *AccountsSubscribeResponse) GetAccount() *proto1.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

// Request to subscribe to a stream of (Orders)[#vega.Order]
type OrdersSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *OrdersSubscribeRequest) Reset() {
	*x = OrdersSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersSubscribeRequest) ProtoMessage() {}

func (x *OrdersSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersSubscribeRequest.ProtoReflect.Descriptor instead.
func (*OrdersSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{71}
}

func (x *OrdersSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrdersSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Request to subscribe to a stream of (Trades)[#vega.Trade]
type TradesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *TradesSubscribeRequest) Reset() {
	*x = TradesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesSubscribeRequest) ProtoMessage() {}

func (x *TradesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*TradesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{72}
}

func (x *TradesSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *TradesSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Request to subscribe to a stream of (Candles)[#vega.Candle]
type CandlesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Time interval for the candles, required field.
	Interval proto1.Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *CandlesSubscribeRequest) Reset() {
	*x = CandlesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesSubscribeRequest) ProtoMessage() {}

func (x *CandlesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*CandlesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{73}
}

func (x *CandlesSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CandlesSubscribeRequest) GetInterval() proto1.Interval {
	if x != nil {
		return x.Interval
	}
	return proto1.Interval_INTERVAL_UNSPECIFIED
}

type CandlesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candle *proto1.Candle `protobuf:"bytes,1,opt,name=candle,proto3" json:"candle,omitempty"`
}

func (x *CandlesSubscribeResponse) Reset() {
	*x = CandlesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesSubscribeResponse) ProtoMessage() {}

func (x *CandlesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*CandlesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{74}
}

func (x *CandlesSubscribeResponse) GetCandle() *proto1.Candle {
	if x != nil {
		return x.Candle
	}
	return nil
}

// Request to subscribe to a stream of (MarketDepth)[#vega.MarketDepth] data
type MarketDepthSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketDepthSubscribeRequest) Reset() {
	*x = MarketDepthSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthSubscribeRequest) ProtoMessage() {}

func (x *MarketDepthSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{75}
}

func (x *MarketDepthSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarketDepthSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketDepth *proto1.MarketDepth `protobuf:"bytes,1,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
}

func (x *MarketDepthSubscribeResponse) Reset() {
	*x = MarketDepthSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthSubscribeResponse) ProtoMessage() {}

func (x *MarketDepthSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarketDepthSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{76}
}

func (x *MarketDepthSubscribeResponse) GetMarketDepth() *proto1.MarketDepth {
	if x != nil {
		return x.MarketDepth
	}
	return nil
}

// Request to subscribe to a stream of (MarketDepth Update)[#vega.MarketDepthUpdate] data
type MarketDepthUpdatesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketDepthUpdatesSubscribeRequest) Reset() {
	*x = MarketDepthUpdatesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdatesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdatesSubscribeRequest) ProtoMessage() {}

func (x *MarketDepthUpdatesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdatesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdatesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{77}
}

func (x *MarketDepthUpdatesSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarketDepthUpdatesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update *proto1.MarketDepthUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *MarketDepthUpdatesSubscribeResponse) Reset() {
	*x = MarketDepthUpdatesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdatesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdatesSubscribeResponse) ProtoMessage() {}

func (x *MarketDepthUpdatesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdatesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdatesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{78}
}

func (x *MarketDepthUpdatesSubscribeResponse) GetUpdate() *proto1.MarketDepthUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

// Request to subscribe to a stream of (Positions)[#vega.Position]
type PositionsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, optional field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier, optional field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *PositionsSubscribeRequest) Reset() {
	*x = PositionsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSubscribeRequest) ProtoMessage() {}

func (x *PositionsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*PositionsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{79}
}

func (x *PositionsSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PositionsSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type PositionsSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *proto1.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *PositionsSubscribeResponse) Reset() {
	*x = PositionsSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSubscribeResponse) ProtoMessage() {}

func (x *PositionsSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSubscribeResponse.ProtoReflect.Descriptor instead.
func (*PositionsSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{80}
}

func (x *PositionsSubscribeResponse) GetPosition() *proto1.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// Request for a list of orders for a market
type OrdersByMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Optional pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrdersByMarketRequest) Reset() {
	*x = OrdersByMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByMarketRequest) ProtoMessage() {}

func (x *OrdersByMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByMarketRequest.ProtoReflect.Descriptor instead.
func (*OrdersByMarketRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{81}
}

func (x *OrdersByMarketRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrdersByMarketRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of orders for a market
type OrdersByMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders
	Orders []*proto1.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersByMarketResponse) Reset() {
	*x = OrdersByMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByMarketResponse) ProtoMessage() {}

func (x *OrdersByMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByMarketResponse.ProtoReflect.Descriptor instead.
func (*OrdersByMarketResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{82}
}

func (x *OrdersByMarketResponse) GetOrders() []*proto1.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request for a list of orders for a party
type OrdersByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrdersByPartyRequest) Reset() {
	*x = OrdersByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByPartyRequest) ProtoMessage() {}

func (x *OrdersByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByPartyRequest.ProtoReflect.Descriptor instead.
func (*OrdersByPartyRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{83}
}

func (x *OrdersByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *OrdersByPartyRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of orders for a party
type OrdersByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders
	Orders []*proto1.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersByPartyResponse) Reset() {
	*x = OrdersByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByPartyResponse) ProtoMessage() {}

func (x *OrdersByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByPartyResponse.ProtoReflect.Descriptor instead.
func (*OrdersByPartyResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{84}
}

func (x *OrdersByPartyResponse) GetOrders() []*proto1.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request for an order on a market given an order identifier
type OrderByMarketAndIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Order identifier, required field
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *OrderByMarketAndIDRequest) Reset() {
	*x = OrderByMarketAndIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByMarketAndIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByMarketAndIDRequest) ProtoMessage() {}

func (x *OrderByMarketAndIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByMarketAndIDRequest.ProtoReflect.Descriptor instead.
func (*OrderByMarketAndIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{85}
}

func (x *OrderByMarketAndIDRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrderByMarketAndIDRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// Response for an order on a market given an order identifier
type OrderByMarketAndIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order, if found
	Order *proto1.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByMarketAndIDResponse) Reset() {
	*x = OrderByMarketAndIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByMarketAndIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByMarketAndIDResponse) ProtoMessage() {}

func (x *OrderByMarketAndIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByMarketAndIDResponse.ProtoReflect.Descriptor instead.
func (*OrderByMarketAndIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{86}
}

func (x *OrderByMarketAndIDResponse) GetOrder() *proto1.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Request for an order given an order reference
type OrderByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique reference, required field
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *OrderByReferenceRequest) Reset() {
	*x = OrderByReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByReferenceRequest) ProtoMessage() {}

func (x *OrderByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByReferenceRequest.ProtoReflect.Descriptor instead.
func (*OrderByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{87}
}

func (x *OrderByReferenceRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Response for an order given an order reference
type OrderByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order, if found
	Order *proto1.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByReferenceResponse) Reset() {
	*x = OrderByReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByReferenceResponse) ProtoMessage() {}

func (x *OrderByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByReferenceResponse.ProtoReflect.Descriptor instead.
func (*OrderByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{88}
}

func (x *OrderByReferenceResponse) GetOrder() *proto1.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Request for a list of markets on Vega
type MarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketsRequest) Reset() {
	*x = MarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsRequest) ProtoMessage() {}

func (x *MarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsRequest.ProtoReflect.Descriptor instead.
func (*MarketsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{89}
}

// Response for a list of markets on Vega
type MarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more markets
	Markets []*proto1.Market `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *MarketsResponse) Reset() {
	*x = MarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsResponse) ProtoMessage() {}

func (x *MarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsResponse.ProtoReflect.Descriptor instead.
func (*MarketsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{90}
}

func (x *MarketsResponse) GetMarkets() []*proto1.Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

// Request for a list of candles for a market at an interval
type CandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Timestamp to retrieve candles since, in nanoseconds since the epoch,
	// required field - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	SinceTimestamp int64 `protobuf:"varint,2,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"`
	// Time interval for the candles, required field
	Interval proto1.Interval `protobuf:"varint,3,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *CandlesRequest) Reset() {
	*x = CandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesRequest) ProtoMessage() {}

func (x *CandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesRequest.ProtoReflect.Descriptor instead.
func (*CandlesRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{91}
}

func (x *CandlesRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CandlesRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

func (x *CandlesRequest) GetInterval() proto1.Interval {
	if x != nil {
		return x.Interval
	}
	return proto1.Interval_INTERVAL_UNSPECIFIED
}

// Response for a list of candles for a market at an interval
type CandlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more candles
	Candles []*proto1.Candle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
}

func (x *CandlesResponse) Reset() {
	*x = CandlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesResponse) ProtoMessage() {}

func (x *CandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesResponse.ProtoReflect.Descriptor instead.
func (*CandlesResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{92}
}

func (x *CandlesResponse) GetCandles() []*proto1.Candle {
	if x != nil {
		return x.Candles
	}
	return nil
}

// Request for the market depth/order book price levels on a market
// Optionally, a maximum depth can be set to limit the number of levels returned
type MarketDepthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Max depth limits the number of levels returned. Default is 0, which returns all levels
	MaxDepth uint64 `protobuf:"varint,2,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
}

func (x *MarketDepthRequest) Reset() {
	*x = MarketDepthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthRequest) ProtoMessage() {}

func (x *MarketDepthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{93}
}

func (x *MarketDepthRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketDepthRequest) GetMaxDepth() uint64 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

// Response for the market depth/order book price levels on a market
type MarketDepthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Zero or more price levels for the buy side of the market depth data
	Buy []*proto1.PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Zero or more price levels for the sell side of the market depth data
	Sell []*proto1.PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Last trade recorded on Vega at the time of retrieving the `MarketDepthResponse`
	LastTrade *proto1.Trade `protobuf:"bytes,4,opt,name=last_trade,json=lastTrade,proto3" json:"last_trade,omitempty"`
	// Sequence number incremented after each update
	SequenceNumber uint64 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *MarketDepthResponse) Reset() {
	*x = MarketDepthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthResponse) ProtoMessage() {}

func (x *MarketDepthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthResponse.ProtoReflect.Descriptor instead.
func (*MarketDepthResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{94}
}

func (x *MarketDepthResponse) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketDepthResponse) GetBuy() []*proto1.PriceLevel {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MarketDepthResponse) GetSell() []*proto1.PriceLevel {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MarketDepthResponse) GetLastTrade() *proto1.Trade {
	if x != nil {
		return x.LastTrade
	}
	return nil
}

func (x *MarketDepthResponse) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Request for a list of trades on a market
type TradesByMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TradesByMarketRequest) Reset() {
	*x = TradesByMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByMarketRequest) ProtoMessage() {}

func (x *TradesByMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByMarketRequest.ProtoReflect.Descriptor instead.
func (*TradesByMarketRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{95}
}

func (x *TradesByMarketRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *TradesByMarketRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of trades on a market
type TradesByMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*proto1.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByMarketResponse) Reset() {
	*x = TradesByMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByMarketResponse) ProtoMessage() {}

func (x *TradesByMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByMarketResponse.ProtoReflect.Descriptor instead.
func (*TradesByMarketResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{96}
}

func (x *TradesByMarketResponse) GetTrades() []*proto1.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request for a list of positions for a party
// Optionally, if a market identifier is set, the results will be filtered for that market only
type PositionsByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *PositionsByPartyRequest) Reset() {
	*x = PositionsByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsByPartyRequest) ProtoMessage() {}

func (x *PositionsByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsByPartyRequest.ProtoReflect.Descriptor instead.
func (*PositionsByPartyRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{97}
}

func (x *PositionsByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PositionsByPartyRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for a list of positions for a party
type PositionsByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more positions
	Positions []*proto1.Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *PositionsByPartyResponse) Reset() {
	*x = PositionsByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsByPartyResponse) ProtoMessage() {}

func (x *PositionsByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsByPartyResponse.ProtoReflect.Descriptor instead.
func (*PositionsByPartyResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{98}
}

func (x *PositionsByPartyResponse) GetPositions() []*proto1.Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// Request for the current time of the vega network
type GetVegaTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVegaTimeRequest) Reset() {
	*x = GetVegaTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVegaTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVegaTimeRequest) ProtoMessage() {}

func (x *GetVegaTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVegaTimeRequest.ProtoReflect.Descriptor instead.
func (*GetVegaTimeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{99}
}

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
type GetVegaTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp representation of current VegaTime as represented in
	// Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetVegaTimeResponse) Reset() {
	*x = GetVegaTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVegaTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVegaTimeResponse) ProtoMessage() {}

func (x *GetVegaTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVegaTimeResponse.ProtoReflect.Descriptor instead.
func (*GetVegaTimeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{100}
}

func (x *GetVegaTimeResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Pagination controls
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skip the number of records specified, default is 0
	Skip uint64 `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit the number of returned records to the value specified, default is 50
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Descending reverses the order of the records returned,
	// default is true, if false the results will be returned in ascending order
	Descending bool `protobuf:"varint,3,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{101}
}

func (x *Pagination) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *Pagination) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

// A stream of orders
type OrdersSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders
	Orders []*proto1.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersSubscribeResponse) Reset() {
	*x = OrdersSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersSubscribeResponse) ProtoMessage() {}

func (x *OrdersSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersSubscribeResponse.ProtoReflect.Descriptor instead.
func (*OrdersSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{102}
}

func (x *OrdersSubscribeResponse) GetOrders() []*proto1.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// A stream of trades
type TradesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*proto1.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesSubscribeResponse) Reset() {
	*x = TradesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesSubscribeResponse) ProtoMessage() {}

func (x *TradesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*TradesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{103}
}

func (x *TradesSubscribeResponse) GetTrades() []*proto1.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type TransferResponsesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferResponsesSubscribeRequest) Reset() {
	*x = TransferResponsesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponsesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponsesSubscribeRequest) ProtoMessage() {}

func (x *TransferResponsesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponsesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*TransferResponsesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{104}
}

type TransferResponsesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *proto1.TransferResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *TransferResponsesSubscribeResponse) Reset() {
	*x = TransferResponsesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponsesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponsesSubscribeResponse) ProtoMessage() {}

func (x *TransferResponsesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponsesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*TransferResponsesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{105}
}

func (x *TransferResponsesSubscribeResponse) GetResponse() *proto1.TransferResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Request for a list of accounts for a party
type PartyAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Account type, required field
	Type proto1.AccountType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *PartyAccountsRequest) Reset() {
	*x = PartyAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAccountsRequest) ProtoMessage() {}

func (x *PartyAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAccountsRequest.ProtoReflect.Descriptor instead.
func (*PartyAccountsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{106}
}

func (x *PartyAccountsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyAccountsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *PartyAccountsRequest) GetType() proto1.AccountType {
	if x != nil {
		return x.Type
	}
	return proto1.AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *PartyAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of accounts for a party
type PartyAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more accounts
	Accounts []*proto1.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *PartyAccountsResponse) Reset() {
	*x = PartyAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAccountsResponse) ProtoMessage() {}

func (x *PartyAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAccountsResponse.ProtoReflect.Descriptor instead.
func (*PartyAccountsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{107}
}

func (x *PartyAccountsResponse) GetAccounts() []*proto1.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for a list of accounts for a market
type MarketAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *MarketAccountsRequest) Reset() {
	*x = MarketAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAccountsRequest) ProtoMessage() {}

func (x *MarketAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketAccountsRequest.ProtoReflect.Descriptor instead.
func (*MarketAccountsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{108}
}

func (x *MarketAccountsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of accounts for a market
type MarketAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more accounts
	Accounts []*proto1.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *MarketAccountsResponse) Reset() {
	*x = MarketAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAccountsResponse) ProtoMessage() {}

func (x *MarketAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketAccountsResponse.ProtoReflect.Descriptor instead.
func (*MarketAccountsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{109}
}

func (x *MarketAccountsResponse) GetAccounts() []*proto1.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for a list of infrastructure fee accounts
type FeeInfrastructureAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier, required field
	// - Set to an empty string to return all accounts
	// - Set to an asset ID to return a single infrastructure fee account for a given asset
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *FeeInfrastructureAccountsRequest) Reset() {
	*x = FeeInfrastructureAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfrastructureAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfrastructureAccountsRequest) ProtoMessage() {}

func (x *FeeInfrastructureAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfrastructureAccountsRequest.ProtoReflect.Descriptor instead.
func (*FeeInfrastructureAccountsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{110}
}

func (x *FeeInfrastructureAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of infrastructure fee accounts
type FeeInfrastructureAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more infrastructure fee accounts
	Accounts []*proto1.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *FeeInfrastructureAccountsResponse) Reset() {
	*x = FeeInfrastructureAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfrastructureAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfrastructureAccountsResponse) ProtoMessage() {}

func (x *FeeInfrastructureAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfrastructureAccountsResponse.ProtoReflect.Descriptor instead.
func (*FeeInfrastructureAccountsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{111}
}

func (x *FeeInfrastructureAccountsResponse) GetAccounts() []*proto1.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request to prepare a governance proposal
type PrepareProposalSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submission *v1.ProposalSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *PrepareProposalSubmissionRequest) Reset() {
	*x = PrepareProposalSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareProposalSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareProposalSubmissionRequest) ProtoMessage() {}

func (x *PrepareProposalSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareProposalSubmissionRequest.ProtoReflect.Descriptor instead.
func (*PrepareProposalSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{112}
}

func (x *PrepareProposalSubmissionRequest) GetSubmission() *v1.ProposalSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// Response to prepare a governance proposal
type PrepareProposalSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A blob is an encoded representation of the proposal ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// A copy of the prepared proposal
	Submission *v1.ProposalSubmission `protobuf:"bytes,2,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *PrepareProposalSubmissionResponse) Reset() {
	*x = PrepareProposalSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareProposalSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareProposalSubmissionResponse) ProtoMessage() {}

func (x *PrepareProposalSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareProposalSubmissionResponse.ProtoReflect.Descriptor instead.
func (*PrepareProposalSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{113}
}

func (x *PrepareProposalSubmissionResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *PrepareProposalSubmissionResponse) GetSubmission() *v1.ProposalSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// Request to prepare a governance vote
type PrepareVoteSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vote, required field
	Submission *v1.VoteSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *PrepareVoteSubmissionRequest) Reset() {
	*x = PrepareVoteSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareVoteSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareVoteSubmissionRequest) ProtoMessage() {}

func (x *PrepareVoteSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareVoteSubmissionRequest.ProtoReflect.Descriptor instead.
func (*PrepareVoteSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{114}
}

func (x *PrepareVoteSubmissionRequest) GetSubmission() *v1.VoteSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// Response to prepare a governance vote
type PrepareVoteSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A blob is an encoded representation of the vote ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// A copy of the prepared vote
	Submission *v1.VoteSubmission `protobuf:"bytes,2,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *PrepareVoteSubmissionResponse) Reset() {
	*x = PrepareVoteSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareVoteSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareVoteSubmissionResponse) ProtoMessage() {}

func (x *PrepareVoteSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareVoteSubmissionResponse.ProtoReflect.Descriptor instead.
func (*PrepareVoteSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{115}
}

func (x *PrepareVoteSubmissionResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *PrepareVoteSubmissionResponse) GetSubmission() *v1.VoteSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// Request to prepare liquiditity provision
type PrepareLiquidityProvisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Submission, required field
	Submission *v1.LiquidityProvisionSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *PrepareLiquidityProvisionRequest) Reset() {
	*x = PrepareLiquidityProvisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareLiquidityProvisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLiquidityProvisionRequest) ProtoMessage() {}

func (x *PrepareLiquidityProvisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLiquidityProvisionRequest.ProtoReflect.Descriptor instead.
func (*PrepareLiquidityProvisionRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{116}
}

func (x *PrepareLiquidityProvisionRequest) GetSubmission() *v1.LiquidityProvisionSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// Response to a liquidity provision request
type PrepareLiquidityProvisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A blob is an encoded representation of the liquidity provision message ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareLiquidityProvisionResponse) Reset() {
	*x = PrepareLiquidityProvisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareLiquidityProvisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLiquidityProvisionResponse) ProtoMessage() {}

func (x *PrepareLiquidityProvisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLiquidityProvisionResponse.ProtoReflect.Descriptor instead.
func (*PrepareLiquidityProvisionResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{117}
}

func (x *PrepareLiquidityProvisionResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Request for an order with the specified order identifier
// Optionally, return a specific version of the order with the `version` field
type OrderByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Version of the order:
	// - Set `version` to 0 for most recent version of the order
	// - Set `1` for original version of the order
	// - Set `2` for first amendment, `3` for second amendment, etc
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OrderByIDRequest) Reset() {
	*x = OrderByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByIDRequest) ProtoMessage() {}

func (x *OrderByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByIDRequest.ProtoReflect.Descriptor instead.
func (*OrderByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{118}
}

func (x *OrderByIDRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderByIDRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type OrderByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *proto1.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByIDResponse) Reset() {
	*x = OrderByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByIDResponse) ProtoMessage() {}

func (x *OrderByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByIDResponse.ProtoReflect.Descriptor instead.
func (*OrderByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{119}
}

func (x *OrderByIDResponse) GetOrder() *proto1.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Request for a list of all versions of an order given the specified order identifier
type OrderVersionsByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrderVersionsByIDRequest) Reset() {
	*x = OrderVersionsByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderVersionsByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderVersionsByIDRequest) ProtoMessage() {}

func (x *OrderVersionsByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderVersionsByIDRequest.ProtoReflect.Descriptor instead.
func (*OrderVersionsByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{120}
}

func (x *OrderVersionsByIDRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderVersionsByIDRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response to a request for a list of all versions of an order
type OrderVersionsByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended)
	Orders []*proto1.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrderVersionsByIDResponse) Reset() {
	*x = OrderVersionsByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderVersionsByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderVersionsByIDResponse) ProtoMessage() {}

func (x *OrderVersionsByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderVersionsByIDResponse.ProtoReflect.Descriptor instead.
func (*OrderVersionsByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{121}
}

func (x *OrderVersionsByIDResponse) GetOrders() []*proto1.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request to fetch the estimated fee if an order were to trade immediately
type EstimateFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to estimate fees for
	// the following fields in the order are required:
	// MarketID (used to specify the fee factors)
	// Price (the price at which the order could trade)
	// Size (the size at which the order could eventually trade)
	Order *proto1.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EstimateFeeRequest) Reset() {
	*x = EstimateFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeRequest) ProtoMessage() {}

func (x *EstimateFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeRequest.ProtoReflect.Descriptor instead.
func (*EstimateFeeRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{122}
}

func (x *EstimateFeeRequest) GetOrder() *proto1.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Response to a EstimateFeeRequest, containing the estimated fees for a given order
type EstimateFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of the estimated fees for this order if it were to trade now
	Fee *proto1.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *EstimateFeeResponse) Reset() {
	*x = EstimateFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeResponse) ProtoMessage() {}

func (x *EstimateFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeResponse.ProtoReflect.Descriptor instead.
func (*EstimateFeeResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{123}
}

func (x *EstimateFeeResponse) GetFee() *proto1.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

// Request to fetch the estimated MarginLevels if an order were to trade immediately
type EstimateMarginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to estimate fees for
	Order *proto1.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EstimateMarginRequest) Reset() {
	*x = EstimateMarginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMarginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMarginRequest) ProtoMessage() {}

func (x *EstimateMarginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMarginRequest.ProtoReflect.Descriptor instead.
func (*EstimateMarginRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{124}
}

func (x *EstimateMarginRequest) GetOrder() *proto1.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Response to a EstimateMarginRequest, containing the estimated marginLevels for a given order
type EstimateMarginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of the estimated margins for this order if it were to trade now
	MarginLevels *proto1.MarginLevels `protobuf:"bytes,2,opt,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
}

func (x *EstimateMarginResponse) Reset() {
	*x = EstimateMarginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMarginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMarginResponse) ProtoMessage() {}

func (x *EstimateMarginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMarginResponse.ProtoReflect.Descriptor instead.
func (*EstimateMarginResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{125}
}

func (x *EstimateMarginResponse) GetMarginLevels() *proto1.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
type ObserveEventBusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more types of event, required field
	Type []v11.BusEventType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Market identifier, optional field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier, optional field
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Batch size, optional field -
	// If not specified, any events received will be sent immediately. If the client is not ready
	// for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
	// if specified, the first batch will be sent when ready. To receive the next set of events, the client
	// must write an `ObserveEventBatch` message on the stream to flush the buffer.
	// If no message is received in 5 seconds, the stream is closed.
	// Default: 0, send any and all events when they are available.
	BatchSize int64 `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *ObserveEventBusRequest) Reset() {
	*x = ObserveEventBusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventBusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventBusRequest) ProtoMessage() {}

func (x *ObserveEventBusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventBusRequest.ProtoReflect.Descriptor instead.
func (*ObserveEventBusRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{126}
}

func (x *ObserveEventBusRequest) GetType() []v11.BusEventType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ObserveEventBusRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ObserveEventBusRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *ObserveEventBusRequest) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Response to a subscribed stream of events from the Vega event bus
type ObserveEventBusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more events
	Events []*v11.BusEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ObserveEventBusResponse) Reset() {
	*x = ObserveEventBusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventBusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventBusResponse) ProtoMessage() {}

func (x *ObserveEventBusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventBusResponse.ProtoReflect.Descriptor instead.
func (*ObserveEventBusResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{127}
}

func (x *ObserveEventBusResponse) GetEvents() []*v11.BusEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// A a request for statistics about the Vega network
type StatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatisticsRequest) Reset() {
	*x = StatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsRequest) ProtoMessage() {}

func (x *StatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsRequest.ProtoReflect.Descriptor instead.
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{128}
}

type StatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistics *proto1.Statistics `protobuf:"bytes,1,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *StatisticsResponse) Reset() {
	*x = StatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsResponse) ProtoMessage() {}

func (x *StatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsResponse.ProtoReflect.Descriptor instead.
func (*StatisticsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{129}
}

func (x *StatisticsResponse) GetStatistics() *proto1.Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// A request to get a list of withdrawal from a given party
type WithdrawalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party to get the withdrawals for
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *WithdrawalsRequest) Reset() {
	*x = WithdrawalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalsRequest) ProtoMessage() {}

func (x *WithdrawalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalsRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{130}
}

func (x *WithdrawalsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// The response for a list of withdrawals
type WithdrawalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of withdrawals for the specified party
	Withdrawals []*proto1.Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *WithdrawalsResponse) Reset() {
	*x = WithdrawalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalsResponse) ProtoMessage() {}

func (x *WithdrawalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalsResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{131}
}

func (x *WithdrawalsResponse) GetWithdrawals() []*proto1.Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

// A request to get a specific withdrawal by identifier
type WithdrawalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the withdrawal
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WithdrawalRequest) Reset() {
	*x = WithdrawalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalRequest) ProtoMessage() {}

func (x *WithdrawalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{132}
}

func (x *WithdrawalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A response for a withdrawal
type WithdrawalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The withdrawal matching the identifier from the request
	Withdrawal *proto1.Withdrawal `protobuf:"bytes,1,opt,name=withdrawal,proto3" json:"withdrawal,omitempty"`
}

func (x *WithdrawalResponse) Reset() {
	*x = WithdrawalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalResponse) ProtoMessage() {}

func (x *WithdrawalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{133}
}

func (x *WithdrawalResponse) GetWithdrawal() *proto1.Withdrawal {
	if x != nil {
		return x.Withdrawal
	}
	return nil
}

// The request to get all information required to bundle the call to finalise the withdrawal on the erc20 bridge
type ERC20WithdrawalApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the withdrawal
	WithdrawalId string `protobuf:"bytes,1,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
}

func (x *ERC20WithdrawalApprovalRequest) Reset() {
	*x = ERC20WithdrawalApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20WithdrawalApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20WithdrawalApprovalRequest) ProtoMessage() {}

func (x *ERC20WithdrawalApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20WithdrawalApprovalRequest.ProtoReflect.Descriptor instead.
func (*ERC20WithdrawalApprovalRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{134}
}

func (x *ERC20WithdrawalApprovalRequest) GetWithdrawalId() string {
	if x != nil {
		return x.WithdrawalId
	}
	return ""
}

// The response with all information required to bundle the call to finalise the withdrawal on the erc20 bridge
// function withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)
type ERC20WithdrawalApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of asset on ethereum
	AssetSource string `protobuf:"bytes,1,opt,name=asset_source,json=assetSource,proto3" json:"asset_source,omitempty"`
	// The amount to be withdrawn
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The expiry / until what time the request is valid
	Expiry int64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The nonce, which is actually the internal reference for the withdrawal
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The signatures bundle as hex encoded data, forward by 0x
	// e.g: 0x + sig1 + sig2 + ... + sixN
	Signatures string `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *ERC20WithdrawalApprovalResponse) Reset() {
	*x = ERC20WithdrawalApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20WithdrawalApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20WithdrawalApprovalResponse) ProtoMessage() {}

func (x *ERC20WithdrawalApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20WithdrawalApprovalResponse.ProtoReflect.Descriptor instead.
func (*ERC20WithdrawalApprovalResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{135}
}

func (x *ERC20WithdrawalApprovalResponse) GetAssetSource() string {
	if x != nil {
		return x.AssetSource
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *ERC20WithdrawalApprovalResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetSignatures() string {
	if x != nil {
		return x.Signatures
	}
	return ""
}

// A request to get a list of deposit from a given party
type DepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party to get the deposits for
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *DepositsRequest) Reset() {
	*x = DepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositsRequest) ProtoMessage() {}

func (x *DepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositsRequest.ProtoReflect.Descriptor instead.
func (*DepositsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{136}
}

func (x *DepositsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// The response for a list of deposits
type DepositsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of deposits for the specified party
	Deposits []*proto1.Deposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (x *DepositsResponse) Reset() {
	*x = DepositsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositsResponse) ProtoMessage() {}

func (x *DepositsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositsResponse.ProtoReflect.Descriptor instead.
func (*DepositsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{137}
}

func (x *DepositsResponse) GetDeposits() []*proto1.Deposit {
	if x != nil {
		return x.Deposits
	}
	return nil
}

// A request to get a specific deposit by identifier
type DepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the deposit
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DepositRequest) Reset() {
	*x = DepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRequest) ProtoMessage() {}

func (x *DepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRequest.ProtoReflect.Descriptor instead.
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{138}
}

func (x *DepositRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A response for a deposit
type DepositResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deposit matching the identifier from the request
	Deposit *proto1.Deposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (x *DepositResponse) Reset() {
	*x = DepositResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositResponse) ProtoMessage() {}

func (x *DepositResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositResponse.ProtoReflect.Descriptor instead.
func (*DepositResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{139}
}

func (x *DepositResponse) GetDeposit() *proto1.Deposit {
	if x != nil {
		return x.Deposit
	}
	return nil
}

// A message requesting for the list of all network parameters
type NetworkParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NetworkParametersRequest) Reset() {
	*x = NetworkParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParametersRequest) ProtoMessage() {}

func (x *NetworkParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParametersRequest.ProtoReflect.Descriptor instead.
func (*NetworkParametersRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{140}
}

// A response containing all of the vega network parameters
type NetworkParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkParameters []*proto1.NetworkParameter `protobuf:"bytes,1,rep,name=network_parameters,json=networkParameters,proto3" json:"network_parameters,omitempty"`
}

func (x *NetworkParametersResponse) Reset() {
	*x = NetworkParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParametersResponse) ProtoMessage() {}

func (x *NetworkParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParametersResponse.ProtoReflect.Descriptor instead.
func (*NetworkParametersResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{141}
}

func (x *NetworkParametersResponse) GetNetworkParameters() []*proto1.NetworkParameter {
	if x != nil {
		return x.NetworkParameters
	}
	return nil
}

// A message requesting for the list of liquidity provision orders for markets
// One of the two filters is required (or both)
type LiquidityProvisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target market for the liquidity provision orders
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The party which submitted the liquidity provision orders
	Party string `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *LiquidityProvisionsRequest) Reset() {
	*x = LiquidityProvisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionsRequest) ProtoMessage() {}

func (x *LiquidityProvisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionsRequest.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{142}
}

func (x *LiquidityProvisionsRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *LiquidityProvisionsRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

// A response containing all of the Vega liquidity provision orders
type LiquidityProvisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiquidityProvisions []*proto1.LiquidityProvision `protobuf:"bytes,1,rep,name=liquidity_provisions,json=liquidityProvisions,proto3" json:"liquidity_provisions,omitempty"`
}

func (x *LiquidityProvisionsResponse) Reset() {
	*x = LiquidityProvisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionsResponse) ProtoMessage() {}

func (x *LiquidityProvisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionsResponse.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{143}
}

func (x *LiquidityProvisionsResponse) GetLiquidityProvisions() []*proto1.LiquidityProvision {
	if x != nil {
		return x.LiquidityProvisions
	}
	return nil
}

// A request to get a specific oracle spec by identifier
type OracleSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id to get the oracle spec for
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OracleSpecRequest) Reset() {
	*x = OracleSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecRequest) ProtoMessage() {}

func (x *OracleSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecRequest.ProtoReflect.Descriptor instead.
func (*OracleSpecRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{144}
}

func (x *OracleSpecRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A response for a oracle spec
type OracleSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The withdrawal matching the identifier from the request
	OracleSpec *v12.OracleSpec `protobuf:"bytes,1,opt,name=oracle_spec,json=oracleSpec,proto3" json:"oracle_spec,omitempty"`
}

func (x *OracleSpecResponse) Reset() {
	*x = OracleSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecResponse) ProtoMessage() {}

func (x *OracleSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecResponse.ProtoReflect.Descriptor instead.
func (*OracleSpecResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{145}
}

func (x *OracleSpecResponse) GetOracleSpec() *v12.OracleSpec {
	if x != nil {
		return x.OracleSpec
	}
	return nil
}

// A request to get a specific oracle spec by identifier
type OracleSpecsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OracleSpecsRequest) Reset() {
	*x = OracleSpecsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecsRequest) ProtoMessage() {}

func (x *OracleSpecsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecsRequest.ProtoReflect.Descriptor instead.
func (*OracleSpecsRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{146}
}

// The response for a list of withdrawals
type OracleSpecsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of oracle specs
	OracleSpecs []*v12.OracleSpec `protobuf:"bytes,1,rep,name=oracle_specs,json=oracleSpecs,proto3" json:"oracle_specs,omitempty"`
}

func (x *OracleSpecsResponse) Reset() {
	*x = OracleSpecsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecsResponse) ProtoMessage() {}

func (x *OracleSpecsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecsResponse.ProtoReflect.Descriptor instead.
func (*OracleSpecsResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{147}
}

func (x *OracleSpecsResponse) GetOracleSpecs() []*v12.OracleSpec {
	if x != nil {
		return x.OracleSpecs
	}
	return nil
}

// A request to all oracle data broadcast to a given spec
type OracleDataBySpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id to get the oracle spec for
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OracleDataBySpecRequest) Reset() {
	*x = OracleDataBySpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDataBySpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDataBySpecRequest) ProtoMessage() {}

func (x *OracleDataBySpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDataBySpecRequest.ProtoReflect.Descriptor instead.
func (*OracleDataBySpecRequest) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{148}
}

func (x *OracleDataBySpecRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// The response for a list of all oracle data broadcast to a given spec
type OracleDataBySpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of oracle data broadcast to a given spec
	OracleData []*v12.OracleData `protobuf:"bytes,1,rep,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
}

func (x *OracleDataBySpecResponse) Reset() {
	*x = OracleDataBySpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_trading_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDataBySpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDataBySpecResponse) ProtoMessage() {}

func (x *OracleDataBySpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_trading_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDataBySpecResponse.ProtoReflect.Descriptor instead.
func (*OracleDataBySpecResponse) Descriptor() ([]byte, []int) {
	return file_api_trading_proto_rawDescGZIP(), []int{149}
}

func (x *OracleDataBySpecResponse) GetOracleData() []*v12.OracleData {
	if x != nil {
		return x.OracleData
	}
	return nil
}

var File_api_trading_proto protoreflect.FileDescriptor

var file_api_trading_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x0a, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f,
	0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x76, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x03, 0x65, 0x76, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x37, 0x0a, 0x1b, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x02, 0x74, 0x78, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x22, 0x35,
	0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x22, 0x37,
	0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5a, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x22, 0x2d, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c,
	0x6f, 0x62, 0x22, 0x4d, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x22, 0x30, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x6c, 0x6f, 0x62, 0x22, 0x2f, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x22, 0x5e, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x18, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6d, 0x65,
	0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x2a,
	0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x11, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x22, 0x3b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x65, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5c, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x48, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x45, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x45, 0x0a, 0x19, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1d, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x1b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x3d, 0x0a,
	0x18, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x19,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x1c, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1d, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x22, 0x55, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x14, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x15, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x13, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x36, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x35,
	0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x22, 0x10, 0x0a,
	0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x38, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c,
	0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x3c, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x44, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x17, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x40, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x06, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x42, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1c, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x22, 0x49, 0x0a, 0x22, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x23,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x1a, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x63, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x18, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x0e, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x39, 0x0a, 0x0f, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0xd1, 0x01, 0x0a,
	0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x70, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x22, 0x59, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x18,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x67,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x56, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x17, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58,
	0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x42, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x15, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x43, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x20, 0x46,
	0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x21, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x68, 0x0a, 0x20, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x7d, 0x0a, 0x21, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68,
	0x0a, 0x1c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1d, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x40, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x7a, 0x0a, 0x20, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x21, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x22, 0x4f, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a,
	0x18, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x40, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x13, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22,
	0x3a, 0x0a, 0x15, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x16, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xa1,
	0x01, 0x0a, 0x16, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x4b, 0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x13, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x37, 0x0a, 0x12,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73,
	0x22, 0x2b, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a,
	0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x1e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x1f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0x34, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x08, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x22, 0x1a, 0x0a, 0x18,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x1a,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x22, 0x6a, 0x0a, 0x1b, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x12, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x22, 0x14, 0x0a, 0x12, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x13, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0c, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x32, 0xdc, 0x07, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x11, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xdb, 0x2a, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x49,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x66, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x11, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x14, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0f, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x10, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x14,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x78, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x14, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x54, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x1a, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x73, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3f, 0x0a,
	0x18, 0x69, 0x6f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x5a, 0x23, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f,
	0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_trading_proto_rawDescOnce sync.Once
	file_api_trading_proto_rawDescData = file_api_trading_proto_rawDesc
)

func file_api_trading_proto_rawDescGZIP() []byte {
	file_api_trading_proto_rawDescOnce.Do(func() {
		file_api_trading_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_trading_proto_rawDescData)
	})
	return file_api_trading_proto_rawDescData
}

var file_api_trading_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_trading_proto_msgTypes = make([]protoimpl.MessageInfo, 150)
var file_api_trading_proto_goTypes = []interface{}{
	(SubmitTransactionRequest_Type)(0),            // 0: api.v1.SubmitTransactionRequest.Type
	(SubmitTransactionV2Request_Type)(0),          // 1: api.v1.SubmitTransactionV2Request.Type
	(*PropagateChainEventRequest)(nil),            // 2: api.v1.PropagateChainEventRequest
	(*PropagateChainEventResponse)(nil),           // 3: api.v1.PropagateChainEventResponse
	(*SubmitTransactionRequest)(nil),              // 4: api.v1.SubmitTransactionRequest
	(*SubmitTransactionResponse)(nil),             // 5: api.v1.SubmitTransactionResponse
	(*SubmitTransactionV2Request)(nil),            // 6: api.v1.SubmitTransactionV2Request
	(*SubmitTransactionV2Response)(nil),           // 7: api.v1.SubmitTransactionV2Response
	(*PrepareWithdrawRequest)(nil),                // 8: api.v1.PrepareWithdrawRequest
	(*PrepareWithdrawResponse)(nil),               // 9: api.v1.PrepareWithdrawResponse
	(*PrepareSubmitOrderResponse)(nil),            // 10: api.v1.PrepareSubmitOrderResponse
	(*PrepareCancelOrderResponse)(nil),            // 11: api.v1.PrepareCancelOrderResponse
	(*PrepareAmendOrderResponse)(nil),             // 12: api.v1.PrepareAmendOrderResponse
	(*PrepareSubmitOrderRequest)(nil),             // 13: api.v1.PrepareSubmitOrderRequest
	(*PrepareCancelOrderRequest)(nil),             // 14: api.v1.PrepareCancelOrderRequest
	(*PrepareAmendOrderRequest)(nil),              // 15: api.v1.PrepareAmendOrderRequest
	(*AssetsRequest)(nil),                         // 16: api.v1.AssetsRequest
	(*AssetsResponse)(nil),                        // 17: api.v1.AssetsResponse
	(*AssetByIDRequest)(nil),                      // 18: api.v1.AssetByIDRequest
	(*AssetByIDResponse)(nil),                     // 19: api.v1.AssetByIDResponse
	(*GetNodeSignaturesAggregateRequest)(nil),     // 20: api.v1.GetNodeSignaturesAggregateRequest
	(*GetNodeSignaturesAggregateResponse)(nil),    // 21: api.v1.GetNodeSignaturesAggregateResponse
	(*OptionalProposalState)(nil),                 // 22: api.v1.OptionalProposalState
	(*GetProposalsRequest)(nil),                   // 23: api.v1.GetProposalsRequest
	(*GetProposalsResponse)(nil),                  // 24: api.v1.GetProposalsResponse
	(*GetProposalsByPartyRequest)(nil),            // 25: api.v1.GetProposalsByPartyRequest
	(*GetProposalsByPartyResponse)(nil),           // 26: api.v1.GetProposalsByPartyResponse
	(*GetVotesByPartyRequest)(nil),                // 27: api.v1.GetVotesByPartyRequest
	(*GetVotesByPartyResponse)(nil),               // 28: api.v1.GetVotesByPartyResponse
	(*GetNewMarketProposalsRequest)(nil),          // 29: api.v1.GetNewMarketProposalsRequest
	(*GetNewMarketProposalsResponse)(nil),         // 30: api.v1.GetNewMarketProposalsResponse
	(*GetUpdateMarketProposalsRequest)(nil),       // 31: api.v1.GetUpdateMarketProposalsRequest
	(*GetUpdateMarketProposalsResponse)(nil),      // 32: api.v1.GetUpdateMarketProposalsResponse
	(*GetNetworkParametersProposalsRequest)(nil),  // 33: api.v1.GetNetworkParametersProposalsRequest
	(*GetNetworkParametersProposalsResponse)(nil), // 34: api.v1.GetNetworkParametersProposalsResponse
	(*GetNewAssetProposalsRequest)(nil),           // 35: api.v1.GetNewAssetProposalsRequest
	(*GetNewAssetProposalsResponse)(nil),          // 36: api.v1.GetNewAssetProposalsResponse
	(*GetProposalByIDRequest)(nil),                // 37: api.v1.GetProposalByIDRequest
	(*GetProposalByIDResponse)(nil),               // 38: api.v1.GetProposalByIDResponse
	(*GetProposalByReferenceRequest)(nil),         // 39: api.v1.GetProposalByReferenceRequest
	(*GetProposalByReferenceResponse)(nil),        // 40: api.v1.GetProposalByReferenceResponse
	(*ObserveGovernanceRequest)(nil),              // 41: api.v1.ObserveGovernanceRequest
	(*ObserveGovernanceResponse)(nil),             // 42: api.v1.ObserveGovernanceResponse
	(*ObservePartyProposalsRequest)(nil),          // 43: api.v1.ObservePartyProposalsRequest
	(*ObservePartyProposalsResponse)(nil),         // 44: api.v1.ObservePartyProposalsResponse
	(*ObserveProposalVotesRequest)(nil),           // 45: api.v1.ObserveProposalVotesRequest
	(*ObserveProposalVotesResponse)(nil),          // 46: api.v1.ObserveProposalVotesResponse
	(*ObservePartyVotesRequest)(nil),              // 47: api.v1.ObservePartyVotesRequest
	(*ObservePartyVotesResponse)(nil),             // 48: api.v1.ObservePartyVotesResponse
	(*MarginLevelsSubscribeRequest)(nil),          // 49: api.v1.MarginLevelsSubscribeRequest
	(*MarginLevelsSubscribeResponse)(nil),         // 50: api.v1.MarginLevelsSubscribeResponse
	(*MarginLevelsRequest)(nil),                   // 51: api.v1.MarginLevelsRequest
	(*MarginLevelsResponse)(nil),                  // 52: api.v1.MarginLevelsResponse
	(*MarketsDataSubscribeRequest)(nil),           // 53: api.v1.MarketsDataSubscribeRequest
	(*MarketsDataSubscribeResponse)(nil),          // 54: api.v1.MarketsDataSubscribeResponse
	(*MarketDataByIDRequest)(nil),                 // 55: api.v1.MarketDataByIDRequest
	(*MarketDataByIDResponse)(nil),                // 56: api.v1.MarketDataByIDResponse
	(*MarketsDataRequest)(nil),                    // 57: api.v1.MarketsDataRequest
	(*MarketsDataResponse)(nil),                   // 58: api.v1.MarketsDataResponse
	(*LastTradeRequest)(nil),                      // 59: api.v1.LastTradeRequest
	(*LastTradeResponse)(nil),                     // 60: api.v1.LastTradeResponse
	(*MarketByIDRequest)(nil),                     // 61: api.v1.MarketByIDRequest
	(*MarketByIDResponse)(nil),                    // 62: api.v1.MarketByIDResponse
	(*PartyByIDRequest)(nil),                      // 63: api.v1.PartyByIDRequest
	(*PartyByIDResponse)(nil),                     // 64: api.v1.PartyByIDResponse
	(*PartiesRequest)(nil),                        // 65: api.v1.PartiesRequest
	(*PartiesResponse)(nil),                       // 66: api.v1.PartiesResponse
	(*TradesByPartyRequest)(nil),                  // 67: api.v1.TradesByPartyRequest
	(*TradesByPartyResponse)(nil),                 // 68: api.v1.TradesByPartyResponse
	(*TradesByOrderRequest)(nil),                  // 69: api.v1.TradesByOrderRequest
	(*TradesByOrderResponse)(nil),                 // 70: api.v1.TradesByOrderResponse
	(*AccountsSubscribeRequest)(nil),              // 71: api.v1.AccountsSubscribeRequest
	(*AccountsSubscribeResponse)(nil),             // 72: api.v1.AccountsSubscribeResponse
	(*OrdersSubscribeRequest)(nil),                // 73: api.v1.OrdersSubscribeRequest
	(*TradesSubscribeRequest)(nil),                // 74: api.v1.TradesSubscribeRequest
	(*CandlesSubscribeRequest)(nil),               // 75: api.v1.CandlesSubscribeRequest
	(*CandlesSubscribeResponse)(nil),              // 76: api.v1.CandlesSubscribeResponse
	(*MarketDepthSubscribeRequest)(nil),           // 77: api.v1.MarketDepthSubscribeRequest
	(*MarketDepthSubscribeResponse)(nil),          // 78: api.v1.MarketDepthSubscribeResponse
	(*MarketDepthUpdatesSubscribeRequest)(nil),    // 79: api.v1.MarketDepthUpdatesSubscribeRequest
	(*MarketDepthUpdatesSubscribeResponse)(nil),   // 80: api.v1.MarketDepthUpdatesSubscribeResponse
	(*PositionsSubscribeRequest)(nil),             // 81: api.v1.PositionsSubscribeRequest
	(*PositionsSubscribeResponse)(nil),            // 82: api.v1.PositionsSubscribeResponse
	(*OrdersByMarketRequest)(nil),                 // 83: api.v1.OrdersByMarketRequest
	(*OrdersByMarketResponse)(nil),                // 84: api.v1.OrdersByMarketResponse
	(*OrdersByPartyRequest)(nil),                  // 85: api.v1.OrdersByPartyRequest
	(*OrdersByPartyResponse)(nil),                 // 86: api.v1.OrdersByPartyResponse
	(*OrderByMarketAndIDRequest)(nil),             // 87: api.v1.OrderByMarketAndIDRequest
	(*OrderByMarketAndIDResponse)(nil),            // 88: api.v1.OrderByMarketAndIDResponse
	(*OrderByReferenceRequest)(nil),               // 89: api.v1.OrderByReferenceRequest
	(*OrderByReferenceResponse)(nil),              // 90: api.v1.OrderByReferenceResponse
	(*MarketsRequest)(nil),                        // 91: api.v1.MarketsRequest
	(*MarketsResponse)(nil),                       // 92: api.v1.MarketsResponse
	(*CandlesRequest)(nil),                        // 93: api.v1.CandlesRequest
	(*CandlesResponse)(nil),                       // 94: api.v1.CandlesResponse
	(*MarketDepthRequest)(nil),                    // 95: api.v1.MarketDepthRequest
	(*MarketDepthResponse)(nil),                   // 96: api.v1.MarketDepthResponse
	(*TradesByMarketRequest)(nil),                 // 97: api.v1.TradesByMarketRequest
	(*TradesByMarketResponse)(nil),                // 98: api.v1.TradesByMarketResponse
	(*PositionsByPartyRequest)(nil),               // 99: api.v1.PositionsByPartyRequest
	(*PositionsByPartyResponse)(nil),              // 100: api.v1.PositionsByPartyResponse
	(*GetVegaTimeRequest)(nil),                    // 101: api.v1.GetVegaTimeRequest
	(*GetVegaTimeResponse)(nil),                   // 102: api.v1.GetVegaTimeResponse
	(*Pagination)(nil),                            // 103: api.v1.Pagination
	(*OrdersSubscribeResponse)(nil),               // 104: api.v1.OrdersSubscribeResponse
	(*TradesSubscribeResponse)(nil),               // 105: api.v1.TradesSubscribeResponse
	(*TransferResponsesSubscribeRequest)(nil),     // 106: api.v1.TransferResponsesSubscribeRequest
	(*TransferResponsesSubscribeResponse)(nil),    // 107: api.v1.TransferResponsesSubscribeResponse
	(*PartyAccountsRequest)(nil),                  // 108: api.v1.PartyAccountsRequest
	(*PartyAccountsResponse)(nil),                 // 109: api.v1.PartyAccountsResponse
	(*MarketAccountsRequest)(nil),                 // 110: api.v1.MarketAccountsRequest
	(*MarketAccountsResponse)(nil),                // 111: api.v1.MarketAccountsResponse
	(*FeeInfrastructureAccountsRequest)(nil),      // 112: api.v1.FeeInfrastructureAccountsRequest
	(*FeeInfrastructureAccountsResponse)(nil),     // 113: api.v1.FeeInfrastructureAccountsResponse
	(*PrepareProposalSubmissionRequest)(nil),      // 114: api.v1.PrepareProposalSubmissionRequest
	(*PrepareProposalSubmissionResponse)(nil),     // 115: api.v1.PrepareProposalSubmissionResponse
	(*PrepareVoteSubmissionRequest)(nil),          // 116: api.v1.PrepareVoteSubmissionRequest
	(*PrepareVoteSubmissionResponse)(nil),         // 117: api.v1.PrepareVoteSubmissionResponse
	(*PrepareLiquidityProvisionRequest)(nil),      // 118: api.v1.PrepareLiquidityProvisionRequest
	(*PrepareLiquidityProvisionResponse)(nil),     // 119: api.v1.PrepareLiquidityProvisionResponse
	(*OrderByIDRequest)(nil),                      // 120: api.v1.OrderByIDRequest
	(*OrderByIDResponse)(nil),                     // 121: api.v1.OrderByIDResponse
	(*OrderVersionsByIDRequest)(nil),              // 122: api.v1.OrderVersionsByIDRequest
	(*OrderVersionsByIDResponse)(nil),             // 123: api.v1.OrderVersionsByIDResponse
	(*EstimateFeeRequest)(nil),                    // 124: api.v1.EstimateFeeRequest
	(*EstimateFeeResponse)(nil),                   // 125: api.v1.EstimateFeeResponse
	(*EstimateMarginRequest)(nil),                 // 126: api.v1.EstimateMarginRequest
	(*EstimateMarginResponse)(nil),                // 127: api.v1.EstimateMarginResponse
	(*ObserveEventBusRequest)(nil),                // 128: api.v1.ObserveEventBusRequest
	(*ObserveEventBusResponse)(nil),               // 129: api.v1.ObserveEventBusResponse
	(*StatisticsRequest)(nil),                     // 130: api.v1.StatisticsRequest
	(*StatisticsResponse)(nil),                    // 131: api.v1.StatisticsResponse
	(*WithdrawalsRequest)(nil),                    // 132: api.v1.WithdrawalsRequest
	(*WithdrawalsResponse)(nil),                   // 133: api.v1.WithdrawalsResponse
	(*WithdrawalRequest)(nil),                     // 134: api.v1.WithdrawalRequest
	(*WithdrawalResponse)(nil),                    // 135: api.v1.WithdrawalResponse
	(*ERC20WithdrawalApprovalRequest)(nil),        // 136: api.v1.ERC20WithdrawalApprovalRequest
	(*ERC20WithdrawalApprovalResponse)(nil),       // 137: api.v1.ERC20WithdrawalApprovalResponse
	(*DepositsRequest)(nil),                       // 138: api.v1.DepositsRequest
	(*DepositsResponse)(nil),                      // 139: api.v1.DepositsResponse
	(*DepositRequest)(nil),                        // 140: api.v1.DepositRequest
	(*DepositResponse)(nil),                       // 141: api.v1.DepositResponse
	(*NetworkParametersRequest)(nil),              // 142: api.v1.NetworkParametersRequest
	(*NetworkParametersResponse)(nil),             // 143: api.v1.NetworkParametersResponse
	(*LiquidityProvisionsRequest)(nil),            // 144: api.v1.LiquidityProvisionsRequest
	(*LiquidityProvisionsResponse)(nil),           // 145: api.v1.LiquidityProvisionsResponse
	(*OracleSpecRequest)(nil),                     // 146: api.v1.OracleSpecRequest
	(*OracleSpecResponse)(nil),                    // 147: api.v1.OracleSpecResponse
	(*OracleSpecsRequest)(nil),                    // 148: api.v1.OracleSpecsRequest
	(*OracleSpecsResponse)(nil),                   // 149: api.v1.OracleSpecsResponse
	(*OracleDataBySpecRequest)(nil),               // 150: api.v1.OracleDataBySpecRequest
	(*OracleDataBySpecResponse)(nil),              // 151: api.v1.OracleDataBySpecResponse
	(*v1.ChainEvent)(nil),                         // 152: vega.commands.v1.ChainEvent
	(*proto1.SignedBundle)(nil),                   // 153: vega.SignedBundle
	(*v1.Transaction)(nil),                        // 154: vega.commands.v1.Transaction
	(*v1.WithdrawSubmission)(nil),                 // 155: vega.commands.v1.WithdrawSubmission
	(*v1.OrderSubmission)(nil),                    // 156: vega.commands.v1.OrderSubmission
	(*v1.OrderCancellation)(nil),                  // 157: vega.commands.v1.OrderCancellation
	(*v1.OrderAmendment)(nil),                     // 158: vega.commands.v1.OrderAmendment
	(*proto1.Asset)(nil),                          // 159: vega.Asset
	(*v1.NodeSignature)(nil),                      // 160: vega.commands.v1.NodeSignature
	(proto1.Proposal_State)(0),                    // 161: vega.Proposal.State
	(*proto1.GovernanceData)(nil),                 // 162: vega.GovernanceData
	(*proto1.Vote)(nil),                           // 163: vega.Vote
	(*proto1.MarginLevels)(nil),                   // 164: vega.MarginLevels
	(*proto1.MarketData)(nil),                     // 165: vega.MarketData
	(*proto1.Trade)(nil),                          // 166: vega.Trade
	(*proto1.Market)(nil),                         // 167: vega.Market
	(*proto1.Party)(nil),                          // 168: vega.Party
	(proto1.AccountType)(0),                       // 169: vega.AccountType
	(*proto1.Account)(nil),                        // 170: vega.Account
	(proto1.Interval)(0),                          // 171: vega.Interval
	(*proto1.Candle)(nil),                         // 172: vega.Candle
	(*proto1.MarketDepth)(nil),                    // 173: vega.MarketDepth
	(*proto1.MarketDepthUpdate)(nil),              // 174: vega.MarketDepthUpdate
	(*proto1.Position)(nil),                       // 175: vega.Position
	(*proto1.Order)(nil),                          // 176: vega.Order
	(*proto1.PriceLevel)(nil),                     // 177: vega.PriceLevel
	(*proto1.TransferResponse)(nil),               // 178: vega.TransferResponse
	(*v1.ProposalSubmission)(nil),                 // 179: vega.commands.v1.ProposalSubmission
	(*v1.VoteSubmission)(nil),                     // 180: vega.commands.v1.VoteSubmission
	(*v1.LiquidityProvisionSubmission)(nil),       // 181: vega.commands.v1.LiquidityProvisionSubmission
	(*proto1.Fee)(nil),                            // 182: vega.Fee
	(v11.BusEventType)(0),                         // 183: vega.events.v1.BusEventType
	(*v11.BusEvent)(nil),                          // 184: vega.events.v1.BusEvent
	(*proto1.Statistics)(nil),                     // 185: vega.Statistics
	(*proto1.Withdrawal)(nil),                     // 186: vega.Withdrawal
	(*proto1.Deposit)(nil),                        // 187: vega.Deposit
	(*proto1.NetworkParameter)(nil),               // 188: vega.NetworkParameter
	(*proto1.LiquidityProvision)(nil),             // 189: vega.LiquidityProvision
	(*v12.OracleSpec)(nil),                        // 190: oracles.v1.OracleSpec
	(*v12.OracleData)(nil),                        // 191: oracles.v1.OracleData
}
var file_api_trading_proto_depIdxs = []int32{
	152, // 0: api.v1.PropagateChainEventRequest.evt:type_name -> vega.commands.v1.ChainEvent
	153, // 1: api.v1.SubmitTransactionRequest.tx:type_name -> vega.SignedBundle
	0,   // 2: api.v1.SubmitTransactionRequest.type:type_name -> api.v1.SubmitTransactionRequest.Type
	154, // 3: api.v1.SubmitTransactionV2Request.tx:type_name -> vega.commands.v1.Transaction
	1,   // 4: api.v1.SubmitTransactionV2Request.type:type_name -> api.v1.SubmitTransactionV2Request.Type
	155, // 5: api.v1.PrepareWithdrawRequest.withdraw:type_name -> vega.commands.v1.WithdrawSubmission
	156, // 6: api.v1.PrepareSubmitOrderRequest.submission:type_name -> vega.commands.v1.OrderSubmission
	157, // 7: api.v1.PrepareCancelOrderRequest.cancellation:type_name -> vega.commands.v1.OrderCancellation
	158, // 8: api.v1.PrepareAmendOrderRequest.amendment:type_name -> vega.commands.v1.OrderAmendment
	159, // 9: api.v1.AssetsResponse.assets:type_name -> vega.Asset
	159, // 10: api.v1.AssetByIDResponse.asset:type_name -> vega.Asset
	160, // 11: api.v1.GetNodeSignaturesAggregateResponse.signatures:type_name -> vega.commands.v1.NodeSignature
	161, // 12: api.v1.OptionalProposalState.value:type_name -> vega.Proposal.State
	22,  // 13: api.v1.GetProposalsRequest.select_in_state:type_name -> api.v1.OptionalProposalState
	162, // 14: api.v1.GetProposalsResponse.data:type_name -> vega.GovernanceData
	22,  // 15: api.v1.GetProposalsByPartyRequest.select_in_state:type_name -> api.v1.OptionalProposalState
	162, // 16: api.v1.GetProposalsByPartyResponse.data:type_name -> vega.GovernanceData
	163, // 17: api.v1.GetVotesByPartyResponse.votes:type_name -> vega.Vote
	22,  // 18: api.v1.GetNewMarketProposalsRequest.select_in_state:type_name -> api.v1.OptionalProposalState
	162, // 19: api.v1.GetNewMarketProposalsResponse.data:type_name -> vega.GovernanceData
	22,  // 20: api.v1.GetUpdateMarketProposalsRequest.select_in_state:type_name -> api.v1.OptionalProposalState
	162, // 21: api.v1.GetUpdateMarketProposalsResponse.data:type_name -> vega.GovernanceData
	22,  // 22: api.v1.GetNetworkParametersProposalsRequest.select_in_state:type_name -> api.v1.OptionalProposalState
	162, // 23: api.v1.GetNetworkParametersProposalsResponse.data:type_name -> vega.GovernanceData
	22,  // 24: api.v1.GetNewAssetProposalsRequest.select_in_state:type_name -> api.v1.OptionalProposalState
	162, // 25: api.v1.GetNewAssetProposalsResponse.data:type_name -> vega.GovernanceData
	162, // 26: api.v1.GetProposalByIDResponse.data:type_name -> vega.GovernanceData
	162, // 27: api.v1.GetProposalByReferenceResponse.data:type_name -> vega.GovernanceData
	162, // 28: api.v1.ObserveGovernanceResponse.data:type_name -> vega.GovernanceData
	162, // 29: api.v1.ObservePartyProposalsResponse.data:type_name -> vega.GovernanceData
	163, // 30: api.v1.ObserveProposalVotesResponse.vote:type_name -> vega.Vote
	163, // 31: api.v1.ObservePartyVotesResponse.vote:type_name -> vega.Vote
	164, // 32: api.v1.MarginLevelsSubscribeResponse.margin_levels:type_name -> vega.MarginLevels
	164, // 33: api.v1.MarginLevelsResponse.margin_levels:type_name -> vega.MarginLevels
	165, // 34: api.v1.MarketsDataSubscribeResponse.market_data:type_name -> vega.MarketData
	165, // 35: api.v1.MarketDataByIDResponse.market_data:type_name -> vega.MarketData
	165, // 36: api.v1.MarketsDataResponse.markets_data:type_name -> vega.MarketData
	166, // 37: api.v1.LastTradeResponse.trade:type_name -> vega.Trade
	167, // 38: api.v1.MarketByIDResponse.market:type_name -> vega.Market
	168, // 39: api.v1.PartyByIDResponse.party:type_name -> vega.Party
	168, // 40: api.v1.PartiesResponse.parties:type_name -> vega.Party
	103, // 41: api.v1.TradesByPartyRequest.pagination:type_name -> api.v1.Pagination
	166, // 42: api.v1.TradesByPartyResponse.trades:type_name -> vega.Trade
	166, // 43: api.v1.TradesByOrderResponse.trades:type_name -> vega.Trade
	169, // 44: api.v1.AccountsSubscribeRequest.type:type_name -> vega.AccountType
	170, // 45: api.v1.AccountsSubscribeResponse.account:type_name -> vega.Account
	171, // 46: api.v1.CandlesSubscribeRequest.interval:type_name -> vega.Interval
	172, // 47: api.v1.CandlesSubscribeResponse.candle:type_name -> vega.Candle
	173, // 48: api.v1.MarketDepthSubscribeResponse.market_depth:type_name -> vega.MarketDepth
	174, // 49: api.v1.MarketDepthUpdatesSubscribeResponse.update:type_name -> vega.MarketDepthUpdate
	175, // 50: api.v1.PositionsSubscribeResponse.position:type_name -> vega.Position
	103, // 51: api.v1.OrdersByMarketRequest.pagination:type_name -> api.v1.Pagination
	176, // 52: api.v1.OrdersByMarketResponse.orders:type_name -> vega.Order
	103, // 53: api.v1.OrdersByPartyRequest.pagination:type_name -> api.v1.Pagination
	176, // 54: api.v1.OrdersByPartyResponse.orders:type_name -> vega.Order
	176, // 55: api.v1.OrderByMarketAndIDResponse.order:type_name -> vega.Order
	176, // 56: api.v1.OrderByReferenceResponse.order:type_name -> vega.Order
	167, // 57: api.v1.MarketsResponse.markets:type_name -> vega.Market
	171, // 58: api.v1.CandlesRequest.interval:type_name -> vega.Interval
	172, // 59: api.v1.CandlesResponse.candles:type_name -> vega.Candle
	177, // 60: api.v1.MarketDepthResponse.buy:type_name -> vega.PriceLevel
	177, // 61: api.v1.MarketDepthResponse.sell:type_name -> vega.PriceLevel
	166, // 62: api.v1.MarketDepthResponse.last_trade:type_name -> vega.Trade
	103, // 63: api.v1.TradesByMarketRequest.pagination:type_name -> api.v1.Pagination
	166, // 64: api.v1.TradesByMarketResponse.trades:type_name -> vega.Trade
	175, // 65: api.v1.PositionsByPartyResponse.positions:type_name -> vega.Position
	176, // 66: api.v1.OrdersSubscribeResponse.orders:type_name -> vega.Order
	166, // 67: api.v1.TradesSubscribeResponse.trades:type_name -> vega.Trade
	178, // 68: api.v1.TransferResponsesSubscribeResponse.response:type_name -> vega.TransferResponse
	169, // 69: api.v1.PartyAccountsRequest.type:type_name -> vega.AccountType
	170, // 70: api.v1.PartyAccountsResponse.accounts:type_name -> vega.Account
	170, // 71: api.v1.MarketAccountsResponse.accounts:type_name -> vega.Account
	170, // 72: api.v1.FeeInfrastructureAccountsResponse.accounts:type_name -> vega.Account
	179, // 73: api.v1.PrepareProposalSubmissionRequest.submission:type_name -> vega.commands.v1.ProposalSubmission
	179, // 74: api.v1.PrepareProposalSubmissionResponse.submission:type_name -> vega.commands.v1.ProposalSubmission
	180, // 75: api.v1.PrepareVoteSubmissionRequest.submission:type_name -> vega.commands.v1.VoteSubmission
	180, // 76: api.v1.PrepareVoteSubmissionResponse.submission:type_name -> vega.commands.v1.VoteSubmission
	181, // 77: api.v1.PrepareLiquidityProvisionRequest.submission:type_name -> vega.commands.v1.LiquidityProvisionSubmission
	176, // 78: api.v1.OrderByIDResponse.order:type_name -> vega.Order
	103, // 79: api.v1.OrderVersionsByIDRequest.pagination:type_name -> api.v1.Pagination
	176, // 80: api.v1.OrderVersionsByIDResponse.orders:type_name -> vega.Order
	176, // 81: api.v1.EstimateFeeRequest.order:type_name -> vega.Order
	182, // 82: api.v1.EstimateFeeResponse.fee:type_name -> vega.Fee
	176, // 83: api.v1.EstimateMarginRequest.order:type_name -> vega.Order
	164, // 84: api.v1.EstimateMarginResponse.margin_levels:type_name -> vega.MarginLevels
	183, // 85: api.v1.ObserveEventBusRequest.type:type_name -> vega.events.v1.BusEventType
	184, // 86: api.v1.ObserveEventBusResponse.events:type_name -> vega.events.v1.BusEvent
	185, // 87: api.v1.StatisticsResponse.statistics:type_name -> vega.Statistics
	186, // 88: api.v1.WithdrawalsResponse.withdrawals:type_name -> vega.Withdrawal
	186, // 89: api.v1.WithdrawalResponse.withdrawal:type_name -> vega.Withdrawal
	187, // 90: api.v1.DepositsResponse.deposits:type_name -> vega.Deposit
	187, // 91: api.v1.DepositResponse.deposit:type_name -> vega.Deposit
	188, // 92: api.v1.NetworkParametersResponse.network_parameters:type_name -> vega.NetworkParameter
	189, // 93: api.v1.LiquidityProvisionsResponse.liquidity_provisions:type_name -> vega.LiquidityProvision
	190, // 94: api.v1.OracleSpecResponse.oracle_spec:type_name -> oracles.v1.OracleSpec
	190, // 95: api.v1.OracleSpecsResponse.oracle_specs:type_name -> oracles.v1.OracleSpec
	191, // 96: api.v1.OracleDataBySpecResponse.oracle_data:type_name -> oracles.v1.OracleData
	13,  // 97: api.v1.TradingService.PrepareSubmitOrder:input_type -> api.v1.PrepareSubmitOrderRequest
	14,  // 98: api.v1.TradingService.PrepareCancelOrder:input_type -> api.v1.PrepareCancelOrderRequest
	15,  // 99: api.v1.TradingService.PrepareAmendOrder:input_type -> api.v1.PrepareAmendOrderRequest
	8,   // 100: api.v1.TradingService.PrepareWithdraw:input_type -> api.v1.PrepareWithdrawRequest
	4,   // 101: api.v1.TradingService.SubmitTransaction:input_type -> api.v1.SubmitTransactionRequest
	6,   // 102: api.v1.TradingService.SubmitTransactionV2:input_type -> api.v1.SubmitTransactionV2Request
	114, // 103: api.v1.TradingService.PrepareProposalSubmission:input_type -> api.v1.PrepareProposalSubmissionRequest
	116, // 104: api.v1.TradingService.PrepareVoteSubmission:input_type -> api.v1.PrepareVoteSubmissionRequest
	2,   // 105: api.v1.TradingService.PropagateChainEvent:input_type -> api.v1.PropagateChainEventRequest
	118, // 106: api.v1.TradingService.PrepareLiquidityProvision:input_type -> api.v1.PrepareLiquidityProvisionRequest
	110, // 107: api.v1.TradingDataService.MarketAccounts:input_type -> api.v1.MarketAccountsRequest
	108, // 108: api.v1.TradingDataService.PartyAccounts:input_type -> api.v1.PartyAccountsRequest
	112, // 109: api.v1.TradingDataService.FeeInfrastructureAccounts:input_type -> api.v1.FeeInfrastructureAccountsRequest
	93,  // 110: api.v1.TradingDataService.Candles:input_type -> api.v1.CandlesRequest
	55,  // 111: api.v1.TradingDataService.MarketDataByID:input_type -> api.v1.MarketDataByIDRequest
	57,  // 112: api.v1.TradingDataService.MarketsData:input_type -> api.v1.MarketsDataRequest
	61,  // 113: api.v1.TradingDataService.MarketByID:input_type -> api.v1.MarketByIDRequest
	95,  // 114: api.v1.TradingDataService.MarketDepth:input_type -> api.v1.MarketDepthRequest
	91,  // 115: api.v1.TradingDataService.Markets:input_type -> api.v1.MarketsRequest
	87,  // 116: api.v1.TradingDataService.OrderByMarketAndID:input_type -> api.v1.OrderByMarketAndIDRequest
	89,  // 117: api.v1.TradingDataService.OrderByReference:input_type -> api.v1.OrderByReferenceRequest
	83,  // 118: api.v1.TradingDataService.OrdersByMarket:input_type -> api.v1.OrdersByMarketRequest
	85,  // 119: api.v1.TradingDataService.OrdersByParty:input_type -> api.v1.OrdersByPartyRequest
	120, // 120: api.v1.TradingDataService.OrderByID:input_type -> api.v1.OrderByIDRequest
	122, // 121: api.v1.TradingDataService.OrderVersionsByID:input_type -> api.v1.OrderVersionsByIDRequest
	51,  // 122: api.v1.TradingDataService.MarginLevels:input_type -> api.v1.MarginLevelsRequest
	65,  // 123: api.v1.TradingDataService.Parties:input_type -> api.v1.PartiesRequest
	63,  // 124: api.v1.TradingDataService.PartyByID:input_type -> api.v1.PartyByIDRequest
	99,  // 125: api.v1.TradingDataService.PositionsByParty:input_type -> api.v1.PositionsByPartyRequest
	59,  // 126: api.v1.TradingDataService.LastTrade:input_type -> api.v1.LastTradeRequest
	97,  // 127: api.v1.TradingDataService.TradesByMarket:input_type -> api.v1.TradesByMarketRequest
	69,  // 128: api.v1.TradingDataService.TradesByOrder:input_type -> api.v1.TradesByOrderRequest
	67,  // 129: api.v1.TradingDataService.TradesByParty:input_type -> api.v1.TradesByPartyRequest
	23,  // 130: api.v1.TradingDataService.GetProposals:input_type -> api.v1.GetProposalsRequest
	25,  // 131: api.v1.TradingDataService.GetProposalsByParty:input_type -> api.v1.GetProposalsByPartyRequest
	27,  // 132: api.v1.TradingDataService.GetVotesByParty:input_type -> api.v1.GetVotesByPartyRequest
	29,  // 133: api.v1.TradingDataService.GetNewMarketProposals:input_type -> api.v1.GetNewMarketProposalsRequest
	31,  // 134: api.v1.TradingDataService.GetUpdateMarketProposals:input_type -> api.v1.GetUpdateMarketProposalsRequest
	33,  // 135: api.v1.TradingDataService.GetNetworkParametersProposals:input_type -> api.v1.GetNetworkParametersProposalsRequest
	35,  // 136: api.v1.TradingDataService.GetNewAssetProposals:input_type -> api.v1.GetNewAssetProposalsRequest
	37,  // 137: api.v1.TradingDataService.GetProposalByID:input_type -> api.v1.GetProposalByIDRequest
	39,  // 138: api.v1.TradingDataService.GetProposalByReference:input_type -> api.v1.GetProposalByReferenceRequest
	41,  // 139: api.v1.TradingDataService.ObserveGovernance:input_type -> api.v1.ObserveGovernanceRequest
	43,  // 140: api.v1.TradingDataService.ObservePartyProposals:input_type -> api.v1.ObservePartyProposalsRequest
	47,  // 141: api.v1.TradingDataService.ObservePartyVotes:input_type -> api.v1.ObservePartyVotesRequest
	45,  // 142: api.v1.TradingDataService.ObserveProposalVotes:input_type -> api.v1.ObserveProposalVotesRequest
	128, // 143: api.v1.TradingDataService.ObserveEventBus:input_type -> api.v1.ObserveEventBusRequest
	130, // 144: api.v1.TradingDataService.Statistics:input_type -> api.v1.StatisticsRequest
	101, // 145: api.v1.TradingDataService.GetVegaTime:input_type -> api.v1.GetVegaTimeRequest
	71,  // 146: api.v1.TradingDataService.AccountsSubscribe:input_type -> api.v1.AccountsSubscribeRequest
	75,  // 147: api.v1.TradingDataService.CandlesSubscribe:input_type -> api.v1.CandlesSubscribeRequest
	49,  // 148: api.v1.TradingDataService.MarginLevelsSubscribe:input_type -> api.v1.MarginLevelsSubscribeRequest
	77,  // 149: api.v1.TradingDataService.MarketDepthSubscribe:input_type -> api.v1.MarketDepthSubscribeRequest
	79,  // 150: api.v1.TradingDataService.MarketDepthUpdatesSubscribe:input_type -> api.v1.MarketDepthUpdatesSubscribeRequest
	53,  // 151: api.v1.TradingDataService.MarketsDataSubscribe:input_type -> api.v1.MarketsDataSubscribeRequest
	73,  // 152: api.v1.TradingDataService.OrdersSubscribe:input_type -> api.v1.OrdersSubscribeRequest
	81,  // 153: api.v1.TradingDataService.PositionsSubscribe:input_type -> api.v1.PositionsSubscribeRequest
	74,  // 154: api.v1.TradingDataService.TradesSubscribe:input_type -> api.v1.TradesSubscribeRequest
	106, // 155: api.v1.TradingDataService.TransferResponsesSubscribe:input_type -> api.v1.TransferResponsesSubscribeRequest
	20,  // 156: api.v1.TradingDataService.GetNodeSignaturesAggregate:input_type -> api.v1.GetNodeSignaturesAggregateRequest
	18,  // 157: api.v1.TradingDataService.AssetByID:input_type -> api.v1.AssetByIDRequest
	16,  // 158: api.v1.TradingDataService.Assets:input_type -> api.v1.AssetsRequest
	124, // 159: api.v1.TradingDataService.EstimateFee:input_type -> api.v1.EstimateFeeRequest
	126, // 160: api.v1.TradingDataService.EstimateMargin:input_type -> api.v1.EstimateMarginRequest
	136, // 161: api.v1.TradingDataService.ERC20WithdrawalApproval:input_type -> api.v1.ERC20WithdrawalApprovalRequest
	134, // 162: api.v1.TradingDataService.Withdrawal:input_type -> api.v1.WithdrawalRequest
	132, // 163: api.v1.TradingDataService.Withdrawals:input_type -> api.v1.WithdrawalsRequest
	140, // 164: api.v1.TradingDataService.Deposit:input_type -> api.v1.DepositRequest
	138, // 165: api.v1.TradingDataService.Deposits:input_type -> api.v1.DepositsRequest
	142, // 166: api.v1.TradingDataService.NetworkParameters:input_type -> api.v1.NetworkParametersRequest
	144, // 167: api.v1.TradingDataService.LiquidityProvisions:input_type -> api.v1.LiquidityProvisionsRequest
	146, // 168: api.v1.TradingDataService.OracleSpec:input_type -> api.v1.OracleSpecRequest
	148, // 169: api.v1.TradingDataService.OracleSpecs:input_type -> api.v1.OracleSpecsRequest
	150, // 170: api.v1.TradingDataService.OracleDataBySpec:input_type -> api.v1.OracleDataBySpecRequest
	10,  // 171: api.v1.TradingService.PrepareSubmitOrder:output_type -> api.v1.PrepareSubmitOrderResponse
	11,  // 172: api.v1.TradingService.PrepareCancelOrder:output_type -> api.v1.PrepareCancelOrderResponse
	12,  // 173: api.v1.TradingService.PrepareAmendOrder:output_type -> api.v1.PrepareAmendOrderResponse
	9,   // 174: api.v1.TradingService.PrepareWithdraw:output_type -> api.v1.PrepareWithdrawResponse
	5,   // 175: api.v1.TradingService.SubmitTransaction:output_type -> api.v1.SubmitTransactionResponse
	7,   // 176: api.v1.TradingService.SubmitTransactionV2:output_type -> api.v1.SubmitTransactionV2Response
	115, // 177: api.v1.TradingService.PrepareProposalSubmission:output_type -> api.v1.PrepareProposalSubmissionResponse
	117, // 178: api.v1.TradingService.PrepareVoteSubmission:output_type -> api.v1.PrepareVoteSubmissionResponse
	3,   // 179: api.v1.TradingService.PropagateChainEvent:output_type -> api.v1.PropagateChainEventResponse
	119, // 180: api.v1.TradingService.PrepareLiquidityProvision:output_type -> api.v1.PrepareLiquidityProvisionResponse
	111, // 181: api.v1.TradingDataService.MarketAccounts:output_type -> api.v1.MarketAccountsResponse
	109, // 182: api.v1.TradingDataService.PartyAccounts:output_type -> api.v1.PartyAccountsResponse
	113, // 183: api.v1.TradingDataService.FeeInfrastructureAccounts:output_type -> api.v1.FeeInfrastructureAccountsResponse
	94,  // 184: api.v1.TradingDataService.Candles:output_type -> api.v1.CandlesResponse
	56,  // 185: api.v1.TradingDataService.MarketDataByID:output_type -> api.v1.MarketDataByIDResponse
	58,  // 186: api.v1.TradingDataService.MarketsData:output_type -> api.v1.MarketsDataResponse
	62,  // 187: api.v1.TradingDataService.MarketByID:output_type -> api.v1.MarketByIDResponse
	96,  // 188: api.v1.TradingDataService.MarketDepth:output_type -> api.v1.MarketDepthResponse
	92,  // 189: api.v1.TradingDataService.Markets:output_type -> api.v1.MarketsResponse
	88,  // 190: api.v1.TradingDataService.OrderByMarketAndID:output_type -> api.v1.OrderByMarketAndIDResponse
	90,  // 191: api.v1.TradingDataService.OrderByReference:output_type -> api.v1.OrderByReferenceResponse
	84,  // 192: api.v1.TradingDataService.OrdersByMarket:output_type -> api.v1.OrdersByMarketResponse
	86,  // 193: api.v1.TradingDataService.OrdersByParty:output_type -> api.v1.OrdersByPartyResponse
	121, // 194: api.v1.TradingDataService.OrderByID:output_type -> api.v1.OrderByIDResponse
	123, // 195: api.v1.TradingDataService.OrderVersionsByID:output_type -> api.v1.OrderVersionsByIDResponse
	52,  // 196: api.v1.TradingDataService.MarginLevels:output_type -> api.v1.MarginLevelsResponse
	66,  // 197: api.v1.TradingDataService.Parties:output_type -> api.v1.PartiesResponse
	64,  // 198: api.v1.TradingDataService.PartyByID:output_type -> api.v1.PartyByIDResponse
	100, // 199: api.v1.TradingDataService.PositionsByParty:output_type -> api.v1.PositionsByPartyResponse
	60,  // 200: api.v1.TradingDataService.LastTrade:output_type -> api.v1.LastTradeResponse
	98,  // 201: api.v1.TradingDataService.TradesByMarket:output_type -> api.v1.TradesByMarketResponse
	70,  // 202: api.v1.TradingDataService.TradesByOrder:output_type -> api.v1.TradesByOrderResponse
	68,  // 203: api.v1.TradingDataService.TradesByParty:output_type -> api.v1.TradesByPartyResponse
	24,  // 204: api.v1.TradingDataService.GetProposals:output_type -> api.v1.GetProposalsResponse
	26,  // 205: api.v1.TradingDataService.GetProposalsByParty:output_type -> api.v1.GetProposalsByPartyResponse
	28,  // 206: api.v1.TradingDataService.GetVotesByParty:output_type -> api.v1.GetVotesByPartyResponse
	30,  // 207: api.v1.TradingDataService.GetNewMarketProposals:output_type -> api.v1.GetNewMarketProposalsResponse
	32,  // 208: api.v1.TradingDataService.GetUpdateMarketProposals:output_type -> api.v1.GetUpdateMarketProposalsResponse
	34,  // 209: api.v1.TradingDataService.GetNetworkParametersProposals:output_type -> api.v1.GetNetworkParametersProposalsResponse
	36,  // 210: api.v1.TradingDataService.GetNewAssetProposals:output_type -> api.v1.GetNewAssetProposalsResponse
	38,  // 211: api.v1.TradingDataService.GetProposalByID:output_type -> api.v1.GetProposalByIDResponse
	40,  // 212: api.v1.TradingDataService.GetProposalByReference:output_type -> api.v1.GetProposalByReferenceResponse
	42,  // 213: api.v1.TradingDataService.ObserveGovernance:output_type -> api.v1.ObserveGovernanceResponse
	44,  // 214: api.v1.TradingDataService.ObservePartyProposals:output_type -> api.v1.ObservePartyProposalsResponse
	48,  // 215: api.v1.TradingDataService.ObservePartyVotes:output_type -> api.v1.ObservePartyVotesResponse
	46,  // 216: api.v1.TradingDataService.ObserveProposalVotes:output_type -> api.v1.ObserveProposalVotesResponse
	129, // 217: api.v1.TradingDataService.ObserveEventBus:output_type -> api.v1.ObserveEventBusResponse
	131, // 218: api.v1.TradingDataService.Statistics:output_type -> api.v1.StatisticsResponse
	102, // 219: api.v1.TradingDataService.GetVegaTime:output_type -> api.v1.GetVegaTimeResponse
	72,  // 220: api.v1.TradingDataService.AccountsSubscribe:output_type -> api.v1.AccountsSubscribeResponse
	76,  // 221: api.v1.TradingDataService.CandlesSubscribe:output_type -> api.v1.CandlesSubscribeResponse
	50,  // 222: api.v1.TradingDataService.MarginLevelsSubscribe:output_type -> api.v1.MarginLevelsSubscribeResponse
	78,  // 223: api.v1.TradingDataService.MarketDepthSubscribe:output_type -> api.v1.MarketDepthSubscribeResponse
	80,  // 224: api.v1.TradingDataService.MarketDepthUpdatesSubscribe:output_type -> api.v1.MarketDepthUpdatesSubscribeResponse
	54,  // 225: api.v1.TradingDataService.MarketsDataSubscribe:output_type -> api.v1.MarketsDataSubscribeResponse
	104, // 226: api.v1.TradingDataService.OrdersSubscribe:output_type -> api.v1.OrdersSubscribeResponse
	82,  // 227: api.v1.TradingDataService.PositionsSubscribe:output_type -> api.v1.PositionsSubscribeResponse
	105, // 228: api.v1.TradingDataService.TradesSubscribe:output_type -> api.v1.TradesSubscribeResponse
	107, // 229: api.v1.TradingDataService.TransferResponsesSubscribe:output_type -> api.v1.TransferResponsesSubscribeResponse
	21,  // 230: api.v1.TradingDataService.GetNodeSignaturesAggregate:output_type -> api.v1.GetNodeSignaturesAggregateResponse
	19,  // 231: api.v1.TradingDataService.AssetByID:output_type -> api.v1.AssetByIDResponse
	17,  // 232: api.v1.TradingDataService.Assets:output_type -> api.v1.AssetsResponse
	125, // 233: api.v1.TradingDataService.EstimateFee:output_type -> api.v1.EstimateFeeResponse
	127, // 234: api.v1.TradingDataService.EstimateMargin:output_type -> api.v1.EstimateMarginResponse
	137, // 235: api.v1.TradingDataService.ERC20WithdrawalApproval:output_type -> api.v1.ERC20WithdrawalApprovalResponse
	135, // 236: api.v1.TradingDataService.Withdrawal:output_type -> api.v1.WithdrawalResponse
	133, // 237: api.v1.TradingDataService.Withdrawals:output_type -> api.v1.WithdrawalsResponse
	141, // 238: api.v1.TradingDataService.Deposit:output_type -> api.v1.DepositResponse
	139, // 239: api.v1.TradingDataService.Deposits:output_type -> api.v1.DepositsResponse
	143, // 240: api.v1.TradingDataService.NetworkParameters:output_type -> api.v1.NetworkParametersResponse
	145, // 241: api.v1.TradingDataService.LiquidityProvisions:output_type -> api.v1.LiquidityProvisionsResponse
	147, // 242: api.v1.TradingDataService.OracleSpec:output_type -> api.v1.OracleSpecResponse
	149, // 243: api.v1.TradingDataService.OracleSpecs:output_type -> api.v1.OracleSpecsResponse
	151, // 244: api.v1.TradingDataService.OracleDataBySpec:output_type -> api.v1.OracleDataBySpecResponse
	171, // [171:245] is the sub-list for method output_type
	97,  // [97:171] is the sub-list for method input_type
	97,  // [97:97] is the sub-list for extension type_name
	97,  // [97:97] is the sub-list for extension extendee
	0,   // [0:97] is the sub-list for field type_name
}

func init() { file_api_trading_proto_init() }
func file_api_trading_proto_init() {
	if File_api_trading_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_trading_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagateChainEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagateChainEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareWithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSubmitOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareAmendOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSubmitOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareAmendOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSignaturesAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSignaturesAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalProposalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVotesByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVotesByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewMarketProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewMarketProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateMarketProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateMarketProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkParametersProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkParametersProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAssetProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAssetProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveGovernanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveGovernanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveProposalVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveProposalVotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyVotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdatesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdatesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByMarketAndIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByMarketAndIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVegaTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVegaTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponsesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponsesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfrastructureAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfrastructureAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareProposalSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareProposalSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareVoteSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareVoteSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareLiquidityProvisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareLiquidityProvisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderVersionsByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderVersionsByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMarginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMarginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventBusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventBusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20WithdrawalApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20WithdrawalApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDataBySpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_trading_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDataBySpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_trading_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   150,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_trading_proto_goTypes,
		DependencyIndexes: file_api_trading_proto_depIdxs,
		EnumInfos:         file_api_trading_proto_enumTypes,
		MessageInfos:      file_api_trading_proto_msgTypes,
	}.Build()
	File_api_trading_proto = out.File
	file_api_trading_proto_rawDesc = nil
	file_api_trading_proto_goTypes = nil
	file_api_trading_proto_depIdxs = nil
}
