// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet/v1/wallet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wallet_2fv1_2fwallet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wallet_2fv1_2fwallet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "commands/v1/commands.pb.h"
#include "commands/v1/validator_commands.pb.h"
#include "commands/v1/oracles.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wallet_2fv1_2fwallet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wallet_2fv1_2fwallet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wallet_2fv1_2fwallet_2eproto;
namespace vega {
namespace wallet {
namespace v1 {
class SubmitTransactionRequest;
class SubmitTransactionRequestDefaultTypeInternal;
extern SubmitTransactionRequestDefaultTypeInternal _SubmitTransactionRequest_default_instance_;
}  // namespace v1
}  // namespace wallet
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::wallet::v1::SubmitTransactionRequest* Arena::CreateMaybeMessage<::vega::wallet::v1::SubmitTransactionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {
namespace wallet {
namespace v1 {

// ===================================================================

class SubmitTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.wallet.v1.SubmitTransactionRequest) */ {
 public:
  inline SubmitTransactionRequest() : SubmitTransactionRequest(nullptr) {}
  virtual ~SubmitTransactionRequest();

  SubmitTransactionRequest(const SubmitTransactionRequest& from);
  SubmitTransactionRequest(SubmitTransactionRequest&& from) noexcept
    : SubmitTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionRequest& operator=(const SubmitTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionRequest& operator=(SubmitTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionRequest& default_instance();

  enum CommandCase {
    kOrderSubmission = 1001,
    kOrderCancellation = 1002,
    kOrderAmendment = 1003,
    kWithdrawSubmission = 1004,
    kProposalSubmission = 1005,
    kVoteSubmission = 1006,
    kLiquidityProvisionSubmission = 1007,
    kDelegateSubmission = 1008,
    kUndelegateAtEpochEndSubmission = 1009,
    kNodeRegistration = 2001,
    kNodeVote = 2002,
    kNodeSignature = 2003,
    kChainEvent = 2004,
    kOracleDataSubmission = 3001,
    COMMAND_NOT_SET = 0,
  };

  static inline const SubmitTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionRequest*>(
               &_SubmitTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmitTransactionRequest& a, SubmitTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionRequest* New() const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(nullptr);
  }

  SubmitTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionRequest& from);
  void MergeFrom(const SubmitTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.wallet.v1.SubmitTransactionRequest";
  }
  protected:
  explicit SubmitTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wallet_2fv1_2fwallet_2eproto);
    return ::descriptor_table_wallet_2fv1_2fwallet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kPropagateFieldNumber = 2,
    kOrderSubmissionFieldNumber = 1001,
    kOrderCancellationFieldNumber = 1002,
    kOrderAmendmentFieldNumber = 1003,
    kWithdrawSubmissionFieldNumber = 1004,
    kProposalSubmissionFieldNumber = 1005,
    kVoteSubmissionFieldNumber = 1006,
    kLiquidityProvisionSubmissionFieldNumber = 1007,
    kDelegateSubmissionFieldNumber = 1008,
    kUndelegateAtEpochEndSubmissionFieldNumber = 1009,
    kNodeRegistrationFieldNumber = 2001,
    kNodeVoteFieldNumber = 2002,
    kNodeSignatureFieldNumber = 2003,
    kChainEventFieldNumber = 2004,
    kOracleDataSubmissionFieldNumber = 3001,
  };
  // string pub_key = 1 [json_name = "pubKey"];
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // bool propagate = 2 [json_name = "propagate"];
  void clear_propagate();
  bool propagate() const;
  void set_propagate(bool value);
  private:
  bool _internal_propagate() const;
  void _internal_set_propagate(bool value);
  public:

  // .vega.commands.v1.OrderSubmission order_submission = 1001 [json_name = "orderSubmission"];
  bool has_order_submission() const;
  private:
  bool _internal_has_order_submission() const;
  public:
  void clear_order_submission();
  const ::vega::commands::v1::OrderSubmission& order_submission() const;
  ::vega::commands::v1::OrderSubmission* release_order_submission();
  ::vega::commands::v1::OrderSubmission* mutable_order_submission();
  void set_allocated_order_submission(::vega::commands::v1::OrderSubmission* order_submission);
  private:
  const ::vega::commands::v1::OrderSubmission& _internal_order_submission() const;
  ::vega::commands::v1::OrderSubmission* _internal_mutable_order_submission();
  public:
  void unsafe_arena_set_allocated_order_submission(
      ::vega::commands::v1::OrderSubmission* order_submission);
  ::vega::commands::v1::OrderSubmission* unsafe_arena_release_order_submission();

  // .vega.commands.v1.OrderCancellation order_cancellation = 1002 [json_name = "orderCancellation"];
  bool has_order_cancellation() const;
  private:
  bool _internal_has_order_cancellation() const;
  public:
  void clear_order_cancellation();
  const ::vega::commands::v1::OrderCancellation& order_cancellation() const;
  ::vega::commands::v1::OrderCancellation* release_order_cancellation();
  ::vega::commands::v1::OrderCancellation* mutable_order_cancellation();
  void set_allocated_order_cancellation(::vega::commands::v1::OrderCancellation* order_cancellation);
  private:
  const ::vega::commands::v1::OrderCancellation& _internal_order_cancellation() const;
  ::vega::commands::v1::OrderCancellation* _internal_mutable_order_cancellation();
  public:
  void unsafe_arena_set_allocated_order_cancellation(
      ::vega::commands::v1::OrderCancellation* order_cancellation);
  ::vega::commands::v1::OrderCancellation* unsafe_arena_release_order_cancellation();

  // .vega.commands.v1.OrderAmendment order_amendment = 1003 [json_name = "orderAmendment"];
  bool has_order_amendment() const;
  private:
  bool _internal_has_order_amendment() const;
  public:
  void clear_order_amendment();
  const ::vega::commands::v1::OrderAmendment& order_amendment() const;
  ::vega::commands::v1::OrderAmendment* release_order_amendment();
  ::vega::commands::v1::OrderAmendment* mutable_order_amendment();
  void set_allocated_order_amendment(::vega::commands::v1::OrderAmendment* order_amendment);
  private:
  const ::vega::commands::v1::OrderAmendment& _internal_order_amendment() const;
  ::vega::commands::v1::OrderAmendment* _internal_mutable_order_amendment();
  public:
  void unsafe_arena_set_allocated_order_amendment(
      ::vega::commands::v1::OrderAmendment* order_amendment);
  ::vega::commands::v1::OrderAmendment* unsafe_arena_release_order_amendment();

  // .vega.commands.v1.WithdrawSubmission withdraw_submission = 1004 [json_name = "withdrawSubmission"];
  bool has_withdraw_submission() const;
  private:
  bool _internal_has_withdraw_submission() const;
  public:
  void clear_withdraw_submission();
  const ::vega::commands::v1::WithdrawSubmission& withdraw_submission() const;
  ::vega::commands::v1::WithdrawSubmission* release_withdraw_submission();
  ::vega::commands::v1::WithdrawSubmission* mutable_withdraw_submission();
  void set_allocated_withdraw_submission(::vega::commands::v1::WithdrawSubmission* withdraw_submission);
  private:
  const ::vega::commands::v1::WithdrawSubmission& _internal_withdraw_submission() const;
  ::vega::commands::v1::WithdrawSubmission* _internal_mutable_withdraw_submission();
  public:
  void unsafe_arena_set_allocated_withdraw_submission(
      ::vega::commands::v1::WithdrawSubmission* withdraw_submission);
  ::vega::commands::v1::WithdrawSubmission* unsafe_arena_release_withdraw_submission();

  // .vega.commands.v1.ProposalSubmission proposal_submission = 1005 [json_name = "proposalSubmission"];
  bool has_proposal_submission() const;
  private:
  bool _internal_has_proposal_submission() const;
  public:
  void clear_proposal_submission();
  const ::vega::commands::v1::ProposalSubmission& proposal_submission() const;
  ::vega::commands::v1::ProposalSubmission* release_proposal_submission();
  ::vega::commands::v1::ProposalSubmission* mutable_proposal_submission();
  void set_allocated_proposal_submission(::vega::commands::v1::ProposalSubmission* proposal_submission);
  private:
  const ::vega::commands::v1::ProposalSubmission& _internal_proposal_submission() const;
  ::vega::commands::v1::ProposalSubmission* _internal_mutable_proposal_submission();
  public:
  void unsafe_arena_set_allocated_proposal_submission(
      ::vega::commands::v1::ProposalSubmission* proposal_submission);
  ::vega::commands::v1::ProposalSubmission* unsafe_arena_release_proposal_submission();

  // .vega.commands.v1.VoteSubmission vote_submission = 1006 [json_name = "voteSubmission"];
  bool has_vote_submission() const;
  private:
  bool _internal_has_vote_submission() const;
  public:
  void clear_vote_submission();
  const ::vega::commands::v1::VoteSubmission& vote_submission() const;
  ::vega::commands::v1::VoteSubmission* release_vote_submission();
  ::vega::commands::v1::VoteSubmission* mutable_vote_submission();
  void set_allocated_vote_submission(::vega::commands::v1::VoteSubmission* vote_submission);
  private:
  const ::vega::commands::v1::VoteSubmission& _internal_vote_submission() const;
  ::vega::commands::v1::VoteSubmission* _internal_mutable_vote_submission();
  public:
  void unsafe_arena_set_allocated_vote_submission(
      ::vega::commands::v1::VoteSubmission* vote_submission);
  ::vega::commands::v1::VoteSubmission* unsafe_arena_release_vote_submission();

  // .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 1007 [json_name = "liquidityProvisionSubmission"];
  bool has_liquidity_provision_submission() const;
  private:
  bool _internal_has_liquidity_provision_submission() const;
  public:
  void clear_liquidity_provision_submission();
  const ::vega::commands::v1::LiquidityProvisionSubmission& liquidity_provision_submission() const;
  ::vega::commands::v1::LiquidityProvisionSubmission* release_liquidity_provision_submission();
  ::vega::commands::v1::LiquidityProvisionSubmission* mutable_liquidity_provision_submission();
  void set_allocated_liquidity_provision_submission(::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission);
  private:
  const ::vega::commands::v1::LiquidityProvisionSubmission& _internal_liquidity_provision_submission() const;
  ::vega::commands::v1::LiquidityProvisionSubmission* _internal_mutable_liquidity_provision_submission();
  public:
  void unsafe_arena_set_allocated_liquidity_provision_submission(
      ::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission);
  ::vega::commands::v1::LiquidityProvisionSubmission* unsafe_arena_release_liquidity_provision_submission();

  // .vega.commands.v1.DelegateSubmission delegate_submission = 1008 [json_name = "delegateSubmission"];
  bool has_delegate_submission() const;
  private:
  bool _internal_has_delegate_submission() const;
  public:
  void clear_delegate_submission();
  const ::vega::commands::v1::DelegateSubmission& delegate_submission() const;
  ::vega::commands::v1::DelegateSubmission* release_delegate_submission();
  ::vega::commands::v1::DelegateSubmission* mutable_delegate_submission();
  void set_allocated_delegate_submission(::vega::commands::v1::DelegateSubmission* delegate_submission);
  private:
  const ::vega::commands::v1::DelegateSubmission& _internal_delegate_submission() const;
  ::vega::commands::v1::DelegateSubmission* _internal_mutable_delegate_submission();
  public:
  void unsafe_arena_set_allocated_delegate_submission(
      ::vega::commands::v1::DelegateSubmission* delegate_submission);
  ::vega::commands::v1::DelegateSubmission* unsafe_arena_release_delegate_submission();

  // .vega.commands.v1.UndelegateAtEpochEndSubmission undelegate_at_epoch_end_submission = 1009 [json_name = "undelegateAtEpochEndSubmission"];
  bool has_undelegate_at_epoch_end_submission() const;
  private:
  bool _internal_has_undelegate_at_epoch_end_submission() const;
  public:
  void clear_undelegate_at_epoch_end_submission();
  const ::vega::commands::v1::UndelegateAtEpochEndSubmission& undelegate_at_epoch_end_submission() const;
  ::vega::commands::v1::UndelegateAtEpochEndSubmission* release_undelegate_at_epoch_end_submission();
  ::vega::commands::v1::UndelegateAtEpochEndSubmission* mutable_undelegate_at_epoch_end_submission();
  void set_allocated_undelegate_at_epoch_end_submission(::vega::commands::v1::UndelegateAtEpochEndSubmission* undelegate_at_epoch_end_submission);
  private:
  const ::vega::commands::v1::UndelegateAtEpochEndSubmission& _internal_undelegate_at_epoch_end_submission() const;
  ::vega::commands::v1::UndelegateAtEpochEndSubmission* _internal_mutable_undelegate_at_epoch_end_submission();
  public:
  void unsafe_arena_set_allocated_undelegate_at_epoch_end_submission(
      ::vega::commands::v1::UndelegateAtEpochEndSubmission* undelegate_at_epoch_end_submission);
  ::vega::commands::v1::UndelegateAtEpochEndSubmission* unsafe_arena_release_undelegate_at_epoch_end_submission();

  // .vega.commands.v1.NodeRegistration node_registration = 2001 [json_name = "nodeRegistration"];
  bool has_node_registration() const;
  private:
  bool _internal_has_node_registration() const;
  public:
  void clear_node_registration();
  const ::vega::commands::v1::NodeRegistration& node_registration() const;
  ::vega::commands::v1::NodeRegistration* release_node_registration();
  ::vega::commands::v1::NodeRegistration* mutable_node_registration();
  void set_allocated_node_registration(::vega::commands::v1::NodeRegistration* node_registration);
  private:
  const ::vega::commands::v1::NodeRegistration& _internal_node_registration() const;
  ::vega::commands::v1::NodeRegistration* _internal_mutable_node_registration();
  public:
  void unsafe_arena_set_allocated_node_registration(
      ::vega::commands::v1::NodeRegistration* node_registration);
  ::vega::commands::v1::NodeRegistration* unsafe_arena_release_node_registration();

  // .vega.commands.v1.NodeVote node_vote = 2002 [json_name = "nodeVote"];
  bool has_node_vote() const;
  private:
  bool _internal_has_node_vote() const;
  public:
  void clear_node_vote();
  const ::vega::commands::v1::NodeVote& node_vote() const;
  ::vega::commands::v1::NodeVote* release_node_vote();
  ::vega::commands::v1::NodeVote* mutable_node_vote();
  void set_allocated_node_vote(::vega::commands::v1::NodeVote* node_vote);
  private:
  const ::vega::commands::v1::NodeVote& _internal_node_vote() const;
  ::vega::commands::v1::NodeVote* _internal_mutable_node_vote();
  public:
  void unsafe_arena_set_allocated_node_vote(
      ::vega::commands::v1::NodeVote* node_vote);
  ::vega::commands::v1::NodeVote* unsafe_arena_release_node_vote();

  // .vega.commands.v1.NodeSignature node_signature = 2003 [json_name = "nodeSignature"];
  bool has_node_signature() const;
  private:
  bool _internal_has_node_signature() const;
  public:
  void clear_node_signature();
  const ::vega::commands::v1::NodeSignature& node_signature() const;
  ::vega::commands::v1::NodeSignature* release_node_signature();
  ::vega::commands::v1::NodeSignature* mutable_node_signature();
  void set_allocated_node_signature(::vega::commands::v1::NodeSignature* node_signature);
  private:
  const ::vega::commands::v1::NodeSignature& _internal_node_signature() const;
  ::vega::commands::v1::NodeSignature* _internal_mutable_node_signature();
  public:
  void unsafe_arena_set_allocated_node_signature(
      ::vega::commands::v1::NodeSignature* node_signature);
  ::vega::commands::v1::NodeSignature* unsafe_arena_release_node_signature();

  // .vega.commands.v1.ChainEvent chain_event = 2004 [json_name = "chainEvent"];
  bool has_chain_event() const;
  private:
  bool _internal_has_chain_event() const;
  public:
  void clear_chain_event();
  const ::vega::commands::v1::ChainEvent& chain_event() const;
  ::vega::commands::v1::ChainEvent* release_chain_event();
  ::vega::commands::v1::ChainEvent* mutable_chain_event();
  void set_allocated_chain_event(::vega::commands::v1::ChainEvent* chain_event);
  private:
  const ::vega::commands::v1::ChainEvent& _internal_chain_event() const;
  ::vega::commands::v1::ChainEvent* _internal_mutable_chain_event();
  public:
  void unsafe_arena_set_allocated_chain_event(
      ::vega::commands::v1::ChainEvent* chain_event);
  ::vega::commands::v1::ChainEvent* unsafe_arena_release_chain_event();

  // .vega.commands.v1.OracleDataSubmission oracle_data_submission = 3001 [json_name = "oracleDataSubmission"];
  bool has_oracle_data_submission() const;
  private:
  bool _internal_has_oracle_data_submission() const;
  public:
  void clear_oracle_data_submission();
  const ::vega::commands::v1::OracleDataSubmission& oracle_data_submission() const;
  ::vega::commands::v1::OracleDataSubmission* release_oracle_data_submission();
  ::vega::commands::v1::OracleDataSubmission* mutable_oracle_data_submission();
  void set_allocated_oracle_data_submission(::vega::commands::v1::OracleDataSubmission* oracle_data_submission);
  private:
  const ::vega::commands::v1::OracleDataSubmission& _internal_oracle_data_submission() const;
  ::vega::commands::v1::OracleDataSubmission* _internal_mutable_oracle_data_submission();
  public:
  void unsafe_arena_set_allocated_oracle_data_submission(
      ::vega::commands::v1::OracleDataSubmission* oracle_data_submission);
  ::vega::commands::v1::OracleDataSubmission* unsafe_arena_release_oracle_data_submission();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:vega.wallet.v1.SubmitTransactionRequest)
 private:
  class _Internal;
  void set_has_order_submission();
  void set_has_order_cancellation();
  void set_has_order_amendment();
  void set_has_withdraw_submission();
  void set_has_proposal_submission();
  void set_has_vote_submission();
  void set_has_liquidity_provision_submission();
  void set_has_delegate_submission();
  void set_has_undelegate_at_epoch_end_submission();
  void set_has_node_registration();
  void set_has_node_vote();
  void set_has_node_signature();
  void set_has_chain_event();
  void set_has_oracle_data_submission();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  bool propagate_;
  union CommandUnion {
    CommandUnion() {}
    ::vega::commands::v1::OrderSubmission* order_submission_;
    ::vega::commands::v1::OrderCancellation* order_cancellation_;
    ::vega::commands::v1::OrderAmendment* order_amendment_;
    ::vega::commands::v1::WithdrawSubmission* withdraw_submission_;
    ::vega::commands::v1::ProposalSubmission* proposal_submission_;
    ::vega::commands::v1::VoteSubmission* vote_submission_;
    ::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission_;
    ::vega::commands::v1::DelegateSubmission* delegate_submission_;
    ::vega::commands::v1::UndelegateAtEpochEndSubmission* undelegate_at_epoch_end_submission_;
    ::vega::commands::v1::NodeRegistration* node_registration_;
    ::vega::commands::v1::NodeVote* node_vote_;
    ::vega::commands::v1::NodeSignature* node_signature_;
    ::vega::commands::v1::ChainEvent* chain_event_;
    ::vega::commands::v1::OracleDataSubmission* oracle_data_submission_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_wallet_2fv1_2fwallet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitTransactionRequest

// string pub_key = 1 [json_name = "pubKey"];
inline void SubmitTransactionRequest::clear_pub_key() {
  pub_key_.ClearToEmpty();
}
inline const std::string& SubmitTransactionRequest::pub_key() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.pub_key)
  return _internal_pub_key();
}
inline void SubmitTransactionRequest::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:vega.wallet.v1.SubmitTransactionRequest.pub_key)
}
inline std::string* SubmitTransactionRequest::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& SubmitTransactionRequest::_internal_pub_key() const {
  return pub_key_.Get();
}
inline void SubmitTransactionRequest::_internal_set_pub_key(const std::string& value) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubmitTransactionRequest::set_pub_key(std::string&& value) {

  pub_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.wallet.v1.SubmitTransactionRequest.pub_key)
}
inline void SubmitTransactionRequest::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.wallet.v1.SubmitTransactionRequest.pub_key)
}
inline void SubmitTransactionRequest::set_pub_key(const char* value,
    size_t size) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.wallet.v1.SubmitTransactionRequest.pub_key)
}
inline std::string* SubmitTransactionRequest::_internal_mutable_pub_key() {

  return pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubmitTransactionRequest::release_pub_key() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.pub_key)
  return pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitTransactionRequest::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {

  } else {

  }
  pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.wallet.v1.SubmitTransactionRequest.pub_key)
}

// bool propagate = 2 [json_name = "propagate"];
inline void SubmitTransactionRequest::clear_propagate() {
  propagate_ = false;
}
inline bool SubmitTransactionRequest::_internal_propagate() const {
  return propagate_;
}
inline bool SubmitTransactionRequest::propagate() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.propagate)
  return _internal_propagate();
}
inline void SubmitTransactionRequest::_internal_set_propagate(bool value) {

  propagate_ = value;
}
inline void SubmitTransactionRequest::set_propagate(bool value) {
  _internal_set_propagate(value);
  // @@protoc_insertion_point(field_set:vega.wallet.v1.SubmitTransactionRequest.propagate)
}

// .vega.commands.v1.OrderSubmission order_submission = 1001 [json_name = "orderSubmission"];
inline bool SubmitTransactionRequest::_internal_has_order_submission() const {
  return command_case() == kOrderSubmission;
}
inline bool SubmitTransactionRequest::has_order_submission() const {
  return _internal_has_order_submission();
}
inline void SubmitTransactionRequest::set_has_order_submission() {
  _oneof_case_[0] = kOrderSubmission;
}
inline ::vega::commands::v1::OrderSubmission* SubmitTransactionRequest::release_order_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.order_submission)
  if (_internal_has_order_submission()) {
    clear_has_command();
      ::vega::commands::v1::OrderSubmission* temp = command_.order_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.order_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::OrderSubmission& SubmitTransactionRequest::_internal_order_submission() const {
  return _internal_has_order_submission()
      ? *command_.order_submission_
      : reinterpret_cast< ::vega::commands::v1::OrderSubmission&>(::vega::commands::v1::_OrderSubmission_default_instance_);
}
inline const ::vega::commands::v1::OrderSubmission& SubmitTransactionRequest::order_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.order_submission)
  return _internal_order_submission();
}
inline ::vega::commands::v1::OrderSubmission* SubmitTransactionRequest::unsafe_arena_release_order_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.order_submission)
  if (_internal_has_order_submission()) {
    clear_has_command();
    ::vega::commands::v1::OrderSubmission* temp = command_.order_submission_;
    command_.order_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_order_submission(::vega::commands::v1::OrderSubmission* order_submission) {
  clear_command();
  if (order_submission) {
    set_has_order_submission();
    command_.order_submission_ = order_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.order_submission)
}
inline ::vega::commands::v1::OrderSubmission* SubmitTransactionRequest::_internal_mutable_order_submission() {
  if (!_internal_has_order_submission()) {
    clear_command();
    set_has_order_submission();
    command_.order_submission_ = CreateMaybeMessage< ::vega::commands::v1::OrderSubmission >(GetArena());
  }
  return command_.order_submission_;
}
inline ::vega::commands::v1::OrderSubmission* SubmitTransactionRequest::mutable_order_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.order_submission)
  return _internal_mutable_order_submission();
}

// .vega.commands.v1.OrderCancellation order_cancellation = 1002 [json_name = "orderCancellation"];
inline bool SubmitTransactionRequest::_internal_has_order_cancellation() const {
  return command_case() == kOrderCancellation;
}
inline bool SubmitTransactionRequest::has_order_cancellation() const {
  return _internal_has_order_cancellation();
}
inline void SubmitTransactionRequest::set_has_order_cancellation() {
  _oneof_case_[0] = kOrderCancellation;
}
inline ::vega::commands::v1::OrderCancellation* SubmitTransactionRequest::release_order_cancellation() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.order_cancellation)
  if (_internal_has_order_cancellation()) {
    clear_has_command();
      ::vega::commands::v1::OrderCancellation* temp = command_.order_cancellation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.order_cancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::OrderCancellation& SubmitTransactionRequest::_internal_order_cancellation() const {
  return _internal_has_order_cancellation()
      ? *command_.order_cancellation_
      : reinterpret_cast< ::vega::commands::v1::OrderCancellation&>(::vega::commands::v1::_OrderCancellation_default_instance_);
}
inline const ::vega::commands::v1::OrderCancellation& SubmitTransactionRequest::order_cancellation() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.order_cancellation)
  return _internal_order_cancellation();
}
inline ::vega::commands::v1::OrderCancellation* SubmitTransactionRequest::unsafe_arena_release_order_cancellation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.order_cancellation)
  if (_internal_has_order_cancellation()) {
    clear_has_command();
    ::vega::commands::v1::OrderCancellation* temp = command_.order_cancellation_;
    command_.order_cancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_order_cancellation(::vega::commands::v1::OrderCancellation* order_cancellation) {
  clear_command();
  if (order_cancellation) {
    set_has_order_cancellation();
    command_.order_cancellation_ = order_cancellation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.order_cancellation)
}
inline ::vega::commands::v1::OrderCancellation* SubmitTransactionRequest::_internal_mutable_order_cancellation() {
  if (!_internal_has_order_cancellation()) {
    clear_command();
    set_has_order_cancellation();
    command_.order_cancellation_ = CreateMaybeMessage< ::vega::commands::v1::OrderCancellation >(GetArena());
  }
  return command_.order_cancellation_;
}
inline ::vega::commands::v1::OrderCancellation* SubmitTransactionRequest::mutable_order_cancellation() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.order_cancellation)
  return _internal_mutable_order_cancellation();
}

// .vega.commands.v1.OrderAmendment order_amendment = 1003 [json_name = "orderAmendment"];
inline bool SubmitTransactionRequest::_internal_has_order_amendment() const {
  return command_case() == kOrderAmendment;
}
inline bool SubmitTransactionRequest::has_order_amendment() const {
  return _internal_has_order_amendment();
}
inline void SubmitTransactionRequest::set_has_order_amendment() {
  _oneof_case_[0] = kOrderAmendment;
}
inline ::vega::commands::v1::OrderAmendment* SubmitTransactionRequest::release_order_amendment() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.order_amendment)
  if (_internal_has_order_amendment()) {
    clear_has_command();
      ::vega::commands::v1::OrderAmendment* temp = command_.order_amendment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.order_amendment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::OrderAmendment& SubmitTransactionRequest::_internal_order_amendment() const {
  return _internal_has_order_amendment()
      ? *command_.order_amendment_
      : reinterpret_cast< ::vega::commands::v1::OrderAmendment&>(::vega::commands::v1::_OrderAmendment_default_instance_);
}
inline const ::vega::commands::v1::OrderAmendment& SubmitTransactionRequest::order_amendment() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.order_amendment)
  return _internal_order_amendment();
}
inline ::vega::commands::v1::OrderAmendment* SubmitTransactionRequest::unsafe_arena_release_order_amendment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.order_amendment)
  if (_internal_has_order_amendment()) {
    clear_has_command();
    ::vega::commands::v1::OrderAmendment* temp = command_.order_amendment_;
    command_.order_amendment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_order_amendment(::vega::commands::v1::OrderAmendment* order_amendment) {
  clear_command();
  if (order_amendment) {
    set_has_order_amendment();
    command_.order_amendment_ = order_amendment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.order_amendment)
}
inline ::vega::commands::v1::OrderAmendment* SubmitTransactionRequest::_internal_mutable_order_amendment() {
  if (!_internal_has_order_amendment()) {
    clear_command();
    set_has_order_amendment();
    command_.order_amendment_ = CreateMaybeMessage< ::vega::commands::v1::OrderAmendment >(GetArena());
  }
  return command_.order_amendment_;
}
inline ::vega::commands::v1::OrderAmendment* SubmitTransactionRequest::mutable_order_amendment() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.order_amendment)
  return _internal_mutable_order_amendment();
}

// .vega.commands.v1.WithdrawSubmission withdraw_submission = 1004 [json_name = "withdrawSubmission"];
inline bool SubmitTransactionRequest::_internal_has_withdraw_submission() const {
  return command_case() == kWithdrawSubmission;
}
inline bool SubmitTransactionRequest::has_withdraw_submission() const {
  return _internal_has_withdraw_submission();
}
inline void SubmitTransactionRequest::set_has_withdraw_submission() {
  _oneof_case_[0] = kWithdrawSubmission;
}
inline ::vega::commands::v1::WithdrawSubmission* SubmitTransactionRequest::release_withdraw_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.withdraw_submission)
  if (_internal_has_withdraw_submission()) {
    clear_has_command();
      ::vega::commands::v1::WithdrawSubmission* temp = command_.withdraw_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.withdraw_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::WithdrawSubmission& SubmitTransactionRequest::_internal_withdraw_submission() const {
  return _internal_has_withdraw_submission()
      ? *command_.withdraw_submission_
      : reinterpret_cast< ::vega::commands::v1::WithdrawSubmission&>(::vega::commands::v1::_WithdrawSubmission_default_instance_);
}
inline const ::vega::commands::v1::WithdrawSubmission& SubmitTransactionRequest::withdraw_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.withdraw_submission)
  return _internal_withdraw_submission();
}
inline ::vega::commands::v1::WithdrawSubmission* SubmitTransactionRequest::unsafe_arena_release_withdraw_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.withdraw_submission)
  if (_internal_has_withdraw_submission()) {
    clear_has_command();
    ::vega::commands::v1::WithdrawSubmission* temp = command_.withdraw_submission_;
    command_.withdraw_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_withdraw_submission(::vega::commands::v1::WithdrawSubmission* withdraw_submission) {
  clear_command();
  if (withdraw_submission) {
    set_has_withdraw_submission();
    command_.withdraw_submission_ = withdraw_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.withdraw_submission)
}
inline ::vega::commands::v1::WithdrawSubmission* SubmitTransactionRequest::_internal_mutable_withdraw_submission() {
  if (!_internal_has_withdraw_submission()) {
    clear_command();
    set_has_withdraw_submission();
    command_.withdraw_submission_ = CreateMaybeMessage< ::vega::commands::v1::WithdrawSubmission >(GetArena());
  }
  return command_.withdraw_submission_;
}
inline ::vega::commands::v1::WithdrawSubmission* SubmitTransactionRequest::mutable_withdraw_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.withdraw_submission)
  return _internal_mutable_withdraw_submission();
}

// .vega.commands.v1.ProposalSubmission proposal_submission = 1005 [json_name = "proposalSubmission"];
inline bool SubmitTransactionRequest::_internal_has_proposal_submission() const {
  return command_case() == kProposalSubmission;
}
inline bool SubmitTransactionRequest::has_proposal_submission() const {
  return _internal_has_proposal_submission();
}
inline void SubmitTransactionRequest::set_has_proposal_submission() {
  _oneof_case_[0] = kProposalSubmission;
}
inline ::vega::commands::v1::ProposalSubmission* SubmitTransactionRequest::release_proposal_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.proposal_submission)
  if (_internal_has_proposal_submission()) {
    clear_has_command();
      ::vega::commands::v1::ProposalSubmission* temp = command_.proposal_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.proposal_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::ProposalSubmission& SubmitTransactionRequest::_internal_proposal_submission() const {
  return _internal_has_proposal_submission()
      ? *command_.proposal_submission_
      : reinterpret_cast< ::vega::commands::v1::ProposalSubmission&>(::vega::commands::v1::_ProposalSubmission_default_instance_);
}
inline const ::vega::commands::v1::ProposalSubmission& SubmitTransactionRequest::proposal_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.proposal_submission)
  return _internal_proposal_submission();
}
inline ::vega::commands::v1::ProposalSubmission* SubmitTransactionRequest::unsafe_arena_release_proposal_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.proposal_submission)
  if (_internal_has_proposal_submission()) {
    clear_has_command();
    ::vega::commands::v1::ProposalSubmission* temp = command_.proposal_submission_;
    command_.proposal_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_proposal_submission(::vega::commands::v1::ProposalSubmission* proposal_submission) {
  clear_command();
  if (proposal_submission) {
    set_has_proposal_submission();
    command_.proposal_submission_ = proposal_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.proposal_submission)
}
inline ::vega::commands::v1::ProposalSubmission* SubmitTransactionRequest::_internal_mutable_proposal_submission() {
  if (!_internal_has_proposal_submission()) {
    clear_command();
    set_has_proposal_submission();
    command_.proposal_submission_ = CreateMaybeMessage< ::vega::commands::v1::ProposalSubmission >(GetArena());
  }
  return command_.proposal_submission_;
}
inline ::vega::commands::v1::ProposalSubmission* SubmitTransactionRequest::mutable_proposal_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.proposal_submission)
  return _internal_mutable_proposal_submission();
}

// .vega.commands.v1.VoteSubmission vote_submission = 1006 [json_name = "voteSubmission"];
inline bool SubmitTransactionRequest::_internal_has_vote_submission() const {
  return command_case() == kVoteSubmission;
}
inline bool SubmitTransactionRequest::has_vote_submission() const {
  return _internal_has_vote_submission();
}
inline void SubmitTransactionRequest::set_has_vote_submission() {
  _oneof_case_[0] = kVoteSubmission;
}
inline ::vega::commands::v1::VoteSubmission* SubmitTransactionRequest::release_vote_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.vote_submission)
  if (_internal_has_vote_submission()) {
    clear_has_command();
      ::vega::commands::v1::VoteSubmission* temp = command_.vote_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.vote_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::VoteSubmission& SubmitTransactionRequest::_internal_vote_submission() const {
  return _internal_has_vote_submission()
      ? *command_.vote_submission_
      : reinterpret_cast< ::vega::commands::v1::VoteSubmission&>(::vega::commands::v1::_VoteSubmission_default_instance_);
}
inline const ::vega::commands::v1::VoteSubmission& SubmitTransactionRequest::vote_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.vote_submission)
  return _internal_vote_submission();
}
inline ::vega::commands::v1::VoteSubmission* SubmitTransactionRequest::unsafe_arena_release_vote_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.vote_submission)
  if (_internal_has_vote_submission()) {
    clear_has_command();
    ::vega::commands::v1::VoteSubmission* temp = command_.vote_submission_;
    command_.vote_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_vote_submission(::vega::commands::v1::VoteSubmission* vote_submission) {
  clear_command();
  if (vote_submission) {
    set_has_vote_submission();
    command_.vote_submission_ = vote_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.vote_submission)
}
inline ::vega::commands::v1::VoteSubmission* SubmitTransactionRequest::_internal_mutable_vote_submission() {
  if (!_internal_has_vote_submission()) {
    clear_command();
    set_has_vote_submission();
    command_.vote_submission_ = CreateMaybeMessage< ::vega::commands::v1::VoteSubmission >(GetArena());
  }
  return command_.vote_submission_;
}
inline ::vega::commands::v1::VoteSubmission* SubmitTransactionRequest::mutable_vote_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.vote_submission)
  return _internal_mutable_vote_submission();
}

// .vega.commands.v1.LiquidityProvisionSubmission liquidity_provision_submission = 1007 [json_name = "liquidityProvisionSubmission"];
inline bool SubmitTransactionRequest::_internal_has_liquidity_provision_submission() const {
  return command_case() == kLiquidityProvisionSubmission;
}
inline bool SubmitTransactionRequest::has_liquidity_provision_submission() const {
  return _internal_has_liquidity_provision_submission();
}
inline void SubmitTransactionRequest::set_has_liquidity_provision_submission() {
  _oneof_case_[0] = kLiquidityProvisionSubmission;
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* SubmitTransactionRequest::release_liquidity_provision_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.liquidity_provision_submission)
  if (_internal_has_liquidity_provision_submission()) {
    clear_has_command();
      ::vega::commands::v1::LiquidityProvisionSubmission* temp = command_.liquidity_provision_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.liquidity_provision_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::LiquidityProvisionSubmission& SubmitTransactionRequest::_internal_liquidity_provision_submission() const {
  return _internal_has_liquidity_provision_submission()
      ? *command_.liquidity_provision_submission_
      : reinterpret_cast< ::vega::commands::v1::LiquidityProvisionSubmission&>(::vega::commands::v1::_LiquidityProvisionSubmission_default_instance_);
}
inline const ::vega::commands::v1::LiquidityProvisionSubmission& SubmitTransactionRequest::liquidity_provision_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.liquidity_provision_submission)
  return _internal_liquidity_provision_submission();
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* SubmitTransactionRequest::unsafe_arena_release_liquidity_provision_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.liquidity_provision_submission)
  if (_internal_has_liquidity_provision_submission()) {
    clear_has_command();
    ::vega::commands::v1::LiquidityProvisionSubmission* temp = command_.liquidity_provision_submission_;
    command_.liquidity_provision_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_liquidity_provision_submission(::vega::commands::v1::LiquidityProvisionSubmission* liquidity_provision_submission) {
  clear_command();
  if (liquidity_provision_submission) {
    set_has_liquidity_provision_submission();
    command_.liquidity_provision_submission_ = liquidity_provision_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.liquidity_provision_submission)
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* SubmitTransactionRequest::_internal_mutable_liquidity_provision_submission() {
  if (!_internal_has_liquidity_provision_submission()) {
    clear_command();
    set_has_liquidity_provision_submission();
    command_.liquidity_provision_submission_ = CreateMaybeMessage< ::vega::commands::v1::LiquidityProvisionSubmission >(GetArena());
  }
  return command_.liquidity_provision_submission_;
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* SubmitTransactionRequest::mutable_liquidity_provision_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.liquidity_provision_submission)
  return _internal_mutable_liquidity_provision_submission();
}

// .vega.commands.v1.DelegateSubmission delegate_submission = 1008 [json_name = "delegateSubmission"];
inline bool SubmitTransactionRequest::_internal_has_delegate_submission() const {
  return command_case() == kDelegateSubmission;
}
inline bool SubmitTransactionRequest::has_delegate_submission() const {
  return _internal_has_delegate_submission();
}
inline void SubmitTransactionRequest::set_has_delegate_submission() {
  _oneof_case_[0] = kDelegateSubmission;
}
inline ::vega::commands::v1::DelegateSubmission* SubmitTransactionRequest::release_delegate_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.delegate_submission)
  if (_internal_has_delegate_submission()) {
    clear_has_command();
      ::vega::commands::v1::DelegateSubmission* temp = command_.delegate_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.delegate_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::DelegateSubmission& SubmitTransactionRequest::_internal_delegate_submission() const {
  return _internal_has_delegate_submission()
      ? *command_.delegate_submission_
      : reinterpret_cast< ::vega::commands::v1::DelegateSubmission&>(::vega::commands::v1::_DelegateSubmission_default_instance_);
}
inline const ::vega::commands::v1::DelegateSubmission& SubmitTransactionRequest::delegate_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.delegate_submission)
  return _internal_delegate_submission();
}
inline ::vega::commands::v1::DelegateSubmission* SubmitTransactionRequest::unsafe_arena_release_delegate_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.delegate_submission)
  if (_internal_has_delegate_submission()) {
    clear_has_command();
    ::vega::commands::v1::DelegateSubmission* temp = command_.delegate_submission_;
    command_.delegate_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_delegate_submission(::vega::commands::v1::DelegateSubmission* delegate_submission) {
  clear_command();
  if (delegate_submission) {
    set_has_delegate_submission();
    command_.delegate_submission_ = delegate_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.delegate_submission)
}
inline ::vega::commands::v1::DelegateSubmission* SubmitTransactionRequest::_internal_mutable_delegate_submission() {
  if (!_internal_has_delegate_submission()) {
    clear_command();
    set_has_delegate_submission();
    command_.delegate_submission_ = CreateMaybeMessage< ::vega::commands::v1::DelegateSubmission >(GetArena());
  }
  return command_.delegate_submission_;
}
inline ::vega::commands::v1::DelegateSubmission* SubmitTransactionRequest::mutable_delegate_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.delegate_submission)
  return _internal_mutable_delegate_submission();
}

// .vega.commands.v1.UndelegateAtEpochEndSubmission undelegate_at_epoch_end_submission = 1009 [json_name = "undelegateAtEpochEndSubmission"];
inline bool SubmitTransactionRequest::_internal_has_undelegate_at_epoch_end_submission() const {
  return command_case() == kUndelegateAtEpochEndSubmission;
}
inline bool SubmitTransactionRequest::has_undelegate_at_epoch_end_submission() const {
  return _internal_has_undelegate_at_epoch_end_submission();
}
inline void SubmitTransactionRequest::set_has_undelegate_at_epoch_end_submission() {
  _oneof_case_[0] = kUndelegateAtEpochEndSubmission;
}
inline ::vega::commands::v1::UndelegateAtEpochEndSubmission* SubmitTransactionRequest::release_undelegate_at_epoch_end_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.undelegate_at_epoch_end_submission)
  if (_internal_has_undelegate_at_epoch_end_submission()) {
    clear_has_command();
      ::vega::commands::v1::UndelegateAtEpochEndSubmission* temp = command_.undelegate_at_epoch_end_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.undelegate_at_epoch_end_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::UndelegateAtEpochEndSubmission& SubmitTransactionRequest::_internal_undelegate_at_epoch_end_submission() const {
  return _internal_has_undelegate_at_epoch_end_submission()
      ? *command_.undelegate_at_epoch_end_submission_
      : reinterpret_cast< ::vega::commands::v1::UndelegateAtEpochEndSubmission&>(::vega::commands::v1::_UndelegateAtEpochEndSubmission_default_instance_);
}
inline const ::vega::commands::v1::UndelegateAtEpochEndSubmission& SubmitTransactionRequest::undelegate_at_epoch_end_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.undelegate_at_epoch_end_submission)
  return _internal_undelegate_at_epoch_end_submission();
}
inline ::vega::commands::v1::UndelegateAtEpochEndSubmission* SubmitTransactionRequest::unsafe_arena_release_undelegate_at_epoch_end_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.undelegate_at_epoch_end_submission)
  if (_internal_has_undelegate_at_epoch_end_submission()) {
    clear_has_command();
    ::vega::commands::v1::UndelegateAtEpochEndSubmission* temp = command_.undelegate_at_epoch_end_submission_;
    command_.undelegate_at_epoch_end_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_undelegate_at_epoch_end_submission(::vega::commands::v1::UndelegateAtEpochEndSubmission* undelegate_at_epoch_end_submission) {
  clear_command();
  if (undelegate_at_epoch_end_submission) {
    set_has_undelegate_at_epoch_end_submission();
    command_.undelegate_at_epoch_end_submission_ = undelegate_at_epoch_end_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.undelegate_at_epoch_end_submission)
}
inline ::vega::commands::v1::UndelegateAtEpochEndSubmission* SubmitTransactionRequest::_internal_mutable_undelegate_at_epoch_end_submission() {
  if (!_internal_has_undelegate_at_epoch_end_submission()) {
    clear_command();
    set_has_undelegate_at_epoch_end_submission();
    command_.undelegate_at_epoch_end_submission_ = CreateMaybeMessage< ::vega::commands::v1::UndelegateAtEpochEndSubmission >(GetArena());
  }
  return command_.undelegate_at_epoch_end_submission_;
}
inline ::vega::commands::v1::UndelegateAtEpochEndSubmission* SubmitTransactionRequest::mutable_undelegate_at_epoch_end_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.undelegate_at_epoch_end_submission)
  return _internal_mutable_undelegate_at_epoch_end_submission();
}

// .vega.commands.v1.NodeRegistration node_registration = 2001 [json_name = "nodeRegistration"];
inline bool SubmitTransactionRequest::_internal_has_node_registration() const {
  return command_case() == kNodeRegistration;
}
inline bool SubmitTransactionRequest::has_node_registration() const {
  return _internal_has_node_registration();
}
inline void SubmitTransactionRequest::set_has_node_registration() {
  _oneof_case_[0] = kNodeRegistration;
}
inline ::vega::commands::v1::NodeRegistration* SubmitTransactionRequest::release_node_registration() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.node_registration)
  if (_internal_has_node_registration()) {
    clear_has_command();
      ::vega::commands::v1::NodeRegistration* temp = command_.node_registration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.node_registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::NodeRegistration& SubmitTransactionRequest::_internal_node_registration() const {
  return _internal_has_node_registration()
      ? *command_.node_registration_
      : reinterpret_cast< ::vega::commands::v1::NodeRegistration&>(::vega::commands::v1::_NodeRegistration_default_instance_);
}
inline const ::vega::commands::v1::NodeRegistration& SubmitTransactionRequest::node_registration() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.node_registration)
  return _internal_node_registration();
}
inline ::vega::commands::v1::NodeRegistration* SubmitTransactionRequest::unsafe_arena_release_node_registration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.node_registration)
  if (_internal_has_node_registration()) {
    clear_has_command();
    ::vega::commands::v1::NodeRegistration* temp = command_.node_registration_;
    command_.node_registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_node_registration(::vega::commands::v1::NodeRegistration* node_registration) {
  clear_command();
  if (node_registration) {
    set_has_node_registration();
    command_.node_registration_ = node_registration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.node_registration)
}
inline ::vega::commands::v1::NodeRegistration* SubmitTransactionRequest::_internal_mutable_node_registration() {
  if (!_internal_has_node_registration()) {
    clear_command();
    set_has_node_registration();
    command_.node_registration_ = CreateMaybeMessage< ::vega::commands::v1::NodeRegistration >(GetArena());
  }
  return command_.node_registration_;
}
inline ::vega::commands::v1::NodeRegistration* SubmitTransactionRequest::mutable_node_registration() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.node_registration)
  return _internal_mutable_node_registration();
}

// .vega.commands.v1.NodeVote node_vote = 2002 [json_name = "nodeVote"];
inline bool SubmitTransactionRequest::_internal_has_node_vote() const {
  return command_case() == kNodeVote;
}
inline bool SubmitTransactionRequest::has_node_vote() const {
  return _internal_has_node_vote();
}
inline void SubmitTransactionRequest::set_has_node_vote() {
  _oneof_case_[0] = kNodeVote;
}
inline ::vega::commands::v1::NodeVote* SubmitTransactionRequest::release_node_vote() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.node_vote)
  if (_internal_has_node_vote()) {
    clear_has_command();
      ::vega::commands::v1::NodeVote* temp = command_.node_vote_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.node_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::NodeVote& SubmitTransactionRequest::_internal_node_vote() const {
  return _internal_has_node_vote()
      ? *command_.node_vote_
      : reinterpret_cast< ::vega::commands::v1::NodeVote&>(::vega::commands::v1::_NodeVote_default_instance_);
}
inline const ::vega::commands::v1::NodeVote& SubmitTransactionRequest::node_vote() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.node_vote)
  return _internal_node_vote();
}
inline ::vega::commands::v1::NodeVote* SubmitTransactionRequest::unsafe_arena_release_node_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.node_vote)
  if (_internal_has_node_vote()) {
    clear_has_command();
    ::vega::commands::v1::NodeVote* temp = command_.node_vote_;
    command_.node_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_node_vote(::vega::commands::v1::NodeVote* node_vote) {
  clear_command();
  if (node_vote) {
    set_has_node_vote();
    command_.node_vote_ = node_vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.node_vote)
}
inline ::vega::commands::v1::NodeVote* SubmitTransactionRequest::_internal_mutable_node_vote() {
  if (!_internal_has_node_vote()) {
    clear_command();
    set_has_node_vote();
    command_.node_vote_ = CreateMaybeMessage< ::vega::commands::v1::NodeVote >(GetArena());
  }
  return command_.node_vote_;
}
inline ::vega::commands::v1::NodeVote* SubmitTransactionRequest::mutable_node_vote() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.node_vote)
  return _internal_mutable_node_vote();
}

// .vega.commands.v1.NodeSignature node_signature = 2003 [json_name = "nodeSignature"];
inline bool SubmitTransactionRequest::_internal_has_node_signature() const {
  return command_case() == kNodeSignature;
}
inline bool SubmitTransactionRequest::has_node_signature() const {
  return _internal_has_node_signature();
}
inline void SubmitTransactionRequest::set_has_node_signature() {
  _oneof_case_[0] = kNodeSignature;
}
inline ::vega::commands::v1::NodeSignature* SubmitTransactionRequest::release_node_signature() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.node_signature)
  if (_internal_has_node_signature()) {
    clear_has_command();
      ::vega::commands::v1::NodeSignature* temp = command_.node_signature_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.node_signature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::NodeSignature& SubmitTransactionRequest::_internal_node_signature() const {
  return _internal_has_node_signature()
      ? *command_.node_signature_
      : reinterpret_cast< ::vega::commands::v1::NodeSignature&>(::vega::commands::v1::_NodeSignature_default_instance_);
}
inline const ::vega::commands::v1::NodeSignature& SubmitTransactionRequest::node_signature() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.node_signature)
  return _internal_node_signature();
}
inline ::vega::commands::v1::NodeSignature* SubmitTransactionRequest::unsafe_arena_release_node_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.node_signature)
  if (_internal_has_node_signature()) {
    clear_has_command();
    ::vega::commands::v1::NodeSignature* temp = command_.node_signature_;
    command_.node_signature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_node_signature(::vega::commands::v1::NodeSignature* node_signature) {
  clear_command();
  if (node_signature) {
    set_has_node_signature();
    command_.node_signature_ = node_signature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.node_signature)
}
inline ::vega::commands::v1::NodeSignature* SubmitTransactionRequest::_internal_mutable_node_signature() {
  if (!_internal_has_node_signature()) {
    clear_command();
    set_has_node_signature();
    command_.node_signature_ = CreateMaybeMessage< ::vega::commands::v1::NodeSignature >(GetArena());
  }
  return command_.node_signature_;
}
inline ::vega::commands::v1::NodeSignature* SubmitTransactionRequest::mutable_node_signature() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.node_signature)
  return _internal_mutable_node_signature();
}

// .vega.commands.v1.ChainEvent chain_event = 2004 [json_name = "chainEvent"];
inline bool SubmitTransactionRequest::_internal_has_chain_event() const {
  return command_case() == kChainEvent;
}
inline bool SubmitTransactionRequest::has_chain_event() const {
  return _internal_has_chain_event();
}
inline void SubmitTransactionRequest::set_has_chain_event() {
  _oneof_case_[0] = kChainEvent;
}
inline ::vega::commands::v1::ChainEvent* SubmitTransactionRequest::release_chain_event() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.chain_event)
  if (_internal_has_chain_event()) {
    clear_has_command();
      ::vega::commands::v1::ChainEvent* temp = command_.chain_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.chain_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::ChainEvent& SubmitTransactionRequest::_internal_chain_event() const {
  return _internal_has_chain_event()
      ? *command_.chain_event_
      : reinterpret_cast< ::vega::commands::v1::ChainEvent&>(::vega::commands::v1::_ChainEvent_default_instance_);
}
inline const ::vega::commands::v1::ChainEvent& SubmitTransactionRequest::chain_event() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.chain_event)
  return _internal_chain_event();
}
inline ::vega::commands::v1::ChainEvent* SubmitTransactionRequest::unsafe_arena_release_chain_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.chain_event)
  if (_internal_has_chain_event()) {
    clear_has_command();
    ::vega::commands::v1::ChainEvent* temp = command_.chain_event_;
    command_.chain_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_chain_event(::vega::commands::v1::ChainEvent* chain_event) {
  clear_command();
  if (chain_event) {
    set_has_chain_event();
    command_.chain_event_ = chain_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.chain_event)
}
inline ::vega::commands::v1::ChainEvent* SubmitTransactionRequest::_internal_mutable_chain_event() {
  if (!_internal_has_chain_event()) {
    clear_command();
    set_has_chain_event();
    command_.chain_event_ = CreateMaybeMessage< ::vega::commands::v1::ChainEvent >(GetArena());
  }
  return command_.chain_event_;
}
inline ::vega::commands::v1::ChainEvent* SubmitTransactionRequest::mutable_chain_event() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.chain_event)
  return _internal_mutable_chain_event();
}

// .vega.commands.v1.OracleDataSubmission oracle_data_submission = 3001 [json_name = "oracleDataSubmission"];
inline bool SubmitTransactionRequest::_internal_has_oracle_data_submission() const {
  return command_case() == kOracleDataSubmission;
}
inline bool SubmitTransactionRequest::has_oracle_data_submission() const {
  return _internal_has_oracle_data_submission();
}
inline void SubmitTransactionRequest::set_has_oracle_data_submission() {
  _oneof_case_[0] = kOracleDataSubmission;
}
inline ::vega::commands::v1::OracleDataSubmission* SubmitTransactionRequest::release_oracle_data_submission() {
  // @@protoc_insertion_point(field_release:vega.wallet.v1.SubmitTransactionRequest.oracle_data_submission)
  if (_internal_has_oracle_data_submission()) {
    clear_has_command();
      ::vega::commands::v1::OracleDataSubmission* temp = command_.oracle_data_submission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.oracle_data_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::commands::v1::OracleDataSubmission& SubmitTransactionRequest::_internal_oracle_data_submission() const {
  return _internal_has_oracle_data_submission()
      ? *command_.oracle_data_submission_
      : reinterpret_cast< ::vega::commands::v1::OracleDataSubmission&>(::vega::commands::v1::_OracleDataSubmission_default_instance_);
}
inline const ::vega::commands::v1::OracleDataSubmission& SubmitTransactionRequest::oracle_data_submission() const {
  // @@protoc_insertion_point(field_get:vega.wallet.v1.SubmitTransactionRequest.oracle_data_submission)
  return _internal_oracle_data_submission();
}
inline ::vega::commands::v1::OracleDataSubmission* SubmitTransactionRequest::unsafe_arena_release_oracle_data_submission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.wallet.v1.SubmitTransactionRequest.oracle_data_submission)
  if (_internal_has_oracle_data_submission()) {
    clear_has_command();
    ::vega::commands::v1::OracleDataSubmission* temp = command_.oracle_data_submission_;
    command_.oracle_data_submission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_oracle_data_submission(::vega::commands::v1::OracleDataSubmission* oracle_data_submission) {
  clear_command();
  if (oracle_data_submission) {
    set_has_oracle_data_submission();
    command_.oracle_data_submission_ = oracle_data_submission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.wallet.v1.SubmitTransactionRequest.oracle_data_submission)
}
inline ::vega::commands::v1::OracleDataSubmission* SubmitTransactionRequest::_internal_mutable_oracle_data_submission() {
  if (!_internal_has_oracle_data_submission()) {
    clear_command();
    set_has_oracle_data_submission();
    command_.oracle_data_submission_ = CreateMaybeMessage< ::vega::commands::v1::OracleDataSubmission >(GetArena());
  }
  return command_.oracle_data_submission_;
}
inline ::vega::commands::v1::OracleDataSubmission* SubmitTransactionRequest::mutable_oracle_data_submission() {
  // @@protoc_insertion_point(field_mutable:vega.wallet.v1.SubmitTransactionRequest.oracle_data_submission)
  return _internal_mutable_oracle_data_submission();
}

inline bool SubmitTransactionRequest::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void SubmitTransactionRequest::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline SubmitTransactionRequest::CommandCase SubmitTransactionRequest::command_case() const {
  return SubmitTransactionRequest::CommandCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace wallet
}  // namespace vega

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wallet_2fv1_2fwallet_2eproto
