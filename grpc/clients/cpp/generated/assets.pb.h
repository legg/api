// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_assets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_assets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_assets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_assets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_assets_2eproto;
namespace vega {
class Asset;
class AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class AssetDetails;
class AssetDetailsDefaultTypeInternal;
extern AssetDetailsDefaultTypeInternal _AssetDetails_default_instance_;
class BuiltinAsset;
class BuiltinAssetDefaultTypeInternal;
extern BuiltinAssetDefaultTypeInternal _BuiltinAsset_default_instance_;
class ERC20;
class ERC20DefaultTypeInternal;
extern ERC20DefaultTypeInternal _ERC20_default_instance_;
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::Asset* Arena::CreateMaybeMessage<::vega::Asset>(Arena*);
template<> ::vega::AssetDetails* Arena::CreateMaybeMessage<::vega::AssetDetails>(Arena*);
template<> ::vega::BuiltinAsset* Arena::CreateMaybeMessage<::vega::BuiltinAsset>(Arena*);
template<> ::vega::ERC20* Arena::CreateMaybeMessage<::vega::ERC20>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {

// ===================================================================

class Asset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  virtual ~Asset();

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset& default_instance();

  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .vega.AssetDetails details = 2 [json_name = "details"];
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::vega::AssetDetails& details() const;
  ::vega::AssetDetails* release_details();
  ::vega::AssetDetails* mutable_details();
  void set_allocated_details(::vega::AssetDetails* details);
  private:
  const ::vega::AssetDetails& _internal_details() const;
  ::vega::AssetDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::vega::AssetDetails* details);
  ::vega::AssetDetails* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:vega.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::vega::AssetDetails* details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_assets_2eproto;
};
// -------------------------------------------------------------------

class AssetDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.AssetDetails) */ {
 public:
  inline AssetDetails() : AssetDetails(nullptr) {}
  virtual ~AssetDetails();

  AssetDetails(const AssetDetails& from);
  AssetDetails(AssetDetails&& from) noexcept
    : AssetDetails() {
    *this = ::std::move(from);
  }

  inline AssetDetails& operator=(const AssetDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetDetails& operator=(AssetDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetDetails& default_instance();

  enum SourceCase {
    kBuiltinAsset = 101,
    kErc20 = 102,
    SOURCE_NOT_SET = 0,
  };

  static inline const AssetDetails* internal_default_instance() {
    return reinterpret_cast<const AssetDetails*>(
               &_AssetDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AssetDetails& a, AssetDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetDetails* New() const final {
    return CreateMaybeMessage<AssetDetails>(nullptr);
  }

  AssetDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetDetails& from);
  void MergeFrom(const AssetDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.AssetDetails";
  }
  protected:
  explicit AssetDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kTotalSupplyFieldNumber = 3,
    kMinLpStakeFieldNumber = 5,
    kDecimalsFieldNumber = 4,
    kBuiltinAssetFieldNumber = 101,
    kErc20FieldNumber = 102,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string total_supply = 3 [json_name = "totalSupply"];
  void clear_total_supply();
  const std::string& total_supply() const;
  void set_total_supply(const std::string& value);
  void set_total_supply(std::string&& value);
  void set_total_supply(const char* value);
  void set_total_supply(const char* value, size_t size);
  std::string* mutable_total_supply();
  std::string* release_total_supply();
  void set_allocated_total_supply(std::string* total_supply);
  private:
  const std::string& _internal_total_supply() const;
  void _internal_set_total_supply(const std::string& value);
  std::string* _internal_mutable_total_supply();
  public:

  // string min_lp_stake = 5 [json_name = "minLpStake"];
  void clear_min_lp_stake();
  const std::string& min_lp_stake() const;
  void set_min_lp_stake(const std::string& value);
  void set_min_lp_stake(std::string&& value);
  void set_min_lp_stake(const char* value);
  void set_min_lp_stake(const char* value, size_t size);
  std::string* mutable_min_lp_stake();
  std::string* release_min_lp_stake();
  void set_allocated_min_lp_stake(std::string* min_lp_stake);
  private:
  const std::string& _internal_min_lp_stake() const;
  void _internal_set_min_lp_stake(const std::string& value);
  std::string* _internal_mutable_min_lp_stake();
  public:

  // uint64 decimals = 4 [json_name = "decimals"];
  void clear_decimals();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimals() const;
  void set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimals() const;
  void _internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.BuiltinAsset builtin_asset = 101 [json_name = "builtinAsset"];
  bool has_builtin_asset() const;
  private:
  bool _internal_has_builtin_asset() const;
  public:
  void clear_builtin_asset();
  const ::vega::BuiltinAsset& builtin_asset() const;
  ::vega::BuiltinAsset* release_builtin_asset();
  ::vega::BuiltinAsset* mutable_builtin_asset();
  void set_allocated_builtin_asset(::vega::BuiltinAsset* builtin_asset);
  private:
  const ::vega::BuiltinAsset& _internal_builtin_asset() const;
  ::vega::BuiltinAsset* _internal_mutable_builtin_asset();
  public:
  void unsafe_arena_set_allocated_builtin_asset(
      ::vega::BuiltinAsset* builtin_asset);
  ::vega::BuiltinAsset* unsafe_arena_release_builtin_asset();

  // .vega.ERC20 erc20 = 102 [json_name = "erc20"];
  bool has_erc20() const;
  private:
  bool _internal_has_erc20() const;
  public:
  void clear_erc20();
  const ::vega::ERC20& erc20() const;
  ::vega::ERC20* release_erc20();
  ::vega::ERC20* mutable_erc20();
  void set_allocated_erc20(::vega::ERC20* erc20);
  private:
  const ::vega::ERC20& _internal_erc20() const;
  ::vega::ERC20* _internal_mutable_erc20();
  public:
  void unsafe_arena_set_allocated_erc20(
      ::vega::ERC20* erc20);
  ::vega::ERC20* unsafe_arena_release_erc20();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:vega.AssetDetails)
 private:
  class _Internal;
  void set_has_builtin_asset();
  void set_has_erc20();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_supply_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_lp_stake_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimals_;
  union SourceUnion {
    SourceUnion() {}
    ::vega::BuiltinAsset* builtin_asset_;
    ::vega::ERC20* erc20_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_assets_2eproto;
};
// -------------------------------------------------------------------

class BuiltinAsset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BuiltinAsset) */ {
 public:
  inline BuiltinAsset() : BuiltinAsset(nullptr) {}
  virtual ~BuiltinAsset();

  BuiltinAsset(const BuiltinAsset& from);
  BuiltinAsset(BuiltinAsset&& from) noexcept
    : BuiltinAsset() {
    *this = ::std::move(from);
  }

  inline BuiltinAsset& operator=(const BuiltinAsset& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuiltinAsset& operator=(BuiltinAsset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuiltinAsset& default_instance();

  static inline const BuiltinAsset* internal_default_instance() {
    return reinterpret_cast<const BuiltinAsset*>(
               &_BuiltinAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuiltinAsset& a, BuiltinAsset& b) {
    a.Swap(&b);
  }
  inline void Swap(BuiltinAsset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuiltinAsset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuiltinAsset* New() const final {
    return CreateMaybeMessage<BuiltinAsset>(nullptr);
  }

  BuiltinAsset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuiltinAsset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuiltinAsset& from);
  void MergeFrom(const BuiltinAsset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuiltinAsset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BuiltinAsset";
  }
  protected:
  explicit BuiltinAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFaucetAmountMintFieldNumber = 1,
  };
  // string max_faucet_amount_mint = 1 [json_name = "maxFaucetAmountMint"];
  void clear_max_faucet_amount_mint();
  const std::string& max_faucet_amount_mint() const;
  void set_max_faucet_amount_mint(const std::string& value);
  void set_max_faucet_amount_mint(std::string&& value);
  void set_max_faucet_amount_mint(const char* value);
  void set_max_faucet_amount_mint(const char* value, size_t size);
  std::string* mutable_max_faucet_amount_mint();
  std::string* release_max_faucet_amount_mint();
  void set_allocated_max_faucet_amount_mint(std::string* max_faucet_amount_mint);
  private:
  const std::string& _internal_max_faucet_amount_mint() const;
  void _internal_set_max_faucet_amount_mint(const std::string& value);
  std::string* _internal_mutable_max_faucet_amount_mint();
  public:

  // @@protoc_insertion_point(class_scope:vega.BuiltinAsset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_faucet_amount_mint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_assets_2eproto;
};
// -------------------------------------------------------------------

class ERC20 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ERC20) */ {
 public:
  inline ERC20() : ERC20(nullptr) {}
  virtual ~ERC20();

  ERC20(const ERC20& from);
  ERC20(ERC20&& from) noexcept
    : ERC20() {
    *this = ::std::move(from);
  }

  inline ERC20& operator=(const ERC20& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20& operator=(ERC20&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20& default_instance();

  static inline const ERC20* internal_default_instance() {
    return reinterpret_cast<const ERC20*>(
               &_ERC20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ERC20& a, ERC20& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20* New() const final {
    return CreateMaybeMessage<ERC20>(nullptr);
  }

  ERC20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20& from);
  void MergeFrom(const ERC20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ERC20";
  }
  protected:
  explicit ERC20(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractAddressFieldNumber = 1,
  };
  // string contract_address = 1 [json_name = "contractAddress"];
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  // @@protoc_insertion_point(class_scope:vega.ERC20)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_assets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset

// string id = 1 [json_name = "id"];
inline void Asset::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Asset::id() const {
  // @@protoc_insertion_point(field_get:vega.Asset.id)
  return _internal_id();
}
inline void Asset::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Asset.id)
}
inline std::string* Asset::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Asset.id)
  return _internal_mutable_id();
}
inline const std::string& Asset::_internal_id() const {
  return id_.Get();
}
inline void Asset::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.id)
}
inline void Asset::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Asset.id)
}
inline void Asset::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.id)
}
inline std::string* Asset::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_id() {
  // @@protoc_insertion_point(field_release:vega.Asset.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.id)
}

// .vega.AssetDetails details = 2 [json_name = "details"];
inline bool Asset::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool Asset::has_details() const {
  return _internal_has_details();
}
inline void Asset::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::vega::AssetDetails& Asset::_internal_details() const {
  const ::vega::AssetDetails* p = details_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::AssetDetails&>(
      ::vega::_AssetDetails_default_instance_);
}
inline const ::vega::AssetDetails& Asset::details() const {
  // @@protoc_insertion_point(field_get:vega.Asset.details)
  return _internal_details();
}
inline void Asset::unsafe_arena_set_allocated_details(
    ::vega::AssetDetails* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Asset.details)
}
inline ::vega::AssetDetails* Asset::release_details() {

  ::vega::AssetDetails* temp = details_;
  details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::AssetDetails* Asset::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:vega.Asset.details)

  ::vega::AssetDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::vega::AssetDetails* Asset::_internal_mutable_details() {

  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::AssetDetails>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::vega::AssetDetails* Asset::mutable_details() {
  // @@protoc_insertion_point(field_mutable:vega.Asset.details)
  return _internal_mutable_details();
}
inline void Asset::set_allocated_details(::vega::AssetDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }

  } else {

  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.details)
}

// -------------------------------------------------------------------

// AssetDetails

// string name = 1 [json_name = "name"];
inline void AssetDetails::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AssetDetails::name() const {
  // @@protoc_insertion_point(field_get:vega.AssetDetails.name)
  return _internal_name();
}
inline void AssetDetails::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:vega.AssetDetails.name)
}
inline std::string* AssetDetails::mutable_name() {
  // @@protoc_insertion_point(field_mutable:vega.AssetDetails.name)
  return _internal_mutable_name();
}
inline const std::string& AssetDetails::_internal_name() const {
  return name_.Get();
}
inline void AssetDetails::_internal_set_name(const std::string& value) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetDetails::set_name(std::string&& value) {

  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.AssetDetails.name)
}
inline void AssetDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.AssetDetails.name)
}
inline void AssetDetails::set_name(const char* value,
    size_t size) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.AssetDetails.name)
}
inline std::string* AssetDetails::_internal_mutable_name() {

  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetDetails::release_name() {
  // @@protoc_insertion_point(field_release:vega.AssetDetails.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {

  } else {

  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.AssetDetails.name)
}

// string symbol = 2 [json_name = "symbol"];
inline void AssetDetails::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& AssetDetails::symbol() const {
  // @@protoc_insertion_point(field_get:vega.AssetDetails.symbol)
  return _internal_symbol();
}
inline void AssetDetails::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:vega.AssetDetails.symbol)
}
inline std::string* AssetDetails::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:vega.AssetDetails.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& AssetDetails::_internal_symbol() const {
  return symbol_.Get();
}
inline void AssetDetails::_internal_set_symbol(const std::string& value) {

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetDetails::set_symbol(std::string&& value) {

  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.AssetDetails.symbol)
}
inline void AssetDetails::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.AssetDetails.symbol)
}
inline void AssetDetails::set_symbol(const char* value,
    size_t size) {

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.AssetDetails.symbol)
}
inline std::string* AssetDetails::_internal_mutable_symbol() {

  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetDetails::release_symbol() {
  // @@protoc_insertion_point(field_release:vega.AssetDetails.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetDetails::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {

  } else {

  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.AssetDetails.symbol)
}

// string total_supply = 3 [json_name = "totalSupply"];
inline void AssetDetails::clear_total_supply() {
  total_supply_.ClearToEmpty();
}
inline const std::string& AssetDetails::total_supply() const {
  // @@protoc_insertion_point(field_get:vega.AssetDetails.total_supply)
  return _internal_total_supply();
}
inline void AssetDetails::set_total_supply(const std::string& value) {
  _internal_set_total_supply(value);
  // @@protoc_insertion_point(field_set:vega.AssetDetails.total_supply)
}
inline std::string* AssetDetails::mutable_total_supply() {
  // @@protoc_insertion_point(field_mutable:vega.AssetDetails.total_supply)
  return _internal_mutable_total_supply();
}
inline const std::string& AssetDetails::_internal_total_supply() const {
  return total_supply_.Get();
}
inline void AssetDetails::_internal_set_total_supply(const std::string& value) {

  total_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetDetails::set_total_supply(std::string&& value) {

  total_supply_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.AssetDetails.total_supply)
}
inline void AssetDetails::set_total_supply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  total_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.AssetDetails.total_supply)
}
inline void AssetDetails::set_total_supply(const char* value,
    size_t size) {

  total_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.AssetDetails.total_supply)
}
inline std::string* AssetDetails::_internal_mutable_total_supply() {

  return total_supply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetDetails::release_total_supply() {
  // @@protoc_insertion_point(field_release:vega.AssetDetails.total_supply)
  return total_supply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetDetails::set_allocated_total_supply(std::string* total_supply) {
  if (total_supply != nullptr) {

  } else {

  }
  total_supply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_supply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.AssetDetails.total_supply)
}

// uint64 decimals = 4 [json_name = "decimals"];
inline void AssetDetails::clear_decimals() {
  decimals_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetDetails::_internal_decimals() const {
  return decimals_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetDetails::decimals() const {
  // @@protoc_insertion_point(field_get:vega.AssetDetails.decimals)
  return _internal_decimals();
}
inline void AssetDetails::_internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  decimals_ = value;
}
inline void AssetDetails::set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:vega.AssetDetails.decimals)
}

// string min_lp_stake = 5 [json_name = "minLpStake"];
inline void AssetDetails::clear_min_lp_stake() {
  min_lp_stake_.ClearToEmpty();
}
inline const std::string& AssetDetails::min_lp_stake() const {
  // @@protoc_insertion_point(field_get:vega.AssetDetails.min_lp_stake)
  return _internal_min_lp_stake();
}
inline void AssetDetails::set_min_lp_stake(const std::string& value) {
  _internal_set_min_lp_stake(value);
  // @@protoc_insertion_point(field_set:vega.AssetDetails.min_lp_stake)
}
inline std::string* AssetDetails::mutable_min_lp_stake() {
  // @@protoc_insertion_point(field_mutable:vega.AssetDetails.min_lp_stake)
  return _internal_mutable_min_lp_stake();
}
inline const std::string& AssetDetails::_internal_min_lp_stake() const {
  return min_lp_stake_.Get();
}
inline void AssetDetails::_internal_set_min_lp_stake(const std::string& value) {

  min_lp_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetDetails::set_min_lp_stake(std::string&& value) {

  min_lp_stake_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.AssetDetails.min_lp_stake)
}
inline void AssetDetails::set_min_lp_stake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  min_lp_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.AssetDetails.min_lp_stake)
}
inline void AssetDetails::set_min_lp_stake(const char* value,
    size_t size) {

  min_lp_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.AssetDetails.min_lp_stake)
}
inline std::string* AssetDetails::_internal_mutable_min_lp_stake() {

  return min_lp_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetDetails::release_min_lp_stake() {
  // @@protoc_insertion_point(field_release:vega.AssetDetails.min_lp_stake)
  return min_lp_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetDetails::set_allocated_min_lp_stake(std::string* min_lp_stake) {
  if (min_lp_stake != nullptr) {

  } else {

  }
  min_lp_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_lp_stake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.AssetDetails.min_lp_stake)
}

// .vega.BuiltinAsset builtin_asset = 101 [json_name = "builtinAsset"];
inline bool AssetDetails::_internal_has_builtin_asset() const {
  return source_case() == kBuiltinAsset;
}
inline bool AssetDetails::has_builtin_asset() const {
  return _internal_has_builtin_asset();
}
inline void AssetDetails::set_has_builtin_asset() {
  _oneof_case_[0] = kBuiltinAsset;
}
inline void AssetDetails::clear_builtin_asset() {
  if (_internal_has_builtin_asset()) {
    if (GetArena() == nullptr) {
      delete source_.builtin_asset_;
    }
    clear_has_source();
  }
}
inline ::vega::BuiltinAsset* AssetDetails::release_builtin_asset() {
  // @@protoc_insertion_point(field_release:vega.AssetDetails.builtin_asset)
  if (_internal_has_builtin_asset()) {
    clear_has_source();
      ::vega::BuiltinAsset* temp = source_.builtin_asset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.builtin_asset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BuiltinAsset& AssetDetails::_internal_builtin_asset() const {
  return _internal_has_builtin_asset()
      ? *source_.builtin_asset_
      : reinterpret_cast< ::vega::BuiltinAsset&>(::vega::_BuiltinAsset_default_instance_);
}
inline const ::vega::BuiltinAsset& AssetDetails::builtin_asset() const {
  // @@protoc_insertion_point(field_get:vega.AssetDetails.builtin_asset)
  return _internal_builtin_asset();
}
inline ::vega::BuiltinAsset* AssetDetails::unsafe_arena_release_builtin_asset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.AssetDetails.builtin_asset)
  if (_internal_has_builtin_asset()) {
    clear_has_source();
    ::vega::BuiltinAsset* temp = source_.builtin_asset_;
    source_.builtin_asset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetDetails::unsafe_arena_set_allocated_builtin_asset(::vega::BuiltinAsset* builtin_asset) {
  clear_source();
  if (builtin_asset) {
    set_has_builtin_asset();
    source_.builtin_asset_ = builtin_asset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.AssetDetails.builtin_asset)
}
inline ::vega::BuiltinAsset* AssetDetails::_internal_mutable_builtin_asset() {
  if (!_internal_has_builtin_asset()) {
    clear_source();
    set_has_builtin_asset();
    source_.builtin_asset_ = CreateMaybeMessage< ::vega::BuiltinAsset >(GetArena());
  }
  return source_.builtin_asset_;
}
inline ::vega::BuiltinAsset* AssetDetails::mutable_builtin_asset() {
  // @@protoc_insertion_point(field_mutable:vega.AssetDetails.builtin_asset)
  return _internal_mutable_builtin_asset();
}

// .vega.ERC20 erc20 = 102 [json_name = "erc20"];
inline bool AssetDetails::_internal_has_erc20() const {
  return source_case() == kErc20;
}
inline bool AssetDetails::has_erc20() const {
  return _internal_has_erc20();
}
inline void AssetDetails::set_has_erc20() {
  _oneof_case_[0] = kErc20;
}
inline void AssetDetails::clear_erc20() {
  if (_internal_has_erc20()) {
    if (GetArena() == nullptr) {
      delete source_.erc20_;
    }
    clear_has_source();
  }
}
inline ::vega::ERC20* AssetDetails::release_erc20() {
  // @@protoc_insertion_point(field_release:vega.AssetDetails.erc20)
  if (_internal_has_erc20()) {
    clear_has_source();
      ::vega::ERC20* temp = source_.erc20_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20& AssetDetails::_internal_erc20() const {
  return _internal_has_erc20()
      ? *source_.erc20_
      : reinterpret_cast< ::vega::ERC20&>(::vega::_ERC20_default_instance_);
}
inline const ::vega::ERC20& AssetDetails::erc20() const {
  // @@protoc_insertion_point(field_get:vega.AssetDetails.erc20)
  return _internal_erc20();
}
inline ::vega::ERC20* AssetDetails::unsafe_arena_release_erc20() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.AssetDetails.erc20)
  if (_internal_has_erc20()) {
    clear_has_source();
    ::vega::ERC20* temp = source_.erc20_;
    source_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetDetails::unsafe_arena_set_allocated_erc20(::vega::ERC20* erc20) {
  clear_source();
  if (erc20) {
    set_has_erc20();
    source_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.AssetDetails.erc20)
}
inline ::vega::ERC20* AssetDetails::_internal_mutable_erc20() {
  if (!_internal_has_erc20()) {
    clear_source();
    set_has_erc20();
    source_.erc20_ = CreateMaybeMessage< ::vega::ERC20 >(GetArena());
  }
  return source_.erc20_;
}
inline ::vega::ERC20* AssetDetails::mutable_erc20() {
  // @@protoc_insertion_point(field_mutable:vega.AssetDetails.erc20)
  return _internal_mutable_erc20();
}

inline bool AssetDetails::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void AssetDetails::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline AssetDetails::SourceCase AssetDetails::source_case() const {
  return AssetDetails::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BuiltinAsset

// string max_faucet_amount_mint = 1 [json_name = "maxFaucetAmountMint"];
inline void BuiltinAsset::clear_max_faucet_amount_mint() {
  max_faucet_amount_mint_.ClearToEmpty();
}
inline const std::string& BuiltinAsset::max_faucet_amount_mint() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.max_faucet_amount_mint)
  return _internal_max_faucet_amount_mint();
}
inline void BuiltinAsset::set_max_faucet_amount_mint(const std::string& value) {
  _internal_set_max_faucet_amount_mint(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.max_faucet_amount_mint)
}
inline std::string* BuiltinAsset::mutable_max_faucet_amount_mint() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.max_faucet_amount_mint)
  return _internal_mutable_max_faucet_amount_mint();
}
inline const std::string& BuiltinAsset::_internal_max_faucet_amount_mint() const {
  return max_faucet_amount_mint_.Get();
}
inline void BuiltinAsset::_internal_set_max_faucet_amount_mint(const std::string& value) {

  max_faucet_amount_mint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAsset::set_max_faucet_amount_mint(std::string&& value) {

  max_faucet_amount_mint_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.max_faucet_amount_mint)
}
inline void BuiltinAsset::set_max_faucet_amount_mint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  max_faucet_amount_mint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.max_faucet_amount_mint)
}
inline void BuiltinAsset::set_max_faucet_amount_mint(const char* value,
    size_t size) {

  max_faucet_amount_mint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.max_faucet_amount_mint)
}
inline std::string* BuiltinAsset::_internal_mutable_max_faucet_amount_mint() {

  return max_faucet_amount_mint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAsset::release_max_faucet_amount_mint() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.max_faucet_amount_mint)
  return max_faucet_amount_mint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAsset::set_allocated_max_faucet_amount_mint(std::string* max_faucet_amount_mint) {
  if (max_faucet_amount_mint != nullptr) {

  } else {

  }
  max_faucet_amount_mint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_faucet_amount_mint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.max_faucet_amount_mint)
}

// -------------------------------------------------------------------

// ERC20

// string contract_address = 1 [json_name = "contractAddress"];
inline void ERC20::clear_contract_address() {
  contract_address_.ClearToEmpty();
}
inline const std::string& ERC20::contract_address() const {
  // @@protoc_insertion_point(field_get:vega.ERC20.contract_address)
  return _internal_contract_address();
}
inline void ERC20::set_contract_address(const std::string& value) {
  _internal_set_contract_address(value);
  // @@protoc_insertion_point(field_set:vega.ERC20.contract_address)
}
inline std::string* ERC20::mutable_contract_address() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20.contract_address)
  return _internal_mutable_contract_address();
}
inline const std::string& ERC20::_internal_contract_address() const {
  return contract_address_.Get();
}
inline void ERC20::_internal_set_contract_address(const std::string& value) {

  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20::set_contract_address(std::string&& value) {

  contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20.contract_address)
}
inline void ERC20::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20.contract_address)
}
inline void ERC20::set_contract_address(const char* value,
    size_t size) {

  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20.contract_address)
}
inline std::string* ERC20::_internal_mutable_contract_address() {

  return contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20::release_contract_address() {
  // @@protoc_insertion_point(field_release:vega.ERC20.contract_address)
  return contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {

  } else {

  }
  contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20.contract_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_assets_2eproto
