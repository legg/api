// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oracles/v1/data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oracles_2fv1_2fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oracles_2fv1_2fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oracles_2fv1_2fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oracles_2fv1_2fdata_2eproto;
namespace oracles {
namespace v1 {
class OracleData;
class OracleDataDefaultTypeInternal;
extern OracleDataDefaultTypeInternal _OracleData_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
}  // namespace v1
}  // namespace oracles
PROTOBUF_NAMESPACE_OPEN
template<> ::oracles::v1::OracleData* Arena::CreateMaybeMessage<::oracles::v1::OracleData>(Arena*);
template<> ::oracles::v1::Property* Arena::CreateMaybeMessage<::oracles::v1::Property>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oracles {
namespace v1 {

// ===================================================================

class OracleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oracles.v1.OracleData) */ {
 public:
  inline OracleData() : OracleData(nullptr) {}
  virtual ~OracleData();

  OracleData(const OracleData& from);
  OracleData(OracleData&& from) noexcept
    : OracleData() {
    *this = ::std::move(from);
  }

  inline OracleData& operator=(const OracleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleData& operator=(OracleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleData& default_instance();

  static inline const OracleData* internal_default_instance() {
    return reinterpret_cast<const OracleData*>(
               &_OracleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OracleData& a, OracleData& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleData* New() const final {
    return CreateMaybeMessage<OracleData>(nullptr);
  }

  OracleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleData& from);
  void MergeFrom(const OracleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oracles.v1.OracleData";
  }
  protected:
  explicit OracleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oracles_2fv1_2fdata_2eproto);
    return ::descriptor_table_oracles_2fv1_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeysFieldNumber = 1,
    kDataFieldNumber = 2,
    kMatchedSpecIdsFieldNumber = 3,
    kBroadcastAtFieldNumber = 4,
  };
  // repeated string pub_keys = 1 [json_name = "pubKeys"];
  int pub_keys_size() const;
  private:
  int _internal_pub_keys_size() const;
  public:
  void clear_pub_keys();
  const std::string& pub_keys(int index) const;
  std::string* mutable_pub_keys(int index);
  void set_pub_keys(int index, const std::string& value);
  void set_pub_keys(int index, std::string&& value);
  void set_pub_keys(int index, const char* value);
  void set_pub_keys(int index, const char* value, size_t size);
  std::string* add_pub_keys();
  void add_pub_keys(const std::string& value);
  void add_pub_keys(std::string&& value);
  void add_pub_keys(const char* value);
  void add_pub_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pub_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pub_keys();
  private:
  const std::string& _internal_pub_keys(int index) const;
  std::string* _internal_add_pub_keys();
  public:

  // repeated .oracles.v1.Property data = 2 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::oracles::v1::Property* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Property >*
      mutable_data();
  private:
  const ::oracles::v1::Property& _internal_data(int index) const;
  ::oracles::v1::Property* _internal_add_data();
  public:
  const ::oracles::v1::Property& data(int index) const;
  ::oracles::v1::Property* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Property >&
      data() const;

  // repeated string matched_spec_ids = 3 [json_name = "matchedSpecIds"];
  int matched_spec_ids_size() const;
  private:
  int _internal_matched_spec_ids_size() const;
  public:
  void clear_matched_spec_ids();
  const std::string& matched_spec_ids(int index) const;
  std::string* mutable_matched_spec_ids(int index);
  void set_matched_spec_ids(int index, const std::string& value);
  void set_matched_spec_ids(int index, std::string&& value);
  void set_matched_spec_ids(int index, const char* value);
  void set_matched_spec_ids(int index, const char* value, size_t size);
  std::string* add_matched_spec_ids();
  void add_matched_spec_ids(const std::string& value);
  void add_matched_spec_ids(std::string&& value);
  void add_matched_spec_ids(const char* value);
  void add_matched_spec_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& matched_spec_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_matched_spec_ids();
  private:
  const std::string& _internal_matched_spec_ids(int index) const;
  std::string* _internal_add_matched_spec_ids();
  public:

  // int64 broadcast_at = 4 [json_name = "broadcastAt"];
  void clear_broadcast_at();
  ::PROTOBUF_NAMESPACE_ID::int64 broadcast_at() const;
  void set_broadcast_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_broadcast_at() const;
  void _internal_set_broadcast_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oracles.v1.OracleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pub_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Property > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> matched_spec_ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 broadcast_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oracles_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Property PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oracles.v1.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  virtual ~Property();

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property& default_instance();

  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(nullptr);
  }

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oracles.v1.Property";
  }
  protected:
  explicit Property(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oracles_2fv1_2fdata_2eproto);
    return ::descriptor_table_oracles_2fv1_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:oracles.v1.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oracles_2fv1_2fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OracleData

// repeated string pub_keys = 1 [json_name = "pubKeys"];
inline int OracleData::_internal_pub_keys_size() const {
  return pub_keys_.size();
}
inline int OracleData::pub_keys_size() const {
  return _internal_pub_keys_size();
}
inline void OracleData::clear_pub_keys() {
  pub_keys_.Clear();
}
inline std::string* OracleData::add_pub_keys() {
  // @@protoc_insertion_point(field_add_mutable:oracles.v1.OracleData.pub_keys)
  return _internal_add_pub_keys();
}
inline const std::string& OracleData::_internal_pub_keys(int index) const {
  return pub_keys_.Get(index);
}
inline const std::string& OracleData::pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleData.pub_keys)
  return _internal_pub_keys(index);
}
inline std::string* OracleData::mutable_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleData.pub_keys)
  return pub_keys_.Mutable(index);
}
inline void OracleData::set_pub_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleData.pub_keys)
  pub_keys_.Mutable(index)->assign(value);
}
inline void OracleData::set_pub_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleData.pub_keys)
  pub_keys_.Mutable(index)->assign(std::move(value));
}
inline void OracleData::set_pub_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oracles.v1.OracleData.pub_keys)
}
inline void OracleData::set_pub_keys(int index, const char* value, size_t size) {
  pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.OracleData.pub_keys)
}
inline std::string* OracleData::_internal_add_pub_keys() {
  return pub_keys_.Add();
}
inline void OracleData::add_pub_keys(const std::string& value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oracles.v1.OracleData.pub_keys)
}
inline void OracleData::add_pub_keys(std::string&& value) {
  pub_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oracles.v1.OracleData.pub_keys)
}
inline void OracleData::add_pub_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oracles.v1.OracleData.pub_keys)
}
inline void OracleData::add_pub_keys(const char* value, size_t size) {
  pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oracles.v1.OracleData.pub_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OracleData::pub_keys() const {
  // @@protoc_insertion_point(field_list:oracles.v1.OracleData.pub_keys)
  return pub_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OracleData::mutable_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.OracleData.pub_keys)
  return &pub_keys_;
}

// repeated .oracles.v1.Property data = 2 [json_name = "data"];
inline int OracleData::_internal_data_size() const {
  return data_.size();
}
inline int OracleData::data_size() const {
  return _internal_data_size();
}
inline void OracleData::clear_data() {
  data_.Clear();
}
inline ::oracles::v1::Property* OracleData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleData.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Property >*
OracleData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.OracleData.data)
  return &data_;
}
inline const ::oracles::v1::Property& OracleData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::oracles::v1::Property& OracleData::data(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleData.data)
  return _internal_data(index);
}
inline ::oracles::v1::Property* OracleData::_internal_add_data() {
  return data_.Add();
}
inline ::oracles::v1::Property* OracleData::add_data() {
  // @@protoc_insertion_point(field_add:oracles.v1.OracleData.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Property >&
OracleData::data() const {
  // @@protoc_insertion_point(field_list:oracles.v1.OracleData.data)
  return data_;
}

// repeated string matched_spec_ids = 3 [json_name = "matchedSpecIds"];
inline int OracleData::_internal_matched_spec_ids_size() const {
  return matched_spec_ids_.size();
}
inline int OracleData::matched_spec_ids_size() const {
  return _internal_matched_spec_ids_size();
}
inline void OracleData::clear_matched_spec_ids() {
  matched_spec_ids_.Clear();
}
inline std::string* OracleData::add_matched_spec_ids() {
  // @@protoc_insertion_point(field_add_mutable:oracles.v1.OracleData.matched_spec_ids)
  return _internal_add_matched_spec_ids();
}
inline const std::string& OracleData::_internal_matched_spec_ids(int index) const {
  return matched_spec_ids_.Get(index);
}
inline const std::string& OracleData::matched_spec_ids(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleData.matched_spec_ids)
  return _internal_matched_spec_ids(index);
}
inline std::string* OracleData::mutable_matched_spec_ids(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleData.matched_spec_ids)
  return matched_spec_ids_.Mutable(index);
}
inline void OracleData::set_matched_spec_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleData.matched_spec_ids)
  matched_spec_ids_.Mutable(index)->assign(value);
}
inline void OracleData::set_matched_spec_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleData.matched_spec_ids)
  matched_spec_ids_.Mutable(index)->assign(std::move(value));
}
inline void OracleData::set_matched_spec_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matched_spec_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oracles.v1.OracleData.matched_spec_ids)
}
inline void OracleData::set_matched_spec_ids(int index, const char* value, size_t size) {
  matched_spec_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.OracleData.matched_spec_ids)
}
inline std::string* OracleData::_internal_add_matched_spec_ids() {
  return matched_spec_ids_.Add();
}
inline void OracleData::add_matched_spec_ids(const std::string& value) {
  matched_spec_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oracles.v1.OracleData.matched_spec_ids)
}
inline void OracleData::add_matched_spec_ids(std::string&& value) {
  matched_spec_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oracles.v1.OracleData.matched_spec_ids)
}
inline void OracleData::add_matched_spec_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matched_spec_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oracles.v1.OracleData.matched_spec_ids)
}
inline void OracleData::add_matched_spec_ids(const char* value, size_t size) {
  matched_spec_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oracles.v1.OracleData.matched_spec_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OracleData::matched_spec_ids() const {
  // @@protoc_insertion_point(field_list:oracles.v1.OracleData.matched_spec_ids)
  return matched_spec_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OracleData::mutable_matched_spec_ids() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.OracleData.matched_spec_ids)
  return &matched_spec_ids_;
}

// int64 broadcast_at = 4 [json_name = "broadcastAt"];
inline void OracleData::clear_broadcast_at() {
  broadcast_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OracleData::_internal_broadcast_at() const {
  return broadcast_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OracleData::broadcast_at() const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleData.broadcast_at)
  return _internal_broadcast_at();
}
inline void OracleData::_internal_set_broadcast_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  broadcast_at_ = value;
}
inline void OracleData::set_broadcast_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_broadcast_at(value);
  // @@protoc_insertion_point(field_set:oracles.v1.OracleData.broadcast_at)
}

// -------------------------------------------------------------------

// Property

// string name = 1 [json_name = "name"];
inline void Property::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:oracles.v1.Property.name)
  return _internal_name();
}
inline void Property::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:oracles.v1.Property.name)
}
inline std::string* Property::mutable_name() {
  // @@protoc_insertion_point(field_mutable:oracles.v1.Property.name)
  return _internal_mutable_name();
}
inline const std::string& Property::_internal_name() const {
  return name_.Get();
}
inline void Property::_internal_set_name(const std::string& value) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Property::set_name(std::string&& value) {

  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oracles.v1.Property.name)
}
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:oracles.v1.Property.name)
}
inline void Property::set_name(const char* value,
    size_t size) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.Property.name)
}
inline std::string* Property::_internal_mutable_name() {

  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:oracles.v1.Property.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Property::set_allocated_name(std::string* name) {
  if (name != nullptr) {

  } else {

  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oracles.v1.Property.name)
}

// string value = 2 [json_name = "value"];
inline void Property::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:oracles.v1.Property.value)
  return _internal_value();
}
inline void Property::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:oracles.v1.Property.value)
}
inline std::string* Property::mutable_value() {
  // @@protoc_insertion_point(field_mutable:oracles.v1.Property.value)
  return _internal_mutable_value();
}
inline const std::string& Property::_internal_value() const {
  return value_.Get();
}
inline void Property::_internal_set_value(const std::string& value) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Property::set_value(std::string&& value) {

  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oracles.v1.Property.value)
}
inline void Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:oracles.v1.Property.value)
}
inline void Property::set_value(const char* value,
    size_t size) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.Property.value)
}
inline std::string* Property::_internal_mutable_value() {

  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:oracles.v1.Property.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oracles.v1.Property.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace oracles

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oracles_2fv1_2fdata_2eproto
