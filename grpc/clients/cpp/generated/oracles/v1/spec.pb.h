// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oracles/v1/spec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oracles_2fv1_2fspec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oracles_2fv1_2fspec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fspec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oracles_2fv1_2fspec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oracles_2fv1_2fspec_2eproto;
namespace oracles {
namespace v1 {
class Condition;
class ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class OracleSpec;
class OracleSpecDefaultTypeInternal;
extern OracleSpecDefaultTypeInternal _OracleSpec_default_instance_;
class OracleSpecConfiguration;
class OracleSpecConfigurationDefaultTypeInternal;
extern OracleSpecConfigurationDefaultTypeInternal _OracleSpecConfiguration_default_instance_;
class PropertyKey;
class PropertyKeyDefaultTypeInternal;
extern PropertyKeyDefaultTypeInternal _PropertyKey_default_instance_;
}  // namespace v1
}  // namespace oracles
PROTOBUF_NAMESPACE_OPEN
template<> ::oracles::v1::Condition* Arena::CreateMaybeMessage<::oracles::v1::Condition>(Arena*);
template<> ::oracles::v1::Filter* Arena::CreateMaybeMessage<::oracles::v1::Filter>(Arena*);
template<> ::oracles::v1::OracleSpec* Arena::CreateMaybeMessage<::oracles::v1::OracleSpec>(Arena*);
template<> ::oracles::v1::OracleSpecConfiguration* Arena::CreateMaybeMessage<::oracles::v1::OracleSpecConfiguration>(Arena*);
template<> ::oracles::v1::PropertyKey* Arena::CreateMaybeMessage<::oracles::v1::PropertyKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oracles {
namespace v1 {

enum OracleSpec_Status : int {
  OracleSpec_Status_STATUS_UNSPECIFIED = 0,
  OracleSpec_Status_STATUS_ACTIVE = 1,
  OracleSpec_Status_STATUS_DEACTIVATED = 2,
  OracleSpec_Status_OracleSpec_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OracleSpec_Status_OracleSpec_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OracleSpec_Status_IsValid(int value);
constexpr OracleSpec_Status OracleSpec_Status_Status_MIN = OracleSpec_Status_STATUS_UNSPECIFIED;
constexpr OracleSpec_Status OracleSpec_Status_Status_MAX = OracleSpec_Status_STATUS_DEACTIVATED;
constexpr int OracleSpec_Status_Status_ARRAYSIZE = OracleSpec_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OracleSpec_Status_descriptor();
template<typename T>
inline const std::string& OracleSpec_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OracleSpec_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OracleSpec_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OracleSpec_Status_descriptor(), enum_t_value);
}
inline bool OracleSpec_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OracleSpec_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OracleSpec_Status>(
    OracleSpec_Status_descriptor(), name, value);
}
enum PropertyKey_Type : int {
  PropertyKey_Type_TYPE_UNSPECIFIED = 0,
  PropertyKey_Type_TYPE_EMPTY = 1,
  PropertyKey_Type_TYPE_INTEGER = 2,
  PropertyKey_Type_TYPE_STRING = 3,
  PropertyKey_Type_TYPE_BOOLEAN = 4,
  PropertyKey_Type_TYPE_DECIMAL = 5,
  PropertyKey_Type_TYPE_TIMESTAMP = 6,
  PropertyKey_Type_PropertyKey_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PropertyKey_Type_PropertyKey_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PropertyKey_Type_IsValid(int value);
constexpr PropertyKey_Type PropertyKey_Type_Type_MIN = PropertyKey_Type_TYPE_UNSPECIFIED;
constexpr PropertyKey_Type PropertyKey_Type_Type_MAX = PropertyKey_Type_TYPE_TIMESTAMP;
constexpr int PropertyKey_Type_Type_ARRAYSIZE = PropertyKey_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyKey_Type_descriptor();
template<typename T>
inline const std::string& PropertyKey_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PropertyKey_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PropertyKey_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PropertyKey_Type_descriptor(), enum_t_value);
}
inline bool PropertyKey_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PropertyKey_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PropertyKey_Type>(
    PropertyKey_Type_descriptor(), name, value);
}
enum Condition_Operator : int {
  Condition_Operator_OPERATOR_UNSPECIFIED = 0,
  Condition_Operator_OPERATOR_EQUALS = 1,
  Condition_Operator_OPERATOR_GREATER_THAN = 2,
  Condition_Operator_OPERATOR_GREATER_THAN_OR_EQUAL = 3,
  Condition_Operator_OPERATOR_LESS_THAN = 4,
  Condition_Operator_OPERATOR_LESS_THAN_OR_EQUAL = 5,
  Condition_Operator_Condition_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Condition_Operator_Condition_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Condition_Operator_IsValid(int value);
constexpr Condition_Operator Condition_Operator_Operator_MIN = Condition_Operator_OPERATOR_UNSPECIFIED;
constexpr Condition_Operator Condition_Operator_Operator_MAX = Condition_Operator_OPERATOR_LESS_THAN_OR_EQUAL;
constexpr int Condition_Operator_Operator_ARRAYSIZE = Condition_Operator_Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Condition_Operator_descriptor();
template<typename T>
inline const std::string& Condition_Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Condition_Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Condition_Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Condition_Operator_descriptor(), enum_t_value);
}
inline bool Condition_Operator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Condition_Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Condition_Operator>(
    Condition_Operator_descriptor(), name, value);
}
// ===================================================================

class OracleSpecConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oracles.v1.OracleSpecConfiguration) */ {
 public:
  inline OracleSpecConfiguration() : OracleSpecConfiguration(nullptr) {}
  virtual ~OracleSpecConfiguration();

  OracleSpecConfiguration(const OracleSpecConfiguration& from);
  OracleSpecConfiguration(OracleSpecConfiguration&& from) noexcept
    : OracleSpecConfiguration() {
    *this = ::std::move(from);
  }

  inline OracleSpecConfiguration& operator=(const OracleSpecConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleSpecConfiguration& operator=(OracleSpecConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleSpecConfiguration& default_instance();

  static inline const OracleSpecConfiguration* internal_default_instance() {
    return reinterpret_cast<const OracleSpecConfiguration*>(
               &_OracleSpecConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OracleSpecConfiguration& a, OracleSpecConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleSpecConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleSpecConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleSpecConfiguration* New() const final {
    return CreateMaybeMessage<OracleSpecConfiguration>(nullptr);
  }

  OracleSpecConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleSpecConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleSpecConfiguration& from);
  void MergeFrom(const OracleSpecConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleSpecConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oracles.v1.OracleSpecConfiguration";
  }
  protected:
  explicit OracleSpecConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oracles_2fv1_2fspec_2eproto);
    return ::descriptor_table_oracles_2fv1_2fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeysFieldNumber = 1,
    kFiltersFieldNumber = 2,
  };
  // repeated string pub_keys = 1 [json_name = "pubKeys"];
  int pub_keys_size() const;
  private:
  int _internal_pub_keys_size() const;
  public:
  void clear_pub_keys();
  const std::string& pub_keys(int index) const;
  std::string* mutable_pub_keys(int index);
  void set_pub_keys(int index, const std::string& value);
  void set_pub_keys(int index, std::string&& value);
  void set_pub_keys(int index, const char* value);
  void set_pub_keys(int index, const char* value, size_t size);
  std::string* add_pub_keys();
  void add_pub_keys(const std::string& value);
  void add_pub_keys(std::string&& value);
  void add_pub_keys(const char* value);
  void add_pub_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pub_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pub_keys();
  private:
  const std::string& _internal_pub_keys(int index) const;
  std::string* _internal_add_pub_keys();
  public:

  // repeated .oracles.v1.Filter filters = 2 [json_name = "filters"];
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::oracles::v1::Filter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >*
      mutable_filters();
  private:
  const ::oracles::v1::Filter& _internal_filters(int index) const;
  ::oracles::v1::Filter* _internal_add_filters();
  public:
  const ::oracles::v1::Filter& filters(int index) const;
  ::oracles::v1::Filter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:oracles.v1.OracleSpecConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pub_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter > filters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oracles_2fv1_2fspec_2eproto;
};
// -------------------------------------------------------------------

class OracleSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oracles.v1.OracleSpec) */ {
 public:
  inline OracleSpec() : OracleSpec(nullptr) {}
  virtual ~OracleSpec();

  OracleSpec(const OracleSpec& from);
  OracleSpec(OracleSpec&& from) noexcept
    : OracleSpec() {
    *this = ::std::move(from);
  }

  inline OracleSpec& operator=(const OracleSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleSpec& operator=(OracleSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleSpec& default_instance();

  static inline const OracleSpec* internal_default_instance() {
    return reinterpret_cast<const OracleSpec*>(
               &_OracleSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OracleSpec& a, OracleSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleSpec* New() const final {
    return CreateMaybeMessage<OracleSpec>(nullptr);
  }

  OracleSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleSpec& from);
  void MergeFrom(const OracleSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oracles.v1.OracleSpec";
  }
  protected:
  explicit OracleSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oracles_2fv1_2fspec_2eproto);
    return ::descriptor_table_oracles_2fv1_2fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OracleSpec_Status Status;
  static constexpr Status STATUS_UNSPECIFIED =
    OracleSpec_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_ACTIVE =
    OracleSpec_Status_STATUS_ACTIVE;
  static constexpr Status STATUS_DEACTIVATED =
    OracleSpec_Status_STATUS_DEACTIVATED;
  static inline bool Status_IsValid(int value) {
    return OracleSpec_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    OracleSpec_Status_Status_MIN;
  static constexpr Status Status_MAX =
    OracleSpec_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    OracleSpec_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return OracleSpec_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return OracleSpec_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return OracleSpec_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeysFieldNumber = 4,
    kFiltersFieldNumber = 5,
    kIdFieldNumber = 1,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kStatusFieldNumber = 6,
  };
  // repeated string pub_keys = 4 [json_name = "pubKeys"];
  int pub_keys_size() const;
  private:
  int _internal_pub_keys_size() const;
  public:
  void clear_pub_keys();
  const std::string& pub_keys(int index) const;
  std::string* mutable_pub_keys(int index);
  void set_pub_keys(int index, const std::string& value);
  void set_pub_keys(int index, std::string&& value);
  void set_pub_keys(int index, const char* value);
  void set_pub_keys(int index, const char* value, size_t size);
  std::string* add_pub_keys();
  void add_pub_keys(const std::string& value);
  void add_pub_keys(std::string&& value);
  void add_pub_keys(const char* value);
  void add_pub_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pub_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pub_keys();
  private:
  const std::string& _internal_pub_keys(int index) const;
  std::string* _internal_add_pub_keys();
  public:

  // repeated .oracles.v1.Filter filters = 5 [json_name = "filters"];
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::oracles::v1::Filter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >*
      mutable_filters();
  private:
  const ::oracles::v1::Filter& _internal_filters(int index) const;
  ::oracles::v1::Filter* _internal_add_filters();
  public:
  const ::oracles::v1::Filter& filters(int index) const;
  ::oracles::v1::Filter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >&
      filters() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 created_at = 2 [json_name = "createdAt"];
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 3 [json_name = "updatedAt"];
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .oracles.v1.OracleSpec.Status status = 6 [json_name = "status"];
  void clear_status();
  ::oracles::v1::OracleSpec_Status status() const;
  void set_status(::oracles::v1::OracleSpec_Status value);
  private:
  ::oracles::v1::OracleSpec_Status _internal_status() const;
  void _internal_set_status(::oracles::v1::OracleSpec_Status value);
  public:

  // @@protoc_insertion_point(class_scope:oracles.v1.OracleSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pub_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter > filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oracles_2fv1_2fspec_2eproto;
};
// -------------------------------------------------------------------

class Filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oracles.v1.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {}
  virtual ~Filter();

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Filter& default_instance();

  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oracles.v1.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oracles_2fv1_2fspec_2eproto);
    return ::descriptor_table_oracles_2fv1_2fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .oracles.v1.Condition conditions = 2 [json_name = "conditions"];
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::oracles::v1::Condition* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Condition >*
      mutable_conditions();
  private:
  const ::oracles::v1::Condition& _internal_conditions(int index) const;
  ::oracles::v1::Condition* _internal_add_conditions();
  public:
  const ::oracles::v1::Condition& conditions(int index) const;
  ::oracles::v1::Condition* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Condition >&
      conditions() const;

  // .oracles.v1.PropertyKey key = 1 [json_name = "key"];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::oracles::v1::PropertyKey& key() const;
  ::oracles::v1::PropertyKey* release_key();
  ::oracles::v1::PropertyKey* mutable_key();
  void set_allocated_key(::oracles::v1::PropertyKey* key);
  private:
  const ::oracles::v1::PropertyKey& _internal_key() const;
  ::oracles::v1::PropertyKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::oracles::v1::PropertyKey* key);
  ::oracles::v1::PropertyKey* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:oracles.v1.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Condition > conditions_;
  ::oracles::v1::PropertyKey* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oracles_2fv1_2fspec_2eproto;
};
// -------------------------------------------------------------------

class PropertyKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oracles.v1.PropertyKey) */ {
 public:
  inline PropertyKey() : PropertyKey(nullptr) {}
  virtual ~PropertyKey();

  PropertyKey(const PropertyKey& from);
  PropertyKey(PropertyKey&& from) noexcept
    : PropertyKey() {
    *this = ::std::move(from);
  }

  inline PropertyKey& operator=(const PropertyKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyKey& operator=(PropertyKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyKey& default_instance();

  static inline const PropertyKey* internal_default_instance() {
    return reinterpret_cast<const PropertyKey*>(
               &_PropertyKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PropertyKey& a, PropertyKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyKey* New() const final {
    return CreateMaybeMessage<PropertyKey>(nullptr);
  }

  PropertyKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyKey& from);
  void MergeFrom(const PropertyKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oracles.v1.PropertyKey";
  }
  protected:
  explicit PropertyKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oracles_2fv1_2fspec_2eproto);
    return ::descriptor_table_oracles_2fv1_2fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PropertyKey_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    PropertyKey_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_EMPTY =
    PropertyKey_Type_TYPE_EMPTY;
  static constexpr Type TYPE_INTEGER =
    PropertyKey_Type_TYPE_INTEGER;
  static constexpr Type TYPE_STRING =
    PropertyKey_Type_TYPE_STRING;
  static constexpr Type TYPE_BOOLEAN =
    PropertyKey_Type_TYPE_BOOLEAN;
  static constexpr Type TYPE_DECIMAL =
    PropertyKey_Type_TYPE_DECIMAL;
  static constexpr Type TYPE_TIMESTAMP =
    PropertyKey_Type_TYPE_TIMESTAMP;
  static inline bool Type_IsValid(int value) {
    return PropertyKey_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PropertyKey_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PropertyKey_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PropertyKey_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return PropertyKey_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PropertyKey_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return PropertyKey_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .oracles.v1.PropertyKey.Type type = 2 [json_name = "type"];
  void clear_type();
  ::oracles::v1::PropertyKey_Type type() const;
  void set_type(::oracles::v1::PropertyKey_Type value);
  private:
  ::oracles::v1::PropertyKey_Type _internal_type() const;
  void _internal_set_type(::oracles::v1::PropertyKey_Type value);
  public:

  // @@protoc_insertion_point(class_scope:oracles.v1.PropertyKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oracles_2fv1_2fspec_2eproto;
};
// -------------------------------------------------------------------

class Condition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oracles.v1.Condition) */ {
 public:
  inline Condition() : Condition(nullptr) {}
  virtual ~Condition();

  Condition(const Condition& from);
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Condition& operator=(Condition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Condition& default_instance();

  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Condition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const final {
    return CreateMaybeMessage<Condition>(nullptr);
  }

  Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oracles.v1.Condition";
  }
  protected:
  explicit Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oracles_2fv1_2fspec_2eproto);
    return ::descriptor_table_oracles_2fv1_2fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Condition_Operator Operator;
  static constexpr Operator OPERATOR_UNSPECIFIED =
    Condition_Operator_OPERATOR_UNSPECIFIED;
  static constexpr Operator OPERATOR_EQUALS =
    Condition_Operator_OPERATOR_EQUALS;
  static constexpr Operator OPERATOR_GREATER_THAN =
    Condition_Operator_OPERATOR_GREATER_THAN;
  static constexpr Operator OPERATOR_GREATER_THAN_OR_EQUAL =
    Condition_Operator_OPERATOR_GREATER_THAN_OR_EQUAL;
  static constexpr Operator OPERATOR_LESS_THAN =
    Condition_Operator_OPERATOR_LESS_THAN;
  static constexpr Operator OPERATOR_LESS_THAN_OR_EQUAL =
    Condition_Operator_OPERATOR_LESS_THAN_OR_EQUAL;
  static inline bool Operator_IsValid(int value) {
    return Condition_Operator_IsValid(value);
  }
  static constexpr Operator Operator_MIN =
    Condition_Operator_Operator_MIN;
  static constexpr Operator Operator_MAX =
    Condition_Operator_Operator_MAX;
  static constexpr int Operator_ARRAYSIZE =
    Condition_Operator_Operator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operator_descriptor() {
    return Condition_Operator_descriptor();
  }
  template<typename T>
  static inline const std::string& Operator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operator_Name.");
    return Condition_Operator_Name(enum_t_value);
  }
  static inline bool Operator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operator* value) {
    return Condition_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .oracles.v1.Condition.Operator operator = 1 [json_name = "operator"];
  void clear_operator_();
  ::oracles::v1::Condition_Operator operator_() const;
  void set_operator_(::oracles::v1::Condition_Operator value);
  private:
  ::oracles::v1::Condition_Operator _internal_operator_() const;
  void _internal_set_operator_(::oracles::v1::Condition_Operator value);
  public:

  // @@protoc_insertion_point(class_scope:oracles.v1.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oracles_2fv1_2fspec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OracleSpecConfiguration

// repeated string pub_keys = 1 [json_name = "pubKeys"];
inline int OracleSpecConfiguration::_internal_pub_keys_size() const {
  return pub_keys_.size();
}
inline int OracleSpecConfiguration::pub_keys_size() const {
  return _internal_pub_keys_size();
}
inline void OracleSpecConfiguration::clear_pub_keys() {
  pub_keys_.Clear();
}
inline std::string* OracleSpecConfiguration::add_pub_keys() {
  // @@protoc_insertion_point(field_add_mutable:oracles.v1.OracleSpecConfiguration.pub_keys)
  return _internal_add_pub_keys();
}
inline const std::string& OracleSpecConfiguration::_internal_pub_keys(int index) const {
  return pub_keys_.Get(index);
}
inline const std::string& OracleSpecConfiguration::pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpecConfiguration.pub_keys)
  return _internal_pub_keys(index);
}
inline std::string* OracleSpecConfiguration::mutable_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleSpecConfiguration.pub_keys)
  return pub_keys_.Mutable(index);
}
inline void OracleSpecConfiguration::set_pub_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpecConfiguration.pub_keys)
  pub_keys_.Mutable(index)->assign(value);
}
inline void OracleSpecConfiguration::set_pub_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpecConfiguration.pub_keys)
  pub_keys_.Mutable(index)->assign(std::move(value));
}
inline void OracleSpecConfiguration::set_pub_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oracles.v1.OracleSpecConfiguration.pub_keys)
}
inline void OracleSpecConfiguration::set_pub_keys(int index, const char* value, size_t size) {
  pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.OracleSpecConfiguration.pub_keys)
}
inline std::string* OracleSpecConfiguration::_internal_add_pub_keys() {
  return pub_keys_.Add();
}
inline void OracleSpecConfiguration::add_pub_keys(const std::string& value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oracles.v1.OracleSpecConfiguration.pub_keys)
}
inline void OracleSpecConfiguration::add_pub_keys(std::string&& value) {
  pub_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oracles.v1.OracleSpecConfiguration.pub_keys)
}
inline void OracleSpecConfiguration::add_pub_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oracles.v1.OracleSpecConfiguration.pub_keys)
}
inline void OracleSpecConfiguration::add_pub_keys(const char* value, size_t size) {
  pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oracles.v1.OracleSpecConfiguration.pub_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OracleSpecConfiguration::pub_keys() const {
  // @@protoc_insertion_point(field_list:oracles.v1.OracleSpecConfiguration.pub_keys)
  return pub_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OracleSpecConfiguration::mutable_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.OracleSpecConfiguration.pub_keys)
  return &pub_keys_;
}

// repeated .oracles.v1.Filter filters = 2 [json_name = "filters"];
inline int OracleSpecConfiguration::_internal_filters_size() const {
  return filters_.size();
}
inline int OracleSpecConfiguration::filters_size() const {
  return _internal_filters_size();
}
inline void OracleSpecConfiguration::clear_filters() {
  filters_.Clear();
}
inline ::oracles::v1::Filter* OracleSpecConfiguration::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleSpecConfiguration.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >*
OracleSpecConfiguration::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.OracleSpecConfiguration.filters)
  return &filters_;
}
inline const ::oracles::v1::Filter& OracleSpecConfiguration::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::oracles::v1::Filter& OracleSpecConfiguration::filters(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpecConfiguration.filters)
  return _internal_filters(index);
}
inline ::oracles::v1::Filter* OracleSpecConfiguration::_internal_add_filters() {
  return filters_.Add();
}
inline ::oracles::v1::Filter* OracleSpecConfiguration::add_filters() {
  // @@protoc_insertion_point(field_add:oracles.v1.OracleSpecConfiguration.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >&
OracleSpecConfiguration::filters() const {
  // @@protoc_insertion_point(field_list:oracles.v1.OracleSpecConfiguration.filters)
  return filters_;
}

// -------------------------------------------------------------------

// OracleSpec

// string id = 1 [json_name = "id"];
inline void OracleSpec::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OracleSpec::id() const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpec.id)
  return _internal_id();
}
inline void OracleSpec::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpec.id)
}
inline std::string* OracleSpec::mutable_id() {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleSpec.id)
  return _internal_mutable_id();
}
inline const std::string& OracleSpec::_internal_id() const {
  return id_.Get();
}
inline void OracleSpec::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OracleSpec::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oracles.v1.OracleSpec.id)
}
inline void OracleSpec::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:oracles.v1.OracleSpec.id)
}
inline void OracleSpec::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.OracleSpec.id)
}
inline std::string* OracleSpec::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OracleSpec::release_id() {
  // @@protoc_insertion_point(field_release:oracles.v1.OracleSpec.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OracleSpec::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oracles.v1.OracleSpec.id)
}

// int64 created_at = 2 [json_name = "createdAt"];
inline void OracleSpec::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OracleSpec::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OracleSpec::created_at() const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpec.created_at)
  return _internal_created_at();
}
inline void OracleSpec::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  created_at_ = value;
}
inline void OracleSpec::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpec.created_at)
}

// int64 updated_at = 3 [json_name = "updatedAt"];
inline void OracleSpec::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OracleSpec::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OracleSpec::updated_at() const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpec.updated_at)
  return _internal_updated_at();
}
inline void OracleSpec::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updated_at_ = value;
}
inline void OracleSpec::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpec.updated_at)
}

// repeated string pub_keys = 4 [json_name = "pubKeys"];
inline int OracleSpec::_internal_pub_keys_size() const {
  return pub_keys_.size();
}
inline int OracleSpec::pub_keys_size() const {
  return _internal_pub_keys_size();
}
inline void OracleSpec::clear_pub_keys() {
  pub_keys_.Clear();
}
inline std::string* OracleSpec::add_pub_keys() {
  // @@protoc_insertion_point(field_add_mutable:oracles.v1.OracleSpec.pub_keys)
  return _internal_add_pub_keys();
}
inline const std::string& OracleSpec::_internal_pub_keys(int index) const {
  return pub_keys_.Get(index);
}
inline const std::string& OracleSpec::pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpec.pub_keys)
  return _internal_pub_keys(index);
}
inline std::string* OracleSpec::mutable_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleSpec.pub_keys)
  return pub_keys_.Mutable(index);
}
inline void OracleSpec::set_pub_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpec.pub_keys)
  pub_keys_.Mutable(index)->assign(value);
}
inline void OracleSpec::set_pub_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpec.pub_keys)
  pub_keys_.Mutable(index)->assign(std::move(value));
}
inline void OracleSpec::set_pub_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oracles.v1.OracleSpec.pub_keys)
}
inline void OracleSpec::set_pub_keys(int index, const char* value, size_t size) {
  pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.OracleSpec.pub_keys)
}
inline std::string* OracleSpec::_internal_add_pub_keys() {
  return pub_keys_.Add();
}
inline void OracleSpec::add_pub_keys(const std::string& value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oracles.v1.OracleSpec.pub_keys)
}
inline void OracleSpec::add_pub_keys(std::string&& value) {
  pub_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oracles.v1.OracleSpec.pub_keys)
}
inline void OracleSpec::add_pub_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oracles.v1.OracleSpec.pub_keys)
}
inline void OracleSpec::add_pub_keys(const char* value, size_t size) {
  pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oracles.v1.OracleSpec.pub_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OracleSpec::pub_keys() const {
  // @@protoc_insertion_point(field_list:oracles.v1.OracleSpec.pub_keys)
  return pub_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OracleSpec::mutable_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.OracleSpec.pub_keys)
  return &pub_keys_;
}

// repeated .oracles.v1.Filter filters = 5 [json_name = "filters"];
inline int OracleSpec::_internal_filters_size() const {
  return filters_.size();
}
inline int OracleSpec::filters_size() const {
  return _internal_filters_size();
}
inline void OracleSpec::clear_filters() {
  filters_.Clear();
}
inline ::oracles::v1::Filter* OracleSpec::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.OracleSpec.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >*
OracleSpec::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.OracleSpec.filters)
  return &filters_;
}
inline const ::oracles::v1::Filter& OracleSpec::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::oracles::v1::Filter& OracleSpec::filters(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpec.filters)
  return _internal_filters(index);
}
inline ::oracles::v1::Filter* OracleSpec::_internal_add_filters() {
  return filters_.Add();
}
inline ::oracles::v1::Filter* OracleSpec::add_filters() {
  // @@protoc_insertion_point(field_add:oracles.v1.OracleSpec.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Filter >&
OracleSpec::filters() const {
  // @@protoc_insertion_point(field_list:oracles.v1.OracleSpec.filters)
  return filters_;
}

// .oracles.v1.OracleSpec.Status status = 6 [json_name = "status"];
inline void OracleSpec::clear_status() {
  status_ = 0;
}
inline ::oracles::v1::OracleSpec_Status OracleSpec::_internal_status() const {
  return static_cast< ::oracles::v1::OracleSpec_Status >(status_);
}
inline ::oracles::v1::OracleSpec_Status OracleSpec::status() const {
  // @@protoc_insertion_point(field_get:oracles.v1.OracleSpec.status)
  return _internal_status();
}
inline void OracleSpec::_internal_set_status(::oracles::v1::OracleSpec_Status value) {

  status_ = value;
}
inline void OracleSpec::set_status(::oracles::v1::OracleSpec_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:oracles.v1.OracleSpec.status)
}

// -------------------------------------------------------------------

// Filter

// .oracles.v1.PropertyKey key = 1 [json_name = "key"];
inline bool Filter::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool Filter::has_key() const {
  return _internal_has_key();
}
inline void Filter::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::oracles::v1::PropertyKey& Filter::_internal_key() const {
  const ::oracles::v1::PropertyKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::oracles::v1::PropertyKey&>(
      ::oracles::v1::_PropertyKey_default_instance_);
}
inline const ::oracles::v1::PropertyKey& Filter::key() const {
  // @@protoc_insertion_point(field_get:oracles.v1.Filter.key)
  return _internal_key();
}
inline void Filter::unsafe_arena_set_allocated_key(
    ::oracles::v1::PropertyKey* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oracles.v1.Filter.key)
}
inline ::oracles::v1::PropertyKey* Filter::release_key() {

  ::oracles::v1::PropertyKey* temp = key_;
  key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::oracles::v1::PropertyKey* Filter::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:oracles.v1.Filter.key)

  ::oracles::v1::PropertyKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::oracles::v1::PropertyKey* Filter::_internal_mutable_key() {

  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::oracles::v1::PropertyKey>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::oracles::v1::PropertyKey* Filter::mutable_key() {
  // @@protoc_insertion_point(field_mutable:oracles.v1.Filter.key)
  return _internal_mutable_key();
}
inline void Filter::set_allocated_key(::oracles::v1::PropertyKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }

  } else {

  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:oracles.v1.Filter.key)
}

// repeated .oracles.v1.Condition conditions = 2 [json_name = "conditions"];
inline int Filter::_internal_conditions_size() const {
  return conditions_.size();
}
inline int Filter::conditions_size() const {
  return _internal_conditions_size();
}
inline void Filter::clear_conditions() {
  conditions_.Clear();
}
inline ::oracles::v1::Condition* Filter::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:oracles.v1.Filter.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Condition >*
Filter::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:oracles.v1.Filter.conditions)
  return &conditions_;
}
inline const ::oracles::v1::Condition& Filter::_internal_conditions(int index) const {
  return conditions_.Get(index);
}
inline const ::oracles::v1::Condition& Filter::conditions(int index) const {
  // @@protoc_insertion_point(field_get:oracles.v1.Filter.conditions)
  return _internal_conditions(index);
}
inline ::oracles::v1::Condition* Filter::_internal_add_conditions() {
  return conditions_.Add();
}
inline ::oracles::v1::Condition* Filter::add_conditions() {
  // @@protoc_insertion_point(field_add:oracles.v1.Filter.conditions)
  return _internal_add_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::Condition >&
Filter::conditions() const {
  // @@protoc_insertion_point(field_list:oracles.v1.Filter.conditions)
  return conditions_;
}

// -------------------------------------------------------------------

// PropertyKey

// string name = 1 [json_name = "name"];
inline void PropertyKey::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PropertyKey::name() const {
  // @@protoc_insertion_point(field_get:oracles.v1.PropertyKey.name)
  return _internal_name();
}
inline void PropertyKey::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:oracles.v1.PropertyKey.name)
}
inline std::string* PropertyKey::mutable_name() {
  // @@protoc_insertion_point(field_mutable:oracles.v1.PropertyKey.name)
  return _internal_mutable_name();
}
inline const std::string& PropertyKey::_internal_name() const {
  return name_.Get();
}
inline void PropertyKey::_internal_set_name(const std::string& value) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropertyKey::set_name(std::string&& value) {

  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oracles.v1.PropertyKey.name)
}
inline void PropertyKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:oracles.v1.PropertyKey.name)
}
inline void PropertyKey::set_name(const char* value,
    size_t size) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.PropertyKey.name)
}
inline std::string* PropertyKey::_internal_mutable_name() {

  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropertyKey::release_name() {
  // @@protoc_insertion_point(field_release:oracles.v1.PropertyKey.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropertyKey::set_allocated_name(std::string* name) {
  if (name != nullptr) {

  } else {

  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oracles.v1.PropertyKey.name)
}

// .oracles.v1.PropertyKey.Type type = 2 [json_name = "type"];
inline void PropertyKey::clear_type() {
  type_ = 0;
}
inline ::oracles::v1::PropertyKey_Type PropertyKey::_internal_type() const {
  return static_cast< ::oracles::v1::PropertyKey_Type >(type_);
}
inline ::oracles::v1::PropertyKey_Type PropertyKey::type() const {
  // @@protoc_insertion_point(field_get:oracles.v1.PropertyKey.type)
  return _internal_type();
}
inline void PropertyKey::_internal_set_type(::oracles::v1::PropertyKey_Type value) {

  type_ = value;
}
inline void PropertyKey::set_type(::oracles::v1::PropertyKey_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oracles.v1.PropertyKey.type)
}

// -------------------------------------------------------------------

// Condition

// .oracles.v1.Condition.Operator operator = 1 [json_name = "operator"];
inline void Condition::clear_operator_() {
  operator__ = 0;
}
inline ::oracles::v1::Condition_Operator Condition::_internal_operator_() const {
  return static_cast< ::oracles::v1::Condition_Operator >(operator__);
}
inline ::oracles::v1::Condition_Operator Condition::operator_() const {
  // @@protoc_insertion_point(field_get:oracles.v1.Condition.operator)
  return _internal_operator_();
}
inline void Condition::_internal_set_operator_(::oracles::v1::Condition_Operator value) {

  operator__ = value;
}
inline void Condition::set_operator_(::oracles::v1::Condition_Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:oracles.v1.Condition.operator)
}

// string value = 2 [json_name = "value"];
inline void Condition::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Condition::value() const {
  // @@protoc_insertion_point(field_get:oracles.v1.Condition.value)
  return _internal_value();
}
inline void Condition::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:oracles.v1.Condition.value)
}
inline std::string* Condition::mutable_value() {
  // @@protoc_insertion_point(field_mutable:oracles.v1.Condition.value)
  return _internal_mutable_value();
}
inline const std::string& Condition::_internal_value() const {
  return value_.Get();
}
inline void Condition::_internal_set_value(const std::string& value) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Condition::set_value(std::string&& value) {

  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oracles.v1.Condition.value)
}
inline void Condition::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:oracles.v1.Condition.value)
}
inline void Condition::set_value(const char* value,
    size_t size) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oracles.v1.Condition.value)
}
inline std::string* Condition::_internal_mutable_value() {

  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Condition::release_value() {
  // @@protoc_insertion_point(field_release:oracles.v1.Condition.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Condition::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oracles.v1.Condition.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace oracles

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oracles::v1::OracleSpec_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oracles::v1::OracleSpec_Status>() {
  return ::oracles::v1::OracleSpec_Status_descriptor();
}
template <> struct is_proto_enum< ::oracles::v1::PropertyKey_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oracles::v1::PropertyKey_Type>() {
  return ::oracles::v1::PropertyKey_Type_descriptor();
}
template <> struct is_proto_enum< ::oracles::v1::Condition_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oracles::v1::Condition_Operator>() {
  return ::oracles::v1::Condition_Operator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oracles_2fv1_2fspec_2eproto
