// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/trading.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vega.pb.h"
#include "markets.pb.h"
#include "governance.pb.h"
#include "assets.pb.h"
#include "events/v1/events.pb.h"
#include "oracles/v1/spec.pb.h"
#include "oracles/v1/data.pb.h"
#include "commands/v1/commands.pb.h"
#include "commands/v1/transaction.pb.h"
#include "commands/v1/validator_commands.pb.h"
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2ftrading_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2ftrading_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[152]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2ftrading_2eproto;
namespace api {
namespace v1 {
class AccountsSubscribeRequest;
class AccountsSubscribeRequestDefaultTypeInternal;
extern AccountsSubscribeRequestDefaultTypeInternal _AccountsSubscribeRequest_default_instance_;
class AccountsSubscribeResponse;
class AccountsSubscribeResponseDefaultTypeInternal;
extern AccountsSubscribeResponseDefaultTypeInternal _AccountsSubscribeResponse_default_instance_;
class AssetByIDRequest;
class AssetByIDRequestDefaultTypeInternal;
extern AssetByIDRequestDefaultTypeInternal _AssetByIDRequest_default_instance_;
class AssetByIDResponse;
class AssetByIDResponseDefaultTypeInternal;
extern AssetByIDResponseDefaultTypeInternal _AssetByIDResponse_default_instance_;
class AssetsRequest;
class AssetsRequestDefaultTypeInternal;
extern AssetsRequestDefaultTypeInternal _AssetsRequest_default_instance_;
class AssetsResponse;
class AssetsResponseDefaultTypeInternal;
extern AssetsResponseDefaultTypeInternal _AssetsResponse_default_instance_;
class CandlesRequest;
class CandlesRequestDefaultTypeInternal;
extern CandlesRequestDefaultTypeInternal _CandlesRequest_default_instance_;
class CandlesResponse;
class CandlesResponseDefaultTypeInternal;
extern CandlesResponseDefaultTypeInternal _CandlesResponse_default_instance_;
class CandlesSubscribeRequest;
class CandlesSubscribeRequestDefaultTypeInternal;
extern CandlesSubscribeRequestDefaultTypeInternal _CandlesSubscribeRequest_default_instance_;
class CandlesSubscribeResponse;
class CandlesSubscribeResponseDefaultTypeInternal;
extern CandlesSubscribeResponseDefaultTypeInternal _CandlesSubscribeResponse_default_instance_;
class DepositRequest;
class DepositRequestDefaultTypeInternal;
extern DepositRequestDefaultTypeInternal _DepositRequest_default_instance_;
class DepositResponse;
class DepositResponseDefaultTypeInternal;
extern DepositResponseDefaultTypeInternal _DepositResponse_default_instance_;
class DepositsRequest;
class DepositsRequestDefaultTypeInternal;
extern DepositsRequestDefaultTypeInternal _DepositsRequest_default_instance_;
class DepositsResponse;
class DepositsResponseDefaultTypeInternal;
extern DepositsResponseDefaultTypeInternal _DepositsResponse_default_instance_;
class ERC20WithdrawalApprovalRequest;
class ERC20WithdrawalApprovalRequestDefaultTypeInternal;
extern ERC20WithdrawalApprovalRequestDefaultTypeInternal _ERC20WithdrawalApprovalRequest_default_instance_;
class ERC20WithdrawalApprovalResponse;
class ERC20WithdrawalApprovalResponseDefaultTypeInternal;
extern ERC20WithdrawalApprovalResponseDefaultTypeInternal _ERC20WithdrawalApprovalResponse_default_instance_;
class EstimateFeeRequest;
class EstimateFeeRequestDefaultTypeInternal;
extern EstimateFeeRequestDefaultTypeInternal _EstimateFeeRequest_default_instance_;
class EstimateFeeResponse;
class EstimateFeeResponseDefaultTypeInternal;
extern EstimateFeeResponseDefaultTypeInternal _EstimateFeeResponse_default_instance_;
class EstimateMarginRequest;
class EstimateMarginRequestDefaultTypeInternal;
extern EstimateMarginRequestDefaultTypeInternal _EstimateMarginRequest_default_instance_;
class EstimateMarginResponse;
class EstimateMarginResponseDefaultTypeInternal;
extern EstimateMarginResponseDefaultTypeInternal _EstimateMarginResponse_default_instance_;
class FeeInfrastructureAccountsRequest;
class FeeInfrastructureAccountsRequestDefaultTypeInternal;
extern FeeInfrastructureAccountsRequestDefaultTypeInternal _FeeInfrastructureAccountsRequest_default_instance_;
class FeeInfrastructureAccountsResponse;
class FeeInfrastructureAccountsResponseDefaultTypeInternal;
extern FeeInfrastructureAccountsResponseDefaultTypeInternal _FeeInfrastructureAccountsResponse_default_instance_;
class GetNetworkParametersProposalsRequest;
class GetNetworkParametersProposalsRequestDefaultTypeInternal;
extern GetNetworkParametersProposalsRequestDefaultTypeInternal _GetNetworkParametersProposalsRequest_default_instance_;
class GetNetworkParametersProposalsResponse;
class GetNetworkParametersProposalsResponseDefaultTypeInternal;
extern GetNetworkParametersProposalsResponseDefaultTypeInternal _GetNetworkParametersProposalsResponse_default_instance_;
class GetNewAssetProposalsRequest;
class GetNewAssetProposalsRequestDefaultTypeInternal;
extern GetNewAssetProposalsRequestDefaultTypeInternal _GetNewAssetProposalsRequest_default_instance_;
class GetNewAssetProposalsResponse;
class GetNewAssetProposalsResponseDefaultTypeInternal;
extern GetNewAssetProposalsResponseDefaultTypeInternal _GetNewAssetProposalsResponse_default_instance_;
class GetNewMarketProposalsRequest;
class GetNewMarketProposalsRequestDefaultTypeInternal;
extern GetNewMarketProposalsRequestDefaultTypeInternal _GetNewMarketProposalsRequest_default_instance_;
class GetNewMarketProposalsResponse;
class GetNewMarketProposalsResponseDefaultTypeInternal;
extern GetNewMarketProposalsResponseDefaultTypeInternal _GetNewMarketProposalsResponse_default_instance_;
class GetNodeSignaturesAggregateRequest;
class GetNodeSignaturesAggregateRequestDefaultTypeInternal;
extern GetNodeSignaturesAggregateRequestDefaultTypeInternal _GetNodeSignaturesAggregateRequest_default_instance_;
class GetNodeSignaturesAggregateResponse;
class GetNodeSignaturesAggregateResponseDefaultTypeInternal;
extern GetNodeSignaturesAggregateResponseDefaultTypeInternal _GetNodeSignaturesAggregateResponse_default_instance_;
class GetProposalByIDRequest;
class GetProposalByIDRequestDefaultTypeInternal;
extern GetProposalByIDRequestDefaultTypeInternal _GetProposalByIDRequest_default_instance_;
class GetProposalByIDResponse;
class GetProposalByIDResponseDefaultTypeInternal;
extern GetProposalByIDResponseDefaultTypeInternal _GetProposalByIDResponse_default_instance_;
class GetProposalByReferenceRequest;
class GetProposalByReferenceRequestDefaultTypeInternal;
extern GetProposalByReferenceRequestDefaultTypeInternal _GetProposalByReferenceRequest_default_instance_;
class GetProposalByReferenceResponse;
class GetProposalByReferenceResponseDefaultTypeInternal;
extern GetProposalByReferenceResponseDefaultTypeInternal _GetProposalByReferenceResponse_default_instance_;
class GetProposalsByPartyRequest;
class GetProposalsByPartyRequestDefaultTypeInternal;
extern GetProposalsByPartyRequestDefaultTypeInternal _GetProposalsByPartyRequest_default_instance_;
class GetProposalsByPartyResponse;
class GetProposalsByPartyResponseDefaultTypeInternal;
extern GetProposalsByPartyResponseDefaultTypeInternal _GetProposalsByPartyResponse_default_instance_;
class GetProposalsRequest;
class GetProposalsRequestDefaultTypeInternal;
extern GetProposalsRequestDefaultTypeInternal _GetProposalsRequest_default_instance_;
class GetProposalsResponse;
class GetProposalsResponseDefaultTypeInternal;
extern GetProposalsResponseDefaultTypeInternal _GetProposalsResponse_default_instance_;
class GetUpdateMarketProposalsRequest;
class GetUpdateMarketProposalsRequestDefaultTypeInternal;
extern GetUpdateMarketProposalsRequestDefaultTypeInternal _GetUpdateMarketProposalsRequest_default_instance_;
class GetUpdateMarketProposalsResponse;
class GetUpdateMarketProposalsResponseDefaultTypeInternal;
extern GetUpdateMarketProposalsResponseDefaultTypeInternal _GetUpdateMarketProposalsResponse_default_instance_;
class GetVegaTimeRequest;
class GetVegaTimeRequestDefaultTypeInternal;
extern GetVegaTimeRequestDefaultTypeInternal _GetVegaTimeRequest_default_instance_;
class GetVegaTimeResponse;
class GetVegaTimeResponseDefaultTypeInternal;
extern GetVegaTimeResponseDefaultTypeInternal _GetVegaTimeResponse_default_instance_;
class GetVotesByPartyRequest;
class GetVotesByPartyRequestDefaultTypeInternal;
extern GetVotesByPartyRequestDefaultTypeInternal _GetVotesByPartyRequest_default_instance_;
class GetVotesByPartyResponse;
class GetVotesByPartyResponseDefaultTypeInternal;
extern GetVotesByPartyResponseDefaultTypeInternal _GetVotesByPartyResponse_default_instance_;
class LastBlockHeightRequest;
class LastBlockHeightRequestDefaultTypeInternal;
extern LastBlockHeightRequestDefaultTypeInternal _LastBlockHeightRequest_default_instance_;
class LastBlockHeightResponse;
class LastBlockHeightResponseDefaultTypeInternal;
extern LastBlockHeightResponseDefaultTypeInternal _LastBlockHeightResponse_default_instance_;
class LastTradeRequest;
class LastTradeRequestDefaultTypeInternal;
extern LastTradeRequestDefaultTypeInternal _LastTradeRequest_default_instance_;
class LastTradeResponse;
class LastTradeResponseDefaultTypeInternal;
extern LastTradeResponseDefaultTypeInternal _LastTradeResponse_default_instance_;
class LiquidityProvisionsRequest;
class LiquidityProvisionsRequestDefaultTypeInternal;
extern LiquidityProvisionsRequestDefaultTypeInternal _LiquidityProvisionsRequest_default_instance_;
class LiquidityProvisionsResponse;
class LiquidityProvisionsResponseDefaultTypeInternal;
extern LiquidityProvisionsResponseDefaultTypeInternal _LiquidityProvisionsResponse_default_instance_;
class MarginLevelsRequest;
class MarginLevelsRequestDefaultTypeInternal;
extern MarginLevelsRequestDefaultTypeInternal _MarginLevelsRequest_default_instance_;
class MarginLevelsResponse;
class MarginLevelsResponseDefaultTypeInternal;
extern MarginLevelsResponseDefaultTypeInternal _MarginLevelsResponse_default_instance_;
class MarginLevelsSubscribeRequest;
class MarginLevelsSubscribeRequestDefaultTypeInternal;
extern MarginLevelsSubscribeRequestDefaultTypeInternal _MarginLevelsSubscribeRequest_default_instance_;
class MarginLevelsSubscribeResponse;
class MarginLevelsSubscribeResponseDefaultTypeInternal;
extern MarginLevelsSubscribeResponseDefaultTypeInternal _MarginLevelsSubscribeResponse_default_instance_;
class MarketAccountsRequest;
class MarketAccountsRequestDefaultTypeInternal;
extern MarketAccountsRequestDefaultTypeInternal _MarketAccountsRequest_default_instance_;
class MarketAccountsResponse;
class MarketAccountsResponseDefaultTypeInternal;
extern MarketAccountsResponseDefaultTypeInternal _MarketAccountsResponse_default_instance_;
class MarketByIDRequest;
class MarketByIDRequestDefaultTypeInternal;
extern MarketByIDRequestDefaultTypeInternal _MarketByIDRequest_default_instance_;
class MarketByIDResponse;
class MarketByIDResponseDefaultTypeInternal;
extern MarketByIDResponseDefaultTypeInternal _MarketByIDResponse_default_instance_;
class MarketDataByIDRequest;
class MarketDataByIDRequestDefaultTypeInternal;
extern MarketDataByIDRequestDefaultTypeInternal _MarketDataByIDRequest_default_instance_;
class MarketDataByIDResponse;
class MarketDataByIDResponseDefaultTypeInternal;
extern MarketDataByIDResponseDefaultTypeInternal _MarketDataByIDResponse_default_instance_;
class MarketDepthRequest;
class MarketDepthRequestDefaultTypeInternal;
extern MarketDepthRequestDefaultTypeInternal _MarketDepthRequest_default_instance_;
class MarketDepthResponse;
class MarketDepthResponseDefaultTypeInternal;
extern MarketDepthResponseDefaultTypeInternal _MarketDepthResponse_default_instance_;
class MarketDepthSubscribeRequest;
class MarketDepthSubscribeRequestDefaultTypeInternal;
extern MarketDepthSubscribeRequestDefaultTypeInternal _MarketDepthSubscribeRequest_default_instance_;
class MarketDepthSubscribeResponse;
class MarketDepthSubscribeResponseDefaultTypeInternal;
extern MarketDepthSubscribeResponseDefaultTypeInternal _MarketDepthSubscribeResponse_default_instance_;
class MarketDepthUpdatesSubscribeRequest;
class MarketDepthUpdatesSubscribeRequestDefaultTypeInternal;
extern MarketDepthUpdatesSubscribeRequestDefaultTypeInternal _MarketDepthUpdatesSubscribeRequest_default_instance_;
class MarketDepthUpdatesSubscribeResponse;
class MarketDepthUpdatesSubscribeResponseDefaultTypeInternal;
extern MarketDepthUpdatesSubscribeResponseDefaultTypeInternal _MarketDepthUpdatesSubscribeResponse_default_instance_;
class MarketsDataRequest;
class MarketsDataRequestDefaultTypeInternal;
extern MarketsDataRequestDefaultTypeInternal _MarketsDataRequest_default_instance_;
class MarketsDataResponse;
class MarketsDataResponseDefaultTypeInternal;
extern MarketsDataResponseDefaultTypeInternal _MarketsDataResponse_default_instance_;
class MarketsDataSubscribeRequest;
class MarketsDataSubscribeRequestDefaultTypeInternal;
extern MarketsDataSubscribeRequestDefaultTypeInternal _MarketsDataSubscribeRequest_default_instance_;
class MarketsDataSubscribeResponse;
class MarketsDataSubscribeResponseDefaultTypeInternal;
extern MarketsDataSubscribeResponseDefaultTypeInternal _MarketsDataSubscribeResponse_default_instance_;
class MarketsRequest;
class MarketsRequestDefaultTypeInternal;
extern MarketsRequestDefaultTypeInternal _MarketsRequest_default_instance_;
class MarketsResponse;
class MarketsResponseDefaultTypeInternal;
extern MarketsResponseDefaultTypeInternal _MarketsResponse_default_instance_;
class NetworkParametersRequest;
class NetworkParametersRequestDefaultTypeInternal;
extern NetworkParametersRequestDefaultTypeInternal _NetworkParametersRequest_default_instance_;
class NetworkParametersResponse;
class NetworkParametersResponseDefaultTypeInternal;
extern NetworkParametersResponseDefaultTypeInternal _NetworkParametersResponse_default_instance_;
class ObserveEventBusRequest;
class ObserveEventBusRequestDefaultTypeInternal;
extern ObserveEventBusRequestDefaultTypeInternal _ObserveEventBusRequest_default_instance_;
class ObserveEventBusResponse;
class ObserveEventBusResponseDefaultTypeInternal;
extern ObserveEventBusResponseDefaultTypeInternal _ObserveEventBusResponse_default_instance_;
class ObserveGovernanceRequest;
class ObserveGovernanceRequestDefaultTypeInternal;
extern ObserveGovernanceRequestDefaultTypeInternal _ObserveGovernanceRequest_default_instance_;
class ObserveGovernanceResponse;
class ObserveGovernanceResponseDefaultTypeInternal;
extern ObserveGovernanceResponseDefaultTypeInternal _ObserveGovernanceResponse_default_instance_;
class ObservePartyProposalsRequest;
class ObservePartyProposalsRequestDefaultTypeInternal;
extern ObservePartyProposalsRequestDefaultTypeInternal _ObservePartyProposalsRequest_default_instance_;
class ObservePartyProposalsResponse;
class ObservePartyProposalsResponseDefaultTypeInternal;
extern ObservePartyProposalsResponseDefaultTypeInternal _ObservePartyProposalsResponse_default_instance_;
class ObservePartyVotesRequest;
class ObservePartyVotesRequestDefaultTypeInternal;
extern ObservePartyVotesRequestDefaultTypeInternal _ObservePartyVotesRequest_default_instance_;
class ObservePartyVotesResponse;
class ObservePartyVotesResponseDefaultTypeInternal;
extern ObservePartyVotesResponseDefaultTypeInternal _ObservePartyVotesResponse_default_instance_;
class ObserveProposalVotesRequest;
class ObserveProposalVotesRequestDefaultTypeInternal;
extern ObserveProposalVotesRequestDefaultTypeInternal _ObserveProposalVotesRequest_default_instance_;
class ObserveProposalVotesResponse;
class ObserveProposalVotesResponseDefaultTypeInternal;
extern ObserveProposalVotesResponseDefaultTypeInternal _ObserveProposalVotesResponse_default_instance_;
class OptionalProposalState;
class OptionalProposalStateDefaultTypeInternal;
extern OptionalProposalStateDefaultTypeInternal _OptionalProposalState_default_instance_;
class OracleDataBySpecRequest;
class OracleDataBySpecRequestDefaultTypeInternal;
extern OracleDataBySpecRequestDefaultTypeInternal _OracleDataBySpecRequest_default_instance_;
class OracleDataBySpecResponse;
class OracleDataBySpecResponseDefaultTypeInternal;
extern OracleDataBySpecResponseDefaultTypeInternal _OracleDataBySpecResponse_default_instance_;
class OracleSpecRequest;
class OracleSpecRequestDefaultTypeInternal;
extern OracleSpecRequestDefaultTypeInternal _OracleSpecRequest_default_instance_;
class OracleSpecResponse;
class OracleSpecResponseDefaultTypeInternal;
extern OracleSpecResponseDefaultTypeInternal _OracleSpecResponse_default_instance_;
class OracleSpecsRequest;
class OracleSpecsRequestDefaultTypeInternal;
extern OracleSpecsRequestDefaultTypeInternal _OracleSpecsRequest_default_instance_;
class OracleSpecsResponse;
class OracleSpecsResponseDefaultTypeInternal;
extern OracleSpecsResponseDefaultTypeInternal _OracleSpecsResponse_default_instance_;
class OrderByIDRequest;
class OrderByIDRequestDefaultTypeInternal;
extern OrderByIDRequestDefaultTypeInternal _OrderByIDRequest_default_instance_;
class OrderByIDResponse;
class OrderByIDResponseDefaultTypeInternal;
extern OrderByIDResponseDefaultTypeInternal _OrderByIDResponse_default_instance_;
class OrderByMarketAndIDRequest;
class OrderByMarketAndIDRequestDefaultTypeInternal;
extern OrderByMarketAndIDRequestDefaultTypeInternal _OrderByMarketAndIDRequest_default_instance_;
class OrderByMarketAndIDResponse;
class OrderByMarketAndIDResponseDefaultTypeInternal;
extern OrderByMarketAndIDResponseDefaultTypeInternal _OrderByMarketAndIDResponse_default_instance_;
class OrderByReferenceRequest;
class OrderByReferenceRequestDefaultTypeInternal;
extern OrderByReferenceRequestDefaultTypeInternal _OrderByReferenceRequest_default_instance_;
class OrderByReferenceResponse;
class OrderByReferenceResponseDefaultTypeInternal;
extern OrderByReferenceResponseDefaultTypeInternal _OrderByReferenceResponse_default_instance_;
class OrderVersionsByIDRequest;
class OrderVersionsByIDRequestDefaultTypeInternal;
extern OrderVersionsByIDRequestDefaultTypeInternal _OrderVersionsByIDRequest_default_instance_;
class OrderVersionsByIDResponse;
class OrderVersionsByIDResponseDefaultTypeInternal;
extern OrderVersionsByIDResponseDefaultTypeInternal _OrderVersionsByIDResponse_default_instance_;
class OrdersByMarketRequest;
class OrdersByMarketRequestDefaultTypeInternal;
extern OrdersByMarketRequestDefaultTypeInternal _OrdersByMarketRequest_default_instance_;
class OrdersByMarketResponse;
class OrdersByMarketResponseDefaultTypeInternal;
extern OrdersByMarketResponseDefaultTypeInternal _OrdersByMarketResponse_default_instance_;
class OrdersByPartyRequest;
class OrdersByPartyRequestDefaultTypeInternal;
extern OrdersByPartyRequestDefaultTypeInternal _OrdersByPartyRequest_default_instance_;
class OrdersByPartyResponse;
class OrdersByPartyResponseDefaultTypeInternal;
extern OrdersByPartyResponseDefaultTypeInternal _OrdersByPartyResponse_default_instance_;
class OrdersSubscribeRequest;
class OrdersSubscribeRequestDefaultTypeInternal;
extern OrdersSubscribeRequestDefaultTypeInternal _OrdersSubscribeRequest_default_instance_;
class OrdersSubscribeResponse;
class OrdersSubscribeResponseDefaultTypeInternal;
extern OrdersSubscribeResponseDefaultTypeInternal _OrdersSubscribeResponse_default_instance_;
class Pagination;
class PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class PartiesRequest;
class PartiesRequestDefaultTypeInternal;
extern PartiesRequestDefaultTypeInternal _PartiesRequest_default_instance_;
class PartiesResponse;
class PartiesResponseDefaultTypeInternal;
extern PartiesResponseDefaultTypeInternal _PartiesResponse_default_instance_;
class PartyAccountsRequest;
class PartyAccountsRequestDefaultTypeInternal;
extern PartyAccountsRequestDefaultTypeInternal _PartyAccountsRequest_default_instance_;
class PartyAccountsResponse;
class PartyAccountsResponseDefaultTypeInternal;
extern PartyAccountsResponseDefaultTypeInternal _PartyAccountsResponse_default_instance_;
class PartyByIDRequest;
class PartyByIDRequestDefaultTypeInternal;
extern PartyByIDRequestDefaultTypeInternal _PartyByIDRequest_default_instance_;
class PartyByIDResponse;
class PartyByIDResponseDefaultTypeInternal;
extern PartyByIDResponseDefaultTypeInternal _PartyByIDResponse_default_instance_;
class PositionsByPartyRequest;
class PositionsByPartyRequestDefaultTypeInternal;
extern PositionsByPartyRequestDefaultTypeInternal _PositionsByPartyRequest_default_instance_;
class PositionsByPartyResponse;
class PositionsByPartyResponseDefaultTypeInternal;
extern PositionsByPartyResponseDefaultTypeInternal _PositionsByPartyResponse_default_instance_;
class PositionsSubscribeRequest;
class PositionsSubscribeRequestDefaultTypeInternal;
extern PositionsSubscribeRequestDefaultTypeInternal _PositionsSubscribeRequest_default_instance_;
class PositionsSubscribeResponse;
class PositionsSubscribeResponseDefaultTypeInternal;
extern PositionsSubscribeResponseDefaultTypeInternal _PositionsSubscribeResponse_default_instance_;
class PrepareAmendOrderRequest;
class PrepareAmendOrderRequestDefaultTypeInternal;
extern PrepareAmendOrderRequestDefaultTypeInternal _PrepareAmendOrderRequest_default_instance_;
class PrepareAmendOrderResponse;
class PrepareAmendOrderResponseDefaultTypeInternal;
extern PrepareAmendOrderResponseDefaultTypeInternal _PrepareAmendOrderResponse_default_instance_;
class PrepareCancelOrderRequest;
class PrepareCancelOrderRequestDefaultTypeInternal;
extern PrepareCancelOrderRequestDefaultTypeInternal _PrepareCancelOrderRequest_default_instance_;
class PrepareCancelOrderResponse;
class PrepareCancelOrderResponseDefaultTypeInternal;
extern PrepareCancelOrderResponseDefaultTypeInternal _PrepareCancelOrderResponse_default_instance_;
class PrepareLiquidityProvisionRequest;
class PrepareLiquidityProvisionRequestDefaultTypeInternal;
extern PrepareLiquidityProvisionRequestDefaultTypeInternal _PrepareLiquidityProvisionRequest_default_instance_;
class PrepareLiquidityProvisionResponse;
class PrepareLiquidityProvisionResponseDefaultTypeInternal;
extern PrepareLiquidityProvisionResponseDefaultTypeInternal _PrepareLiquidityProvisionResponse_default_instance_;
class PrepareProposalSubmissionRequest;
class PrepareProposalSubmissionRequestDefaultTypeInternal;
extern PrepareProposalSubmissionRequestDefaultTypeInternal _PrepareProposalSubmissionRequest_default_instance_;
class PrepareProposalSubmissionResponse;
class PrepareProposalSubmissionResponseDefaultTypeInternal;
extern PrepareProposalSubmissionResponseDefaultTypeInternal _PrepareProposalSubmissionResponse_default_instance_;
class PrepareSubmitOrderRequest;
class PrepareSubmitOrderRequestDefaultTypeInternal;
extern PrepareSubmitOrderRequestDefaultTypeInternal _PrepareSubmitOrderRequest_default_instance_;
class PrepareSubmitOrderResponse;
class PrepareSubmitOrderResponseDefaultTypeInternal;
extern PrepareSubmitOrderResponseDefaultTypeInternal _PrepareSubmitOrderResponse_default_instance_;
class PrepareVoteSubmissionRequest;
class PrepareVoteSubmissionRequestDefaultTypeInternal;
extern PrepareVoteSubmissionRequestDefaultTypeInternal _PrepareVoteSubmissionRequest_default_instance_;
class PrepareVoteSubmissionResponse;
class PrepareVoteSubmissionResponseDefaultTypeInternal;
extern PrepareVoteSubmissionResponseDefaultTypeInternal _PrepareVoteSubmissionResponse_default_instance_;
class PrepareWithdrawRequest;
class PrepareWithdrawRequestDefaultTypeInternal;
extern PrepareWithdrawRequestDefaultTypeInternal _PrepareWithdrawRequest_default_instance_;
class PrepareWithdrawResponse;
class PrepareWithdrawResponseDefaultTypeInternal;
extern PrepareWithdrawResponseDefaultTypeInternal _PrepareWithdrawResponse_default_instance_;
class PropagateChainEventRequest;
class PropagateChainEventRequestDefaultTypeInternal;
extern PropagateChainEventRequestDefaultTypeInternal _PropagateChainEventRequest_default_instance_;
class PropagateChainEventResponse;
class PropagateChainEventResponseDefaultTypeInternal;
extern PropagateChainEventResponseDefaultTypeInternal _PropagateChainEventResponse_default_instance_;
class StatisticsRequest;
class StatisticsRequestDefaultTypeInternal;
extern StatisticsRequestDefaultTypeInternal _StatisticsRequest_default_instance_;
class StatisticsResponse;
class StatisticsResponseDefaultTypeInternal;
extern StatisticsResponseDefaultTypeInternal _StatisticsResponse_default_instance_;
class SubmitTransactionRequest;
class SubmitTransactionRequestDefaultTypeInternal;
extern SubmitTransactionRequestDefaultTypeInternal _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponse;
class SubmitTransactionResponseDefaultTypeInternal;
extern SubmitTransactionResponseDefaultTypeInternal _SubmitTransactionResponse_default_instance_;
class SubmitTransactionV2Request;
class SubmitTransactionV2RequestDefaultTypeInternal;
extern SubmitTransactionV2RequestDefaultTypeInternal _SubmitTransactionV2Request_default_instance_;
class SubmitTransactionV2Response;
class SubmitTransactionV2ResponseDefaultTypeInternal;
extern SubmitTransactionV2ResponseDefaultTypeInternal _SubmitTransactionV2Response_default_instance_;
class TradesByMarketRequest;
class TradesByMarketRequestDefaultTypeInternal;
extern TradesByMarketRequestDefaultTypeInternal _TradesByMarketRequest_default_instance_;
class TradesByMarketResponse;
class TradesByMarketResponseDefaultTypeInternal;
extern TradesByMarketResponseDefaultTypeInternal _TradesByMarketResponse_default_instance_;
class TradesByOrderRequest;
class TradesByOrderRequestDefaultTypeInternal;
extern TradesByOrderRequestDefaultTypeInternal _TradesByOrderRequest_default_instance_;
class TradesByOrderResponse;
class TradesByOrderResponseDefaultTypeInternal;
extern TradesByOrderResponseDefaultTypeInternal _TradesByOrderResponse_default_instance_;
class TradesByPartyRequest;
class TradesByPartyRequestDefaultTypeInternal;
extern TradesByPartyRequestDefaultTypeInternal _TradesByPartyRequest_default_instance_;
class TradesByPartyResponse;
class TradesByPartyResponseDefaultTypeInternal;
extern TradesByPartyResponseDefaultTypeInternal _TradesByPartyResponse_default_instance_;
class TradesSubscribeRequest;
class TradesSubscribeRequestDefaultTypeInternal;
extern TradesSubscribeRequestDefaultTypeInternal _TradesSubscribeRequest_default_instance_;
class TradesSubscribeResponse;
class TradesSubscribeResponseDefaultTypeInternal;
extern TradesSubscribeResponseDefaultTypeInternal _TradesSubscribeResponse_default_instance_;
class TransferResponsesSubscribeRequest;
class TransferResponsesSubscribeRequestDefaultTypeInternal;
extern TransferResponsesSubscribeRequestDefaultTypeInternal _TransferResponsesSubscribeRequest_default_instance_;
class TransferResponsesSubscribeResponse;
class TransferResponsesSubscribeResponseDefaultTypeInternal;
extern TransferResponsesSubscribeResponseDefaultTypeInternal _TransferResponsesSubscribeResponse_default_instance_;
class WithdrawalRequest;
class WithdrawalRequestDefaultTypeInternal;
extern WithdrawalRequestDefaultTypeInternal _WithdrawalRequest_default_instance_;
class WithdrawalResponse;
class WithdrawalResponseDefaultTypeInternal;
extern WithdrawalResponseDefaultTypeInternal _WithdrawalResponse_default_instance_;
class WithdrawalsRequest;
class WithdrawalsRequestDefaultTypeInternal;
extern WithdrawalsRequestDefaultTypeInternal _WithdrawalsRequest_default_instance_;
class WithdrawalsResponse;
class WithdrawalsResponseDefaultTypeInternal;
extern WithdrawalsResponseDefaultTypeInternal _WithdrawalsResponse_default_instance_;
}  // namespace v1
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::v1::AccountsSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::AccountsSubscribeRequest>(Arena*);
template<> ::api::v1::AccountsSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::AccountsSubscribeResponse>(Arena*);
template<> ::api::v1::AssetByIDRequest* Arena::CreateMaybeMessage<::api::v1::AssetByIDRequest>(Arena*);
template<> ::api::v1::AssetByIDResponse* Arena::CreateMaybeMessage<::api::v1::AssetByIDResponse>(Arena*);
template<> ::api::v1::AssetsRequest* Arena::CreateMaybeMessage<::api::v1::AssetsRequest>(Arena*);
template<> ::api::v1::AssetsResponse* Arena::CreateMaybeMessage<::api::v1::AssetsResponse>(Arena*);
template<> ::api::v1::CandlesRequest* Arena::CreateMaybeMessage<::api::v1::CandlesRequest>(Arena*);
template<> ::api::v1::CandlesResponse* Arena::CreateMaybeMessage<::api::v1::CandlesResponse>(Arena*);
template<> ::api::v1::CandlesSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::CandlesSubscribeRequest>(Arena*);
template<> ::api::v1::CandlesSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::CandlesSubscribeResponse>(Arena*);
template<> ::api::v1::DepositRequest* Arena::CreateMaybeMessage<::api::v1::DepositRequest>(Arena*);
template<> ::api::v1::DepositResponse* Arena::CreateMaybeMessage<::api::v1::DepositResponse>(Arena*);
template<> ::api::v1::DepositsRequest* Arena::CreateMaybeMessage<::api::v1::DepositsRequest>(Arena*);
template<> ::api::v1::DepositsResponse* Arena::CreateMaybeMessage<::api::v1::DepositsResponse>(Arena*);
template<> ::api::v1::ERC20WithdrawalApprovalRequest* Arena::CreateMaybeMessage<::api::v1::ERC20WithdrawalApprovalRequest>(Arena*);
template<> ::api::v1::ERC20WithdrawalApprovalResponse* Arena::CreateMaybeMessage<::api::v1::ERC20WithdrawalApprovalResponse>(Arena*);
template<> ::api::v1::EstimateFeeRequest* Arena::CreateMaybeMessage<::api::v1::EstimateFeeRequest>(Arena*);
template<> ::api::v1::EstimateFeeResponse* Arena::CreateMaybeMessage<::api::v1::EstimateFeeResponse>(Arena*);
template<> ::api::v1::EstimateMarginRequest* Arena::CreateMaybeMessage<::api::v1::EstimateMarginRequest>(Arena*);
template<> ::api::v1::EstimateMarginResponse* Arena::CreateMaybeMessage<::api::v1::EstimateMarginResponse>(Arena*);
template<> ::api::v1::FeeInfrastructureAccountsRequest* Arena::CreateMaybeMessage<::api::v1::FeeInfrastructureAccountsRequest>(Arena*);
template<> ::api::v1::FeeInfrastructureAccountsResponse* Arena::CreateMaybeMessage<::api::v1::FeeInfrastructureAccountsResponse>(Arena*);
template<> ::api::v1::GetNetworkParametersProposalsRequest* Arena::CreateMaybeMessage<::api::v1::GetNetworkParametersProposalsRequest>(Arena*);
template<> ::api::v1::GetNetworkParametersProposalsResponse* Arena::CreateMaybeMessage<::api::v1::GetNetworkParametersProposalsResponse>(Arena*);
template<> ::api::v1::GetNewAssetProposalsRequest* Arena::CreateMaybeMessage<::api::v1::GetNewAssetProposalsRequest>(Arena*);
template<> ::api::v1::GetNewAssetProposalsResponse* Arena::CreateMaybeMessage<::api::v1::GetNewAssetProposalsResponse>(Arena*);
template<> ::api::v1::GetNewMarketProposalsRequest* Arena::CreateMaybeMessage<::api::v1::GetNewMarketProposalsRequest>(Arena*);
template<> ::api::v1::GetNewMarketProposalsResponse* Arena::CreateMaybeMessage<::api::v1::GetNewMarketProposalsResponse>(Arena*);
template<> ::api::v1::GetNodeSignaturesAggregateRequest* Arena::CreateMaybeMessage<::api::v1::GetNodeSignaturesAggregateRequest>(Arena*);
template<> ::api::v1::GetNodeSignaturesAggregateResponse* Arena::CreateMaybeMessage<::api::v1::GetNodeSignaturesAggregateResponse>(Arena*);
template<> ::api::v1::GetProposalByIDRequest* Arena::CreateMaybeMessage<::api::v1::GetProposalByIDRequest>(Arena*);
template<> ::api::v1::GetProposalByIDResponse* Arena::CreateMaybeMessage<::api::v1::GetProposalByIDResponse>(Arena*);
template<> ::api::v1::GetProposalByReferenceRequest* Arena::CreateMaybeMessage<::api::v1::GetProposalByReferenceRequest>(Arena*);
template<> ::api::v1::GetProposalByReferenceResponse* Arena::CreateMaybeMessage<::api::v1::GetProposalByReferenceResponse>(Arena*);
template<> ::api::v1::GetProposalsByPartyRequest* Arena::CreateMaybeMessage<::api::v1::GetProposalsByPartyRequest>(Arena*);
template<> ::api::v1::GetProposalsByPartyResponse* Arena::CreateMaybeMessage<::api::v1::GetProposalsByPartyResponse>(Arena*);
template<> ::api::v1::GetProposalsRequest* Arena::CreateMaybeMessage<::api::v1::GetProposalsRequest>(Arena*);
template<> ::api::v1::GetProposalsResponse* Arena::CreateMaybeMessage<::api::v1::GetProposalsResponse>(Arena*);
template<> ::api::v1::GetUpdateMarketProposalsRequest* Arena::CreateMaybeMessage<::api::v1::GetUpdateMarketProposalsRequest>(Arena*);
template<> ::api::v1::GetUpdateMarketProposalsResponse* Arena::CreateMaybeMessage<::api::v1::GetUpdateMarketProposalsResponse>(Arena*);
template<> ::api::v1::GetVegaTimeRequest* Arena::CreateMaybeMessage<::api::v1::GetVegaTimeRequest>(Arena*);
template<> ::api::v1::GetVegaTimeResponse* Arena::CreateMaybeMessage<::api::v1::GetVegaTimeResponse>(Arena*);
template<> ::api::v1::GetVotesByPartyRequest* Arena::CreateMaybeMessage<::api::v1::GetVotesByPartyRequest>(Arena*);
template<> ::api::v1::GetVotesByPartyResponse* Arena::CreateMaybeMessage<::api::v1::GetVotesByPartyResponse>(Arena*);
template<> ::api::v1::LastBlockHeightRequest* Arena::CreateMaybeMessage<::api::v1::LastBlockHeightRequest>(Arena*);
template<> ::api::v1::LastBlockHeightResponse* Arena::CreateMaybeMessage<::api::v1::LastBlockHeightResponse>(Arena*);
template<> ::api::v1::LastTradeRequest* Arena::CreateMaybeMessage<::api::v1::LastTradeRequest>(Arena*);
template<> ::api::v1::LastTradeResponse* Arena::CreateMaybeMessage<::api::v1::LastTradeResponse>(Arena*);
template<> ::api::v1::LiquidityProvisionsRequest* Arena::CreateMaybeMessage<::api::v1::LiquidityProvisionsRequest>(Arena*);
template<> ::api::v1::LiquidityProvisionsResponse* Arena::CreateMaybeMessage<::api::v1::LiquidityProvisionsResponse>(Arena*);
template<> ::api::v1::MarginLevelsRequest* Arena::CreateMaybeMessage<::api::v1::MarginLevelsRequest>(Arena*);
template<> ::api::v1::MarginLevelsResponse* Arena::CreateMaybeMessage<::api::v1::MarginLevelsResponse>(Arena*);
template<> ::api::v1::MarginLevelsSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::MarginLevelsSubscribeRequest>(Arena*);
template<> ::api::v1::MarginLevelsSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::MarginLevelsSubscribeResponse>(Arena*);
template<> ::api::v1::MarketAccountsRequest* Arena::CreateMaybeMessage<::api::v1::MarketAccountsRequest>(Arena*);
template<> ::api::v1::MarketAccountsResponse* Arena::CreateMaybeMessage<::api::v1::MarketAccountsResponse>(Arena*);
template<> ::api::v1::MarketByIDRequest* Arena::CreateMaybeMessage<::api::v1::MarketByIDRequest>(Arena*);
template<> ::api::v1::MarketByIDResponse* Arena::CreateMaybeMessage<::api::v1::MarketByIDResponse>(Arena*);
template<> ::api::v1::MarketDataByIDRequest* Arena::CreateMaybeMessage<::api::v1::MarketDataByIDRequest>(Arena*);
template<> ::api::v1::MarketDataByIDResponse* Arena::CreateMaybeMessage<::api::v1::MarketDataByIDResponse>(Arena*);
template<> ::api::v1::MarketDepthRequest* Arena::CreateMaybeMessage<::api::v1::MarketDepthRequest>(Arena*);
template<> ::api::v1::MarketDepthResponse* Arena::CreateMaybeMessage<::api::v1::MarketDepthResponse>(Arena*);
template<> ::api::v1::MarketDepthSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::MarketDepthSubscribeRequest>(Arena*);
template<> ::api::v1::MarketDepthSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::MarketDepthSubscribeResponse>(Arena*);
template<> ::api::v1::MarketDepthUpdatesSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::MarketDepthUpdatesSubscribeRequest>(Arena*);
template<> ::api::v1::MarketDepthUpdatesSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::MarketDepthUpdatesSubscribeResponse>(Arena*);
template<> ::api::v1::MarketsDataRequest* Arena::CreateMaybeMessage<::api::v1::MarketsDataRequest>(Arena*);
template<> ::api::v1::MarketsDataResponse* Arena::CreateMaybeMessage<::api::v1::MarketsDataResponse>(Arena*);
template<> ::api::v1::MarketsDataSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::MarketsDataSubscribeRequest>(Arena*);
template<> ::api::v1::MarketsDataSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::MarketsDataSubscribeResponse>(Arena*);
template<> ::api::v1::MarketsRequest* Arena::CreateMaybeMessage<::api::v1::MarketsRequest>(Arena*);
template<> ::api::v1::MarketsResponse* Arena::CreateMaybeMessage<::api::v1::MarketsResponse>(Arena*);
template<> ::api::v1::NetworkParametersRequest* Arena::CreateMaybeMessage<::api::v1::NetworkParametersRequest>(Arena*);
template<> ::api::v1::NetworkParametersResponse* Arena::CreateMaybeMessage<::api::v1::NetworkParametersResponse>(Arena*);
template<> ::api::v1::ObserveEventBusRequest* Arena::CreateMaybeMessage<::api::v1::ObserveEventBusRequest>(Arena*);
template<> ::api::v1::ObserveEventBusResponse* Arena::CreateMaybeMessage<::api::v1::ObserveEventBusResponse>(Arena*);
template<> ::api::v1::ObserveGovernanceRequest* Arena::CreateMaybeMessage<::api::v1::ObserveGovernanceRequest>(Arena*);
template<> ::api::v1::ObserveGovernanceResponse* Arena::CreateMaybeMessage<::api::v1::ObserveGovernanceResponse>(Arena*);
template<> ::api::v1::ObservePartyProposalsRequest* Arena::CreateMaybeMessage<::api::v1::ObservePartyProposalsRequest>(Arena*);
template<> ::api::v1::ObservePartyProposalsResponse* Arena::CreateMaybeMessage<::api::v1::ObservePartyProposalsResponse>(Arena*);
template<> ::api::v1::ObservePartyVotesRequest* Arena::CreateMaybeMessage<::api::v1::ObservePartyVotesRequest>(Arena*);
template<> ::api::v1::ObservePartyVotesResponse* Arena::CreateMaybeMessage<::api::v1::ObservePartyVotesResponse>(Arena*);
template<> ::api::v1::ObserveProposalVotesRequest* Arena::CreateMaybeMessage<::api::v1::ObserveProposalVotesRequest>(Arena*);
template<> ::api::v1::ObserveProposalVotesResponse* Arena::CreateMaybeMessage<::api::v1::ObserveProposalVotesResponse>(Arena*);
template<> ::api::v1::OptionalProposalState* Arena::CreateMaybeMessage<::api::v1::OptionalProposalState>(Arena*);
template<> ::api::v1::OracleDataBySpecRequest* Arena::CreateMaybeMessage<::api::v1::OracleDataBySpecRequest>(Arena*);
template<> ::api::v1::OracleDataBySpecResponse* Arena::CreateMaybeMessage<::api::v1::OracleDataBySpecResponse>(Arena*);
template<> ::api::v1::OracleSpecRequest* Arena::CreateMaybeMessage<::api::v1::OracleSpecRequest>(Arena*);
template<> ::api::v1::OracleSpecResponse* Arena::CreateMaybeMessage<::api::v1::OracleSpecResponse>(Arena*);
template<> ::api::v1::OracleSpecsRequest* Arena::CreateMaybeMessage<::api::v1::OracleSpecsRequest>(Arena*);
template<> ::api::v1::OracleSpecsResponse* Arena::CreateMaybeMessage<::api::v1::OracleSpecsResponse>(Arena*);
template<> ::api::v1::OrderByIDRequest* Arena::CreateMaybeMessage<::api::v1::OrderByIDRequest>(Arena*);
template<> ::api::v1::OrderByIDResponse* Arena::CreateMaybeMessage<::api::v1::OrderByIDResponse>(Arena*);
template<> ::api::v1::OrderByMarketAndIDRequest* Arena::CreateMaybeMessage<::api::v1::OrderByMarketAndIDRequest>(Arena*);
template<> ::api::v1::OrderByMarketAndIDResponse* Arena::CreateMaybeMessage<::api::v1::OrderByMarketAndIDResponse>(Arena*);
template<> ::api::v1::OrderByReferenceRequest* Arena::CreateMaybeMessage<::api::v1::OrderByReferenceRequest>(Arena*);
template<> ::api::v1::OrderByReferenceResponse* Arena::CreateMaybeMessage<::api::v1::OrderByReferenceResponse>(Arena*);
template<> ::api::v1::OrderVersionsByIDRequest* Arena::CreateMaybeMessage<::api::v1::OrderVersionsByIDRequest>(Arena*);
template<> ::api::v1::OrderVersionsByIDResponse* Arena::CreateMaybeMessage<::api::v1::OrderVersionsByIDResponse>(Arena*);
template<> ::api::v1::OrdersByMarketRequest* Arena::CreateMaybeMessage<::api::v1::OrdersByMarketRequest>(Arena*);
template<> ::api::v1::OrdersByMarketResponse* Arena::CreateMaybeMessage<::api::v1::OrdersByMarketResponse>(Arena*);
template<> ::api::v1::OrdersByPartyRequest* Arena::CreateMaybeMessage<::api::v1::OrdersByPartyRequest>(Arena*);
template<> ::api::v1::OrdersByPartyResponse* Arena::CreateMaybeMessage<::api::v1::OrdersByPartyResponse>(Arena*);
template<> ::api::v1::OrdersSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::OrdersSubscribeRequest>(Arena*);
template<> ::api::v1::OrdersSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::OrdersSubscribeResponse>(Arena*);
template<> ::api::v1::Pagination* Arena::CreateMaybeMessage<::api::v1::Pagination>(Arena*);
template<> ::api::v1::PartiesRequest* Arena::CreateMaybeMessage<::api::v1::PartiesRequest>(Arena*);
template<> ::api::v1::PartiesResponse* Arena::CreateMaybeMessage<::api::v1::PartiesResponse>(Arena*);
template<> ::api::v1::PartyAccountsRequest* Arena::CreateMaybeMessage<::api::v1::PartyAccountsRequest>(Arena*);
template<> ::api::v1::PartyAccountsResponse* Arena::CreateMaybeMessage<::api::v1::PartyAccountsResponse>(Arena*);
template<> ::api::v1::PartyByIDRequest* Arena::CreateMaybeMessage<::api::v1::PartyByIDRequest>(Arena*);
template<> ::api::v1::PartyByIDResponse* Arena::CreateMaybeMessage<::api::v1::PartyByIDResponse>(Arena*);
template<> ::api::v1::PositionsByPartyRequest* Arena::CreateMaybeMessage<::api::v1::PositionsByPartyRequest>(Arena*);
template<> ::api::v1::PositionsByPartyResponse* Arena::CreateMaybeMessage<::api::v1::PositionsByPartyResponse>(Arena*);
template<> ::api::v1::PositionsSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::PositionsSubscribeRequest>(Arena*);
template<> ::api::v1::PositionsSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::PositionsSubscribeResponse>(Arena*);
template<> ::api::v1::PrepareAmendOrderRequest* Arena::CreateMaybeMessage<::api::v1::PrepareAmendOrderRequest>(Arena*);
template<> ::api::v1::PrepareAmendOrderResponse* Arena::CreateMaybeMessage<::api::v1::PrepareAmendOrderResponse>(Arena*);
template<> ::api::v1::PrepareCancelOrderRequest* Arena::CreateMaybeMessage<::api::v1::PrepareCancelOrderRequest>(Arena*);
template<> ::api::v1::PrepareCancelOrderResponse* Arena::CreateMaybeMessage<::api::v1::PrepareCancelOrderResponse>(Arena*);
template<> ::api::v1::PrepareLiquidityProvisionRequest* Arena::CreateMaybeMessage<::api::v1::PrepareLiquidityProvisionRequest>(Arena*);
template<> ::api::v1::PrepareLiquidityProvisionResponse* Arena::CreateMaybeMessage<::api::v1::PrepareLiquidityProvisionResponse>(Arena*);
template<> ::api::v1::PrepareProposalSubmissionRequest* Arena::CreateMaybeMessage<::api::v1::PrepareProposalSubmissionRequest>(Arena*);
template<> ::api::v1::PrepareProposalSubmissionResponse* Arena::CreateMaybeMessage<::api::v1::PrepareProposalSubmissionResponse>(Arena*);
template<> ::api::v1::PrepareSubmitOrderRequest* Arena::CreateMaybeMessage<::api::v1::PrepareSubmitOrderRequest>(Arena*);
template<> ::api::v1::PrepareSubmitOrderResponse* Arena::CreateMaybeMessage<::api::v1::PrepareSubmitOrderResponse>(Arena*);
template<> ::api::v1::PrepareVoteSubmissionRequest* Arena::CreateMaybeMessage<::api::v1::PrepareVoteSubmissionRequest>(Arena*);
template<> ::api::v1::PrepareVoteSubmissionResponse* Arena::CreateMaybeMessage<::api::v1::PrepareVoteSubmissionResponse>(Arena*);
template<> ::api::v1::PrepareWithdrawRequest* Arena::CreateMaybeMessage<::api::v1::PrepareWithdrawRequest>(Arena*);
template<> ::api::v1::PrepareWithdrawResponse* Arena::CreateMaybeMessage<::api::v1::PrepareWithdrawResponse>(Arena*);
template<> ::api::v1::PropagateChainEventRequest* Arena::CreateMaybeMessage<::api::v1::PropagateChainEventRequest>(Arena*);
template<> ::api::v1::PropagateChainEventResponse* Arena::CreateMaybeMessage<::api::v1::PropagateChainEventResponse>(Arena*);
template<> ::api::v1::StatisticsRequest* Arena::CreateMaybeMessage<::api::v1::StatisticsRequest>(Arena*);
template<> ::api::v1::StatisticsResponse* Arena::CreateMaybeMessage<::api::v1::StatisticsResponse>(Arena*);
template<> ::api::v1::SubmitTransactionRequest* Arena::CreateMaybeMessage<::api::v1::SubmitTransactionRequest>(Arena*);
template<> ::api::v1::SubmitTransactionResponse* Arena::CreateMaybeMessage<::api::v1::SubmitTransactionResponse>(Arena*);
template<> ::api::v1::SubmitTransactionV2Request* Arena::CreateMaybeMessage<::api::v1::SubmitTransactionV2Request>(Arena*);
template<> ::api::v1::SubmitTransactionV2Response* Arena::CreateMaybeMessage<::api::v1::SubmitTransactionV2Response>(Arena*);
template<> ::api::v1::TradesByMarketRequest* Arena::CreateMaybeMessage<::api::v1::TradesByMarketRequest>(Arena*);
template<> ::api::v1::TradesByMarketResponse* Arena::CreateMaybeMessage<::api::v1::TradesByMarketResponse>(Arena*);
template<> ::api::v1::TradesByOrderRequest* Arena::CreateMaybeMessage<::api::v1::TradesByOrderRequest>(Arena*);
template<> ::api::v1::TradesByOrderResponse* Arena::CreateMaybeMessage<::api::v1::TradesByOrderResponse>(Arena*);
template<> ::api::v1::TradesByPartyRequest* Arena::CreateMaybeMessage<::api::v1::TradesByPartyRequest>(Arena*);
template<> ::api::v1::TradesByPartyResponse* Arena::CreateMaybeMessage<::api::v1::TradesByPartyResponse>(Arena*);
template<> ::api::v1::TradesSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::TradesSubscribeRequest>(Arena*);
template<> ::api::v1::TradesSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::TradesSubscribeResponse>(Arena*);
template<> ::api::v1::TransferResponsesSubscribeRequest* Arena::CreateMaybeMessage<::api::v1::TransferResponsesSubscribeRequest>(Arena*);
template<> ::api::v1::TransferResponsesSubscribeResponse* Arena::CreateMaybeMessage<::api::v1::TransferResponsesSubscribeResponse>(Arena*);
template<> ::api::v1::WithdrawalRequest* Arena::CreateMaybeMessage<::api::v1::WithdrawalRequest>(Arena*);
template<> ::api::v1::WithdrawalResponse* Arena::CreateMaybeMessage<::api::v1::WithdrawalResponse>(Arena*);
template<> ::api::v1::WithdrawalsRequest* Arena::CreateMaybeMessage<::api::v1::WithdrawalsRequest>(Arena*);
template<> ::api::v1::WithdrawalsResponse* Arena::CreateMaybeMessage<::api::v1::WithdrawalsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {
namespace v1 {

enum SubmitTransactionRequest_Type : int {
  SubmitTransactionRequest_Type_TYPE_UNSPECIFIED = 0,
  SubmitTransactionRequest_Type_TYPE_ASYNC = 1,
  SubmitTransactionRequest_Type_TYPE_SYNC = 2,
  SubmitTransactionRequest_Type_TYPE_COMMIT = 3,
  SubmitTransactionRequest_Type_SubmitTransactionRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubmitTransactionRequest_Type_SubmitTransactionRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubmitTransactionRequest_Type_IsValid(int value);
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest_Type_Type_MIN = SubmitTransactionRequest_Type_TYPE_UNSPECIFIED;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest_Type_Type_MAX = SubmitTransactionRequest_Type_TYPE_COMMIT;
constexpr int SubmitTransactionRequest_Type_Type_ARRAYSIZE = SubmitTransactionRequest_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitTransactionRequest_Type_descriptor();
template<typename T>
inline const std::string& SubmitTransactionRequest_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubmitTransactionRequest_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubmitTransactionRequest_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubmitTransactionRequest_Type_descriptor(), enum_t_value);
}
inline bool SubmitTransactionRequest_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubmitTransactionRequest_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubmitTransactionRequest_Type>(
    SubmitTransactionRequest_Type_descriptor(), name, value);
}
enum SubmitTransactionV2Request_Type : int {
  SubmitTransactionV2Request_Type_TYPE_UNSPECIFIED = 0,
  SubmitTransactionV2Request_Type_TYPE_ASYNC = 1,
  SubmitTransactionV2Request_Type_TYPE_SYNC = 2,
  SubmitTransactionV2Request_Type_TYPE_COMMIT = 3,
  SubmitTransactionV2Request_Type_SubmitTransactionV2Request_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubmitTransactionV2Request_Type_SubmitTransactionV2Request_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubmitTransactionV2Request_Type_IsValid(int value);
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request_Type_Type_MIN = SubmitTransactionV2Request_Type_TYPE_UNSPECIFIED;
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request_Type_Type_MAX = SubmitTransactionV2Request_Type_TYPE_COMMIT;
constexpr int SubmitTransactionV2Request_Type_Type_ARRAYSIZE = SubmitTransactionV2Request_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitTransactionV2Request_Type_descriptor();
template<typename T>
inline const std::string& SubmitTransactionV2Request_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubmitTransactionV2Request_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubmitTransactionV2Request_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubmitTransactionV2Request_Type_descriptor(), enum_t_value);
}
inline bool SubmitTransactionV2Request_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubmitTransactionV2Request_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubmitTransactionV2Request_Type>(
    SubmitTransactionV2Request_Type_descriptor(), name, value);
}
// ===================================================================

class PropagateChainEventRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PropagateChainEventRequest) */ {
 public:
  inline PropagateChainEventRequest() : PropagateChainEventRequest(nullptr) {}
  virtual ~PropagateChainEventRequest();

  PropagateChainEventRequest(const PropagateChainEventRequest& from);
  PropagateChainEventRequest(PropagateChainEventRequest&& from) noexcept
    : PropagateChainEventRequest() {
    *this = ::std::move(from);
  }

  inline PropagateChainEventRequest& operator=(const PropagateChainEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagateChainEventRequest& operator=(PropagateChainEventRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropagateChainEventRequest& default_instance();

  static inline const PropagateChainEventRequest* internal_default_instance() {
    return reinterpret_cast<const PropagateChainEventRequest*>(
               &_PropagateChainEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PropagateChainEventRequest& a, PropagateChainEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagateChainEventRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagateChainEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropagateChainEventRequest* New() const final {
    return CreateMaybeMessage<PropagateChainEventRequest>(nullptr);
  }

  PropagateChainEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropagateChainEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropagateChainEventRequest& from);
  void MergeFrom(const PropagateChainEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagateChainEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PropagateChainEventRequest";
  }
  protected:
  explicit PropagateChainEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kEvtFieldNumber = 1,
  };
  // string pub_key = 2 [json_name = "pubKey"];
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // bytes signature = 3 [json_name = "signature"];
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .vega.commands.v1.ChainEvent evt = 1 [json_name = "evt"];
  bool has_evt() const;
  private:
  bool _internal_has_evt() const;
  public:
  void clear_evt();
  const ::vega::commands::v1::ChainEvent& evt() const;
  ::vega::commands::v1::ChainEvent* release_evt();
  ::vega::commands::v1::ChainEvent* mutable_evt();
  void set_allocated_evt(::vega::commands::v1::ChainEvent* evt);
  private:
  const ::vega::commands::v1::ChainEvent& _internal_evt() const;
  ::vega::commands::v1::ChainEvent* _internal_mutable_evt();
  public:
  void unsafe_arena_set_allocated_evt(
      ::vega::commands::v1::ChainEvent* evt);
  ::vega::commands::v1::ChainEvent* unsafe_arena_release_evt();

  // @@protoc_insertion_point(class_scope:api.v1.PropagateChainEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::vega::commands::v1::ChainEvent* evt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PropagateChainEventResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PropagateChainEventResponse) */ {
 public:
  inline PropagateChainEventResponse() : PropagateChainEventResponse(nullptr) {}
  virtual ~PropagateChainEventResponse();

  PropagateChainEventResponse(const PropagateChainEventResponse& from);
  PropagateChainEventResponse(PropagateChainEventResponse&& from) noexcept
    : PropagateChainEventResponse() {
    *this = ::std::move(from);
  }

  inline PropagateChainEventResponse& operator=(const PropagateChainEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagateChainEventResponse& operator=(PropagateChainEventResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropagateChainEventResponse& default_instance();

  static inline const PropagateChainEventResponse* internal_default_instance() {
    return reinterpret_cast<const PropagateChainEventResponse*>(
               &_PropagateChainEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PropagateChainEventResponse& a, PropagateChainEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagateChainEventResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagateChainEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropagateChainEventResponse* New() const final {
    return CreateMaybeMessage<PropagateChainEventResponse>(nullptr);
  }

  PropagateChainEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropagateChainEventResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropagateChainEventResponse& from);
  void MergeFrom(const PropagateChainEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagateChainEventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PropagateChainEventResponse";
  }
  protected:
  explicit PropagateChainEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PropagateChainEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.SubmitTransactionRequest) */ {
 public:
  inline SubmitTransactionRequest() : SubmitTransactionRequest(nullptr) {}
  virtual ~SubmitTransactionRequest();

  SubmitTransactionRequest(const SubmitTransactionRequest& from);
  SubmitTransactionRequest(SubmitTransactionRequest&& from) noexcept
    : SubmitTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionRequest& operator=(const SubmitTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionRequest& operator=(SubmitTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionRequest& default_instance();

  static inline const SubmitTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionRequest*>(
               &_SubmitTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubmitTransactionRequest& a, SubmitTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionRequest* New() const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(nullptr);
  }

  SubmitTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionRequest& from);
  void MergeFrom(const SubmitTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.SubmitTransactionRequest";
  }
  protected:
  explicit SubmitTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubmitTransactionRequest_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    SubmitTransactionRequest_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_ASYNC =
    SubmitTransactionRequest_Type_TYPE_ASYNC;
  static constexpr Type TYPE_SYNC =
    SubmitTransactionRequest_Type_TYPE_SYNC;
  static constexpr Type TYPE_COMMIT =
    SubmitTransactionRequest_Type_TYPE_COMMIT;
  static inline bool Type_IsValid(int value) {
    return SubmitTransactionRequest_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SubmitTransactionRequest_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SubmitTransactionRequest_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SubmitTransactionRequest_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SubmitTransactionRequest_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SubmitTransactionRequest_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SubmitTransactionRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .vega.SignedBundle tx = 1 [json_name = "tx"];
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  const ::vega::SignedBundle& tx() const;
  ::vega::SignedBundle* release_tx();
  ::vega::SignedBundle* mutable_tx();
  void set_allocated_tx(::vega::SignedBundle* tx);
  private:
  const ::vega::SignedBundle& _internal_tx() const;
  ::vega::SignedBundle* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::vega::SignedBundle* tx);
  ::vega::SignedBundle* unsafe_arena_release_tx();

  // .api.v1.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
  void clear_type();
  ::api::v1::SubmitTransactionRequest_Type type() const;
  void set_type(::api::v1::SubmitTransactionRequest_Type value);
  private:
  ::api::v1::SubmitTransactionRequest_Type _internal_type() const;
  void _internal_set_type(::api::v1::SubmitTransactionRequest_Type value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.SubmitTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::SignedBundle* tx_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.SubmitTransactionResponse) */ {
 public:
  inline SubmitTransactionResponse() : SubmitTransactionResponse(nullptr) {}
  virtual ~SubmitTransactionResponse();

  SubmitTransactionResponse(const SubmitTransactionResponse& from);
  SubmitTransactionResponse(SubmitTransactionResponse&& from) noexcept
    : SubmitTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionResponse& operator=(const SubmitTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionResponse& operator=(SubmitTransactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionResponse& default_instance();

  static inline const SubmitTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionResponse*>(
               &_SubmitTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubmitTransactionResponse& a, SubmitTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionResponse* New() const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(nullptr);
  }

  SubmitTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionResponse& from);
  void MergeFrom(const SubmitTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.SubmitTransactionResponse";
  }
  protected:
  explicit SubmitTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.SubmitTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionV2Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.SubmitTransactionV2Request) */ {
 public:
  inline SubmitTransactionV2Request() : SubmitTransactionV2Request(nullptr) {}
  virtual ~SubmitTransactionV2Request();

  SubmitTransactionV2Request(const SubmitTransactionV2Request& from);
  SubmitTransactionV2Request(SubmitTransactionV2Request&& from) noexcept
    : SubmitTransactionV2Request() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionV2Request& operator=(const SubmitTransactionV2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionV2Request& operator=(SubmitTransactionV2Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionV2Request& default_instance();

  static inline const SubmitTransactionV2Request* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionV2Request*>(
               &_SubmitTransactionV2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubmitTransactionV2Request& a, SubmitTransactionV2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionV2Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionV2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionV2Request* New() const final {
    return CreateMaybeMessage<SubmitTransactionV2Request>(nullptr);
  }

  SubmitTransactionV2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionV2Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionV2Request& from);
  void MergeFrom(const SubmitTransactionV2Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionV2Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.SubmitTransactionV2Request";
  }
  protected:
  explicit SubmitTransactionV2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubmitTransactionV2Request_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    SubmitTransactionV2Request_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_ASYNC =
    SubmitTransactionV2Request_Type_TYPE_ASYNC;
  static constexpr Type TYPE_SYNC =
    SubmitTransactionV2Request_Type_TYPE_SYNC;
  static constexpr Type TYPE_COMMIT =
    SubmitTransactionV2Request_Type_TYPE_COMMIT;
  static inline bool Type_IsValid(int value) {
    return SubmitTransactionV2Request_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SubmitTransactionV2Request_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SubmitTransactionV2Request_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SubmitTransactionV2Request_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SubmitTransactionV2Request_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SubmitTransactionV2Request_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SubmitTransactionV2Request_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .vega.commands.v1.Transaction tx = 1 [json_name = "tx"];
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  const ::vega::commands::v1::Transaction& tx() const;
  ::vega::commands::v1::Transaction* release_tx();
  ::vega::commands::v1::Transaction* mutable_tx();
  void set_allocated_tx(::vega::commands::v1::Transaction* tx);
  private:
  const ::vega::commands::v1::Transaction& _internal_tx() const;
  ::vega::commands::v1::Transaction* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::vega::commands::v1::Transaction* tx);
  ::vega::commands::v1::Transaction* unsafe_arena_release_tx();

  // .api.v1.SubmitTransactionV2Request.Type type = 2 [json_name = "type"];
  void clear_type();
  ::api::v1::SubmitTransactionV2Request_Type type() const;
  void set_type(::api::v1::SubmitTransactionV2Request_Type value);
  private:
  ::api::v1::SubmitTransactionV2Request_Type _internal_type() const;
  void _internal_set_type(::api::v1::SubmitTransactionV2Request_Type value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.SubmitTransactionV2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::Transaction* tx_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionV2Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.SubmitTransactionV2Response) */ {
 public:
  inline SubmitTransactionV2Response() : SubmitTransactionV2Response(nullptr) {}
  virtual ~SubmitTransactionV2Response();

  SubmitTransactionV2Response(const SubmitTransactionV2Response& from);
  SubmitTransactionV2Response(SubmitTransactionV2Response&& from) noexcept
    : SubmitTransactionV2Response() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionV2Response& operator=(const SubmitTransactionV2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionV2Response& operator=(SubmitTransactionV2Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionV2Response& default_instance();

  static inline const SubmitTransactionV2Response* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionV2Response*>(
               &_SubmitTransactionV2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SubmitTransactionV2Response& a, SubmitTransactionV2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionV2Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionV2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionV2Response* New() const final {
    return CreateMaybeMessage<SubmitTransactionV2Response>(nullptr);
  }

  SubmitTransactionV2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionV2Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionV2Response& from);
  void MergeFrom(const SubmitTransactionV2Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionV2Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.SubmitTransactionV2Response";
  }
  protected:
  explicit SubmitTransactionV2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.SubmitTransactionV2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareWithdrawRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareWithdrawRequest) */ {
 public:
  inline PrepareWithdrawRequest() : PrepareWithdrawRequest(nullptr) {}
  virtual ~PrepareWithdrawRequest();

  PrepareWithdrawRequest(const PrepareWithdrawRequest& from);
  PrepareWithdrawRequest(PrepareWithdrawRequest&& from) noexcept
    : PrepareWithdrawRequest() {
    *this = ::std::move(from);
  }

  inline PrepareWithdrawRequest& operator=(const PrepareWithdrawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareWithdrawRequest& operator=(PrepareWithdrawRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareWithdrawRequest& default_instance();

  static inline const PrepareWithdrawRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareWithdrawRequest*>(
               &_PrepareWithdrawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PrepareWithdrawRequest& a, PrepareWithdrawRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareWithdrawRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareWithdrawRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareWithdrawRequest* New() const final {
    return CreateMaybeMessage<PrepareWithdrawRequest>(nullptr);
  }

  PrepareWithdrawRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareWithdrawRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareWithdrawRequest& from);
  void MergeFrom(const PrepareWithdrawRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareWithdrawRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareWithdrawRequest";
  }
  protected:
  explicit PrepareWithdrawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawFieldNumber = 1,
  };
  // .vega.commands.v1.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
  bool has_withdraw() const;
  private:
  bool _internal_has_withdraw() const;
  public:
  void clear_withdraw();
  const ::vega::commands::v1::WithdrawSubmission& withdraw() const;
  ::vega::commands::v1::WithdrawSubmission* release_withdraw();
  ::vega::commands::v1::WithdrawSubmission* mutable_withdraw();
  void set_allocated_withdraw(::vega::commands::v1::WithdrawSubmission* withdraw);
  private:
  const ::vega::commands::v1::WithdrawSubmission& _internal_withdraw() const;
  ::vega::commands::v1::WithdrawSubmission* _internal_mutable_withdraw();
  public:
  void unsafe_arena_set_allocated_withdraw(
      ::vega::commands::v1::WithdrawSubmission* withdraw);
  ::vega::commands::v1::WithdrawSubmission* unsafe_arena_release_withdraw();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareWithdrawRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::WithdrawSubmission* withdraw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareWithdrawResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareWithdrawResponse) */ {
 public:
  inline PrepareWithdrawResponse() : PrepareWithdrawResponse(nullptr) {}
  virtual ~PrepareWithdrawResponse();

  PrepareWithdrawResponse(const PrepareWithdrawResponse& from);
  PrepareWithdrawResponse(PrepareWithdrawResponse&& from) noexcept
    : PrepareWithdrawResponse() {
    *this = ::std::move(from);
  }

  inline PrepareWithdrawResponse& operator=(const PrepareWithdrawResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareWithdrawResponse& operator=(PrepareWithdrawResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareWithdrawResponse& default_instance();

  static inline const PrepareWithdrawResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareWithdrawResponse*>(
               &_PrepareWithdrawResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PrepareWithdrawResponse& a, PrepareWithdrawResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareWithdrawResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareWithdrawResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareWithdrawResponse* New() const final {
    return CreateMaybeMessage<PrepareWithdrawResponse>(nullptr);
  }

  PrepareWithdrawResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareWithdrawResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareWithdrawResponse& from);
  void MergeFrom(const PrepareWithdrawResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareWithdrawResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareWithdrawResponse";
  }
  protected:
  explicit PrepareWithdrawResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PrepareWithdrawResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareSubmitOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareSubmitOrderResponse) */ {
 public:
  inline PrepareSubmitOrderResponse() : PrepareSubmitOrderResponse(nullptr) {}
  virtual ~PrepareSubmitOrderResponse();

  PrepareSubmitOrderResponse(const PrepareSubmitOrderResponse& from);
  PrepareSubmitOrderResponse(PrepareSubmitOrderResponse&& from) noexcept
    : PrepareSubmitOrderResponse() {
    *this = ::std::move(from);
  }

  inline PrepareSubmitOrderResponse& operator=(const PrepareSubmitOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareSubmitOrderResponse& operator=(PrepareSubmitOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareSubmitOrderResponse& default_instance();

  static inline const PrepareSubmitOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareSubmitOrderResponse*>(
               &_PrepareSubmitOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PrepareSubmitOrderResponse& a, PrepareSubmitOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareSubmitOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareSubmitOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareSubmitOrderResponse* New() const final {
    return CreateMaybeMessage<PrepareSubmitOrderResponse>(nullptr);
  }

  PrepareSubmitOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareSubmitOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareSubmitOrderResponse& from);
  void MergeFrom(const PrepareSubmitOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareSubmitOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareSubmitOrderResponse";
  }
  protected:
  explicit PrepareSubmitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
    kSubmitIdFieldNumber = 2,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // string submit_id = 2 [json_name = "submitId"];
  void clear_submit_id();
  const std::string& submit_id() const;
  void set_submit_id(const std::string& value);
  void set_submit_id(std::string&& value);
  void set_submit_id(const char* value);
  void set_submit_id(const char* value, size_t size);
  std::string* mutable_submit_id();
  std::string* release_submit_id();
  void set_allocated_submit_id(std::string* submit_id);
  private:
  const std::string& _internal_submit_id() const;
  void _internal_set_submit_id(const std::string& value);
  std::string* _internal_mutable_submit_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PrepareSubmitOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submit_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareCancelOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareCancelOrderResponse) */ {
 public:
  inline PrepareCancelOrderResponse() : PrepareCancelOrderResponse(nullptr) {}
  virtual ~PrepareCancelOrderResponse();

  PrepareCancelOrderResponse(const PrepareCancelOrderResponse& from);
  PrepareCancelOrderResponse(PrepareCancelOrderResponse&& from) noexcept
    : PrepareCancelOrderResponse() {
    *this = ::std::move(from);
  }

  inline PrepareCancelOrderResponse& operator=(const PrepareCancelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareCancelOrderResponse& operator=(PrepareCancelOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareCancelOrderResponse& default_instance();

  static inline const PrepareCancelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareCancelOrderResponse*>(
               &_PrepareCancelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PrepareCancelOrderResponse& a, PrepareCancelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareCancelOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareCancelOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareCancelOrderResponse* New() const final {
    return CreateMaybeMessage<PrepareCancelOrderResponse>(nullptr);
  }

  PrepareCancelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareCancelOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareCancelOrderResponse& from);
  void MergeFrom(const PrepareCancelOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareCancelOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareCancelOrderResponse";
  }
  protected:
  explicit PrepareCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PrepareCancelOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareAmendOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareAmendOrderResponse) */ {
 public:
  inline PrepareAmendOrderResponse() : PrepareAmendOrderResponse(nullptr) {}
  virtual ~PrepareAmendOrderResponse();

  PrepareAmendOrderResponse(const PrepareAmendOrderResponse& from);
  PrepareAmendOrderResponse(PrepareAmendOrderResponse&& from) noexcept
    : PrepareAmendOrderResponse() {
    *this = ::std::move(from);
  }

  inline PrepareAmendOrderResponse& operator=(const PrepareAmendOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareAmendOrderResponse& operator=(PrepareAmendOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareAmendOrderResponse& default_instance();

  static inline const PrepareAmendOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareAmendOrderResponse*>(
               &_PrepareAmendOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PrepareAmendOrderResponse& a, PrepareAmendOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareAmendOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareAmendOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareAmendOrderResponse* New() const final {
    return CreateMaybeMessage<PrepareAmendOrderResponse>(nullptr);
  }

  PrepareAmendOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareAmendOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareAmendOrderResponse& from);
  void MergeFrom(const PrepareAmendOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareAmendOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareAmendOrderResponse";
  }
  protected:
  explicit PrepareAmendOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PrepareAmendOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareSubmitOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareSubmitOrderRequest) */ {
 public:
  inline PrepareSubmitOrderRequest() : PrepareSubmitOrderRequest(nullptr) {}
  virtual ~PrepareSubmitOrderRequest();

  PrepareSubmitOrderRequest(const PrepareSubmitOrderRequest& from);
  PrepareSubmitOrderRequest(PrepareSubmitOrderRequest&& from) noexcept
    : PrepareSubmitOrderRequest() {
    *this = ::std::move(from);
  }

  inline PrepareSubmitOrderRequest& operator=(const PrepareSubmitOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareSubmitOrderRequest& operator=(PrepareSubmitOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareSubmitOrderRequest& default_instance();

  static inline const PrepareSubmitOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareSubmitOrderRequest*>(
               &_PrepareSubmitOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PrepareSubmitOrderRequest& a, PrepareSubmitOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareSubmitOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareSubmitOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareSubmitOrderRequest* New() const final {
    return CreateMaybeMessage<PrepareSubmitOrderRequest>(nullptr);
  }

  PrepareSubmitOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareSubmitOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareSubmitOrderRequest& from);
  void MergeFrom(const PrepareSubmitOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareSubmitOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareSubmitOrderRequest";
  }
  protected:
  explicit PrepareSubmitOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmissionFieldNumber = 1,
  };
  // .vega.commands.v1.OrderSubmission submission = 1 [json_name = "submission"];
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::commands::v1::OrderSubmission& submission() const;
  ::vega::commands::v1::OrderSubmission* release_submission();
  ::vega::commands::v1::OrderSubmission* mutable_submission();
  void set_allocated_submission(::vega::commands::v1::OrderSubmission* submission);
  private:
  const ::vega::commands::v1::OrderSubmission& _internal_submission() const;
  ::vega::commands::v1::OrderSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::commands::v1::OrderSubmission* submission);
  ::vega::commands::v1::OrderSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareSubmitOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::OrderSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareCancelOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareCancelOrderRequest) */ {
 public:
  inline PrepareCancelOrderRequest() : PrepareCancelOrderRequest(nullptr) {}
  virtual ~PrepareCancelOrderRequest();

  PrepareCancelOrderRequest(const PrepareCancelOrderRequest& from);
  PrepareCancelOrderRequest(PrepareCancelOrderRequest&& from) noexcept
    : PrepareCancelOrderRequest() {
    *this = ::std::move(from);
  }

  inline PrepareCancelOrderRequest& operator=(const PrepareCancelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareCancelOrderRequest& operator=(PrepareCancelOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareCancelOrderRequest& default_instance();

  static inline const PrepareCancelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareCancelOrderRequest*>(
               &_PrepareCancelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PrepareCancelOrderRequest& a, PrepareCancelOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareCancelOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareCancelOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareCancelOrderRequest* New() const final {
    return CreateMaybeMessage<PrepareCancelOrderRequest>(nullptr);
  }

  PrepareCancelOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareCancelOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareCancelOrderRequest& from);
  void MergeFrom(const PrepareCancelOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareCancelOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareCancelOrderRequest";
  }
  protected:
  explicit PrepareCancelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCancellationFieldNumber = 1,
  };
  // .vega.commands.v1.OrderCancellation cancellation = 1 [json_name = "cancellation"];
  bool has_cancellation() const;
  private:
  bool _internal_has_cancellation() const;
  public:
  void clear_cancellation();
  const ::vega::commands::v1::OrderCancellation& cancellation() const;
  ::vega::commands::v1::OrderCancellation* release_cancellation();
  ::vega::commands::v1::OrderCancellation* mutable_cancellation();
  void set_allocated_cancellation(::vega::commands::v1::OrderCancellation* cancellation);
  private:
  const ::vega::commands::v1::OrderCancellation& _internal_cancellation() const;
  ::vega::commands::v1::OrderCancellation* _internal_mutable_cancellation();
  public:
  void unsafe_arena_set_allocated_cancellation(
      ::vega::commands::v1::OrderCancellation* cancellation);
  ::vega::commands::v1::OrderCancellation* unsafe_arena_release_cancellation();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareCancelOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::OrderCancellation* cancellation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareAmendOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareAmendOrderRequest) */ {
 public:
  inline PrepareAmendOrderRequest() : PrepareAmendOrderRequest(nullptr) {}
  virtual ~PrepareAmendOrderRequest();

  PrepareAmendOrderRequest(const PrepareAmendOrderRequest& from);
  PrepareAmendOrderRequest(PrepareAmendOrderRequest&& from) noexcept
    : PrepareAmendOrderRequest() {
    *this = ::std::move(from);
  }

  inline PrepareAmendOrderRequest& operator=(const PrepareAmendOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareAmendOrderRequest& operator=(PrepareAmendOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareAmendOrderRequest& default_instance();

  static inline const PrepareAmendOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareAmendOrderRequest*>(
               &_PrepareAmendOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PrepareAmendOrderRequest& a, PrepareAmendOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareAmendOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareAmendOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareAmendOrderRequest* New() const final {
    return CreateMaybeMessage<PrepareAmendOrderRequest>(nullptr);
  }

  PrepareAmendOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareAmendOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareAmendOrderRequest& from);
  void MergeFrom(const PrepareAmendOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareAmendOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareAmendOrderRequest";
  }
  protected:
  explicit PrepareAmendOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmendmentFieldNumber = 1,
  };
  // .vega.commands.v1.OrderAmendment amendment = 1 [json_name = "amendment"];
  bool has_amendment() const;
  private:
  bool _internal_has_amendment() const;
  public:
  void clear_amendment();
  const ::vega::commands::v1::OrderAmendment& amendment() const;
  ::vega::commands::v1::OrderAmendment* release_amendment();
  ::vega::commands::v1::OrderAmendment* mutable_amendment();
  void set_allocated_amendment(::vega::commands::v1::OrderAmendment* amendment);
  private:
  const ::vega::commands::v1::OrderAmendment& _internal_amendment() const;
  ::vega::commands::v1::OrderAmendment* _internal_mutable_amendment();
  public:
  void unsafe_arena_set_allocated_amendment(
      ::vega::commands::v1::OrderAmendment* amendment);
  ::vega::commands::v1::OrderAmendment* unsafe_arena_release_amendment();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareAmendOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::OrderAmendment* amendment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.AssetsRequest) */ {
 public:
  inline AssetsRequest() : AssetsRequest(nullptr) {}
  virtual ~AssetsRequest();

  AssetsRequest(const AssetsRequest& from);
  AssetsRequest(AssetsRequest&& from) noexcept
    : AssetsRequest() {
    *this = ::std::move(from);
  }

  inline AssetsRequest& operator=(const AssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetsRequest& operator=(AssetsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetsRequest& default_instance();

  static inline const AssetsRequest* internal_default_instance() {
    return reinterpret_cast<const AssetsRequest*>(
               &_AssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AssetsRequest& a, AssetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetsRequest* New() const final {
    return CreateMaybeMessage<AssetsRequest>(nullptr);
  }

  AssetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetsRequest& from);
  void MergeFrom(const AssetsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.AssetsRequest";
  }
  protected:
  explicit AssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.AssetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.AssetsResponse) */ {
 public:
  inline AssetsResponse() : AssetsResponse(nullptr) {}
  virtual ~AssetsResponse();

  AssetsResponse(const AssetsResponse& from);
  AssetsResponse(AssetsResponse&& from) noexcept
    : AssetsResponse() {
    *this = ::std::move(from);
  }

  inline AssetsResponse& operator=(const AssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetsResponse& operator=(AssetsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetsResponse& default_instance();

  static inline const AssetsResponse* internal_default_instance() {
    return reinterpret_cast<const AssetsResponse*>(
               &_AssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AssetsResponse& a, AssetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetsResponse* New() const final {
    return CreateMaybeMessage<AssetsResponse>(nullptr);
  }

  AssetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetsResponse& from);
  void MergeFrom(const AssetsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.AssetsResponse";
  }
  protected:
  explicit AssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
  };
  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::vega::Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >*
      mutable_assets();
  private:
  const ::vega::Asset& _internal_assets(int index) const;
  ::vega::Asset* _internal_add_assets();
  public:
  const ::vega::Asset& assets(int index) const;
  ::vega::Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >&
      assets() const;

  // @@protoc_insertion_point(class_scope:api.v1.AssetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset > assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.AssetByIDRequest) */ {
 public:
  inline AssetByIDRequest() : AssetByIDRequest(nullptr) {}
  virtual ~AssetByIDRequest();

  AssetByIDRequest(const AssetByIDRequest& from);
  AssetByIDRequest(AssetByIDRequest&& from) noexcept
    : AssetByIDRequest() {
    *this = ::std::move(from);
  }

  inline AssetByIDRequest& operator=(const AssetByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetByIDRequest& operator=(AssetByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetByIDRequest& default_instance();

  static inline const AssetByIDRequest* internal_default_instance() {
    return reinterpret_cast<const AssetByIDRequest*>(
               &_AssetByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AssetByIDRequest& a, AssetByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetByIDRequest* New() const final {
    return CreateMaybeMessage<AssetByIDRequest>(nullptr);
  }

  AssetByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetByIDRequest& from);
  void MergeFrom(const AssetByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.AssetByIDRequest";
  }
  protected:
  explicit AssetByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.AssetByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.AssetByIDResponse) */ {
 public:
  inline AssetByIDResponse() : AssetByIDResponse(nullptr) {}
  virtual ~AssetByIDResponse();

  AssetByIDResponse(const AssetByIDResponse& from);
  AssetByIDResponse(AssetByIDResponse&& from) noexcept
    : AssetByIDResponse() {
    *this = ::std::move(from);
  }

  inline AssetByIDResponse& operator=(const AssetByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetByIDResponse& operator=(AssetByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetByIDResponse& default_instance();

  static inline const AssetByIDResponse* internal_default_instance() {
    return reinterpret_cast<const AssetByIDResponse*>(
               &_AssetByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AssetByIDResponse& a, AssetByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetByIDResponse* New() const final {
    return CreateMaybeMessage<AssetByIDResponse>(nullptr);
  }

  AssetByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetByIDResponse& from);
  void MergeFrom(const AssetByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.AssetByIDResponse";
  }
  protected:
  explicit AssetByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
  };
  // .vega.Asset asset = 1 [json_name = "asset"];
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::vega::Asset& asset() const;
  ::vega::Asset* release_asset();
  ::vega::Asset* mutable_asset();
  void set_allocated_asset(::vega::Asset* asset);
  private:
  const ::vega::Asset& _internal_asset() const;
  ::vega::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::vega::Asset* asset);
  ::vega::Asset* unsafe_arena_release_asset();

  // @@protoc_insertion_point(class_scope:api.v1.AssetByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Asset* asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNodeSignaturesAggregateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNodeSignaturesAggregateRequest) */ {
 public:
  inline GetNodeSignaturesAggregateRequest() : GetNodeSignaturesAggregateRequest(nullptr) {}
  virtual ~GetNodeSignaturesAggregateRequest();

  GetNodeSignaturesAggregateRequest(const GetNodeSignaturesAggregateRequest& from);
  GetNodeSignaturesAggregateRequest(GetNodeSignaturesAggregateRequest&& from) noexcept
    : GetNodeSignaturesAggregateRequest() {
    *this = ::std::move(from);
  }

  inline GetNodeSignaturesAggregateRequest& operator=(const GetNodeSignaturesAggregateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeSignaturesAggregateRequest& operator=(GetNodeSignaturesAggregateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeSignaturesAggregateRequest& default_instance();

  static inline const GetNodeSignaturesAggregateRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodeSignaturesAggregateRequest*>(
               &_GetNodeSignaturesAggregateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetNodeSignaturesAggregateRequest& a, GetNodeSignaturesAggregateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeSignaturesAggregateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeSignaturesAggregateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeSignaturesAggregateRequest* New() const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateRequest>(nullptr);
  }

  GetNodeSignaturesAggregateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeSignaturesAggregateRequest& from);
  void MergeFrom(const GetNodeSignaturesAggregateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeSignaturesAggregateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNodeSignaturesAggregateRequest";
  }
  protected:
  explicit GetNodeSignaturesAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.GetNodeSignaturesAggregateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNodeSignaturesAggregateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNodeSignaturesAggregateResponse) */ {
 public:
  inline GetNodeSignaturesAggregateResponse() : GetNodeSignaturesAggregateResponse(nullptr) {}
  virtual ~GetNodeSignaturesAggregateResponse();

  GetNodeSignaturesAggregateResponse(const GetNodeSignaturesAggregateResponse& from);
  GetNodeSignaturesAggregateResponse(GetNodeSignaturesAggregateResponse&& from) noexcept
    : GetNodeSignaturesAggregateResponse() {
    *this = ::std::move(from);
  }

  inline GetNodeSignaturesAggregateResponse& operator=(const GetNodeSignaturesAggregateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeSignaturesAggregateResponse& operator=(GetNodeSignaturesAggregateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeSignaturesAggregateResponse& default_instance();

  static inline const GetNodeSignaturesAggregateResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodeSignaturesAggregateResponse*>(
               &_GetNodeSignaturesAggregateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetNodeSignaturesAggregateResponse& a, GetNodeSignaturesAggregateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeSignaturesAggregateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeSignaturesAggregateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeSignaturesAggregateResponse* New() const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateResponse>(nullptr);
  }

  GetNodeSignaturesAggregateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeSignaturesAggregateResponse& from);
  void MergeFrom(const GetNodeSignaturesAggregateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeSignaturesAggregateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNodeSignaturesAggregateResponse";
  }
  protected:
  explicit GetNodeSignaturesAggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated .vega.commands.v1.NodeSignature signatures = 1 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::vega::commands::v1::NodeSignature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::commands::v1::NodeSignature >*
      mutable_signatures();
  private:
  const ::vega::commands::v1::NodeSignature& _internal_signatures(int index) const;
  ::vega::commands::v1::NodeSignature* _internal_add_signatures();
  public:
  const ::vega::commands::v1::NodeSignature& signatures(int index) const;
  ::vega::commands::v1::NodeSignature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::commands::v1::NodeSignature >&
      signatures() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetNodeSignaturesAggregateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::commands::v1::NodeSignature > signatures_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OptionalProposalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OptionalProposalState) */ {
 public:
  inline OptionalProposalState() : OptionalProposalState(nullptr) {}
  virtual ~OptionalProposalState();

  OptionalProposalState(const OptionalProposalState& from);
  OptionalProposalState(OptionalProposalState&& from) noexcept
    : OptionalProposalState() {
    *this = ::std::move(from);
  }

  inline OptionalProposalState& operator=(const OptionalProposalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalProposalState& operator=(OptionalProposalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionalProposalState& default_instance();

  static inline const OptionalProposalState* internal_default_instance() {
    return reinterpret_cast<const OptionalProposalState*>(
               &_OptionalProposalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OptionalProposalState& a, OptionalProposalState& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalProposalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalProposalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionalProposalState* New() const final {
    return CreateMaybeMessage<OptionalProposalState>(nullptr);
  }

  OptionalProposalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionalProposalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionalProposalState& from);
  void MergeFrom(const OptionalProposalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalProposalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OptionalProposalState";
  }
  protected:
  explicit OptionalProposalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .vega.Proposal.State value = 1 [json_name = "value"];
  void clear_value();
  ::vega::Proposal_State value() const;
  void set_value(::vega::Proposal_State value);
  private:
  ::vega::Proposal_State _internal_value() const;
  void _internal_set_value(::vega::Proposal_State value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.OptionalProposalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalsRequest) */ {
 public:
  inline GetProposalsRequest() : GetProposalsRequest(nullptr) {}
  virtual ~GetProposalsRequest();

  GetProposalsRequest(const GetProposalsRequest& from);
  GetProposalsRequest(GetProposalsRequest&& from) noexcept
    : GetProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalsRequest& operator=(const GetProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsRequest& operator=(GetProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsRequest& default_instance();

  static inline const GetProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalsRequest*>(
               &_GetProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetProposalsRequest& a, GetProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsRequest* New() const final {
    return CreateMaybeMessage<GetProposalsRequest>(nullptr);
  }

  GetProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsRequest& from);
  void MergeFrom(const GetProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalsRequest";
  }
  protected:
  explicit GetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  bool has_select_in_state() const;
  private:
  bool _internal_has_select_in_state() const;
  public:
  void clear_select_in_state();
  const ::api::v1::OptionalProposalState& select_in_state() const;
  ::api::v1::OptionalProposalState* release_select_in_state();
  ::api::v1::OptionalProposalState* mutable_select_in_state();
  void set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state);
  private:
  const ::api::v1::OptionalProposalState& _internal_select_in_state() const;
  ::api::v1::OptionalProposalState* _internal_mutable_select_in_state();
  public:
  void unsafe_arena_set_allocated_select_in_state(
      ::api::v1::OptionalProposalState* select_in_state);
  ::api::v1::OptionalProposalState* unsafe_arena_release_select_in_state();

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::v1::OptionalProposalState* select_in_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalsResponse) */ {
 public:
  inline GetProposalsResponse() : GetProposalsResponse(nullptr) {}
  virtual ~GetProposalsResponse();

  GetProposalsResponse(const GetProposalsResponse& from);
  GetProposalsResponse(GetProposalsResponse&& from) noexcept
    : GetProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalsResponse& operator=(const GetProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsResponse& operator=(GetProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsResponse& default_instance();

  static inline const GetProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalsResponse*>(
               &_GetProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetProposalsResponse& a, GetProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsResponse* New() const final {
    return CreateMaybeMessage<GetProposalsResponse>(nullptr);
  }

  GetProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsResponse& from);
  void MergeFrom(const GetProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalsResponse";
  }
  protected:
  explicit GetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalsByPartyRequest) */ {
 public:
  inline GetProposalsByPartyRequest() : GetProposalsByPartyRequest(nullptr) {}
  virtual ~GetProposalsByPartyRequest();

  GetProposalsByPartyRequest(const GetProposalsByPartyRequest& from);
  GetProposalsByPartyRequest(GetProposalsByPartyRequest&& from) noexcept
    : GetProposalsByPartyRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalsByPartyRequest& operator=(const GetProposalsByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsByPartyRequest& operator=(GetProposalsByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsByPartyRequest& default_instance();

  static inline const GetProposalsByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalsByPartyRequest*>(
               &_GetProposalsByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetProposalsByPartyRequest& a, GetProposalsByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsByPartyRequest* New() const final {
    return CreateMaybeMessage<GetProposalsByPartyRequest>(nullptr);
  }

  GetProposalsByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsByPartyRequest& from);
  void MergeFrom(const GetProposalsByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalsByPartyRequest";
  }
  protected:
  explicit GetProposalsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kSelectInStateFieldNumber = 2,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
  bool has_select_in_state() const;
  private:
  bool _internal_has_select_in_state() const;
  public:
  void clear_select_in_state();
  const ::api::v1::OptionalProposalState& select_in_state() const;
  ::api::v1::OptionalProposalState* release_select_in_state();
  ::api::v1::OptionalProposalState* mutable_select_in_state();
  void set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state);
  private:
  const ::api::v1::OptionalProposalState& _internal_select_in_state() const;
  ::api::v1::OptionalProposalState* _internal_mutable_select_in_state();
  public:
  void unsafe_arena_set_allocated_select_in_state(
      ::api::v1::OptionalProposalState* select_in_state);
  ::api::v1::OptionalProposalState* unsafe_arena_release_select_in_state();

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalsByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::api::v1::OptionalProposalState* select_in_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalsByPartyResponse) */ {
 public:
  inline GetProposalsByPartyResponse() : GetProposalsByPartyResponse(nullptr) {}
  virtual ~GetProposalsByPartyResponse();

  GetProposalsByPartyResponse(const GetProposalsByPartyResponse& from);
  GetProposalsByPartyResponse(GetProposalsByPartyResponse&& from) noexcept
    : GetProposalsByPartyResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalsByPartyResponse& operator=(const GetProposalsByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsByPartyResponse& operator=(GetProposalsByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsByPartyResponse& default_instance();

  static inline const GetProposalsByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalsByPartyResponse*>(
               &_GetProposalsByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetProposalsByPartyResponse& a, GetProposalsByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsByPartyResponse* New() const final {
    return CreateMaybeMessage<GetProposalsByPartyResponse>(nullptr);
  }

  GetProposalsByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsByPartyResponse& from);
  void MergeFrom(const GetProposalsByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalsByPartyResponse";
  }
  protected:
  explicit GetProposalsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalsByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVotesByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetVotesByPartyRequest) */ {
 public:
  inline GetVotesByPartyRequest() : GetVotesByPartyRequest(nullptr) {}
  virtual ~GetVotesByPartyRequest();

  GetVotesByPartyRequest(const GetVotesByPartyRequest& from);
  GetVotesByPartyRequest(GetVotesByPartyRequest&& from) noexcept
    : GetVotesByPartyRequest() {
    *this = ::std::move(from);
  }

  inline GetVotesByPartyRequest& operator=(const GetVotesByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVotesByPartyRequest& operator=(GetVotesByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVotesByPartyRequest& default_instance();

  static inline const GetVotesByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const GetVotesByPartyRequest*>(
               &_GetVotesByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetVotesByPartyRequest& a, GetVotesByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVotesByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVotesByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVotesByPartyRequest* New() const final {
    return CreateMaybeMessage<GetVotesByPartyRequest>(nullptr);
  }

  GetVotesByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVotesByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVotesByPartyRequest& from);
  void MergeFrom(const GetVotesByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVotesByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetVotesByPartyRequest";
  }
  protected:
  explicit GetVotesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.GetVotesByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVotesByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetVotesByPartyResponse) */ {
 public:
  inline GetVotesByPartyResponse() : GetVotesByPartyResponse(nullptr) {}
  virtual ~GetVotesByPartyResponse();

  GetVotesByPartyResponse(const GetVotesByPartyResponse& from);
  GetVotesByPartyResponse(GetVotesByPartyResponse&& from) noexcept
    : GetVotesByPartyResponse() {
    *this = ::std::move(from);
  }

  inline GetVotesByPartyResponse& operator=(const GetVotesByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVotesByPartyResponse& operator=(GetVotesByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVotesByPartyResponse& default_instance();

  static inline const GetVotesByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const GetVotesByPartyResponse*>(
               &_GetVotesByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetVotesByPartyResponse& a, GetVotesByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVotesByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVotesByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVotesByPartyResponse* New() const final {
    return CreateMaybeMessage<GetVotesByPartyResponse>(nullptr);
  }

  GetVotesByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVotesByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVotesByPartyResponse& from);
  void MergeFrom(const GetVotesByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVotesByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetVotesByPartyResponse";
  }
  protected:
  explicit GetVotesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
  };
  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::vega::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >*
      mutable_votes();
  private:
  const ::vega::Vote& _internal_votes(int index) const;
  ::vega::Vote* _internal_add_votes();
  public:
  const ::vega::Vote& votes(int index) const;
  ::vega::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetVotesByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote > votes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewMarketProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNewMarketProposalsRequest) */ {
 public:
  inline GetNewMarketProposalsRequest() : GetNewMarketProposalsRequest(nullptr) {}
  virtual ~GetNewMarketProposalsRequest();

  GetNewMarketProposalsRequest(const GetNewMarketProposalsRequest& from);
  GetNewMarketProposalsRequest(GetNewMarketProposalsRequest&& from) noexcept
    : GetNewMarketProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetNewMarketProposalsRequest& operator=(const GetNewMarketProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewMarketProposalsRequest& operator=(GetNewMarketProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewMarketProposalsRequest& default_instance();

  static inline const GetNewMarketProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewMarketProposalsRequest*>(
               &_GetNewMarketProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetNewMarketProposalsRequest& a, GetNewMarketProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewMarketProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewMarketProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewMarketProposalsRequest* New() const final {
    return CreateMaybeMessage<GetNewMarketProposalsRequest>(nullptr);
  }

  GetNewMarketProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewMarketProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewMarketProposalsRequest& from);
  void MergeFrom(const GetNewMarketProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewMarketProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNewMarketProposalsRequest";
  }
  protected:
  explicit GetNewMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  bool has_select_in_state() const;
  private:
  bool _internal_has_select_in_state() const;
  public:
  void clear_select_in_state();
  const ::api::v1::OptionalProposalState& select_in_state() const;
  ::api::v1::OptionalProposalState* release_select_in_state();
  ::api::v1::OptionalProposalState* mutable_select_in_state();
  void set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state);
  private:
  const ::api::v1::OptionalProposalState& _internal_select_in_state() const;
  ::api::v1::OptionalProposalState* _internal_mutable_select_in_state();
  public:
  void unsafe_arena_set_allocated_select_in_state(
      ::api::v1::OptionalProposalState* select_in_state);
  ::api::v1::OptionalProposalState* unsafe_arena_release_select_in_state();

  // @@protoc_insertion_point(class_scope:api.v1.GetNewMarketProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::v1::OptionalProposalState* select_in_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewMarketProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNewMarketProposalsResponse) */ {
 public:
  inline GetNewMarketProposalsResponse() : GetNewMarketProposalsResponse(nullptr) {}
  virtual ~GetNewMarketProposalsResponse();

  GetNewMarketProposalsResponse(const GetNewMarketProposalsResponse& from);
  GetNewMarketProposalsResponse(GetNewMarketProposalsResponse&& from) noexcept
    : GetNewMarketProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetNewMarketProposalsResponse& operator=(const GetNewMarketProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewMarketProposalsResponse& operator=(GetNewMarketProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewMarketProposalsResponse& default_instance();

  static inline const GetNewMarketProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNewMarketProposalsResponse*>(
               &_GetNewMarketProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetNewMarketProposalsResponse& a, GetNewMarketProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewMarketProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewMarketProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewMarketProposalsResponse* New() const final {
    return CreateMaybeMessage<GetNewMarketProposalsResponse>(nullptr);
  }

  GetNewMarketProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewMarketProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewMarketProposalsResponse& from);
  void MergeFrom(const GetNewMarketProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewMarketProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNewMarketProposalsResponse";
  }
  protected:
  explicit GetNewMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetNewMarketProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetUpdateMarketProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetUpdateMarketProposalsRequest) */ {
 public:
  inline GetUpdateMarketProposalsRequest() : GetUpdateMarketProposalsRequest(nullptr) {}
  virtual ~GetUpdateMarketProposalsRequest();

  GetUpdateMarketProposalsRequest(const GetUpdateMarketProposalsRequest& from);
  GetUpdateMarketProposalsRequest(GetUpdateMarketProposalsRequest&& from) noexcept
    : GetUpdateMarketProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetUpdateMarketProposalsRequest& operator=(const GetUpdateMarketProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdateMarketProposalsRequest& operator=(GetUpdateMarketProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUpdateMarketProposalsRequest& default_instance();

  static inline const GetUpdateMarketProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetUpdateMarketProposalsRequest*>(
               &_GetUpdateMarketProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetUpdateMarketProposalsRequest& a, GetUpdateMarketProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUpdateMarketProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUpdateMarketProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUpdateMarketProposalsRequest* New() const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsRequest>(nullptr);
  }

  GetUpdateMarketProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUpdateMarketProposalsRequest& from);
  void MergeFrom(const GetUpdateMarketProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUpdateMarketProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetUpdateMarketProposalsRequest";
  }
  protected:
  explicit GetUpdateMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kSelectInStateFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
  bool has_select_in_state() const;
  private:
  bool _internal_has_select_in_state() const;
  public:
  void clear_select_in_state();
  const ::api::v1::OptionalProposalState& select_in_state() const;
  ::api::v1::OptionalProposalState* release_select_in_state();
  ::api::v1::OptionalProposalState* mutable_select_in_state();
  void set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state);
  private:
  const ::api::v1::OptionalProposalState& _internal_select_in_state() const;
  ::api::v1::OptionalProposalState* _internal_mutable_select_in_state();
  public:
  void unsafe_arena_set_allocated_select_in_state(
      ::api::v1::OptionalProposalState* select_in_state);
  ::api::v1::OptionalProposalState* unsafe_arena_release_select_in_state();

  // @@protoc_insertion_point(class_scope:api.v1.GetUpdateMarketProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::api::v1::OptionalProposalState* select_in_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetUpdateMarketProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetUpdateMarketProposalsResponse) */ {
 public:
  inline GetUpdateMarketProposalsResponse() : GetUpdateMarketProposalsResponse(nullptr) {}
  virtual ~GetUpdateMarketProposalsResponse();

  GetUpdateMarketProposalsResponse(const GetUpdateMarketProposalsResponse& from);
  GetUpdateMarketProposalsResponse(GetUpdateMarketProposalsResponse&& from) noexcept
    : GetUpdateMarketProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetUpdateMarketProposalsResponse& operator=(const GetUpdateMarketProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdateMarketProposalsResponse& operator=(GetUpdateMarketProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUpdateMarketProposalsResponse& default_instance();

  static inline const GetUpdateMarketProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetUpdateMarketProposalsResponse*>(
               &_GetUpdateMarketProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetUpdateMarketProposalsResponse& a, GetUpdateMarketProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUpdateMarketProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUpdateMarketProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUpdateMarketProposalsResponse* New() const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsResponse>(nullptr);
  }

  GetUpdateMarketProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUpdateMarketProposalsResponse& from);
  void MergeFrom(const GetUpdateMarketProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUpdateMarketProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetUpdateMarketProposalsResponse";
  }
  protected:
  explicit GetUpdateMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetUpdateMarketProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkParametersProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNetworkParametersProposalsRequest) */ {
 public:
  inline GetNetworkParametersProposalsRequest() : GetNetworkParametersProposalsRequest(nullptr) {}
  virtual ~GetNetworkParametersProposalsRequest();

  GetNetworkParametersProposalsRequest(const GetNetworkParametersProposalsRequest& from);
  GetNetworkParametersProposalsRequest(GetNetworkParametersProposalsRequest&& from) noexcept
    : GetNetworkParametersProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetNetworkParametersProposalsRequest& operator=(const GetNetworkParametersProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkParametersProposalsRequest& operator=(GetNetworkParametersProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkParametersProposalsRequest& default_instance();

  static inline const GetNetworkParametersProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNetworkParametersProposalsRequest*>(
               &_GetNetworkParametersProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetNetworkParametersProposalsRequest& a, GetNetworkParametersProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkParametersProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkParametersProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkParametersProposalsRequest* New() const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsRequest>(nullptr);
  }

  GetNetworkParametersProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkParametersProposalsRequest& from);
  void MergeFrom(const GetNetworkParametersProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkParametersProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNetworkParametersProposalsRequest";
  }
  protected:
  explicit GetNetworkParametersProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  bool has_select_in_state() const;
  private:
  bool _internal_has_select_in_state() const;
  public:
  void clear_select_in_state();
  const ::api::v1::OptionalProposalState& select_in_state() const;
  ::api::v1::OptionalProposalState* release_select_in_state();
  ::api::v1::OptionalProposalState* mutable_select_in_state();
  void set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state);
  private:
  const ::api::v1::OptionalProposalState& _internal_select_in_state() const;
  ::api::v1::OptionalProposalState* _internal_mutable_select_in_state();
  public:
  void unsafe_arena_set_allocated_select_in_state(
      ::api::v1::OptionalProposalState* select_in_state);
  ::api::v1::OptionalProposalState* unsafe_arena_release_select_in_state();

  // @@protoc_insertion_point(class_scope:api.v1.GetNetworkParametersProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::v1::OptionalProposalState* select_in_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkParametersProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNetworkParametersProposalsResponse) */ {
 public:
  inline GetNetworkParametersProposalsResponse() : GetNetworkParametersProposalsResponse(nullptr) {}
  virtual ~GetNetworkParametersProposalsResponse();

  GetNetworkParametersProposalsResponse(const GetNetworkParametersProposalsResponse& from);
  GetNetworkParametersProposalsResponse(GetNetworkParametersProposalsResponse&& from) noexcept
    : GetNetworkParametersProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetNetworkParametersProposalsResponse& operator=(const GetNetworkParametersProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkParametersProposalsResponse& operator=(GetNetworkParametersProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkParametersProposalsResponse& default_instance();

  static inline const GetNetworkParametersProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNetworkParametersProposalsResponse*>(
               &_GetNetworkParametersProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetNetworkParametersProposalsResponse& a, GetNetworkParametersProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkParametersProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkParametersProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkParametersProposalsResponse* New() const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsResponse>(nullptr);
  }

  GetNetworkParametersProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkParametersProposalsResponse& from);
  void MergeFrom(const GetNetworkParametersProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkParametersProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNetworkParametersProposalsResponse";
  }
  protected:
  explicit GetNetworkParametersProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetNetworkParametersProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewAssetProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNewAssetProposalsRequest) */ {
 public:
  inline GetNewAssetProposalsRequest() : GetNewAssetProposalsRequest(nullptr) {}
  virtual ~GetNewAssetProposalsRequest();

  GetNewAssetProposalsRequest(const GetNewAssetProposalsRequest& from);
  GetNewAssetProposalsRequest(GetNewAssetProposalsRequest&& from) noexcept
    : GetNewAssetProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetNewAssetProposalsRequest& operator=(const GetNewAssetProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewAssetProposalsRequest& operator=(GetNewAssetProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewAssetProposalsRequest& default_instance();

  static inline const GetNewAssetProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewAssetProposalsRequest*>(
               &_GetNewAssetProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetNewAssetProposalsRequest& a, GetNewAssetProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewAssetProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewAssetProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewAssetProposalsRequest* New() const final {
    return CreateMaybeMessage<GetNewAssetProposalsRequest>(nullptr);
  }

  GetNewAssetProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewAssetProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewAssetProposalsRequest& from);
  void MergeFrom(const GetNewAssetProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewAssetProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNewAssetProposalsRequest";
  }
  protected:
  explicit GetNewAssetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  bool has_select_in_state() const;
  private:
  bool _internal_has_select_in_state() const;
  public:
  void clear_select_in_state();
  const ::api::v1::OptionalProposalState& select_in_state() const;
  ::api::v1::OptionalProposalState* release_select_in_state();
  ::api::v1::OptionalProposalState* mutable_select_in_state();
  void set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state);
  private:
  const ::api::v1::OptionalProposalState& _internal_select_in_state() const;
  ::api::v1::OptionalProposalState* _internal_mutable_select_in_state();
  public:
  void unsafe_arena_set_allocated_select_in_state(
      ::api::v1::OptionalProposalState* select_in_state);
  ::api::v1::OptionalProposalState* unsafe_arena_release_select_in_state();

  // @@protoc_insertion_point(class_scope:api.v1.GetNewAssetProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::v1::OptionalProposalState* select_in_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewAssetProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetNewAssetProposalsResponse) */ {
 public:
  inline GetNewAssetProposalsResponse() : GetNewAssetProposalsResponse(nullptr) {}
  virtual ~GetNewAssetProposalsResponse();

  GetNewAssetProposalsResponse(const GetNewAssetProposalsResponse& from);
  GetNewAssetProposalsResponse(GetNewAssetProposalsResponse&& from) noexcept
    : GetNewAssetProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetNewAssetProposalsResponse& operator=(const GetNewAssetProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewAssetProposalsResponse& operator=(GetNewAssetProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewAssetProposalsResponse& default_instance();

  static inline const GetNewAssetProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNewAssetProposalsResponse*>(
               &_GetNewAssetProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetNewAssetProposalsResponse& a, GetNewAssetProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewAssetProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewAssetProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewAssetProposalsResponse* New() const final {
    return CreateMaybeMessage<GetNewAssetProposalsResponse>(nullptr);
  }

  GetNewAssetProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewAssetProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewAssetProposalsResponse& from);
  void MergeFrom(const GetNewAssetProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewAssetProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetNewAssetProposalsResponse";
  }
  protected:
  explicit GetNewAssetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.v1.GetNewAssetProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalByIDRequest) */ {
 public:
  inline GetProposalByIDRequest() : GetProposalByIDRequest(nullptr) {}
  virtual ~GetProposalByIDRequest();

  GetProposalByIDRequest(const GetProposalByIDRequest& from);
  GetProposalByIDRequest(GetProposalByIDRequest&& from) noexcept
    : GetProposalByIDRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalByIDRequest& operator=(const GetProposalByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByIDRequest& operator=(GetProposalByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByIDRequest& default_instance();

  static inline const GetProposalByIDRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalByIDRequest*>(
               &_GetProposalByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetProposalByIDRequest& a, GetProposalByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByIDRequest* New() const final {
    return CreateMaybeMessage<GetProposalByIDRequest>(nullptr);
  }

  GetProposalByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByIDRequest& from);
  void MergeFrom(const GetProposalByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalByIDRequest";
  }
  protected:
  explicit GetProposalByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  void clear_proposal_id();
  const std::string& proposal_id() const;
  void set_proposal_id(const std::string& value);
  void set_proposal_id(std::string&& value);
  void set_proposal_id(const char* value);
  void set_proposal_id(const char* value, size_t size);
  std::string* mutable_proposal_id();
  std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalByIDResponse) */ {
 public:
  inline GetProposalByIDResponse() : GetProposalByIDResponse(nullptr) {}
  virtual ~GetProposalByIDResponse();

  GetProposalByIDResponse(const GetProposalByIDResponse& from);
  GetProposalByIDResponse(GetProposalByIDResponse&& from) noexcept
    : GetProposalByIDResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalByIDResponse& operator=(const GetProposalByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByIDResponse& operator=(GetProposalByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByIDResponse& default_instance();

  static inline const GetProposalByIDResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalByIDResponse*>(
               &_GetProposalByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetProposalByIDResponse& a, GetProposalByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByIDResponse* New() const final {
    return CreateMaybeMessage<GetProposalByIDResponse>(nullptr);
  }

  GetProposalByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByIDResponse& from);
  void MergeFrom(const GetProposalByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalByIDResponse";
  }
  protected:
  explicit GetProposalByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .vega.GovernanceData data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vega::GovernanceData& data() const;
  ::vega::GovernanceData* release_data();
  ::vega::GovernanceData* mutable_data();
  void set_allocated_data(::vega::GovernanceData* data);
  private:
  const ::vega::GovernanceData& _internal_data() const;
  ::vega::GovernanceData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vega::GovernanceData* data);
  ::vega::GovernanceData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::GovernanceData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByReferenceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalByReferenceRequest) */ {
 public:
  inline GetProposalByReferenceRequest() : GetProposalByReferenceRequest(nullptr) {}
  virtual ~GetProposalByReferenceRequest();

  GetProposalByReferenceRequest(const GetProposalByReferenceRequest& from);
  GetProposalByReferenceRequest(GetProposalByReferenceRequest&& from) noexcept
    : GetProposalByReferenceRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalByReferenceRequest& operator=(const GetProposalByReferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByReferenceRequest& operator=(GetProposalByReferenceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByReferenceRequest& default_instance();

  static inline const GetProposalByReferenceRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalByReferenceRequest*>(
               &_GetProposalByReferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetProposalByReferenceRequest& a, GetProposalByReferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByReferenceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByReferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByReferenceRequest* New() const final {
    return CreateMaybeMessage<GetProposalByReferenceRequest>(nullptr);
  }

  GetProposalByReferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByReferenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByReferenceRequest& from);
  void MergeFrom(const GetProposalByReferenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByReferenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalByReferenceRequest";
  }
  protected:
  explicit GetProposalByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
  };
  // string reference = 1 [json_name = "reference", (.validator.field) = {
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalByReferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByReferenceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetProposalByReferenceResponse) */ {
 public:
  inline GetProposalByReferenceResponse() : GetProposalByReferenceResponse(nullptr) {}
  virtual ~GetProposalByReferenceResponse();

  GetProposalByReferenceResponse(const GetProposalByReferenceResponse& from);
  GetProposalByReferenceResponse(GetProposalByReferenceResponse&& from) noexcept
    : GetProposalByReferenceResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalByReferenceResponse& operator=(const GetProposalByReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByReferenceResponse& operator=(GetProposalByReferenceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByReferenceResponse& default_instance();

  static inline const GetProposalByReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalByReferenceResponse*>(
               &_GetProposalByReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetProposalByReferenceResponse& a, GetProposalByReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByReferenceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByReferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByReferenceResponse* New() const final {
    return CreateMaybeMessage<GetProposalByReferenceResponse>(nullptr);
  }

  GetProposalByReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByReferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByReferenceResponse& from);
  void MergeFrom(const GetProposalByReferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByReferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetProposalByReferenceResponse";
  }
  protected:
  explicit GetProposalByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .vega.GovernanceData data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vega::GovernanceData& data() const;
  ::vega::GovernanceData* release_data();
  ::vega::GovernanceData* mutable_data();
  void set_allocated_data(::vega::GovernanceData* data);
  private:
  const ::vega::GovernanceData& _internal_data() const;
  ::vega::GovernanceData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vega::GovernanceData* data);
  ::vega::GovernanceData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:api.v1.GetProposalByReferenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::GovernanceData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveGovernanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveGovernanceRequest) */ {
 public:
  inline ObserveGovernanceRequest() : ObserveGovernanceRequest(nullptr) {}
  virtual ~ObserveGovernanceRequest();

  ObserveGovernanceRequest(const ObserveGovernanceRequest& from);
  ObserveGovernanceRequest(ObserveGovernanceRequest&& from) noexcept
    : ObserveGovernanceRequest() {
    *this = ::std::move(from);
  }

  inline ObserveGovernanceRequest& operator=(const ObserveGovernanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveGovernanceRequest& operator=(ObserveGovernanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveGovernanceRequest& default_instance();

  static inline const ObserveGovernanceRequest* internal_default_instance() {
    return reinterpret_cast<const ObserveGovernanceRequest*>(
               &_ObserveGovernanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ObserveGovernanceRequest& a, ObserveGovernanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveGovernanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveGovernanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveGovernanceRequest* New() const final {
    return CreateMaybeMessage<ObserveGovernanceRequest>(nullptr);
  }

  ObserveGovernanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveGovernanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveGovernanceRequest& from);
  void MergeFrom(const ObserveGovernanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveGovernanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveGovernanceRequest";
  }
  protected:
  explicit ObserveGovernanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.ObserveGovernanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveGovernanceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveGovernanceResponse) */ {
 public:
  inline ObserveGovernanceResponse() : ObserveGovernanceResponse(nullptr) {}
  virtual ~ObserveGovernanceResponse();

  ObserveGovernanceResponse(const ObserveGovernanceResponse& from);
  ObserveGovernanceResponse(ObserveGovernanceResponse&& from) noexcept
    : ObserveGovernanceResponse() {
    *this = ::std::move(from);
  }

  inline ObserveGovernanceResponse& operator=(const ObserveGovernanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveGovernanceResponse& operator=(ObserveGovernanceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveGovernanceResponse& default_instance();

  static inline const ObserveGovernanceResponse* internal_default_instance() {
    return reinterpret_cast<const ObserveGovernanceResponse*>(
               &_ObserveGovernanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ObserveGovernanceResponse& a, ObserveGovernanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveGovernanceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveGovernanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveGovernanceResponse* New() const final {
    return CreateMaybeMessage<ObserveGovernanceResponse>(nullptr);
  }

  ObserveGovernanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveGovernanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveGovernanceResponse& from);
  void MergeFrom(const ObserveGovernanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveGovernanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveGovernanceResponse";
  }
  protected:
  explicit ObserveGovernanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .vega.GovernanceData data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vega::GovernanceData& data() const;
  ::vega::GovernanceData* release_data();
  ::vega::GovernanceData* mutable_data();
  void set_allocated_data(::vega::GovernanceData* data);
  private:
  const ::vega::GovernanceData& _internal_data() const;
  ::vega::GovernanceData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vega::GovernanceData* data);
  ::vega::GovernanceData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:api.v1.ObserveGovernanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::GovernanceData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObservePartyProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObservePartyProposalsRequest) */ {
 public:
  inline ObservePartyProposalsRequest() : ObservePartyProposalsRequest(nullptr) {}
  virtual ~ObservePartyProposalsRequest();

  ObservePartyProposalsRequest(const ObservePartyProposalsRequest& from);
  ObservePartyProposalsRequest(ObservePartyProposalsRequest&& from) noexcept
    : ObservePartyProposalsRequest() {
    *this = ::std::move(from);
  }

  inline ObservePartyProposalsRequest& operator=(const ObservePartyProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservePartyProposalsRequest& operator=(ObservePartyProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObservePartyProposalsRequest& default_instance();

  static inline const ObservePartyProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const ObservePartyProposalsRequest*>(
               &_ObservePartyProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ObservePartyProposalsRequest& a, ObservePartyProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservePartyProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservePartyProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObservePartyProposalsRequest* New() const final {
    return CreateMaybeMessage<ObservePartyProposalsRequest>(nullptr);
  }

  ObservePartyProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObservePartyProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObservePartyProposalsRequest& from);
  void MergeFrom(const ObservePartyProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservePartyProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObservePartyProposalsRequest";
  }
  protected:
  explicit ObservePartyProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.ObservePartyProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObservePartyProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObservePartyProposalsResponse) */ {
 public:
  inline ObservePartyProposalsResponse() : ObservePartyProposalsResponse(nullptr) {}
  virtual ~ObservePartyProposalsResponse();

  ObservePartyProposalsResponse(const ObservePartyProposalsResponse& from);
  ObservePartyProposalsResponse(ObservePartyProposalsResponse&& from) noexcept
    : ObservePartyProposalsResponse() {
    *this = ::std::move(from);
  }

  inline ObservePartyProposalsResponse& operator=(const ObservePartyProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservePartyProposalsResponse& operator=(ObservePartyProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObservePartyProposalsResponse& default_instance();

  static inline const ObservePartyProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const ObservePartyProposalsResponse*>(
               &_ObservePartyProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ObservePartyProposalsResponse& a, ObservePartyProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservePartyProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservePartyProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObservePartyProposalsResponse* New() const final {
    return CreateMaybeMessage<ObservePartyProposalsResponse>(nullptr);
  }

  ObservePartyProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObservePartyProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObservePartyProposalsResponse& from);
  void MergeFrom(const ObservePartyProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservePartyProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObservePartyProposalsResponse";
  }
  protected:
  explicit ObservePartyProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .vega.GovernanceData data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vega::GovernanceData& data() const;
  ::vega::GovernanceData* release_data();
  ::vega::GovernanceData* mutable_data();
  void set_allocated_data(::vega::GovernanceData* data);
  private:
  const ::vega::GovernanceData& _internal_data() const;
  ::vega::GovernanceData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vega::GovernanceData* data);
  ::vega::GovernanceData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:api.v1.ObservePartyProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::GovernanceData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveProposalVotesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveProposalVotesRequest) */ {
 public:
  inline ObserveProposalVotesRequest() : ObserveProposalVotesRequest(nullptr) {}
  virtual ~ObserveProposalVotesRequest();

  ObserveProposalVotesRequest(const ObserveProposalVotesRequest& from);
  ObserveProposalVotesRequest(ObserveProposalVotesRequest&& from) noexcept
    : ObserveProposalVotesRequest() {
    *this = ::std::move(from);
  }

  inline ObserveProposalVotesRequest& operator=(const ObserveProposalVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveProposalVotesRequest& operator=(ObserveProposalVotesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveProposalVotesRequest& default_instance();

  static inline const ObserveProposalVotesRequest* internal_default_instance() {
    return reinterpret_cast<const ObserveProposalVotesRequest*>(
               &_ObserveProposalVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ObserveProposalVotesRequest& a, ObserveProposalVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveProposalVotesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveProposalVotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveProposalVotesRequest* New() const final {
    return CreateMaybeMessage<ObserveProposalVotesRequest>(nullptr);
  }

  ObserveProposalVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveProposalVotesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveProposalVotesRequest& from);
  void MergeFrom(const ObserveProposalVotesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveProposalVotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveProposalVotesRequest";
  }
  protected:
  explicit ObserveProposalVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  void clear_proposal_id();
  const std::string& proposal_id() const;
  void set_proposal_id(const std::string& value);
  void set_proposal_id(std::string&& value);
  void set_proposal_id(const char* value);
  void set_proposal_id(const char* value, size_t size);
  std::string* mutable_proposal_id();
  std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.ObserveProposalVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveProposalVotesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveProposalVotesResponse) */ {
 public:
  inline ObserveProposalVotesResponse() : ObserveProposalVotesResponse(nullptr) {}
  virtual ~ObserveProposalVotesResponse();

  ObserveProposalVotesResponse(const ObserveProposalVotesResponse& from);
  ObserveProposalVotesResponse(ObserveProposalVotesResponse&& from) noexcept
    : ObserveProposalVotesResponse() {
    *this = ::std::move(from);
  }

  inline ObserveProposalVotesResponse& operator=(const ObserveProposalVotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveProposalVotesResponse& operator=(ObserveProposalVotesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveProposalVotesResponse& default_instance();

  static inline const ObserveProposalVotesResponse* internal_default_instance() {
    return reinterpret_cast<const ObserveProposalVotesResponse*>(
               &_ObserveProposalVotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ObserveProposalVotesResponse& a, ObserveProposalVotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveProposalVotesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveProposalVotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveProposalVotesResponse* New() const final {
    return CreateMaybeMessage<ObserveProposalVotesResponse>(nullptr);
  }

  ObserveProposalVotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveProposalVotesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveProposalVotesResponse& from);
  void MergeFrom(const ObserveProposalVotesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveProposalVotesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveProposalVotesResponse";
  }
  protected:
  explicit ObserveProposalVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteFieldNumber = 1,
  };
  // .vega.Vote vote = 1 [json_name = "vote"];
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::vega::Vote& vote() const;
  ::vega::Vote* release_vote();
  ::vega::Vote* mutable_vote();
  void set_allocated_vote(::vega::Vote* vote);
  private:
  const ::vega::Vote& _internal_vote() const;
  ::vega::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::vega::Vote* vote);
  ::vega::Vote* unsafe_arena_release_vote();

  // @@protoc_insertion_point(class_scope:api.v1.ObserveProposalVotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Vote* vote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObservePartyVotesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObservePartyVotesRequest) */ {
 public:
  inline ObservePartyVotesRequest() : ObservePartyVotesRequest(nullptr) {}
  virtual ~ObservePartyVotesRequest();

  ObservePartyVotesRequest(const ObservePartyVotesRequest& from);
  ObservePartyVotesRequest(ObservePartyVotesRequest&& from) noexcept
    : ObservePartyVotesRequest() {
    *this = ::std::move(from);
  }

  inline ObservePartyVotesRequest& operator=(const ObservePartyVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservePartyVotesRequest& operator=(ObservePartyVotesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObservePartyVotesRequest& default_instance();

  static inline const ObservePartyVotesRequest* internal_default_instance() {
    return reinterpret_cast<const ObservePartyVotesRequest*>(
               &_ObservePartyVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ObservePartyVotesRequest& a, ObservePartyVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservePartyVotesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservePartyVotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObservePartyVotesRequest* New() const final {
    return CreateMaybeMessage<ObservePartyVotesRequest>(nullptr);
  }

  ObservePartyVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObservePartyVotesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObservePartyVotesRequest& from);
  void MergeFrom(const ObservePartyVotesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservePartyVotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObservePartyVotesRequest";
  }
  protected:
  explicit ObservePartyVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.ObservePartyVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObservePartyVotesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObservePartyVotesResponse) */ {
 public:
  inline ObservePartyVotesResponse() : ObservePartyVotesResponse(nullptr) {}
  virtual ~ObservePartyVotesResponse();

  ObservePartyVotesResponse(const ObservePartyVotesResponse& from);
  ObservePartyVotesResponse(ObservePartyVotesResponse&& from) noexcept
    : ObservePartyVotesResponse() {
    *this = ::std::move(from);
  }

  inline ObservePartyVotesResponse& operator=(const ObservePartyVotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservePartyVotesResponse& operator=(ObservePartyVotesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObservePartyVotesResponse& default_instance();

  static inline const ObservePartyVotesResponse* internal_default_instance() {
    return reinterpret_cast<const ObservePartyVotesResponse*>(
               &_ObservePartyVotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ObservePartyVotesResponse& a, ObservePartyVotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservePartyVotesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservePartyVotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObservePartyVotesResponse* New() const final {
    return CreateMaybeMessage<ObservePartyVotesResponse>(nullptr);
  }

  ObservePartyVotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObservePartyVotesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObservePartyVotesResponse& from);
  void MergeFrom(const ObservePartyVotesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservePartyVotesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObservePartyVotesResponse";
  }
  protected:
  explicit ObservePartyVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteFieldNumber = 1,
  };
  // .vega.Vote vote = 1 [json_name = "vote"];
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::vega::Vote& vote() const;
  ::vega::Vote* release_vote();
  ::vega::Vote* mutable_vote();
  void set_allocated_vote(::vega::Vote* vote);
  private:
  const ::vega::Vote& _internal_vote() const;
  ::vega::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::vega::Vote* vote);
  ::vega::Vote* unsafe_arena_release_vote();

  // @@protoc_insertion_point(class_scope:api.v1.ObservePartyVotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Vote* vote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarginLevelsSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarginLevelsSubscribeRequest) */ {
 public:
  inline MarginLevelsSubscribeRequest() : MarginLevelsSubscribeRequest(nullptr) {}
  virtual ~MarginLevelsSubscribeRequest();

  MarginLevelsSubscribeRequest(const MarginLevelsSubscribeRequest& from);
  MarginLevelsSubscribeRequest(MarginLevelsSubscribeRequest&& from) noexcept
    : MarginLevelsSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarginLevelsSubscribeRequest& operator=(const MarginLevelsSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevelsSubscribeRequest& operator=(MarginLevelsSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevelsSubscribeRequest& default_instance();

  static inline const MarginLevelsSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarginLevelsSubscribeRequest*>(
               &_MarginLevelsSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MarginLevelsSubscribeRequest& a, MarginLevelsSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevelsSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevelsSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevelsSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarginLevelsSubscribeRequest>(nullptr);
  }

  MarginLevelsSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevelsSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevelsSubscribeRequest& from);
  void MergeFrom(const MarginLevelsSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevelsSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarginLevelsSubscribeRequest";
  }
  protected:
  explicit MarginLevelsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarginLevelsSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarginLevelsSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarginLevelsSubscribeResponse) */ {
 public:
  inline MarginLevelsSubscribeResponse() : MarginLevelsSubscribeResponse(nullptr) {}
  virtual ~MarginLevelsSubscribeResponse();

  MarginLevelsSubscribeResponse(const MarginLevelsSubscribeResponse& from);
  MarginLevelsSubscribeResponse(MarginLevelsSubscribeResponse&& from) noexcept
    : MarginLevelsSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline MarginLevelsSubscribeResponse& operator=(const MarginLevelsSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevelsSubscribeResponse& operator=(MarginLevelsSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevelsSubscribeResponse& default_instance();

  static inline const MarginLevelsSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const MarginLevelsSubscribeResponse*>(
               &_MarginLevelsSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(MarginLevelsSubscribeResponse& a, MarginLevelsSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevelsSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevelsSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevelsSubscribeResponse* New() const final {
    return CreateMaybeMessage<MarginLevelsSubscribeResponse>(nullptr);
  }

  MarginLevelsSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevelsSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevelsSubscribeResponse& from);
  void MergeFrom(const MarginLevelsSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevelsSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarginLevelsSubscribeResponse";
  }
  protected:
  explicit MarginLevelsSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarginLevelsFieldNumber = 1,
  };
  // .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
  bool has_margin_levels() const;
  private:
  bool _internal_has_margin_levels() const;
  public:
  void clear_margin_levels();
  const ::vega::MarginLevels& margin_levels() const;
  ::vega::MarginLevels* release_margin_levels();
  ::vega::MarginLevels* mutable_margin_levels();
  void set_allocated_margin_levels(::vega::MarginLevels* margin_levels);
  private:
  const ::vega::MarginLevels& _internal_margin_levels() const;
  ::vega::MarginLevels* _internal_mutable_margin_levels();
  public:
  void unsafe_arena_set_allocated_margin_levels(
      ::vega::MarginLevels* margin_levels);
  ::vega::MarginLevels* unsafe_arena_release_margin_levels();

  // @@protoc_insertion_point(class_scope:api.v1.MarginLevelsSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarginLevels* margin_levels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarginLevelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarginLevelsRequest) */ {
 public:
  inline MarginLevelsRequest() : MarginLevelsRequest(nullptr) {}
  virtual ~MarginLevelsRequest();

  MarginLevelsRequest(const MarginLevelsRequest& from);
  MarginLevelsRequest(MarginLevelsRequest&& from) noexcept
    : MarginLevelsRequest() {
    *this = ::std::move(from);
  }

  inline MarginLevelsRequest& operator=(const MarginLevelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevelsRequest& operator=(MarginLevelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevelsRequest& default_instance();

  static inline const MarginLevelsRequest* internal_default_instance() {
    return reinterpret_cast<const MarginLevelsRequest*>(
               &_MarginLevelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(MarginLevelsRequest& a, MarginLevelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevelsRequest* New() const final {
    return CreateMaybeMessage<MarginLevelsRequest>(nullptr);
  }

  MarginLevelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevelsRequest& from);
  void MergeFrom(const MarginLevelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarginLevelsRequest";
  }
  protected:
  explicit MarginLevelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarginLevelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarginLevelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarginLevelsResponse) */ {
 public:
  inline MarginLevelsResponse() : MarginLevelsResponse(nullptr) {}
  virtual ~MarginLevelsResponse();

  MarginLevelsResponse(const MarginLevelsResponse& from);
  MarginLevelsResponse(MarginLevelsResponse&& from) noexcept
    : MarginLevelsResponse() {
    *this = ::std::move(from);
  }

  inline MarginLevelsResponse& operator=(const MarginLevelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevelsResponse& operator=(MarginLevelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevelsResponse& default_instance();

  static inline const MarginLevelsResponse* internal_default_instance() {
    return reinterpret_cast<const MarginLevelsResponse*>(
               &_MarginLevelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(MarginLevelsResponse& a, MarginLevelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevelsResponse* New() const final {
    return CreateMaybeMessage<MarginLevelsResponse>(nullptr);
  }

  MarginLevelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevelsResponse& from);
  void MergeFrom(const MarginLevelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarginLevelsResponse";
  }
  protected:
  explicit MarginLevelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarginLevelsFieldNumber = 1,
  };
  // repeated .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
  int margin_levels_size() const;
  private:
  int _internal_margin_levels_size() const;
  public:
  void clear_margin_levels();
  ::vega::MarginLevels* mutable_margin_levels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >*
      mutable_margin_levels();
  private:
  const ::vega::MarginLevels& _internal_margin_levels(int index) const;
  ::vega::MarginLevels* _internal_add_margin_levels();
  public:
  const ::vega::MarginLevels& margin_levels(int index) const;
  ::vega::MarginLevels* add_margin_levels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >&
      margin_levels() const;

  // @@protoc_insertion_point(class_scope:api.v1.MarginLevelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels > margin_levels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsDataSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketsDataSubscribeRequest) */ {
 public:
  inline MarketsDataSubscribeRequest() : MarketsDataSubscribeRequest(nullptr) {}
  virtual ~MarketsDataSubscribeRequest();

  MarketsDataSubscribeRequest(const MarketsDataSubscribeRequest& from);
  MarketsDataSubscribeRequest(MarketsDataSubscribeRequest&& from) noexcept
    : MarketsDataSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarketsDataSubscribeRequest& operator=(const MarketsDataSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsDataSubscribeRequest& operator=(MarketsDataSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsDataSubscribeRequest& default_instance();

  static inline const MarketsDataSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarketsDataSubscribeRequest*>(
               &_MarketsDataSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(MarketsDataSubscribeRequest& a, MarketsDataSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsDataSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsDataSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsDataSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarketsDataSubscribeRequest>(nullptr);
  }

  MarketsDataSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsDataSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsDataSubscribeRequest& from);
  void MergeFrom(const MarketsDataSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsDataSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketsDataSubscribeRequest";
  }
  protected:
  explicit MarketsDataSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketsDataSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsDataSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketsDataSubscribeResponse) */ {
 public:
  inline MarketsDataSubscribeResponse() : MarketsDataSubscribeResponse(nullptr) {}
  virtual ~MarketsDataSubscribeResponse();

  MarketsDataSubscribeResponse(const MarketsDataSubscribeResponse& from);
  MarketsDataSubscribeResponse(MarketsDataSubscribeResponse&& from) noexcept
    : MarketsDataSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline MarketsDataSubscribeResponse& operator=(const MarketsDataSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsDataSubscribeResponse& operator=(MarketsDataSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsDataSubscribeResponse& default_instance();

  static inline const MarketsDataSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const MarketsDataSubscribeResponse*>(
               &_MarketsDataSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(MarketsDataSubscribeResponse& a, MarketsDataSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsDataSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsDataSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsDataSubscribeResponse* New() const final {
    return CreateMaybeMessage<MarketsDataSubscribeResponse>(nullptr);
  }

  MarketsDataSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsDataSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsDataSubscribeResponse& from);
  void MergeFrom(const MarketsDataSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsDataSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketsDataSubscribeResponse";
  }
  protected:
  explicit MarketsDataSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataFieldNumber = 1,
  };
  // .vega.MarketData market_data = 1 [json_name = "marketData"];
  bool has_market_data() const;
  private:
  bool _internal_has_market_data() const;
  public:
  void clear_market_data();
  const ::vega::MarketData& market_data() const;
  ::vega::MarketData* release_market_data();
  ::vega::MarketData* mutable_market_data();
  void set_allocated_market_data(::vega::MarketData* market_data);
  private:
  const ::vega::MarketData& _internal_market_data() const;
  ::vega::MarketData* _internal_mutable_market_data();
  public:
  void unsafe_arena_set_allocated_market_data(
      ::vega::MarketData* market_data);
  ::vega::MarketData* unsafe_arena_release_market_data();

  // @@protoc_insertion_point(class_scope:api.v1.MarketsDataSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarketData* market_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDataByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDataByIDRequest) */ {
 public:
  inline MarketDataByIDRequest() : MarketDataByIDRequest(nullptr) {}
  virtual ~MarketDataByIDRequest();

  MarketDataByIDRequest(const MarketDataByIDRequest& from);
  MarketDataByIDRequest(MarketDataByIDRequest&& from) noexcept
    : MarketDataByIDRequest() {
    *this = ::std::move(from);
  }

  inline MarketDataByIDRequest& operator=(const MarketDataByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataByIDRequest& operator=(MarketDataByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataByIDRequest& default_instance();

  static inline const MarketDataByIDRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDataByIDRequest*>(
               &_MarketDataByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(MarketDataByIDRequest& a, MarketDataByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDataByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDataByIDRequest* New() const final {
    return CreateMaybeMessage<MarketDataByIDRequest>(nullptr);
  }

  MarketDataByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataByIDRequest& from);
  void MergeFrom(const MarketDataByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDataByIDRequest";
  }
  protected:
  explicit MarketDataByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketDataByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDataByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDataByIDResponse) */ {
 public:
  inline MarketDataByIDResponse() : MarketDataByIDResponse(nullptr) {}
  virtual ~MarketDataByIDResponse();

  MarketDataByIDResponse(const MarketDataByIDResponse& from);
  MarketDataByIDResponse(MarketDataByIDResponse&& from) noexcept
    : MarketDataByIDResponse() {
    *this = ::std::move(from);
  }

  inline MarketDataByIDResponse& operator=(const MarketDataByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataByIDResponse& operator=(MarketDataByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataByIDResponse& default_instance();

  static inline const MarketDataByIDResponse* internal_default_instance() {
    return reinterpret_cast<const MarketDataByIDResponse*>(
               &_MarketDataByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(MarketDataByIDResponse& a, MarketDataByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDataByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDataByIDResponse* New() const final {
    return CreateMaybeMessage<MarketDataByIDResponse>(nullptr);
  }

  MarketDataByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataByIDResponse& from);
  void MergeFrom(const MarketDataByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDataByIDResponse";
  }
  protected:
  explicit MarketDataByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataFieldNumber = 1,
  };
  // .vega.MarketData market_data = 1 [json_name = "marketData"];
  bool has_market_data() const;
  private:
  bool _internal_has_market_data() const;
  public:
  void clear_market_data();
  const ::vega::MarketData& market_data() const;
  ::vega::MarketData* release_market_data();
  ::vega::MarketData* mutable_market_data();
  void set_allocated_market_data(::vega::MarketData* market_data);
  private:
  const ::vega::MarketData& _internal_market_data() const;
  ::vega::MarketData* _internal_mutable_market_data();
  public:
  void unsafe_arena_set_allocated_market_data(
      ::vega::MarketData* market_data);
  ::vega::MarketData* unsafe_arena_release_market_data();

  // @@protoc_insertion_point(class_scope:api.v1.MarketDataByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarketData* market_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketsDataRequest) */ {
 public:
  inline MarketsDataRequest() : MarketsDataRequest(nullptr) {}
  virtual ~MarketsDataRequest();

  MarketsDataRequest(const MarketsDataRequest& from);
  MarketsDataRequest(MarketsDataRequest&& from) noexcept
    : MarketsDataRequest() {
    *this = ::std::move(from);
  }

  inline MarketsDataRequest& operator=(const MarketsDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsDataRequest& operator=(MarketsDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsDataRequest& default_instance();

  static inline const MarketsDataRequest* internal_default_instance() {
    return reinterpret_cast<const MarketsDataRequest*>(
               &_MarketsDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(MarketsDataRequest& a, MarketsDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsDataRequest* New() const final {
    return CreateMaybeMessage<MarketsDataRequest>(nullptr);
  }

  MarketsDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsDataRequest& from);
  void MergeFrom(const MarketsDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketsDataRequest";
  }
  protected:
  explicit MarketsDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.MarketsDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketsDataResponse) */ {
 public:
  inline MarketsDataResponse() : MarketsDataResponse(nullptr) {}
  virtual ~MarketsDataResponse();

  MarketsDataResponse(const MarketsDataResponse& from);
  MarketsDataResponse(MarketsDataResponse&& from) noexcept
    : MarketsDataResponse() {
    *this = ::std::move(from);
  }

  inline MarketsDataResponse& operator=(const MarketsDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsDataResponse& operator=(MarketsDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsDataResponse& default_instance();

  static inline const MarketsDataResponse* internal_default_instance() {
    return reinterpret_cast<const MarketsDataResponse*>(
               &_MarketsDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(MarketsDataResponse& a, MarketsDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsDataResponse* New() const final {
    return CreateMaybeMessage<MarketsDataResponse>(nullptr);
  }

  MarketsDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsDataResponse& from);
  void MergeFrom(const MarketsDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketsDataResponse";
  }
  protected:
  explicit MarketsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketsDataFieldNumber = 1,
  };
  // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
  int markets_data_size() const;
  private:
  int _internal_markets_data_size() const;
  public:
  void clear_markets_data();
  ::vega::MarketData* mutable_markets_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >*
      mutable_markets_data();
  private:
  const ::vega::MarketData& _internal_markets_data(int index) const;
  ::vega::MarketData* _internal_add_markets_data();
  public:
  const ::vega::MarketData& markets_data(int index) const;
  ::vega::MarketData* add_markets_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >&
      markets_data() const;

  // @@protoc_insertion_point(class_scope:api.v1.MarketsDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData > markets_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastTradeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LastTradeRequest) */ {
 public:
  inline LastTradeRequest() : LastTradeRequest(nullptr) {}
  virtual ~LastTradeRequest();

  LastTradeRequest(const LastTradeRequest& from);
  LastTradeRequest(LastTradeRequest&& from) noexcept
    : LastTradeRequest() {
    *this = ::std::move(from);
  }

  inline LastTradeRequest& operator=(const LastTradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastTradeRequest& operator=(LastTradeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastTradeRequest& default_instance();

  static inline const LastTradeRequest* internal_default_instance() {
    return reinterpret_cast<const LastTradeRequest*>(
               &_LastTradeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(LastTradeRequest& a, LastTradeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LastTradeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastTradeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastTradeRequest* New() const final {
    return CreateMaybeMessage<LastTradeRequest>(nullptr);
  }

  LastTradeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastTradeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastTradeRequest& from);
  void MergeFrom(const LastTradeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastTradeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LastTradeRequest";
  }
  protected:
  explicit LastTradeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.LastTradeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastTradeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LastTradeResponse) */ {
 public:
  inline LastTradeResponse() : LastTradeResponse(nullptr) {}
  virtual ~LastTradeResponse();

  LastTradeResponse(const LastTradeResponse& from);
  LastTradeResponse(LastTradeResponse&& from) noexcept
    : LastTradeResponse() {
    *this = ::std::move(from);
  }

  inline LastTradeResponse& operator=(const LastTradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastTradeResponse& operator=(LastTradeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastTradeResponse& default_instance();

  static inline const LastTradeResponse* internal_default_instance() {
    return reinterpret_cast<const LastTradeResponse*>(
               &_LastTradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(LastTradeResponse& a, LastTradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LastTradeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastTradeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastTradeResponse* New() const final {
    return CreateMaybeMessage<LastTradeResponse>(nullptr);
  }

  LastTradeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastTradeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastTradeResponse& from);
  void MergeFrom(const LastTradeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastTradeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LastTradeResponse";
  }
  protected:
  explicit LastTradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeFieldNumber = 1,
  };
  // .vega.Trade trade = 1 [json_name = "trade"];
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;
  public:
  void clear_trade();
  const ::vega::Trade& trade() const;
  ::vega::Trade* release_trade();
  ::vega::Trade* mutable_trade();
  void set_allocated_trade(::vega::Trade* trade);
  private:
  const ::vega::Trade& _internal_trade() const;
  ::vega::Trade* _internal_mutable_trade();
  public:
  void unsafe_arena_set_allocated_trade(
      ::vega::Trade* trade);
  ::vega::Trade* unsafe_arena_release_trade();

  // @@protoc_insertion_point(class_scope:api.v1.LastTradeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Trade* trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketByIDRequest) */ {
 public:
  inline MarketByIDRequest() : MarketByIDRequest(nullptr) {}
  virtual ~MarketByIDRequest();

  MarketByIDRequest(const MarketByIDRequest& from);
  MarketByIDRequest(MarketByIDRequest&& from) noexcept
    : MarketByIDRequest() {
    *this = ::std::move(from);
  }

  inline MarketByIDRequest& operator=(const MarketByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByIDRequest& operator=(MarketByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByIDRequest& default_instance();

  static inline const MarketByIDRequest* internal_default_instance() {
    return reinterpret_cast<const MarketByIDRequest*>(
               &_MarketByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(MarketByIDRequest& a, MarketByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByIDRequest* New() const final {
    return CreateMaybeMessage<MarketByIDRequest>(nullptr);
  }

  MarketByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByIDRequest& from);
  void MergeFrom(const MarketByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketByIDRequest";
  }
  protected:
  explicit MarketByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketByIDResponse) */ {
 public:
  inline MarketByIDResponse() : MarketByIDResponse(nullptr) {}
  virtual ~MarketByIDResponse();

  MarketByIDResponse(const MarketByIDResponse& from);
  MarketByIDResponse(MarketByIDResponse&& from) noexcept
    : MarketByIDResponse() {
    *this = ::std::move(from);
  }

  inline MarketByIDResponse& operator=(const MarketByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByIDResponse& operator=(MarketByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByIDResponse& default_instance();

  static inline const MarketByIDResponse* internal_default_instance() {
    return reinterpret_cast<const MarketByIDResponse*>(
               &_MarketByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(MarketByIDResponse& a, MarketByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByIDResponse* New() const final {
    return CreateMaybeMessage<MarketByIDResponse>(nullptr);
  }

  MarketByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByIDResponse& from);
  void MergeFrom(const MarketByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketByIDResponse";
  }
  protected:
  explicit MarketByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
  };
  // .vega.Market market = 1 [json_name = "market"];
  bool has_market() const;
  private:
  bool _internal_has_market() const;
  public:
  void clear_market();
  const ::vega::Market& market() const;
  ::vega::Market* release_market();
  ::vega::Market* mutable_market();
  void set_allocated_market(::vega::Market* market);
  private:
  const ::vega::Market& _internal_market() const;
  ::vega::Market* _internal_mutable_market();
  public:
  void unsafe_arena_set_allocated_market(
      ::vega::Market* market);
  ::vega::Market* unsafe_arena_release_market();

  // @@protoc_insertion_point(class_scope:api.v1.MarketByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Market* market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PartyByIDRequest) */ {
 public:
  inline PartyByIDRequest() : PartyByIDRequest(nullptr) {}
  virtual ~PartyByIDRequest();

  PartyByIDRequest(const PartyByIDRequest& from);
  PartyByIDRequest(PartyByIDRequest&& from) noexcept
    : PartyByIDRequest() {
    *this = ::std::move(from);
  }

  inline PartyByIDRequest& operator=(const PartyByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyByIDRequest& operator=(PartyByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyByIDRequest& default_instance();

  static inline const PartyByIDRequest* internal_default_instance() {
    return reinterpret_cast<const PartyByIDRequest*>(
               &_PartyByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(PartyByIDRequest& a, PartyByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyByIDRequest* New() const final {
    return CreateMaybeMessage<PartyByIDRequest>(nullptr);
  }

  PartyByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyByIDRequest& from);
  void MergeFrom(const PartyByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PartyByIDRequest";
  }
  protected:
  explicit PartyByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PartyByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PartyByIDResponse) */ {
 public:
  inline PartyByIDResponse() : PartyByIDResponse(nullptr) {}
  virtual ~PartyByIDResponse();

  PartyByIDResponse(const PartyByIDResponse& from);
  PartyByIDResponse(PartyByIDResponse&& from) noexcept
    : PartyByIDResponse() {
    *this = ::std::move(from);
  }

  inline PartyByIDResponse& operator=(const PartyByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyByIDResponse& operator=(PartyByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyByIDResponse& default_instance();

  static inline const PartyByIDResponse* internal_default_instance() {
    return reinterpret_cast<const PartyByIDResponse*>(
               &_PartyByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(PartyByIDResponse& a, PartyByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyByIDResponse* New() const final {
    return CreateMaybeMessage<PartyByIDResponse>(nullptr);
  }

  PartyByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyByIDResponse& from);
  void MergeFrom(const PartyByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PartyByIDResponse";
  }
  protected:
  explicit PartyByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
  };
  // .vega.Party party = 1 [json_name = "party"];
  bool has_party() const;
  private:
  bool _internal_has_party() const;
  public:
  void clear_party();
  const ::vega::Party& party() const;
  ::vega::Party* release_party();
  ::vega::Party* mutable_party();
  void set_allocated_party(::vega::Party* party);
  private:
  const ::vega::Party& _internal_party() const;
  ::vega::Party* _internal_mutable_party();
  public:
  void unsafe_arena_set_allocated_party(
      ::vega::Party* party);
  ::vega::Party* unsafe_arena_release_party();

  // @@protoc_insertion_point(class_scope:api.v1.PartyByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Party* party_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PartiesRequest) */ {
 public:
  inline PartiesRequest() : PartiesRequest(nullptr) {}
  virtual ~PartiesRequest();

  PartiesRequest(const PartiesRequest& from);
  PartiesRequest(PartiesRequest&& from) noexcept
    : PartiesRequest() {
    *this = ::std::move(from);
  }

  inline PartiesRequest& operator=(const PartiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartiesRequest& operator=(PartiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartiesRequest& default_instance();

  static inline const PartiesRequest* internal_default_instance() {
    return reinterpret_cast<const PartiesRequest*>(
               &_PartiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(PartiesRequest& a, PartiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartiesRequest* New() const final {
    return CreateMaybeMessage<PartiesRequest>(nullptr);
  }

  PartiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartiesRequest& from);
  void MergeFrom(const PartiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PartiesRequest";
  }
  protected:
  explicit PartiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.PartiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PartiesResponse) */ {
 public:
  inline PartiesResponse() : PartiesResponse(nullptr) {}
  virtual ~PartiesResponse();

  PartiesResponse(const PartiesResponse& from);
  PartiesResponse(PartiesResponse&& from) noexcept
    : PartiesResponse() {
    *this = ::std::move(from);
  }

  inline PartiesResponse& operator=(const PartiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartiesResponse& operator=(PartiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartiesResponse& default_instance();

  static inline const PartiesResponse* internal_default_instance() {
    return reinterpret_cast<const PartiesResponse*>(
               &_PartiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(PartiesResponse& a, PartiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PartiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartiesResponse* New() const final {
    return CreateMaybeMessage<PartiesResponse>(nullptr);
  }

  PartiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartiesResponse& from);
  void MergeFrom(const PartiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PartiesResponse";
  }
  protected:
  explicit PartiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartiesFieldNumber = 1,
  };
  // repeated .vega.Party parties = 1 [json_name = "parties"];
  int parties_size() const;
  private:
  int _internal_parties_size() const;
  public:
  void clear_parties();
  ::vega::Party* mutable_parties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >*
      mutable_parties();
  private:
  const ::vega::Party& _internal_parties(int index) const;
  ::vega::Party* _internal_add_parties();
  public:
  const ::vega::Party& parties(int index) const;
  ::vega::Party* add_parties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >&
      parties() const;

  // @@protoc_insertion_point(class_scope:api.v1.PartiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party > parties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesByPartyRequest) */ {
 public:
  inline TradesByPartyRequest() : TradesByPartyRequest(nullptr) {}
  virtual ~TradesByPartyRequest();

  TradesByPartyRequest(const TradesByPartyRequest& from);
  TradesByPartyRequest(TradesByPartyRequest&& from) noexcept
    : TradesByPartyRequest() {
    *this = ::std::move(from);
  }

  inline TradesByPartyRequest& operator=(const TradesByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByPartyRequest& operator=(TradesByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByPartyRequest& default_instance();

  static inline const TradesByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const TradesByPartyRequest*>(
               &_TradesByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(TradesByPartyRequest& a, TradesByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByPartyRequest* New() const final {
    return CreateMaybeMessage<TradesByPartyRequest>(nullptr);
  }

  TradesByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByPartyRequest& from);
  void MergeFrom(const TradesByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesByPartyRequest";
  }
  protected:
  explicit TradesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // string party_id = 1 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // .api.v1.Pagination pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::v1::Pagination& pagination() const;
  ::api::v1::Pagination* release_pagination();
  ::api::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::v1::Pagination* pagination);
  private:
  const ::api::v1::Pagination& _internal_pagination() const;
  ::api::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::v1::Pagination* pagination);
  ::api::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.v1.TradesByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::api::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesByPartyResponse) */ {
 public:
  inline TradesByPartyResponse() : TradesByPartyResponse(nullptr) {}
  virtual ~TradesByPartyResponse();

  TradesByPartyResponse(const TradesByPartyResponse& from);
  TradesByPartyResponse(TradesByPartyResponse&& from) noexcept
    : TradesByPartyResponse() {
    *this = ::std::move(from);
  }

  inline TradesByPartyResponse& operator=(const TradesByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByPartyResponse& operator=(TradesByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByPartyResponse& default_instance();

  static inline const TradesByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const TradesByPartyResponse*>(
               &_TradesByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(TradesByPartyResponse& a, TradesByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByPartyResponse* New() const final {
    return CreateMaybeMessage<TradesByPartyResponse>(nullptr);
  }

  TradesByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByPartyResponse& from);
  void MergeFrom(const TradesByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesByPartyResponse";
  }
  protected:
  explicit TradesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.v1.TradesByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesByOrderRequest) */ {
 public:
  inline TradesByOrderRequest() : TradesByOrderRequest(nullptr) {}
  virtual ~TradesByOrderRequest();

  TradesByOrderRequest(const TradesByOrderRequest& from);
  TradesByOrderRequest(TradesByOrderRequest&& from) noexcept
    : TradesByOrderRequest() {
    *this = ::std::move(from);
  }

  inline TradesByOrderRequest& operator=(const TradesByOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByOrderRequest& operator=(TradesByOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByOrderRequest& default_instance();

  static inline const TradesByOrderRequest* internal_default_instance() {
    return reinterpret_cast<const TradesByOrderRequest*>(
               &_TradesByOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(TradesByOrderRequest& a, TradesByOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByOrderRequest* New() const final {
    return CreateMaybeMessage<TradesByOrderRequest>(nullptr);
  }

  TradesByOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByOrderRequest& from);
  void MergeFrom(const TradesByOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesByOrderRequest";
  }
  protected:
  explicit TradesByOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string order_id = 1 [json_name = "orderId"];
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.TradesByOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesByOrderResponse) */ {
 public:
  inline TradesByOrderResponse() : TradesByOrderResponse(nullptr) {}
  virtual ~TradesByOrderResponse();

  TradesByOrderResponse(const TradesByOrderResponse& from);
  TradesByOrderResponse(TradesByOrderResponse&& from) noexcept
    : TradesByOrderResponse() {
    *this = ::std::move(from);
  }

  inline TradesByOrderResponse& operator=(const TradesByOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByOrderResponse& operator=(TradesByOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByOrderResponse& default_instance();

  static inline const TradesByOrderResponse* internal_default_instance() {
    return reinterpret_cast<const TradesByOrderResponse*>(
               &_TradesByOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(TradesByOrderResponse& a, TradesByOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByOrderResponse* New() const final {
    return CreateMaybeMessage<TradesByOrderResponse>(nullptr);
  }

  TradesByOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByOrderResponse& from);
  void MergeFrom(const TradesByOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesByOrderResponse";
  }
  protected:
  explicit TradesByOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.v1.TradesByOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AccountsSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.AccountsSubscribeRequest) */ {
 public:
  inline AccountsSubscribeRequest() : AccountsSubscribeRequest(nullptr) {}
  virtual ~AccountsSubscribeRequest();

  AccountsSubscribeRequest(const AccountsSubscribeRequest& from);
  AccountsSubscribeRequest(AccountsSubscribeRequest&& from) noexcept
    : AccountsSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline AccountsSubscribeRequest& operator=(const AccountsSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountsSubscribeRequest& operator=(AccountsSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountsSubscribeRequest& default_instance();

  static inline const AccountsSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const AccountsSubscribeRequest*>(
               &_AccountsSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(AccountsSubscribeRequest& a, AccountsSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountsSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountsSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountsSubscribeRequest* New() const final {
    return CreateMaybeMessage<AccountsSubscribeRequest>(nullptr);
  }

  AccountsSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountsSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountsSubscribeRequest& from);
  void MergeFrom(const AccountsSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountsSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.AccountsSubscribeRequest";
  }
  protected:
  explicit AccountsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kAssetFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string asset = 3 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // .vega.AccountType type = 4 [json_name = "type"];
  void clear_type();
  ::vega::AccountType type() const;
  void set_type(::vega::AccountType value);
  private:
  ::vega::AccountType _internal_type() const;
  void _internal_set_type(::vega::AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.AccountsSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AccountsSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.AccountsSubscribeResponse) */ {
 public:
  inline AccountsSubscribeResponse() : AccountsSubscribeResponse(nullptr) {}
  virtual ~AccountsSubscribeResponse();

  AccountsSubscribeResponse(const AccountsSubscribeResponse& from);
  AccountsSubscribeResponse(AccountsSubscribeResponse&& from) noexcept
    : AccountsSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline AccountsSubscribeResponse& operator=(const AccountsSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountsSubscribeResponse& operator=(AccountsSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountsSubscribeResponse& default_instance();

  static inline const AccountsSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const AccountsSubscribeResponse*>(
               &_AccountsSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AccountsSubscribeResponse& a, AccountsSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountsSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountsSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountsSubscribeResponse* New() const final {
    return CreateMaybeMessage<AccountsSubscribeResponse>(nullptr);
  }

  AccountsSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountsSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountsSubscribeResponse& from);
  void MergeFrom(const AccountsSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountsSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.AccountsSubscribeResponse";
  }
  protected:
  explicit AccountsSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // .vega.Account account = 1 [json_name = "account"];
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::vega::Account& account() const;
  ::vega::Account* release_account();
  ::vega::Account* mutable_account();
  void set_allocated_account(::vega::Account* account);
  private:
  const ::vega::Account& _internal_account() const;
  ::vega::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::vega::Account* account);
  ::vega::Account* unsafe_arena_release_account();

  // @@protoc_insertion_point(class_scope:api.v1.AccountsSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Account* account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrdersSubscribeRequest) */ {
 public:
  inline OrdersSubscribeRequest() : OrdersSubscribeRequest(nullptr) {}
  virtual ~OrdersSubscribeRequest();

  OrdersSubscribeRequest(const OrdersSubscribeRequest& from);
  OrdersSubscribeRequest(OrdersSubscribeRequest&& from) noexcept
    : OrdersSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline OrdersSubscribeRequest& operator=(const OrdersSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersSubscribeRequest& operator=(OrdersSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersSubscribeRequest& default_instance();

  static inline const OrdersSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const OrdersSubscribeRequest*>(
               &_OrdersSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(OrdersSubscribeRequest& a, OrdersSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersSubscribeRequest* New() const final {
    return CreateMaybeMessage<OrdersSubscribeRequest>(nullptr);
  }

  OrdersSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersSubscribeRequest& from);
  void MergeFrom(const OrdersSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrdersSubscribeRequest";
  }
  protected:
  explicit OrdersSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.OrdersSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesSubscribeRequest) */ {
 public:
  inline TradesSubscribeRequest() : TradesSubscribeRequest(nullptr) {}
  virtual ~TradesSubscribeRequest();

  TradesSubscribeRequest(const TradesSubscribeRequest& from);
  TradesSubscribeRequest(TradesSubscribeRequest&& from) noexcept
    : TradesSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline TradesSubscribeRequest& operator=(const TradesSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesSubscribeRequest& operator=(TradesSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesSubscribeRequest& default_instance();

  static inline const TradesSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const TradesSubscribeRequest*>(
               &_TradesSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(TradesSubscribeRequest& a, TradesSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesSubscribeRequest* New() const final {
    return CreateMaybeMessage<TradesSubscribeRequest>(nullptr);
  }

  TradesSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesSubscribeRequest& from);
  void MergeFrom(const TradesSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesSubscribeRequest";
  }
  protected:
  explicit TradesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 2 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.TradesSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CandlesSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.CandlesSubscribeRequest) */ {
 public:
  inline CandlesSubscribeRequest() : CandlesSubscribeRequest(nullptr) {}
  virtual ~CandlesSubscribeRequest();

  CandlesSubscribeRequest(const CandlesSubscribeRequest& from);
  CandlesSubscribeRequest(CandlesSubscribeRequest&& from) noexcept
    : CandlesSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline CandlesSubscribeRequest& operator=(const CandlesSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlesSubscribeRequest& operator=(CandlesSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandlesSubscribeRequest& default_instance();

  static inline const CandlesSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const CandlesSubscribeRequest*>(
               &_CandlesSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CandlesSubscribeRequest& a, CandlesSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CandlesSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlesSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandlesSubscribeRequest* New() const final {
    return CreateMaybeMessage<CandlesSubscribeRequest>(nullptr);
  }

  CandlesSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandlesSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandlesSubscribeRequest& from);
  void MergeFrom(const CandlesSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandlesSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.CandlesSubscribeRequest";
  }
  protected:
  explicit CandlesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kIntervalFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // .vega.Interval interval = 2 [json_name = "interval"];
  void clear_interval();
  ::vega::Interval interval() const;
  void set_interval(::vega::Interval value);
  private:
  ::vega::Interval _internal_interval() const;
  void _internal_set_interval(::vega::Interval value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.CandlesSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CandlesSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.CandlesSubscribeResponse) */ {
 public:
  inline CandlesSubscribeResponse() : CandlesSubscribeResponse(nullptr) {}
  virtual ~CandlesSubscribeResponse();

  CandlesSubscribeResponse(const CandlesSubscribeResponse& from);
  CandlesSubscribeResponse(CandlesSubscribeResponse&& from) noexcept
    : CandlesSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline CandlesSubscribeResponse& operator=(const CandlesSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlesSubscribeResponse& operator=(CandlesSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandlesSubscribeResponse& default_instance();

  static inline const CandlesSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const CandlesSubscribeResponse*>(
               &_CandlesSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CandlesSubscribeResponse& a, CandlesSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CandlesSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlesSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandlesSubscribeResponse* New() const final {
    return CreateMaybeMessage<CandlesSubscribeResponse>(nullptr);
  }

  CandlesSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandlesSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandlesSubscribeResponse& from);
  void MergeFrom(const CandlesSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandlesSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.CandlesSubscribeResponse";
  }
  protected:
  explicit CandlesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandleFieldNumber = 1,
  };
  // .vega.Candle candle = 1 [json_name = "candle"];
  bool has_candle() const;
  private:
  bool _internal_has_candle() const;
  public:
  void clear_candle();
  const ::vega::Candle& candle() const;
  ::vega::Candle* release_candle();
  ::vega::Candle* mutable_candle();
  void set_allocated_candle(::vega::Candle* candle);
  private:
  const ::vega::Candle& _internal_candle() const;
  ::vega::Candle* _internal_mutable_candle();
  public:
  void unsafe_arena_set_allocated_candle(
      ::vega::Candle* candle);
  ::vega::Candle* unsafe_arena_release_candle();

  // @@protoc_insertion_point(class_scope:api.v1.CandlesSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Candle* candle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDepthSubscribeRequest) */ {
 public:
  inline MarketDepthSubscribeRequest() : MarketDepthSubscribeRequest(nullptr) {}
  virtual ~MarketDepthSubscribeRequest();

  MarketDepthSubscribeRequest(const MarketDepthSubscribeRequest& from);
  MarketDepthSubscribeRequest(MarketDepthSubscribeRequest&& from) noexcept
    : MarketDepthSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarketDepthSubscribeRequest& operator=(const MarketDepthSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthSubscribeRequest& operator=(MarketDepthSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthSubscribeRequest& default_instance();

  static inline const MarketDepthSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDepthSubscribeRequest*>(
               &_MarketDepthSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(MarketDepthSubscribeRequest& a, MarketDepthSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarketDepthSubscribeRequest>(nullptr);
  }

  MarketDepthSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthSubscribeRequest& from);
  void MergeFrom(const MarketDepthSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDepthSubscribeRequest";
  }
  protected:
  explicit MarketDepthSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketDepthSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDepthSubscribeResponse) */ {
 public:
  inline MarketDepthSubscribeResponse() : MarketDepthSubscribeResponse(nullptr) {}
  virtual ~MarketDepthSubscribeResponse();

  MarketDepthSubscribeResponse(const MarketDepthSubscribeResponse& from);
  MarketDepthSubscribeResponse(MarketDepthSubscribeResponse&& from) noexcept
    : MarketDepthSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline MarketDepthSubscribeResponse& operator=(const MarketDepthSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthSubscribeResponse& operator=(MarketDepthSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthSubscribeResponse& default_instance();

  static inline const MarketDepthSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const MarketDepthSubscribeResponse*>(
               &_MarketDepthSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(MarketDepthSubscribeResponse& a, MarketDepthSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthSubscribeResponse* New() const final {
    return CreateMaybeMessage<MarketDepthSubscribeResponse>(nullptr);
  }

  MarketDepthSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthSubscribeResponse& from);
  void MergeFrom(const MarketDepthSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDepthSubscribeResponse";
  }
  protected:
  explicit MarketDepthSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDepthFieldNumber = 1,
  };
  // .vega.MarketDepth market_depth = 1 [json_name = "marketDepth"];
  bool has_market_depth() const;
  private:
  bool _internal_has_market_depth() const;
  public:
  void clear_market_depth();
  const ::vega::MarketDepth& market_depth() const;
  ::vega::MarketDepth* release_market_depth();
  ::vega::MarketDepth* mutable_market_depth();
  void set_allocated_market_depth(::vega::MarketDepth* market_depth);
  private:
  const ::vega::MarketDepth& _internal_market_depth() const;
  ::vega::MarketDepth* _internal_mutable_market_depth();
  public:
  void unsafe_arena_set_allocated_market_depth(
      ::vega::MarketDepth* market_depth);
  ::vega::MarketDepth* unsafe_arena_release_market_depth();

  // @@protoc_insertion_point(class_scope:api.v1.MarketDepthSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarketDepth* market_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthUpdatesSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDepthUpdatesSubscribeRequest) */ {
 public:
  inline MarketDepthUpdatesSubscribeRequest() : MarketDepthUpdatesSubscribeRequest(nullptr) {}
  virtual ~MarketDepthUpdatesSubscribeRequest();

  MarketDepthUpdatesSubscribeRequest(const MarketDepthUpdatesSubscribeRequest& from);
  MarketDepthUpdatesSubscribeRequest(MarketDepthUpdatesSubscribeRequest&& from) noexcept
    : MarketDepthUpdatesSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarketDepthUpdatesSubscribeRequest& operator=(const MarketDepthUpdatesSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthUpdatesSubscribeRequest& operator=(MarketDepthUpdatesSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthUpdatesSubscribeRequest& default_instance();

  static inline const MarketDepthUpdatesSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDepthUpdatesSubscribeRequest*>(
               &_MarketDepthUpdatesSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(MarketDepthUpdatesSubscribeRequest& a, MarketDepthUpdatesSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthUpdatesSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthUpdatesSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthUpdatesSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarketDepthUpdatesSubscribeRequest>(nullptr);
  }

  MarketDepthUpdatesSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthUpdatesSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthUpdatesSubscribeRequest& from);
  void MergeFrom(const MarketDepthUpdatesSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthUpdatesSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDepthUpdatesSubscribeRequest";
  }
  protected:
  explicit MarketDepthUpdatesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketDepthUpdatesSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthUpdatesSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDepthUpdatesSubscribeResponse) */ {
 public:
  inline MarketDepthUpdatesSubscribeResponse() : MarketDepthUpdatesSubscribeResponse(nullptr) {}
  virtual ~MarketDepthUpdatesSubscribeResponse();

  MarketDepthUpdatesSubscribeResponse(const MarketDepthUpdatesSubscribeResponse& from);
  MarketDepthUpdatesSubscribeResponse(MarketDepthUpdatesSubscribeResponse&& from) noexcept
    : MarketDepthUpdatesSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline MarketDepthUpdatesSubscribeResponse& operator=(const MarketDepthUpdatesSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthUpdatesSubscribeResponse& operator=(MarketDepthUpdatesSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthUpdatesSubscribeResponse& default_instance();

  static inline const MarketDepthUpdatesSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const MarketDepthUpdatesSubscribeResponse*>(
               &_MarketDepthUpdatesSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(MarketDepthUpdatesSubscribeResponse& a, MarketDepthUpdatesSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthUpdatesSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthUpdatesSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthUpdatesSubscribeResponse* New() const final {
    return CreateMaybeMessage<MarketDepthUpdatesSubscribeResponse>(nullptr);
  }

  MarketDepthUpdatesSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthUpdatesSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthUpdatesSubscribeResponse& from);
  void MergeFrom(const MarketDepthUpdatesSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthUpdatesSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDepthUpdatesSubscribeResponse";
  }
  protected:
  explicit MarketDepthUpdatesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 1,
  };
  // .vega.MarketDepthUpdate update = 1 [json_name = "update"];
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::vega::MarketDepthUpdate& update() const;
  ::vega::MarketDepthUpdate* release_update();
  ::vega::MarketDepthUpdate* mutable_update();
  void set_allocated_update(::vega::MarketDepthUpdate* update);
  private:
  const ::vega::MarketDepthUpdate& _internal_update() const;
  ::vega::MarketDepthUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::vega::MarketDepthUpdate* update);
  ::vega::MarketDepthUpdate* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:api.v1.MarketDepthUpdatesSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarketDepthUpdate* update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionsSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PositionsSubscribeRequest) */ {
 public:
  inline PositionsSubscribeRequest() : PositionsSubscribeRequest(nullptr) {}
  virtual ~PositionsSubscribeRequest();

  PositionsSubscribeRequest(const PositionsSubscribeRequest& from);
  PositionsSubscribeRequest(PositionsSubscribeRequest&& from) noexcept
    : PositionsSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline PositionsSubscribeRequest& operator=(const PositionsSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsSubscribeRequest& operator=(PositionsSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionsSubscribeRequest& default_instance();

  static inline const PositionsSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const PositionsSubscribeRequest*>(
               &_PositionsSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(PositionsSubscribeRequest& a, PositionsSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionsSubscribeRequest* New() const final {
    return CreateMaybeMessage<PositionsSubscribeRequest>(nullptr);
  }

  PositionsSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionsSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionsSubscribeRequest& from);
  void MergeFrom(const PositionsSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PositionsSubscribeRequest";
  }
  protected:
  explicit PositionsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
  };
  // string party_id = 1 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PositionsSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionsSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PositionsSubscribeResponse) */ {
 public:
  inline PositionsSubscribeResponse() : PositionsSubscribeResponse(nullptr) {}
  virtual ~PositionsSubscribeResponse();

  PositionsSubscribeResponse(const PositionsSubscribeResponse& from);
  PositionsSubscribeResponse(PositionsSubscribeResponse&& from) noexcept
    : PositionsSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline PositionsSubscribeResponse& operator=(const PositionsSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsSubscribeResponse& operator=(PositionsSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionsSubscribeResponse& default_instance();

  static inline const PositionsSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const PositionsSubscribeResponse*>(
               &_PositionsSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(PositionsSubscribeResponse& a, PositionsSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionsSubscribeResponse* New() const final {
    return CreateMaybeMessage<PositionsSubscribeResponse>(nullptr);
  }

  PositionsSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionsSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionsSubscribeResponse& from);
  void MergeFrom(const PositionsSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PositionsSubscribeResponse";
  }
  protected:
  explicit PositionsSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .vega.Position position = 1 [json_name = "position"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vega::Position& position() const;
  ::vega::Position* release_position();
  ::vega::Position* mutable_position();
  void set_allocated_position(::vega::Position* position);
  private:
  const ::vega::Position& _internal_position() const;
  ::vega::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::vega::Position* position);
  ::vega::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:api.v1.PositionsSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrdersByMarketRequest) */ {
 public:
  inline OrdersByMarketRequest() : OrdersByMarketRequest(nullptr) {}
  virtual ~OrdersByMarketRequest();

  OrdersByMarketRequest(const OrdersByMarketRequest& from);
  OrdersByMarketRequest(OrdersByMarketRequest&& from) noexcept
    : OrdersByMarketRequest() {
    *this = ::std::move(from);
  }

  inline OrdersByMarketRequest& operator=(const OrdersByMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByMarketRequest& operator=(OrdersByMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByMarketRequest& default_instance();

  static inline const OrdersByMarketRequest* internal_default_instance() {
    return reinterpret_cast<const OrdersByMarketRequest*>(
               &_OrdersByMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(OrdersByMarketRequest& a, OrdersByMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByMarketRequest* New() const final {
    return CreateMaybeMessage<OrdersByMarketRequest>(nullptr);
  }

  OrdersByMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByMarketRequest& from);
  void MergeFrom(const OrdersByMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrdersByMarketRequest";
  }
  protected:
  explicit OrdersByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::v1::Pagination& pagination() const;
  ::api::v1::Pagination* release_pagination();
  ::api::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::v1::Pagination* pagination);
  private:
  const ::api::v1::Pagination& _internal_pagination() const;
  ::api::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::v1::Pagination* pagination);
  ::api::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.v1.OrdersByMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::api::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrdersByMarketResponse) */ {
 public:
  inline OrdersByMarketResponse() : OrdersByMarketResponse(nullptr) {}
  virtual ~OrdersByMarketResponse();

  OrdersByMarketResponse(const OrdersByMarketResponse& from);
  OrdersByMarketResponse(OrdersByMarketResponse&& from) noexcept
    : OrdersByMarketResponse() {
    *this = ::std::move(from);
  }

  inline OrdersByMarketResponse& operator=(const OrdersByMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByMarketResponse& operator=(OrdersByMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByMarketResponse& default_instance();

  static inline const OrdersByMarketResponse* internal_default_instance() {
    return reinterpret_cast<const OrdersByMarketResponse*>(
               &_OrdersByMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(OrdersByMarketResponse& a, OrdersByMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByMarketResponse* New() const final {
    return CreateMaybeMessage<OrdersByMarketResponse>(nullptr);
  }

  OrdersByMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByMarketResponse& from);
  void MergeFrom(const OrdersByMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrdersByMarketResponse";
  }
  protected:
  explicit OrdersByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.v1.OrdersByMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrdersByPartyRequest) */ {
 public:
  inline OrdersByPartyRequest() : OrdersByPartyRequest(nullptr) {}
  virtual ~OrdersByPartyRequest();

  OrdersByPartyRequest(const OrdersByPartyRequest& from);
  OrdersByPartyRequest(OrdersByPartyRequest&& from) noexcept
    : OrdersByPartyRequest() {
    *this = ::std::move(from);
  }

  inline OrdersByPartyRequest& operator=(const OrdersByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByPartyRequest& operator=(OrdersByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByPartyRequest& default_instance();

  static inline const OrdersByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const OrdersByPartyRequest*>(
               &_OrdersByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(OrdersByPartyRequest& a, OrdersByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByPartyRequest* New() const final {
    return CreateMaybeMessage<OrdersByPartyRequest>(nullptr);
  }

  OrdersByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByPartyRequest& from);
  void MergeFrom(const OrdersByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrdersByPartyRequest";
  }
  protected:
  explicit OrdersByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::v1::Pagination& pagination() const;
  ::api::v1::Pagination* release_pagination();
  ::api::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::v1::Pagination* pagination);
  private:
  const ::api::v1::Pagination& _internal_pagination() const;
  ::api::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::v1::Pagination* pagination);
  ::api::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.v1.OrdersByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::api::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrdersByPartyResponse) */ {
 public:
  inline OrdersByPartyResponse() : OrdersByPartyResponse(nullptr) {}
  virtual ~OrdersByPartyResponse();

  OrdersByPartyResponse(const OrdersByPartyResponse& from);
  OrdersByPartyResponse(OrdersByPartyResponse&& from) noexcept
    : OrdersByPartyResponse() {
    *this = ::std::move(from);
  }

  inline OrdersByPartyResponse& operator=(const OrdersByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByPartyResponse& operator=(OrdersByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByPartyResponse& default_instance();

  static inline const OrdersByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const OrdersByPartyResponse*>(
               &_OrdersByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(OrdersByPartyResponse& a, OrdersByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByPartyResponse* New() const final {
    return CreateMaybeMessage<OrdersByPartyResponse>(nullptr);
  }

  OrdersByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByPartyResponse& from);
  void MergeFrom(const OrdersByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrdersByPartyResponse";
  }
  protected:
  explicit OrdersByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.v1.OrdersByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByMarketAndIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderByMarketAndIDRequest) */ {
 public:
  inline OrderByMarketAndIDRequest() : OrderByMarketAndIDRequest(nullptr) {}
  virtual ~OrderByMarketAndIDRequest();

  OrderByMarketAndIDRequest(const OrderByMarketAndIDRequest& from);
  OrderByMarketAndIDRequest(OrderByMarketAndIDRequest&& from) noexcept
    : OrderByMarketAndIDRequest() {
    *this = ::std::move(from);
  }

  inline OrderByMarketAndIDRequest& operator=(const OrderByMarketAndIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByMarketAndIDRequest& operator=(OrderByMarketAndIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByMarketAndIDRequest& default_instance();

  static inline const OrderByMarketAndIDRequest* internal_default_instance() {
    return reinterpret_cast<const OrderByMarketAndIDRequest*>(
               &_OrderByMarketAndIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(OrderByMarketAndIDRequest& a, OrderByMarketAndIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByMarketAndIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByMarketAndIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByMarketAndIDRequest* New() const final {
    return CreateMaybeMessage<OrderByMarketAndIDRequest>(nullptr);
  }

  OrderByMarketAndIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByMarketAndIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByMarketAndIDRequest& from);
  void MergeFrom(const OrderByMarketAndIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByMarketAndIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderByMarketAndIDRequest";
  }
  protected:
  explicit OrderByMarketAndIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string order_id = 2 [json_name = "orderId", (.validator.field) = {
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.OrderByMarketAndIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByMarketAndIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderByMarketAndIDResponse) */ {
 public:
  inline OrderByMarketAndIDResponse() : OrderByMarketAndIDResponse(nullptr) {}
  virtual ~OrderByMarketAndIDResponse();

  OrderByMarketAndIDResponse(const OrderByMarketAndIDResponse& from);
  OrderByMarketAndIDResponse(OrderByMarketAndIDResponse&& from) noexcept
    : OrderByMarketAndIDResponse() {
    *this = ::std::move(from);
  }

  inline OrderByMarketAndIDResponse& operator=(const OrderByMarketAndIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByMarketAndIDResponse& operator=(OrderByMarketAndIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByMarketAndIDResponse& default_instance();

  static inline const OrderByMarketAndIDResponse* internal_default_instance() {
    return reinterpret_cast<const OrderByMarketAndIDResponse*>(
               &_OrderByMarketAndIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(OrderByMarketAndIDResponse& a, OrderByMarketAndIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByMarketAndIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByMarketAndIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByMarketAndIDResponse* New() const final {
    return CreateMaybeMessage<OrderByMarketAndIDResponse>(nullptr);
  }

  OrderByMarketAndIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByMarketAndIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByMarketAndIDResponse& from);
  void MergeFrom(const OrderByMarketAndIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByMarketAndIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderByMarketAndIDResponse";
  }
  protected:
  explicit OrderByMarketAndIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.v1.OrderByMarketAndIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByReferenceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderByReferenceRequest) */ {
 public:
  inline OrderByReferenceRequest() : OrderByReferenceRequest(nullptr) {}
  virtual ~OrderByReferenceRequest();

  OrderByReferenceRequest(const OrderByReferenceRequest& from);
  OrderByReferenceRequest(OrderByReferenceRequest&& from) noexcept
    : OrderByReferenceRequest() {
    *this = ::std::move(from);
  }

  inline OrderByReferenceRequest& operator=(const OrderByReferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByReferenceRequest& operator=(OrderByReferenceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByReferenceRequest& default_instance();

  static inline const OrderByReferenceRequest* internal_default_instance() {
    return reinterpret_cast<const OrderByReferenceRequest*>(
               &_OrderByReferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(OrderByReferenceRequest& a, OrderByReferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByReferenceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByReferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByReferenceRequest* New() const final {
    return CreateMaybeMessage<OrderByReferenceRequest>(nullptr);
  }

  OrderByReferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByReferenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByReferenceRequest& from);
  void MergeFrom(const OrderByReferenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByReferenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderByReferenceRequest";
  }
  protected:
  explicit OrderByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
  };
  // string reference = 1 [json_name = "reference", (.validator.field) = {
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.OrderByReferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByReferenceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderByReferenceResponse) */ {
 public:
  inline OrderByReferenceResponse() : OrderByReferenceResponse(nullptr) {}
  virtual ~OrderByReferenceResponse();

  OrderByReferenceResponse(const OrderByReferenceResponse& from);
  OrderByReferenceResponse(OrderByReferenceResponse&& from) noexcept
    : OrderByReferenceResponse() {
    *this = ::std::move(from);
  }

  inline OrderByReferenceResponse& operator=(const OrderByReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByReferenceResponse& operator=(OrderByReferenceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByReferenceResponse& default_instance();

  static inline const OrderByReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const OrderByReferenceResponse*>(
               &_OrderByReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(OrderByReferenceResponse& a, OrderByReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByReferenceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByReferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByReferenceResponse* New() const final {
    return CreateMaybeMessage<OrderByReferenceResponse>(nullptr);
  }

  OrderByReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByReferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByReferenceResponse& from);
  void MergeFrom(const OrderByReferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByReferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderByReferenceResponse";
  }
  protected:
  explicit OrderByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.v1.OrderByReferenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketsRequest) */ {
 public:
  inline MarketsRequest() : MarketsRequest(nullptr) {}
  virtual ~MarketsRequest();

  MarketsRequest(const MarketsRequest& from);
  MarketsRequest(MarketsRequest&& from) noexcept
    : MarketsRequest() {
    *this = ::std::move(from);
  }

  inline MarketsRequest& operator=(const MarketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsRequest& operator=(MarketsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsRequest& default_instance();

  static inline const MarketsRequest* internal_default_instance() {
    return reinterpret_cast<const MarketsRequest*>(
               &_MarketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(MarketsRequest& a, MarketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsRequest* New() const final {
    return CreateMaybeMessage<MarketsRequest>(nullptr);
  }

  MarketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsRequest& from);
  void MergeFrom(const MarketsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketsRequest";
  }
  protected:
  explicit MarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.MarketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketsResponse) */ {
 public:
  inline MarketsResponse() : MarketsResponse(nullptr) {}
  virtual ~MarketsResponse();

  MarketsResponse(const MarketsResponse& from);
  MarketsResponse(MarketsResponse&& from) noexcept
    : MarketsResponse() {
    *this = ::std::move(from);
  }

  inline MarketsResponse& operator=(const MarketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsResponse& operator=(MarketsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsResponse& default_instance();

  static inline const MarketsResponse* internal_default_instance() {
    return reinterpret_cast<const MarketsResponse*>(
               &_MarketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(MarketsResponse& a, MarketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsResponse* New() const final {
    return CreateMaybeMessage<MarketsResponse>(nullptr);
  }

  MarketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsResponse& from);
  void MergeFrom(const MarketsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketsResponse";
  }
  protected:
  explicit MarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketsFieldNumber = 1,
  };
  // repeated .vega.Market markets = 1 [json_name = "markets"];
  int markets_size() const;
  private:
  int _internal_markets_size() const;
  public:
  void clear_markets();
  ::vega::Market* mutable_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >*
      mutable_markets();
  private:
  const ::vega::Market& _internal_markets(int index) const;
  ::vega::Market* _internal_add_markets();
  public:
  const ::vega::Market& markets(int index) const;
  ::vega::Market* add_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >&
      markets() const;

  // @@protoc_insertion_point(class_scope:api.v1.MarketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market > markets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CandlesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.CandlesRequest) */ {
 public:
  inline CandlesRequest() : CandlesRequest(nullptr) {}
  virtual ~CandlesRequest();

  CandlesRequest(const CandlesRequest& from);
  CandlesRequest(CandlesRequest&& from) noexcept
    : CandlesRequest() {
    *this = ::std::move(from);
  }

  inline CandlesRequest& operator=(const CandlesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlesRequest& operator=(CandlesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandlesRequest& default_instance();

  static inline const CandlesRequest* internal_default_instance() {
    return reinterpret_cast<const CandlesRequest*>(
               &_CandlesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CandlesRequest& a, CandlesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CandlesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandlesRequest* New() const final {
    return CreateMaybeMessage<CandlesRequest>(nullptr);
  }

  CandlesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandlesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandlesRequest& from);
  void MergeFrom(const CandlesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandlesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.CandlesRequest";
  }
  protected:
  explicit CandlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kSinceTimestampFieldNumber = 2,
    kIntervalFieldNumber = 3,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // int64 since_timestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
  void clear_since_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 since_timestamp() const;
  void set_since_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_since_timestamp() const;
  void _internal_set_since_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Interval interval = 3 [json_name = "interval"];
  void clear_interval();
  ::vega::Interval interval() const;
  void set_interval(::vega::Interval value);
  private:
  ::vega::Interval _internal_interval() const;
  void _internal_set_interval(::vega::Interval value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.CandlesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 since_timestamp_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CandlesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.CandlesResponse) */ {
 public:
  inline CandlesResponse() : CandlesResponse(nullptr) {}
  virtual ~CandlesResponse();

  CandlesResponse(const CandlesResponse& from);
  CandlesResponse(CandlesResponse&& from) noexcept
    : CandlesResponse() {
    *this = ::std::move(from);
  }

  inline CandlesResponse& operator=(const CandlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlesResponse& operator=(CandlesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandlesResponse& default_instance();

  static inline const CandlesResponse* internal_default_instance() {
    return reinterpret_cast<const CandlesResponse*>(
               &_CandlesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CandlesResponse& a, CandlesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CandlesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandlesResponse* New() const final {
    return CreateMaybeMessage<CandlesResponse>(nullptr);
  }

  CandlesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandlesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandlesResponse& from);
  void MergeFrom(const CandlesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandlesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.CandlesResponse";
  }
  protected:
  explicit CandlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandlesFieldNumber = 1,
  };
  // repeated .vega.Candle candles = 1 [json_name = "candles"];
  int candles_size() const;
  private:
  int _internal_candles_size() const;
  public:
  void clear_candles();
  ::vega::Candle* mutable_candles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >*
      mutable_candles();
  private:
  const ::vega::Candle& _internal_candles(int index) const;
  ::vega::Candle* _internal_add_candles();
  public:
  const ::vega::Candle& candles(int index) const;
  ::vega::Candle* add_candles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >&
      candles() const;

  // @@protoc_insertion_point(class_scope:api.v1.CandlesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle > candles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDepthRequest) */ {
 public:
  inline MarketDepthRequest() : MarketDepthRequest(nullptr) {}
  virtual ~MarketDepthRequest();

  MarketDepthRequest(const MarketDepthRequest& from);
  MarketDepthRequest(MarketDepthRequest&& from) noexcept
    : MarketDepthRequest() {
    *this = ::std::move(from);
  }

  inline MarketDepthRequest& operator=(const MarketDepthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthRequest& operator=(MarketDepthRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthRequest& default_instance();

  static inline const MarketDepthRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDepthRequest*>(
               &_MarketDepthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(MarketDepthRequest& a, MarketDepthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthRequest* New() const final {
    return CreateMaybeMessage<MarketDepthRequest>(nullptr);
  }

  MarketDepthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthRequest& from);
  void MergeFrom(const MarketDepthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDepthRequest";
  }
  protected:
  explicit MarketDepthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kMaxDepthFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // uint64 max_depth = 2 [json_name = "maxDepth"];
  void clear_max_depth();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_depth() const;
  void set_max_depth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_depth() const;
  void _internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketDepthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketDepthResponse) */ {
 public:
  inline MarketDepthResponse() : MarketDepthResponse(nullptr) {}
  virtual ~MarketDepthResponse();

  MarketDepthResponse(const MarketDepthResponse& from);
  MarketDepthResponse(MarketDepthResponse&& from) noexcept
    : MarketDepthResponse() {
    *this = ::std::move(from);
  }

  inline MarketDepthResponse& operator=(const MarketDepthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthResponse& operator=(MarketDepthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthResponse& default_instance();

  static inline const MarketDepthResponse* internal_default_instance() {
    return reinterpret_cast<const MarketDepthResponse*>(
               &_MarketDepthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(MarketDepthResponse& a, MarketDepthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthResponse* New() const final {
    return CreateMaybeMessage<MarketDepthResponse>(nullptr);
  }

  MarketDepthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthResponse& from);
  void MergeFrom(const MarketDepthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketDepthResponse";
  }
  protected:
  explicit MarketDepthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kMarketIdFieldNumber = 1,
    kLastTradeFieldNumber = 4,
    kSequenceNumberFieldNumber = 5,
  };
  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::vega::PriceLevel* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  private:
  const ::vega::PriceLevel& _internal_buy(int index) const;
  ::vega::PriceLevel* _internal_add_buy();
  public:
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::vega::PriceLevel* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  private:
  const ::vega::PriceLevel& _internal_sell(int index) const;
  ::vega::PriceLevel* _internal_add_sell();
  public:
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // .vega.Trade last_trade = 4 [json_name = "lastTrade"];
  bool has_last_trade() const;
  private:
  bool _internal_has_last_trade() const;
  public:
  void clear_last_trade();
  const ::vega::Trade& last_trade() const;
  ::vega::Trade* release_last_trade();
  ::vega::Trade* mutable_last_trade();
  void set_allocated_last_trade(::vega::Trade* last_trade);
  private:
  const ::vega::Trade& _internal_last_trade() const;
  ::vega::Trade* _internal_mutable_last_trade();
  public:
  void unsafe_arena_set_allocated_last_trade(
      ::vega::Trade* last_trade);
  ::vega::Trade* unsafe_arena_release_last_trade();

  // uint64 sequence_number = 5 [json_name = "sequenceNumber"];
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketDepthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::vega::Trade* last_trade_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesByMarketRequest) */ {
 public:
  inline TradesByMarketRequest() : TradesByMarketRequest(nullptr) {}
  virtual ~TradesByMarketRequest();

  TradesByMarketRequest(const TradesByMarketRequest& from);
  TradesByMarketRequest(TradesByMarketRequest&& from) noexcept
    : TradesByMarketRequest() {
    *this = ::std::move(from);
  }

  inline TradesByMarketRequest& operator=(const TradesByMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByMarketRequest& operator=(TradesByMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByMarketRequest& default_instance();

  static inline const TradesByMarketRequest* internal_default_instance() {
    return reinterpret_cast<const TradesByMarketRequest*>(
               &_TradesByMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(TradesByMarketRequest& a, TradesByMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByMarketRequest* New() const final {
    return CreateMaybeMessage<TradesByMarketRequest>(nullptr);
  }

  TradesByMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByMarketRequest& from);
  void MergeFrom(const TradesByMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesByMarketRequest";
  }
  protected:
  explicit TradesByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::v1::Pagination& pagination() const;
  ::api::v1::Pagination* release_pagination();
  ::api::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::v1::Pagination* pagination);
  private:
  const ::api::v1::Pagination& _internal_pagination() const;
  ::api::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::v1::Pagination* pagination);
  ::api::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.v1.TradesByMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::api::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesByMarketResponse) */ {
 public:
  inline TradesByMarketResponse() : TradesByMarketResponse(nullptr) {}
  virtual ~TradesByMarketResponse();

  TradesByMarketResponse(const TradesByMarketResponse& from);
  TradesByMarketResponse(TradesByMarketResponse&& from) noexcept
    : TradesByMarketResponse() {
    *this = ::std::move(from);
  }

  inline TradesByMarketResponse& operator=(const TradesByMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByMarketResponse& operator=(TradesByMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByMarketResponse& default_instance();

  static inline const TradesByMarketResponse* internal_default_instance() {
    return reinterpret_cast<const TradesByMarketResponse*>(
               &_TradesByMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(TradesByMarketResponse& a, TradesByMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByMarketResponse* New() const final {
    return CreateMaybeMessage<TradesByMarketResponse>(nullptr);
  }

  TradesByMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByMarketResponse& from);
  void MergeFrom(const TradesByMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesByMarketResponse";
  }
  protected:
  explicit TradesByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.v1.TradesByMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionsByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PositionsByPartyRequest) */ {
 public:
  inline PositionsByPartyRequest() : PositionsByPartyRequest(nullptr) {}
  virtual ~PositionsByPartyRequest();

  PositionsByPartyRequest(const PositionsByPartyRequest& from);
  PositionsByPartyRequest(PositionsByPartyRequest&& from) noexcept
    : PositionsByPartyRequest() {
    *this = ::std::move(from);
  }

  inline PositionsByPartyRequest& operator=(const PositionsByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsByPartyRequest& operator=(PositionsByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionsByPartyRequest& default_instance();

  static inline const PositionsByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const PositionsByPartyRequest*>(
               &_PositionsByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(PositionsByPartyRequest& a, PositionsByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionsByPartyRequest* New() const final {
    return CreateMaybeMessage<PositionsByPartyRequest>(nullptr);
  }

  PositionsByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionsByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionsByPartyRequest& from);
  void MergeFrom(const PositionsByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PositionsByPartyRequest";
  }
  protected:
  explicit PositionsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PositionsByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionsByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PositionsByPartyResponse) */ {
 public:
  inline PositionsByPartyResponse() : PositionsByPartyResponse(nullptr) {}
  virtual ~PositionsByPartyResponse();

  PositionsByPartyResponse(const PositionsByPartyResponse& from);
  PositionsByPartyResponse(PositionsByPartyResponse&& from) noexcept
    : PositionsByPartyResponse() {
    *this = ::std::move(from);
  }

  inline PositionsByPartyResponse& operator=(const PositionsByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsByPartyResponse& operator=(PositionsByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionsByPartyResponse& default_instance();

  static inline const PositionsByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const PositionsByPartyResponse*>(
               &_PositionsByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(PositionsByPartyResponse& a, PositionsByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionsByPartyResponse* New() const final {
    return CreateMaybeMessage<PositionsByPartyResponse>(nullptr);
  }

  PositionsByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionsByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionsByPartyResponse& from);
  void MergeFrom(const PositionsByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PositionsByPartyResponse";
  }
  protected:
  explicit PositionsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated .vega.Position positions = 1 [json_name = "positions"];
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::vega::Position* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >*
      mutable_positions();
  private:
  const ::vega::Position& _internal_positions(int index) const;
  ::vega::Position* _internal_add_positions();
  public:
  const ::vega::Position& positions(int index) const;
  ::vega::Position* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >&
      positions() const;

  // @@protoc_insertion_point(class_scope:api.v1.PositionsByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position > positions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVegaTimeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetVegaTimeRequest) */ {
 public:
  inline GetVegaTimeRequest() : GetVegaTimeRequest(nullptr) {}
  virtual ~GetVegaTimeRequest();

  GetVegaTimeRequest(const GetVegaTimeRequest& from);
  GetVegaTimeRequest(GetVegaTimeRequest&& from) noexcept
    : GetVegaTimeRequest() {
    *this = ::std::move(from);
  }

  inline GetVegaTimeRequest& operator=(const GetVegaTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVegaTimeRequest& operator=(GetVegaTimeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVegaTimeRequest& default_instance();

  static inline const GetVegaTimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetVegaTimeRequest*>(
               &_GetVegaTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GetVegaTimeRequest& a, GetVegaTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVegaTimeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVegaTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVegaTimeRequest* New() const final {
    return CreateMaybeMessage<GetVegaTimeRequest>(nullptr);
  }

  GetVegaTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVegaTimeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVegaTimeRequest& from);
  void MergeFrom(const GetVegaTimeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVegaTimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetVegaTimeRequest";
  }
  protected:
  explicit GetVegaTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.GetVegaTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVegaTimeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.GetVegaTimeResponse) */ {
 public:
  inline GetVegaTimeResponse() : GetVegaTimeResponse(nullptr) {}
  virtual ~GetVegaTimeResponse();

  GetVegaTimeResponse(const GetVegaTimeResponse& from);
  GetVegaTimeResponse(GetVegaTimeResponse&& from) noexcept
    : GetVegaTimeResponse() {
    *this = ::std::move(from);
  }

  inline GetVegaTimeResponse& operator=(const GetVegaTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVegaTimeResponse& operator=(GetVegaTimeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVegaTimeResponse& default_instance();

  static inline const GetVegaTimeResponse* internal_default_instance() {
    return reinterpret_cast<const GetVegaTimeResponse*>(
               &_GetVegaTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GetVegaTimeResponse& a, GetVegaTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVegaTimeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVegaTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVegaTimeResponse* New() const final {
    return CreateMaybeMessage<GetVegaTimeResponse>(nullptr);
  }

  GetVegaTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVegaTimeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVegaTimeResponse& from);
  void MergeFrom(const GetVegaTimeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVegaTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.GetVegaTimeResponse";
  }
  protected:
  explicit GetVegaTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.GetVegaTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class Pagination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  virtual ~Pagination();

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pagination& default_instance();

  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pagination* New() const final {
    return CreateMaybeMessage<Pagination>(nullptr);
  }

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pagination& from);
  void MergeFrom(const Pagination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkipFieldNumber = 1,
    kLimitFieldNumber = 2,
    kDescendingFieldNumber = 3,
  };
  // uint64 skip = 1 [json_name = "skip"];
  void clear_skip();
  ::PROTOBUF_NAMESPACE_ID::uint64 skip() const;
  void set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_skip() const;
  void _internal_set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 limit = 2 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool descending = 3 [json_name = "descending"];
  void clear_descending();
  bool descending() const;
  void set_descending(bool value);
  private:
  bool _internal_descending() const;
  void _internal_set_descending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 skip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  bool descending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrdersSubscribeResponse) */ {
 public:
  inline OrdersSubscribeResponse() : OrdersSubscribeResponse(nullptr) {}
  virtual ~OrdersSubscribeResponse();

  OrdersSubscribeResponse(const OrdersSubscribeResponse& from);
  OrdersSubscribeResponse(OrdersSubscribeResponse&& from) noexcept
    : OrdersSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline OrdersSubscribeResponse& operator=(const OrdersSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersSubscribeResponse& operator=(OrdersSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersSubscribeResponse& default_instance();

  static inline const OrdersSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const OrdersSubscribeResponse*>(
               &_OrdersSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(OrdersSubscribeResponse& a, OrdersSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersSubscribeResponse* New() const final {
    return CreateMaybeMessage<OrdersSubscribeResponse>(nullptr);
  }

  OrdersSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersSubscribeResponse& from);
  void MergeFrom(const OrdersSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrdersSubscribeResponse";
  }
  protected:
  explicit OrdersSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.v1.OrdersSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TradesSubscribeResponse) */ {
 public:
  inline TradesSubscribeResponse() : TradesSubscribeResponse(nullptr) {}
  virtual ~TradesSubscribeResponse();

  TradesSubscribeResponse(const TradesSubscribeResponse& from);
  TradesSubscribeResponse(TradesSubscribeResponse&& from) noexcept
    : TradesSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline TradesSubscribeResponse& operator=(const TradesSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesSubscribeResponse& operator=(TradesSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesSubscribeResponse& default_instance();

  static inline const TradesSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const TradesSubscribeResponse*>(
               &_TradesSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(TradesSubscribeResponse& a, TradesSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesSubscribeResponse* New() const final {
    return CreateMaybeMessage<TradesSubscribeResponse>(nullptr);
  }

  TradesSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesSubscribeResponse& from);
  void MergeFrom(const TradesSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TradesSubscribeResponse";
  }
  protected:
  explicit TradesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.v1.TradesSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TransferResponsesSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TransferResponsesSubscribeRequest) */ {
 public:
  inline TransferResponsesSubscribeRequest() : TransferResponsesSubscribeRequest(nullptr) {}
  virtual ~TransferResponsesSubscribeRequest();

  TransferResponsesSubscribeRequest(const TransferResponsesSubscribeRequest& from);
  TransferResponsesSubscribeRequest(TransferResponsesSubscribeRequest&& from) noexcept
    : TransferResponsesSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline TransferResponsesSubscribeRequest& operator=(const TransferResponsesSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferResponsesSubscribeRequest& operator=(TransferResponsesSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferResponsesSubscribeRequest& default_instance();

  static inline const TransferResponsesSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const TransferResponsesSubscribeRequest*>(
               &_TransferResponsesSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(TransferResponsesSubscribeRequest& a, TransferResponsesSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferResponsesSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferResponsesSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferResponsesSubscribeRequest* New() const final {
    return CreateMaybeMessage<TransferResponsesSubscribeRequest>(nullptr);
  }

  TransferResponsesSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponsesSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferResponsesSubscribeRequest& from);
  void MergeFrom(const TransferResponsesSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferResponsesSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TransferResponsesSubscribeRequest";
  }
  protected:
  explicit TransferResponsesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.TransferResponsesSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TransferResponsesSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.TransferResponsesSubscribeResponse) */ {
 public:
  inline TransferResponsesSubscribeResponse() : TransferResponsesSubscribeResponse(nullptr) {}
  virtual ~TransferResponsesSubscribeResponse();

  TransferResponsesSubscribeResponse(const TransferResponsesSubscribeResponse& from);
  TransferResponsesSubscribeResponse(TransferResponsesSubscribeResponse&& from) noexcept
    : TransferResponsesSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline TransferResponsesSubscribeResponse& operator=(const TransferResponsesSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferResponsesSubscribeResponse& operator=(TransferResponsesSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferResponsesSubscribeResponse& default_instance();

  static inline const TransferResponsesSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const TransferResponsesSubscribeResponse*>(
               &_TransferResponsesSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(TransferResponsesSubscribeResponse& a, TransferResponsesSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferResponsesSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferResponsesSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferResponsesSubscribeResponse* New() const final {
    return CreateMaybeMessage<TransferResponsesSubscribeResponse>(nullptr);
  }

  TransferResponsesSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponsesSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferResponsesSubscribeResponse& from);
  void MergeFrom(const TransferResponsesSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferResponsesSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.TransferResponsesSubscribeResponse";
  }
  protected:
  explicit TransferResponsesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // .vega.TransferResponse response = 1 [json_name = "response"];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::vega::TransferResponse& response() const;
  ::vega::TransferResponse* release_response();
  ::vega::TransferResponse* mutable_response();
  void set_allocated_response(::vega::TransferResponse* response);
  private:
  const ::vega::TransferResponse& _internal_response() const;
  ::vega::TransferResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::vega::TransferResponse* response);
  ::vega::TransferResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:api.v1.TransferResponsesSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::TransferResponse* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PartyAccountsRequest) */ {
 public:
  inline PartyAccountsRequest() : PartyAccountsRequest(nullptr) {}
  virtual ~PartyAccountsRequest();

  PartyAccountsRequest(const PartyAccountsRequest& from);
  PartyAccountsRequest(PartyAccountsRequest&& from) noexcept
    : PartyAccountsRequest() {
    *this = ::std::move(from);
  }

  inline PartyAccountsRequest& operator=(const PartyAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyAccountsRequest& operator=(PartyAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyAccountsRequest& default_instance();

  static inline const PartyAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const PartyAccountsRequest*>(
               &_PartyAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(PartyAccountsRequest& a, PartyAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyAccountsRequest* New() const final {
    return CreateMaybeMessage<PartyAccountsRequest>(nullptr);
  }

  PartyAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyAccountsRequest& from);
  void MergeFrom(const PartyAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PartyAccountsRequest";
  }
  protected:
  explicit PartyAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kAssetFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string party_id = 1 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // .vega.AccountType type = 3 [json_name = "type"];
  void clear_type();
  ::vega::AccountType type() const;
  void set_type(::vega::AccountType value);
  private:
  ::vega::AccountType _internal_type() const;
  void _internal_set_type(::vega::AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PartyAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PartyAccountsResponse) */ {
 public:
  inline PartyAccountsResponse() : PartyAccountsResponse(nullptr) {}
  virtual ~PartyAccountsResponse();

  PartyAccountsResponse(const PartyAccountsResponse& from);
  PartyAccountsResponse(PartyAccountsResponse&& from) noexcept
    : PartyAccountsResponse() {
    *this = ::std::move(from);
  }

  inline PartyAccountsResponse& operator=(const PartyAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyAccountsResponse& operator=(PartyAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyAccountsResponse& default_instance();

  static inline const PartyAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const PartyAccountsResponse*>(
               &_PartyAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(PartyAccountsResponse& a, PartyAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyAccountsResponse* New() const final {
    return CreateMaybeMessage<PartyAccountsResponse>(nullptr);
  }

  PartyAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyAccountsResponse& from);
  void MergeFrom(const PartyAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PartyAccountsResponse";
  }
  protected:
  explicit PartyAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vega::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_accounts();
  private:
  const ::vega::Account& _internal_accounts(int index) const;
  ::vega::Account* _internal_add_accounts();
  public:
  const ::vega::Account& accounts(int index) const;
  ::vega::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:api.v1.PartyAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketAccountsRequest) */ {
 public:
  inline MarketAccountsRequest() : MarketAccountsRequest(nullptr) {}
  virtual ~MarketAccountsRequest();

  MarketAccountsRequest(const MarketAccountsRequest& from);
  MarketAccountsRequest(MarketAccountsRequest&& from) noexcept
    : MarketAccountsRequest() {
    *this = ::std::move(from);
  }

  inline MarketAccountsRequest& operator=(const MarketAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketAccountsRequest& operator=(MarketAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketAccountsRequest& default_instance();

  static inline const MarketAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const MarketAccountsRequest*>(
               &_MarketAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(MarketAccountsRequest& a, MarketAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketAccountsRequest* New() const final {
    return CreateMaybeMessage<MarketAccountsRequest>(nullptr);
  }

  MarketAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketAccountsRequest& from);
  void MergeFrom(const MarketAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketAccountsRequest";
  }
  protected:
  explicit MarketAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kAssetFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string asset = 2 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.MarketAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.MarketAccountsResponse) */ {
 public:
  inline MarketAccountsResponse() : MarketAccountsResponse(nullptr) {}
  virtual ~MarketAccountsResponse();

  MarketAccountsResponse(const MarketAccountsResponse& from);
  MarketAccountsResponse(MarketAccountsResponse&& from) noexcept
    : MarketAccountsResponse() {
    *this = ::std::move(from);
  }

  inline MarketAccountsResponse& operator=(const MarketAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketAccountsResponse& operator=(MarketAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketAccountsResponse& default_instance();

  static inline const MarketAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const MarketAccountsResponse*>(
               &_MarketAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(MarketAccountsResponse& a, MarketAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketAccountsResponse* New() const final {
    return CreateMaybeMessage<MarketAccountsResponse>(nullptr);
  }

  MarketAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketAccountsResponse& from);
  void MergeFrom(const MarketAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.MarketAccountsResponse";
  }
  protected:
  explicit MarketAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vega::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_accounts();
  private:
  const ::vega::Account& _internal_accounts(int index) const;
  ::vega::Account* _internal_add_accounts();
  public:
  const ::vega::Account& accounts(int index) const;
  ::vega::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:api.v1.MarketAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class FeeInfrastructureAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.FeeInfrastructureAccountsRequest) */ {
 public:
  inline FeeInfrastructureAccountsRequest() : FeeInfrastructureAccountsRequest(nullptr) {}
  virtual ~FeeInfrastructureAccountsRequest();

  FeeInfrastructureAccountsRequest(const FeeInfrastructureAccountsRequest& from);
  FeeInfrastructureAccountsRequest(FeeInfrastructureAccountsRequest&& from) noexcept
    : FeeInfrastructureAccountsRequest() {
    *this = ::std::move(from);
  }

  inline FeeInfrastructureAccountsRequest& operator=(const FeeInfrastructureAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeInfrastructureAccountsRequest& operator=(FeeInfrastructureAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeInfrastructureAccountsRequest& default_instance();

  static inline const FeeInfrastructureAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const FeeInfrastructureAccountsRequest*>(
               &_FeeInfrastructureAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(FeeInfrastructureAccountsRequest& a, FeeInfrastructureAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeInfrastructureAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeInfrastructureAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeInfrastructureAccountsRequest* New() const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsRequest>(nullptr);
  }

  FeeInfrastructureAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeInfrastructureAccountsRequest& from);
  void MergeFrom(const FeeInfrastructureAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeInfrastructureAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.FeeInfrastructureAccountsRequest";
  }
  protected:
  explicit FeeInfrastructureAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
  };
  // string asset = 1 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.FeeInfrastructureAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class FeeInfrastructureAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.FeeInfrastructureAccountsResponse) */ {
 public:
  inline FeeInfrastructureAccountsResponse() : FeeInfrastructureAccountsResponse(nullptr) {}
  virtual ~FeeInfrastructureAccountsResponse();

  FeeInfrastructureAccountsResponse(const FeeInfrastructureAccountsResponse& from);
  FeeInfrastructureAccountsResponse(FeeInfrastructureAccountsResponse&& from) noexcept
    : FeeInfrastructureAccountsResponse() {
    *this = ::std::move(from);
  }

  inline FeeInfrastructureAccountsResponse& operator=(const FeeInfrastructureAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeInfrastructureAccountsResponse& operator=(FeeInfrastructureAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeInfrastructureAccountsResponse& default_instance();

  static inline const FeeInfrastructureAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const FeeInfrastructureAccountsResponse*>(
               &_FeeInfrastructureAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(FeeInfrastructureAccountsResponse& a, FeeInfrastructureAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeInfrastructureAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeInfrastructureAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeInfrastructureAccountsResponse* New() const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsResponse>(nullptr);
  }

  FeeInfrastructureAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeInfrastructureAccountsResponse& from);
  void MergeFrom(const FeeInfrastructureAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeInfrastructureAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.FeeInfrastructureAccountsResponse";
  }
  protected:
  explicit FeeInfrastructureAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vega::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_accounts();
  private:
  const ::vega::Account& _internal_accounts(int index) const;
  ::vega::Account* _internal_add_accounts();
  public:
  const ::vega::Account& accounts(int index) const;
  ::vega::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:api.v1.FeeInfrastructureAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareProposalSubmissionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareProposalSubmissionRequest) */ {
 public:
  inline PrepareProposalSubmissionRequest() : PrepareProposalSubmissionRequest(nullptr) {}
  virtual ~PrepareProposalSubmissionRequest();

  PrepareProposalSubmissionRequest(const PrepareProposalSubmissionRequest& from);
  PrepareProposalSubmissionRequest(PrepareProposalSubmissionRequest&& from) noexcept
    : PrepareProposalSubmissionRequest() {
    *this = ::std::move(from);
  }

  inline PrepareProposalSubmissionRequest& operator=(const PrepareProposalSubmissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareProposalSubmissionRequest& operator=(PrepareProposalSubmissionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareProposalSubmissionRequest& default_instance();

  static inline const PrepareProposalSubmissionRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareProposalSubmissionRequest*>(
               &_PrepareProposalSubmissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(PrepareProposalSubmissionRequest& a, PrepareProposalSubmissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareProposalSubmissionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareProposalSubmissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareProposalSubmissionRequest* New() const final {
    return CreateMaybeMessage<PrepareProposalSubmissionRequest>(nullptr);
  }

  PrepareProposalSubmissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareProposalSubmissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareProposalSubmissionRequest& from);
  void MergeFrom(const PrepareProposalSubmissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareProposalSubmissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareProposalSubmissionRequest";
  }
  protected:
  explicit PrepareProposalSubmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmissionFieldNumber = 1,
  };
  // .vega.commands.v1.ProposalSubmission submission = 1 [json_name = "submission"];
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::commands::v1::ProposalSubmission& submission() const;
  ::vega::commands::v1::ProposalSubmission* release_submission();
  ::vega::commands::v1::ProposalSubmission* mutable_submission();
  void set_allocated_submission(::vega::commands::v1::ProposalSubmission* submission);
  private:
  const ::vega::commands::v1::ProposalSubmission& _internal_submission() const;
  ::vega::commands::v1::ProposalSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::commands::v1::ProposalSubmission* submission);
  ::vega::commands::v1::ProposalSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareProposalSubmissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::ProposalSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareProposalSubmissionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareProposalSubmissionResponse) */ {
 public:
  inline PrepareProposalSubmissionResponse() : PrepareProposalSubmissionResponse(nullptr) {}
  virtual ~PrepareProposalSubmissionResponse();

  PrepareProposalSubmissionResponse(const PrepareProposalSubmissionResponse& from);
  PrepareProposalSubmissionResponse(PrepareProposalSubmissionResponse&& from) noexcept
    : PrepareProposalSubmissionResponse() {
    *this = ::std::move(from);
  }

  inline PrepareProposalSubmissionResponse& operator=(const PrepareProposalSubmissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareProposalSubmissionResponse& operator=(PrepareProposalSubmissionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareProposalSubmissionResponse& default_instance();

  static inline const PrepareProposalSubmissionResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareProposalSubmissionResponse*>(
               &_PrepareProposalSubmissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(PrepareProposalSubmissionResponse& a, PrepareProposalSubmissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareProposalSubmissionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareProposalSubmissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareProposalSubmissionResponse* New() const final {
    return CreateMaybeMessage<PrepareProposalSubmissionResponse>(nullptr);
  }

  PrepareProposalSubmissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareProposalSubmissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareProposalSubmissionResponse& from);
  void MergeFrom(const PrepareProposalSubmissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareProposalSubmissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareProposalSubmissionResponse";
  }
  protected:
  explicit PrepareProposalSubmissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
    kSubmissionFieldNumber = 2,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // .vega.commands.v1.ProposalSubmission submission = 2 [json_name = "submission"];
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::commands::v1::ProposalSubmission& submission() const;
  ::vega::commands::v1::ProposalSubmission* release_submission();
  ::vega::commands::v1::ProposalSubmission* mutable_submission();
  void set_allocated_submission(::vega::commands::v1::ProposalSubmission* submission);
  private:
  const ::vega::commands::v1::ProposalSubmission& _internal_submission() const;
  ::vega::commands::v1::ProposalSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::commands::v1::ProposalSubmission* submission);
  ::vega::commands::v1::ProposalSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareProposalSubmissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::vega::commands::v1::ProposalSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareVoteSubmissionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareVoteSubmissionRequest) */ {
 public:
  inline PrepareVoteSubmissionRequest() : PrepareVoteSubmissionRequest(nullptr) {}
  virtual ~PrepareVoteSubmissionRequest();

  PrepareVoteSubmissionRequest(const PrepareVoteSubmissionRequest& from);
  PrepareVoteSubmissionRequest(PrepareVoteSubmissionRequest&& from) noexcept
    : PrepareVoteSubmissionRequest() {
    *this = ::std::move(from);
  }

  inline PrepareVoteSubmissionRequest& operator=(const PrepareVoteSubmissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareVoteSubmissionRequest& operator=(PrepareVoteSubmissionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareVoteSubmissionRequest& default_instance();

  static inline const PrepareVoteSubmissionRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareVoteSubmissionRequest*>(
               &_PrepareVoteSubmissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(PrepareVoteSubmissionRequest& a, PrepareVoteSubmissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareVoteSubmissionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareVoteSubmissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareVoteSubmissionRequest* New() const final {
    return CreateMaybeMessage<PrepareVoteSubmissionRequest>(nullptr);
  }

  PrepareVoteSubmissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareVoteSubmissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareVoteSubmissionRequest& from);
  void MergeFrom(const PrepareVoteSubmissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareVoteSubmissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareVoteSubmissionRequest";
  }
  protected:
  explicit PrepareVoteSubmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmissionFieldNumber = 1,
  };
  // .vega.commands.v1.VoteSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::commands::v1::VoteSubmission& submission() const;
  ::vega::commands::v1::VoteSubmission* release_submission();
  ::vega::commands::v1::VoteSubmission* mutable_submission();
  void set_allocated_submission(::vega::commands::v1::VoteSubmission* submission);
  private:
  const ::vega::commands::v1::VoteSubmission& _internal_submission() const;
  ::vega::commands::v1::VoteSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::commands::v1::VoteSubmission* submission);
  ::vega::commands::v1::VoteSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareVoteSubmissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::VoteSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareVoteSubmissionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareVoteSubmissionResponse) */ {
 public:
  inline PrepareVoteSubmissionResponse() : PrepareVoteSubmissionResponse(nullptr) {}
  virtual ~PrepareVoteSubmissionResponse();

  PrepareVoteSubmissionResponse(const PrepareVoteSubmissionResponse& from);
  PrepareVoteSubmissionResponse(PrepareVoteSubmissionResponse&& from) noexcept
    : PrepareVoteSubmissionResponse() {
    *this = ::std::move(from);
  }

  inline PrepareVoteSubmissionResponse& operator=(const PrepareVoteSubmissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareVoteSubmissionResponse& operator=(PrepareVoteSubmissionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareVoteSubmissionResponse& default_instance();

  static inline const PrepareVoteSubmissionResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareVoteSubmissionResponse*>(
               &_PrepareVoteSubmissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(PrepareVoteSubmissionResponse& a, PrepareVoteSubmissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareVoteSubmissionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareVoteSubmissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareVoteSubmissionResponse* New() const final {
    return CreateMaybeMessage<PrepareVoteSubmissionResponse>(nullptr);
  }

  PrepareVoteSubmissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareVoteSubmissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareVoteSubmissionResponse& from);
  void MergeFrom(const PrepareVoteSubmissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareVoteSubmissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareVoteSubmissionResponse";
  }
  protected:
  explicit PrepareVoteSubmissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
    kSubmissionFieldNumber = 2,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // .vega.commands.v1.VoteSubmission submission = 2 [json_name = "submission"];
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::commands::v1::VoteSubmission& submission() const;
  ::vega::commands::v1::VoteSubmission* release_submission();
  ::vega::commands::v1::VoteSubmission* mutable_submission();
  void set_allocated_submission(::vega::commands::v1::VoteSubmission* submission);
  private:
  const ::vega::commands::v1::VoteSubmission& _internal_submission() const;
  ::vega::commands::v1::VoteSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::commands::v1::VoteSubmission* submission);
  ::vega::commands::v1::VoteSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareVoteSubmissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::vega::commands::v1::VoteSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareLiquidityProvisionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareLiquidityProvisionRequest) */ {
 public:
  inline PrepareLiquidityProvisionRequest() : PrepareLiquidityProvisionRequest(nullptr) {}
  virtual ~PrepareLiquidityProvisionRequest();

  PrepareLiquidityProvisionRequest(const PrepareLiquidityProvisionRequest& from);
  PrepareLiquidityProvisionRequest(PrepareLiquidityProvisionRequest&& from) noexcept
    : PrepareLiquidityProvisionRequest() {
    *this = ::std::move(from);
  }

  inline PrepareLiquidityProvisionRequest& operator=(const PrepareLiquidityProvisionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareLiquidityProvisionRequest& operator=(PrepareLiquidityProvisionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareLiquidityProvisionRequest& default_instance();

  static inline const PrepareLiquidityProvisionRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareLiquidityProvisionRequest*>(
               &_PrepareLiquidityProvisionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(PrepareLiquidityProvisionRequest& a, PrepareLiquidityProvisionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareLiquidityProvisionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareLiquidityProvisionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareLiquidityProvisionRequest* New() const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionRequest>(nullptr);
  }

  PrepareLiquidityProvisionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareLiquidityProvisionRequest& from);
  void MergeFrom(const PrepareLiquidityProvisionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareLiquidityProvisionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareLiquidityProvisionRequest";
  }
  protected:
  explicit PrepareLiquidityProvisionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmissionFieldNumber = 1,
  };
  // .vega.commands.v1.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::commands::v1::LiquidityProvisionSubmission& submission() const;
  ::vega::commands::v1::LiquidityProvisionSubmission* release_submission();
  ::vega::commands::v1::LiquidityProvisionSubmission* mutable_submission();
  void set_allocated_submission(::vega::commands::v1::LiquidityProvisionSubmission* submission);
  private:
  const ::vega::commands::v1::LiquidityProvisionSubmission& _internal_submission() const;
  ::vega::commands::v1::LiquidityProvisionSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::commands::v1::LiquidityProvisionSubmission* submission);
  ::vega::commands::v1::LiquidityProvisionSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.v1.PrepareLiquidityProvisionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::commands::v1::LiquidityProvisionSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareLiquidityProvisionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.PrepareLiquidityProvisionResponse) */ {
 public:
  inline PrepareLiquidityProvisionResponse() : PrepareLiquidityProvisionResponse(nullptr) {}
  virtual ~PrepareLiquidityProvisionResponse();

  PrepareLiquidityProvisionResponse(const PrepareLiquidityProvisionResponse& from);
  PrepareLiquidityProvisionResponse(PrepareLiquidityProvisionResponse&& from) noexcept
    : PrepareLiquidityProvisionResponse() {
    *this = ::std::move(from);
  }

  inline PrepareLiquidityProvisionResponse& operator=(const PrepareLiquidityProvisionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareLiquidityProvisionResponse& operator=(PrepareLiquidityProvisionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareLiquidityProvisionResponse& default_instance();

  static inline const PrepareLiquidityProvisionResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareLiquidityProvisionResponse*>(
               &_PrepareLiquidityProvisionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(PrepareLiquidityProvisionResponse& a, PrepareLiquidityProvisionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareLiquidityProvisionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareLiquidityProvisionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareLiquidityProvisionResponse* New() const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionResponse>(nullptr);
  }

  PrepareLiquidityProvisionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareLiquidityProvisionResponse& from);
  void MergeFrom(const PrepareLiquidityProvisionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareLiquidityProvisionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.PrepareLiquidityProvisionResponse";
  }
  protected:
  explicit PrepareLiquidityProvisionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.PrepareLiquidityProvisionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderByIDRequest) */ {
 public:
  inline OrderByIDRequest() : OrderByIDRequest(nullptr) {}
  virtual ~OrderByIDRequest();

  OrderByIDRequest(const OrderByIDRequest& from);
  OrderByIDRequest(OrderByIDRequest&& from) noexcept
    : OrderByIDRequest() {
    *this = ::std::move(from);
  }

  inline OrderByIDRequest& operator=(const OrderByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByIDRequest& operator=(OrderByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByIDRequest& default_instance();

  static inline const OrderByIDRequest* internal_default_instance() {
    return reinterpret_cast<const OrderByIDRequest*>(
               &_OrderByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(OrderByIDRequest& a, OrderByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByIDRequest* New() const final {
    return CreateMaybeMessage<OrderByIDRequest>(nullptr);
  }

  OrderByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByIDRequest& from);
  void MergeFrom(const OrderByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderByIDRequest";
  }
  protected:
  explicit OrderByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // uint64 version = 2 [json_name = "version"];
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.OrderByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderByIDResponse) */ {
 public:
  inline OrderByIDResponse() : OrderByIDResponse(nullptr) {}
  virtual ~OrderByIDResponse();

  OrderByIDResponse(const OrderByIDResponse& from);
  OrderByIDResponse(OrderByIDResponse&& from) noexcept
    : OrderByIDResponse() {
    *this = ::std::move(from);
  }

  inline OrderByIDResponse& operator=(const OrderByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByIDResponse& operator=(OrderByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByIDResponse& default_instance();

  static inline const OrderByIDResponse* internal_default_instance() {
    return reinterpret_cast<const OrderByIDResponse*>(
               &_OrderByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(OrderByIDResponse& a, OrderByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByIDResponse* New() const final {
    return CreateMaybeMessage<OrderByIDResponse>(nullptr);
  }

  OrderByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByIDResponse& from);
  void MergeFrom(const OrderByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderByIDResponse";
  }
  protected:
  explicit OrderByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.v1.OrderByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderVersionsByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderVersionsByIDRequest) */ {
 public:
  inline OrderVersionsByIDRequest() : OrderVersionsByIDRequest(nullptr) {}
  virtual ~OrderVersionsByIDRequest();

  OrderVersionsByIDRequest(const OrderVersionsByIDRequest& from);
  OrderVersionsByIDRequest(OrderVersionsByIDRequest&& from) noexcept
    : OrderVersionsByIDRequest() {
    *this = ::std::move(from);
  }

  inline OrderVersionsByIDRequest& operator=(const OrderVersionsByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderVersionsByIDRequest& operator=(OrderVersionsByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderVersionsByIDRequest& default_instance();

  static inline const OrderVersionsByIDRequest* internal_default_instance() {
    return reinterpret_cast<const OrderVersionsByIDRequest*>(
               &_OrderVersionsByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(OrderVersionsByIDRequest& a, OrderVersionsByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderVersionsByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderVersionsByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderVersionsByIDRequest* New() const final {
    return CreateMaybeMessage<OrderVersionsByIDRequest>(nullptr);
  }

  OrderVersionsByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderVersionsByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderVersionsByIDRequest& from);
  void MergeFrom(const OrderVersionsByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderVersionsByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderVersionsByIDRequest";
  }
  protected:
  explicit OrderVersionsByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::v1::Pagination& pagination() const;
  ::api::v1::Pagination* release_pagination();
  ::api::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::v1::Pagination* pagination);
  private:
  const ::api::v1::Pagination& _internal_pagination() const;
  ::api::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::v1::Pagination* pagination);
  ::api::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.v1.OrderVersionsByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::api::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderVersionsByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OrderVersionsByIDResponse) */ {
 public:
  inline OrderVersionsByIDResponse() : OrderVersionsByIDResponse(nullptr) {}
  virtual ~OrderVersionsByIDResponse();

  OrderVersionsByIDResponse(const OrderVersionsByIDResponse& from);
  OrderVersionsByIDResponse(OrderVersionsByIDResponse&& from) noexcept
    : OrderVersionsByIDResponse() {
    *this = ::std::move(from);
  }

  inline OrderVersionsByIDResponse& operator=(const OrderVersionsByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderVersionsByIDResponse& operator=(OrderVersionsByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderVersionsByIDResponse& default_instance();

  static inline const OrderVersionsByIDResponse* internal_default_instance() {
    return reinterpret_cast<const OrderVersionsByIDResponse*>(
               &_OrderVersionsByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(OrderVersionsByIDResponse& a, OrderVersionsByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderVersionsByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderVersionsByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderVersionsByIDResponse* New() const final {
    return CreateMaybeMessage<OrderVersionsByIDResponse>(nullptr);
  }

  OrderVersionsByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderVersionsByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderVersionsByIDResponse& from);
  void MergeFrom(const OrderVersionsByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderVersionsByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OrderVersionsByIDResponse";
  }
  protected:
  explicit OrderVersionsByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.v1.OrderVersionsByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateFeeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.EstimateFeeRequest) */ {
 public:
  inline EstimateFeeRequest() : EstimateFeeRequest(nullptr) {}
  virtual ~EstimateFeeRequest();

  EstimateFeeRequest(const EstimateFeeRequest& from);
  EstimateFeeRequest(EstimateFeeRequest&& from) noexcept
    : EstimateFeeRequest() {
    *this = ::std::move(from);
  }

  inline EstimateFeeRequest& operator=(const EstimateFeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateFeeRequest& operator=(EstimateFeeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateFeeRequest& default_instance();

  static inline const EstimateFeeRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateFeeRequest*>(
               &_EstimateFeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(EstimateFeeRequest& a, EstimateFeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateFeeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateFeeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateFeeRequest* New() const final {
    return CreateMaybeMessage<EstimateFeeRequest>(nullptr);
  }

  EstimateFeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateFeeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateFeeRequest& from);
  void MergeFrom(const EstimateFeeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateFeeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.EstimateFeeRequest";
  }
  protected:
  explicit EstimateFeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.v1.EstimateFeeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateFeeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.EstimateFeeResponse) */ {
 public:
  inline EstimateFeeResponse() : EstimateFeeResponse(nullptr) {}
  virtual ~EstimateFeeResponse();

  EstimateFeeResponse(const EstimateFeeResponse& from);
  EstimateFeeResponse(EstimateFeeResponse&& from) noexcept
    : EstimateFeeResponse() {
    *this = ::std::move(from);
  }

  inline EstimateFeeResponse& operator=(const EstimateFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateFeeResponse& operator=(EstimateFeeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateFeeResponse& default_instance();

  static inline const EstimateFeeResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateFeeResponse*>(
               &_EstimateFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(EstimateFeeResponse& a, EstimateFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateFeeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateFeeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateFeeResponse* New() const final {
    return CreateMaybeMessage<EstimateFeeResponse>(nullptr);
  }

  EstimateFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateFeeResponse& from);
  void MergeFrom(const EstimateFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.EstimateFeeResponse";
  }
  protected:
  explicit EstimateFeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeFieldNumber = 2,
  };
  // .vega.Fee fee = 2 [json_name = "fee"];
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::vega::Fee& fee() const;
  ::vega::Fee* release_fee();
  ::vega::Fee* mutable_fee();
  void set_allocated_fee(::vega::Fee* fee);
  private:
  const ::vega::Fee& _internal_fee() const;
  ::vega::Fee* _internal_mutable_fee();
  public:
  void unsafe_arena_set_allocated_fee(
      ::vega::Fee* fee);
  ::vega::Fee* unsafe_arena_release_fee();

  // @@protoc_insertion_point(class_scope:api.v1.EstimateFeeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Fee* fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateMarginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.EstimateMarginRequest) */ {
 public:
  inline EstimateMarginRequest() : EstimateMarginRequest(nullptr) {}
  virtual ~EstimateMarginRequest();

  EstimateMarginRequest(const EstimateMarginRequest& from);
  EstimateMarginRequest(EstimateMarginRequest&& from) noexcept
    : EstimateMarginRequest() {
    *this = ::std::move(from);
  }

  inline EstimateMarginRequest& operator=(const EstimateMarginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateMarginRequest& operator=(EstimateMarginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateMarginRequest& default_instance();

  static inline const EstimateMarginRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateMarginRequest*>(
               &_EstimateMarginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(EstimateMarginRequest& a, EstimateMarginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateMarginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateMarginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateMarginRequest* New() const final {
    return CreateMaybeMessage<EstimateMarginRequest>(nullptr);
  }

  EstimateMarginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateMarginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateMarginRequest& from);
  void MergeFrom(const EstimateMarginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateMarginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.EstimateMarginRequest";
  }
  protected:
  explicit EstimateMarginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.v1.EstimateMarginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateMarginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.EstimateMarginResponse) */ {
 public:
  inline EstimateMarginResponse() : EstimateMarginResponse(nullptr) {}
  virtual ~EstimateMarginResponse();

  EstimateMarginResponse(const EstimateMarginResponse& from);
  EstimateMarginResponse(EstimateMarginResponse&& from) noexcept
    : EstimateMarginResponse() {
    *this = ::std::move(from);
  }

  inline EstimateMarginResponse& operator=(const EstimateMarginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateMarginResponse& operator=(EstimateMarginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateMarginResponse& default_instance();

  static inline const EstimateMarginResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateMarginResponse*>(
               &_EstimateMarginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(EstimateMarginResponse& a, EstimateMarginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateMarginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateMarginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateMarginResponse* New() const final {
    return CreateMaybeMessage<EstimateMarginResponse>(nullptr);
  }

  EstimateMarginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateMarginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateMarginResponse& from);
  void MergeFrom(const EstimateMarginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateMarginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.EstimateMarginResponse";
  }
  protected:
  explicit EstimateMarginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarginLevelsFieldNumber = 2,
  };
  // .vega.MarginLevels margin_levels = 2 [json_name = "marginLevels"];
  bool has_margin_levels() const;
  private:
  bool _internal_has_margin_levels() const;
  public:
  void clear_margin_levels();
  const ::vega::MarginLevels& margin_levels() const;
  ::vega::MarginLevels* release_margin_levels();
  ::vega::MarginLevels* mutable_margin_levels();
  void set_allocated_margin_levels(::vega::MarginLevels* margin_levels);
  private:
  const ::vega::MarginLevels& _internal_margin_levels() const;
  ::vega::MarginLevels* _internal_mutable_margin_levels();
  public:
  void unsafe_arena_set_allocated_margin_levels(
      ::vega::MarginLevels* margin_levels);
  ::vega::MarginLevels* unsafe_arena_release_margin_levels();

  // @@protoc_insertion_point(class_scope:api.v1.EstimateMarginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarginLevels* margin_levels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveEventBusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveEventBusRequest) */ {
 public:
  inline ObserveEventBusRequest() : ObserveEventBusRequest(nullptr) {}
  virtual ~ObserveEventBusRequest();

  ObserveEventBusRequest(const ObserveEventBusRequest& from);
  ObserveEventBusRequest(ObserveEventBusRequest&& from) noexcept
    : ObserveEventBusRequest() {
    *this = ::std::move(from);
  }

  inline ObserveEventBusRequest& operator=(const ObserveEventBusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveEventBusRequest& operator=(ObserveEventBusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveEventBusRequest& default_instance();

  static inline const ObserveEventBusRequest* internal_default_instance() {
    return reinterpret_cast<const ObserveEventBusRequest*>(
               &_ObserveEventBusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(ObserveEventBusRequest& a, ObserveEventBusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveEventBusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveEventBusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveEventBusRequest* New() const final {
    return CreateMaybeMessage<ObserveEventBusRequest>(nullptr);
  }

  ObserveEventBusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveEventBusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveEventBusRequest& from);
  void MergeFrom(const ObserveEventBusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveEventBusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveEventBusRequest";
  }
  protected:
  explicit ObserveEventBusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kPartyIdFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
  };
  // repeated .vega.events.v1.BusEventType type = 1 [json_name = "type"];
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::vega::events::v1::BusEventType _internal_type(int index) const;
  void _internal_add_type(::vega::events::v1::BusEventType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::vega::events::v1::BusEventType type(int index) const;
  void set_type(int index, ::vega::events::v1::BusEventType value);
  void add_type(::vega::events::v1::BusEventType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string party_id = 3 [json_name = "partyId"];
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // int64 batch_size = 4 [json_name = "batchSize"];
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int64 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.ObserveEventBusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 batch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveEventBusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ObserveEventBusResponse) */ {
 public:
  inline ObserveEventBusResponse() : ObserveEventBusResponse(nullptr) {}
  virtual ~ObserveEventBusResponse();

  ObserveEventBusResponse(const ObserveEventBusResponse& from);
  ObserveEventBusResponse(ObserveEventBusResponse&& from) noexcept
    : ObserveEventBusResponse() {
    *this = ::std::move(from);
  }

  inline ObserveEventBusResponse& operator=(const ObserveEventBusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveEventBusResponse& operator=(ObserveEventBusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveEventBusResponse& default_instance();

  static inline const ObserveEventBusResponse* internal_default_instance() {
    return reinterpret_cast<const ObserveEventBusResponse*>(
               &_ObserveEventBusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(ObserveEventBusResponse& a, ObserveEventBusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveEventBusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveEventBusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveEventBusResponse* New() const final {
    return CreateMaybeMessage<ObserveEventBusResponse>(nullptr);
  }

  ObserveEventBusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveEventBusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveEventBusResponse& from);
  void MergeFrom(const ObserveEventBusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveEventBusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ObserveEventBusResponse";
  }
  protected:
  explicit ObserveEventBusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .vega.events.v1.BusEvent events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::vega::events::v1::BusEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >*
      mutable_events();
  private:
  const ::vega::events::v1::BusEvent& _internal_events(int index) const;
  ::vega::events::v1::BusEvent* _internal_add_events();
  public:
  const ::vega::events::v1::BusEvent& events(int index) const;
  ::vega::events::v1::BusEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:api.v1.ObserveEventBusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class StatisticsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.StatisticsRequest) */ {
 public:
  inline StatisticsRequest() : StatisticsRequest(nullptr) {}
  virtual ~StatisticsRequest();

  StatisticsRequest(const StatisticsRequest& from);
  StatisticsRequest(StatisticsRequest&& from) noexcept
    : StatisticsRequest() {
    *this = ::std::move(from);
  }

  inline StatisticsRequest& operator=(const StatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsRequest& operator=(StatisticsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsRequest& default_instance();

  static inline const StatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const StatisticsRequest*>(
               &_StatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(StatisticsRequest& a, StatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsRequest* New() const final {
    return CreateMaybeMessage<StatisticsRequest>(nullptr);
  }

  StatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsRequest& from);
  void MergeFrom(const StatisticsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.StatisticsRequest";
  }
  protected:
  explicit StatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.StatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class StatisticsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.StatisticsResponse) */ {
 public:
  inline StatisticsResponse() : StatisticsResponse(nullptr) {}
  virtual ~StatisticsResponse();

  StatisticsResponse(const StatisticsResponse& from);
  StatisticsResponse(StatisticsResponse&& from) noexcept
    : StatisticsResponse() {
    *this = ::std::move(from);
  }

  inline StatisticsResponse& operator=(const StatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsResponse& operator=(StatisticsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsResponse& default_instance();

  static inline const StatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const StatisticsResponse*>(
               &_StatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(StatisticsResponse& a, StatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsResponse* New() const final {
    return CreateMaybeMessage<StatisticsResponse>(nullptr);
  }

  StatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsResponse& from);
  void MergeFrom(const StatisticsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.StatisticsResponse";
  }
  protected:
  explicit StatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 1,
  };
  // .vega.Statistics statistics = 1 [json_name = "statistics"];
  bool has_statistics() const;
  private:
  bool _internal_has_statistics() const;
  public:
  void clear_statistics();
  const ::vega::Statistics& statistics() const;
  ::vega::Statistics* release_statistics();
  ::vega::Statistics* mutable_statistics();
  void set_allocated_statistics(::vega::Statistics* statistics);
  private:
  const ::vega::Statistics& _internal_statistics() const;
  ::vega::Statistics* _internal_mutable_statistics();
  public:
  void unsafe_arena_set_allocated_statistics(
      ::vega::Statistics* statistics);
  ::vega::Statistics* unsafe_arena_release_statistics();

  // @@protoc_insertion_point(class_scope:api.v1.StatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Statistics* statistics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.WithdrawalsRequest) */ {
 public:
  inline WithdrawalsRequest() : WithdrawalsRequest(nullptr) {}
  virtual ~WithdrawalsRequest();

  WithdrawalsRequest(const WithdrawalsRequest& from);
  WithdrawalsRequest(WithdrawalsRequest&& from) noexcept
    : WithdrawalsRequest() {
    *this = ::std::move(from);
  }

  inline WithdrawalsRequest& operator=(const WithdrawalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalsRequest& operator=(WithdrawalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalsRequest& default_instance();

  static inline const WithdrawalsRequest* internal_default_instance() {
    return reinterpret_cast<const WithdrawalsRequest*>(
               &_WithdrawalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(WithdrawalsRequest& a, WithdrawalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalsRequest* New() const final {
    return CreateMaybeMessage<WithdrawalsRequest>(nullptr);
  }

  WithdrawalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalsRequest& from);
  void MergeFrom(const WithdrawalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.WithdrawalsRequest";
  }
  protected:
  explicit WithdrawalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.WithdrawalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.WithdrawalsResponse) */ {
 public:
  inline WithdrawalsResponse() : WithdrawalsResponse(nullptr) {}
  virtual ~WithdrawalsResponse();

  WithdrawalsResponse(const WithdrawalsResponse& from);
  WithdrawalsResponse(WithdrawalsResponse&& from) noexcept
    : WithdrawalsResponse() {
    *this = ::std::move(from);
  }

  inline WithdrawalsResponse& operator=(const WithdrawalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalsResponse& operator=(WithdrawalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalsResponse& default_instance();

  static inline const WithdrawalsResponse* internal_default_instance() {
    return reinterpret_cast<const WithdrawalsResponse*>(
               &_WithdrawalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(WithdrawalsResponse& a, WithdrawalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalsResponse* New() const final {
    return CreateMaybeMessage<WithdrawalsResponse>(nullptr);
  }

  WithdrawalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalsResponse& from);
  void MergeFrom(const WithdrawalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.WithdrawalsResponse";
  }
  protected:
  explicit WithdrawalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawalsFieldNumber = 1,
  };
  // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
  int withdrawals_size() const;
  private:
  int _internal_withdrawals_size() const;
  public:
  void clear_withdrawals();
  ::vega::Withdrawal* mutable_withdrawals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >*
      mutable_withdrawals();
  private:
  const ::vega::Withdrawal& _internal_withdrawals(int index) const;
  ::vega::Withdrawal* _internal_add_withdrawals();
  public:
  const ::vega::Withdrawal& withdrawals(int index) const;
  ::vega::Withdrawal* add_withdrawals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >&
      withdrawals() const;

  // @@protoc_insertion_point(class_scope:api.v1.WithdrawalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal > withdrawals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.WithdrawalRequest) */ {
 public:
  inline WithdrawalRequest() : WithdrawalRequest(nullptr) {}
  virtual ~WithdrawalRequest();

  WithdrawalRequest(const WithdrawalRequest& from);
  WithdrawalRequest(WithdrawalRequest&& from) noexcept
    : WithdrawalRequest() {
    *this = ::std::move(from);
  }

  inline WithdrawalRequest& operator=(const WithdrawalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalRequest& operator=(WithdrawalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalRequest& default_instance();

  static inline const WithdrawalRequest* internal_default_instance() {
    return reinterpret_cast<const WithdrawalRequest*>(
               &_WithdrawalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(WithdrawalRequest& a, WithdrawalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalRequest* New() const final {
    return CreateMaybeMessage<WithdrawalRequest>(nullptr);
  }

  WithdrawalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalRequest& from);
  void MergeFrom(const WithdrawalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.WithdrawalRequest";
  }
  protected:
  explicit WithdrawalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.WithdrawalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.WithdrawalResponse) */ {
 public:
  inline WithdrawalResponse() : WithdrawalResponse(nullptr) {}
  virtual ~WithdrawalResponse();

  WithdrawalResponse(const WithdrawalResponse& from);
  WithdrawalResponse(WithdrawalResponse&& from) noexcept
    : WithdrawalResponse() {
    *this = ::std::move(from);
  }

  inline WithdrawalResponse& operator=(const WithdrawalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalResponse& operator=(WithdrawalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalResponse& default_instance();

  static inline const WithdrawalResponse* internal_default_instance() {
    return reinterpret_cast<const WithdrawalResponse*>(
               &_WithdrawalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(WithdrawalResponse& a, WithdrawalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalResponse* New() const final {
    return CreateMaybeMessage<WithdrawalResponse>(nullptr);
  }

  WithdrawalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalResponse& from);
  void MergeFrom(const WithdrawalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.WithdrawalResponse";
  }
  protected:
  explicit WithdrawalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawalFieldNumber = 1,
  };
  // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
  bool has_withdrawal() const;
  private:
  bool _internal_has_withdrawal() const;
  public:
  void clear_withdrawal();
  const ::vega::Withdrawal& withdrawal() const;
  ::vega::Withdrawal* release_withdrawal();
  ::vega::Withdrawal* mutable_withdrawal();
  void set_allocated_withdrawal(::vega::Withdrawal* withdrawal);
  private:
  const ::vega::Withdrawal& _internal_withdrawal() const;
  ::vega::Withdrawal* _internal_mutable_withdrawal();
  public:
  void unsafe_arena_set_allocated_withdrawal(
      ::vega::Withdrawal* withdrawal);
  ::vega::Withdrawal* unsafe_arena_release_withdrawal();

  // @@protoc_insertion_point(class_scope:api.v1.WithdrawalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Withdrawal* withdrawal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ERC20WithdrawalApprovalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ERC20WithdrawalApprovalRequest) */ {
 public:
  inline ERC20WithdrawalApprovalRequest() : ERC20WithdrawalApprovalRequest(nullptr) {}
  virtual ~ERC20WithdrawalApprovalRequest();

  ERC20WithdrawalApprovalRequest(const ERC20WithdrawalApprovalRequest& from);
  ERC20WithdrawalApprovalRequest(ERC20WithdrawalApprovalRequest&& from) noexcept
    : ERC20WithdrawalApprovalRequest() {
    *this = ::std::move(from);
  }

  inline ERC20WithdrawalApprovalRequest& operator=(const ERC20WithdrawalApprovalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20WithdrawalApprovalRequest& operator=(ERC20WithdrawalApprovalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20WithdrawalApprovalRequest& default_instance();

  static inline const ERC20WithdrawalApprovalRequest* internal_default_instance() {
    return reinterpret_cast<const ERC20WithdrawalApprovalRequest*>(
               &_ERC20WithdrawalApprovalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(ERC20WithdrawalApprovalRequest& a, ERC20WithdrawalApprovalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20WithdrawalApprovalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20WithdrawalApprovalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20WithdrawalApprovalRequest* New() const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalRequest>(nullptr);
  }

  ERC20WithdrawalApprovalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20WithdrawalApprovalRequest& from);
  void MergeFrom(const ERC20WithdrawalApprovalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20WithdrawalApprovalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ERC20WithdrawalApprovalRequest";
  }
  protected:
  explicit ERC20WithdrawalApprovalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawalIdFieldNumber = 1,
  };
  // string withdrawal_id = 1 [json_name = "withdrawalId", (.validator.field) = {
  void clear_withdrawal_id();
  const std::string& withdrawal_id() const;
  void set_withdrawal_id(const std::string& value);
  void set_withdrawal_id(std::string&& value);
  void set_withdrawal_id(const char* value);
  void set_withdrawal_id(const char* value, size_t size);
  std::string* mutable_withdrawal_id();
  std::string* release_withdrawal_id();
  void set_allocated_withdrawal_id(std::string* withdrawal_id);
  private:
  const std::string& _internal_withdrawal_id() const;
  void _internal_set_withdrawal_id(const std::string& value);
  std::string* _internal_mutable_withdrawal_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.ERC20WithdrawalApprovalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withdrawal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ERC20WithdrawalApprovalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.ERC20WithdrawalApprovalResponse) */ {
 public:
  inline ERC20WithdrawalApprovalResponse() : ERC20WithdrawalApprovalResponse(nullptr) {}
  virtual ~ERC20WithdrawalApprovalResponse();

  ERC20WithdrawalApprovalResponse(const ERC20WithdrawalApprovalResponse& from);
  ERC20WithdrawalApprovalResponse(ERC20WithdrawalApprovalResponse&& from) noexcept
    : ERC20WithdrawalApprovalResponse() {
    *this = ::std::move(from);
  }

  inline ERC20WithdrawalApprovalResponse& operator=(const ERC20WithdrawalApprovalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20WithdrawalApprovalResponse& operator=(ERC20WithdrawalApprovalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20WithdrawalApprovalResponse& default_instance();

  static inline const ERC20WithdrawalApprovalResponse* internal_default_instance() {
    return reinterpret_cast<const ERC20WithdrawalApprovalResponse*>(
               &_ERC20WithdrawalApprovalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(ERC20WithdrawalApprovalResponse& a, ERC20WithdrawalApprovalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20WithdrawalApprovalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20WithdrawalApprovalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20WithdrawalApprovalResponse* New() const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalResponse>(nullptr);
  }

  ERC20WithdrawalApprovalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20WithdrawalApprovalResponse& from);
  void MergeFrom(const ERC20WithdrawalApprovalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20WithdrawalApprovalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.ERC20WithdrawalApprovalResponse";
  }
  protected:
  explicit ERC20WithdrawalApprovalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetSourceFieldNumber = 1,
    kAmountFieldNumber = 2,
    kNonceFieldNumber = 4,
    kSignaturesFieldNumber = 5,
    kExpiryFieldNumber = 3,
  };
  // string asset_source = 1 [json_name = "assetSource"];
  void clear_asset_source();
  const std::string& asset_source() const;
  void set_asset_source(const std::string& value);
  void set_asset_source(std::string&& value);
  void set_asset_source(const char* value);
  void set_asset_source(const char* value, size_t size);
  std::string* mutable_asset_source();
  std::string* release_asset_source();
  void set_allocated_asset_source(std::string* asset_source);
  private:
  const std::string& _internal_asset_source() const;
  void _internal_set_asset_source(const std::string& value);
  std::string* _internal_mutable_asset_source();
  public:

  // string amount = 2 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string nonce = 4 [json_name = "nonce"];
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // string signatures = 5 [json_name = "signatures"];
  void clear_signatures();
  const std::string& signatures() const;
  void set_signatures(const std::string& value);
  void set_signatures(std::string&& value);
  void set_signatures(const char* value);
  void set_signatures(const char* value, size_t size);
  std::string* mutable_signatures();
  std::string* release_signatures();
  void set_allocated_signatures(std::string* signatures);
  private:
  const std::string& _internal_signatures() const;
  void _internal_set_signatures(const std::string& value);
  std::string* _internal_mutable_signatures();
  public:

  // int64 expiry = 3 [json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.ERC20WithdrawalApprovalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signatures_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.DepositsRequest) */ {
 public:
  inline DepositsRequest() : DepositsRequest(nullptr) {}
  virtual ~DepositsRequest();

  DepositsRequest(const DepositsRequest& from);
  DepositsRequest(DepositsRequest&& from) noexcept
    : DepositsRequest() {
    *this = ::std::move(from);
  }

  inline DepositsRequest& operator=(const DepositsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositsRequest& operator=(DepositsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositsRequest& default_instance();

  static inline const DepositsRequest* internal_default_instance() {
    return reinterpret_cast<const DepositsRequest*>(
               &_DepositsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(DepositsRequest& a, DepositsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositsRequest* New() const final {
    return CreateMaybeMessage<DepositsRequest>(nullptr);
  }

  DepositsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositsRequest& from);
  void MergeFrom(const DepositsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.DepositsRequest";
  }
  protected:
  explicit DepositsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.DepositsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.DepositsResponse) */ {
 public:
  inline DepositsResponse() : DepositsResponse(nullptr) {}
  virtual ~DepositsResponse();

  DepositsResponse(const DepositsResponse& from);
  DepositsResponse(DepositsResponse&& from) noexcept
    : DepositsResponse() {
    *this = ::std::move(from);
  }

  inline DepositsResponse& operator=(const DepositsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositsResponse& operator=(DepositsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositsResponse& default_instance();

  static inline const DepositsResponse* internal_default_instance() {
    return reinterpret_cast<const DepositsResponse*>(
               &_DepositsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(DepositsResponse& a, DepositsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositsResponse* New() const final {
    return CreateMaybeMessage<DepositsResponse>(nullptr);
  }

  DepositsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositsResponse& from);
  void MergeFrom(const DepositsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.DepositsResponse";
  }
  protected:
  explicit DepositsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositsFieldNumber = 1,
  };
  // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
  int deposits_size() const;
  private:
  int _internal_deposits_size() const;
  public:
  void clear_deposits();
  ::vega::Deposit* mutable_deposits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >*
      mutable_deposits();
  private:
  const ::vega::Deposit& _internal_deposits(int index) const;
  ::vega::Deposit* _internal_add_deposits();
  public:
  const ::vega::Deposit& deposits(int index) const;
  ::vega::Deposit* add_deposits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >&
      deposits() const;

  // @@protoc_insertion_point(class_scope:api.v1.DepositsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit > deposits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.DepositRequest) */ {
 public:
  inline DepositRequest() : DepositRequest(nullptr) {}
  virtual ~DepositRequest();

  DepositRequest(const DepositRequest& from);
  DepositRequest(DepositRequest&& from) noexcept
    : DepositRequest() {
    *this = ::std::move(from);
  }

  inline DepositRequest& operator=(const DepositRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositRequest& operator=(DepositRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositRequest& default_instance();

  static inline const DepositRequest* internal_default_instance() {
    return reinterpret_cast<const DepositRequest*>(
               &_DepositRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(DepositRequest& a, DepositRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositRequest* New() const final {
    return CreateMaybeMessage<DepositRequest>(nullptr);
  }

  DepositRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositRequest& from);
  void MergeFrom(const DepositRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.DepositRequest";
  }
  protected:
  explicit DepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.DepositRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.DepositResponse) */ {
 public:
  inline DepositResponse() : DepositResponse(nullptr) {}
  virtual ~DepositResponse();

  DepositResponse(const DepositResponse& from);
  DepositResponse(DepositResponse&& from) noexcept
    : DepositResponse() {
    *this = ::std::move(from);
  }

  inline DepositResponse& operator=(const DepositResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositResponse& operator=(DepositResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositResponse& default_instance();

  static inline const DepositResponse* internal_default_instance() {
    return reinterpret_cast<const DepositResponse*>(
               &_DepositResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(DepositResponse& a, DepositResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositResponse* New() const final {
    return CreateMaybeMessage<DepositResponse>(nullptr);
  }

  DepositResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositResponse& from);
  void MergeFrom(const DepositResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.DepositResponse";
  }
  protected:
  explicit DepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositFieldNumber = 1,
  };
  // .vega.Deposit deposit = 1 [json_name = "deposit"];
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::vega::Deposit& deposit() const;
  ::vega::Deposit* release_deposit();
  ::vega::Deposit* mutable_deposit();
  void set_allocated_deposit(::vega::Deposit* deposit);
  private:
  const ::vega::Deposit& _internal_deposit() const;
  ::vega::Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::vega::Deposit* deposit);
  ::vega::Deposit* unsafe_arena_release_deposit();

  // @@protoc_insertion_point(class_scope:api.v1.DepositResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Deposit* deposit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class NetworkParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.NetworkParametersRequest) */ {
 public:
  inline NetworkParametersRequest() : NetworkParametersRequest(nullptr) {}
  virtual ~NetworkParametersRequest();

  NetworkParametersRequest(const NetworkParametersRequest& from);
  NetworkParametersRequest(NetworkParametersRequest&& from) noexcept
    : NetworkParametersRequest() {
    *this = ::std::move(from);
  }

  inline NetworkParametersRequest& operator=(const NetworkParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParametersRequest& operator=(NetworkParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParametersRequest& default_instance();

  static inline const NetworkParametersRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkParametersRequest*>(
               &_NetworkParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(NetworkParametersRequest& a, NetworkParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParametersRequest* New() const final {
    return CreateMaybeMessage<NetworkParametersRequest>(nullptr);
  }

  NetworkParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParametersRequest& from);
  void MergeFrom(const NetworkParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.NetworkParametersRequest";
  }
  protected:
  explicit NetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.NetworkParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class NetworkParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.NetworkParametersResponse) */ {
 public:
  inline NetworkParametersResponse() : NetworkParametersResponse(nullptr) {}
  virtual ~NetworkParametersResponse();

  NetworkParametersResponse(const NetworkParametersResponse& from);
  NetworkParametersResponse(NetworkParametersResponse&& from) noexcept
    : NetworkParametersResponse() {
    *this = ::std::move(from);
  }

  inline NetworkParametersResponse& operator=(const NetworkParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParametersResponse& operator=(NetworkParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParametersResponse& default_instance();

  static inline const NetworkParametersResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkParametersResponse*>(
               &_NetworkParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(NetworkParametersResponse& a, NetworkParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParametersResponse* New() const final {
    return CreateMaybeMessage<NetworkParametersResponse>(nullptr);
  }

  NetworkParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParametersResponse& from);
  void MergeFrom(const NetworkParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.NetworkParametersResponse";
  }
  protected:
  explicit NetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkParametersFieldNumber = 1,
  };
  // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
  int network_parameters_size() const;
  private:
  int _internal_network_parameters_size() const;
  public:
  void clear_network_parameters();
  ::vega::NetworkParameter* mutable_network_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
      mutable_network_parameters();
  private:
  const ::vega::NetworkParameter& _internal_network_parameters(int index) const;
  ::vega::NetworkParameter* _internal_add_network_parameters();
  public:
  const ::vega::NetworkParameter& network_parameters(int index) const;
  ::vega::NetworkParameter* add_network_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
      network_parameters() const;

  // @@protoc_insertion_point(class_scope:api.v1.NetworkParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter > network_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvisionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LiquidityProvisionsRequest) */ {
 public:
  inline LiquidityProvisionsRequest() : LiquidityProvisionsRequest(nullptr) {}
  virtual ~LiquidityProvisionsRequest();

  LiquidityProvisionsRequest(const LiquidityProvisionsRequest& from);
  LiquidityProvisionsRequest(LiquidityProvisionsRequest&& from) noexcept
    : LiquidityProvisionsRequest() {
    *this = ::std::move(from);
  }

  inline LiquidityProvisionsRequest& operator=(const LiquidityProvisionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvisionsRequest& operator=(LiquidityProvisionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvisionsRequest& default_instance();

  static inline const LiquidityProvisionsRequest* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvisionsRequest*>(
               &_LiquidityProvisionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(LiquidityProvisionsRequest& a, LiquidityProvisionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvisionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvisionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvisionsRequest* New() const final {
    return CreateMaybeMessage<LiquidityProvisionsRequest>(nullptr);
  }

  LiquidityProvisionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvisionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvisionsRequest& from);
  void MergeFrom(const LiquidityProvisionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvisionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LiquidityProvisionsRequest";
  }
  protected:
  explicit LiquidityProvisionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kPartyFieldNumber = 2,
  };
  // string market = 1 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string party = 2 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.LiquidityProvisionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvisionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LiquidityProvisionsResponse) */ {
 public:
  inline LiquidityProvisionsResponse() : LiquidityProvisionsResponse(nullptr) {}
  virtual ~LiquidityProvisionsResponse();

  LiquidityProvisionsResponse(const LiquidityProvisionsResponse& from);
  LiquidityProvisionsResponse(LiquidityProvisionsResponse&& from) noexcept
    : LiquidityProvisionsResponse() {
    *this = ::std::move(from);
  }

  inline LiquidityProvisionsResponse& operator=(const LiquidityProvisionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvisionsResponse& operator=(LiquidityProvisionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvisionsResponse& default_instance();

  static inline const LiquidityProvisionsResponse* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvisionsResponse*>(
               &_LiquidityProvisionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(LiquidityProvisionsResponse& a, LiquidityProvisionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvisionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvisionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvisionsResponse* New() const final {
    return CreateMaybeMessage<LiquidityProvisionsResponse>(nullptr);
  }

  LiquidityProvisionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvisionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvisionsResponse& from);
  void MergeFrom(const LiquidityProvisionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvisionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LiquidityProvisionsResponse";
  }
  protected:
  explicit LiquidityProvisionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiquidityProvisionsFieldNumber = 1,
  };
  // repeated .vega.LiquidityProvision liquidity_provisions = 1 [json_name = "liquidityProvisions"];
  int liquidity_provisions_size() const;
  private:
  int _internal_liquidity_provisions_size() const;
  public:
  void clear_liquidity_provisions();
  ::vega::LiquidityProvision* mutable_liquidity_provisions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >*
      mutable_liquidity_provisions();
  private:
  const ::vega::LiquidityProvision& _internal_liquidity_provisions(int index) const;
  ::vega::LiquidityProvision* _internal_add_liquidity_provisions();
  public:
  const ::vega::LiquidityProvision& liquidity_provisions(int index) const;
  ::vega::LiquidityProvision* add_liquidity_provisions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >&
      liquidity_provisions() const;

  // @@protoc_insertion_point(class_scope:api.v1.LiquidityProvisionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision > liquidity_provisions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OracleSpecRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OracleSpecRequest) */ {
 public:
  inline OracleSpecRequest() : OracleSpecRequest(nullptr) {}
  virtual ~OracleSpecRequest();

  OracleSpecRequest(const OracleSpecRequest& from);
  OracleSpecRequest(OracleSpecRequest&& from) noexcept
    : OracleSpecRequest() {
    *this = ::std::move(from);
  }

  inline OracleSpecRequest& operator=(const OracleSpecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleSpecRequest& operator=(OracleSpecRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleSpecRequest& default_instance();

  static inline const OracleSpecRequest* internal_default_instance() {
    return reinterpret_cast<const OracleSpecRequest*>(
               &_OracleSpecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(OracleSpecRequest& a, OracleSpecRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleSpecRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleSpecRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleSpecRequest* New() const final {
    return CreateMaybeMessage<OracleSpecRequest>(nullptr);
  }

  OracleSpecRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleSpecRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleSpecRequest& from);
  void MergeFrom(const OracleSpecRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleSpecRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OracleSpecRequest";
  }
  protected:
  explicit OracleSpecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.OracleSpecRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OracleSpecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OracleSpecResponse) */ {
 public:
  inline OracleSpecResponse() : OracleSpecResponse(nullptr) {}
  virtual ~OracleSpecResponse();

  OracleSpecResponse(const OracleSpecResponse& from);
  OracleSpecResponse(OracleSpecResponse&& from) noexcept
    : OracleSpecResponse() {
    *this = ::std::move(from);
  }

  inline OracleSpecResponse& operator=(const OracleSpecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleSpecResponse& operator=(OracleSpecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleSpecResponse& default_instance();

  static inline const OracleSpecResponse* internal_default_instance() {
    return reinterpret_cast<const OracleSpecResponse*>(
               &_OracleSpecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(OracleSpecResponse& a, OracleSpecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleSpecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleSpecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleSpecResponse* New() const final {
    return CreateMaybeMessage<OracleSpecResponse>(nullptr);
  }

  OracleSpecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleSpecResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleSpecResponse& from);
  void MergeFrom(const OracleSpecResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleSpecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OracleSpecResponse";
  }
  protected:
  explicit OracleSpecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOracleSpecFieldNumber = 1,
  };
  // .oracles.v1.OracleSpec oracle_spec = 1 [json_name = "oracleSpec"];
  bool has_oracle_spec() const;
  private:
  bool _internal_has_oracle_spec() const;
  public:
  void clear_oracle_spec();
  const ::oracles::v1::OracleSpec& oracle_spec() const;
  ::oracles::v1::OracleSpec* release_oracle_spec();
  ::oracles::v1::OracleSpec* mutable_oracle_spec();
  void set_allocated_oracle_spec(::oracles::v1::OracleSpec* oracle_spec);
  private:
  const ::oracles::v1::OracleSpec& _internal_oracle_spec() const;
  ::oracles::v1::OracleSpec* _internal_mutable_oracle_spec();
  public:
  void unsafe_arena_set_allocated_oracle_spec(
      ::oracles::v1::OracleSpec* oracle_spec);
  ::oracles::v1::OracleSpec* unsafe_arena_release_oracle_spec();

  // @@protoc_insertion_point(class_scope:api.v1.OracleSpecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::oracles::v1::OracleSpec* oracle_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OracleSpecsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OracleSpecsRequest) */ {
 public:
  inline OracleSpecsRequest() : OracleSpecsRequest(nullptr) {}
  virtual ~OracleSpecsRequest();

  OracleSpecsRequest(const OracleSpecsRequest& from);
  OracleSpecsRequest(OracleSpecsRequest&& from) noexcept
    : OracleSpecsRequest() {
    *this = ::std::move(from);
  }

  inline OracleSpecsRequest& operator=(const OracleSpecsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleSpecsRequest& operator=(OracleSpecsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleSpecsRequest& default_instance();

  static inline const OracleSpecsRequest* internal_default_instance() {
    return reinterpret_cast<const OracleSpecsRequest*>(
               &_OracleSpecsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(OracleSpecsRequest& a, OracleSpecsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleSpecsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleSpecsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleSpecsRequest* New() const final {
    return CreateMaybeMessage<OracleSpecsRequest>(nullptr);
  }

  OracleSpecsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleSpecsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleSpecsRequest& from);
  void MergeFrom(const OracleSpecsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleSpecsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OracleSpecsRequest";
  }
  protected:
  explicit OracleSpecsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.OracleSpecsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OracleSpecsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OracleSpecsResponse) */ {
 public:
  inline OracleSpecsResponse() : OracleSpecsResponse(nullptr) {}
  virtual ~OracleSpecsResponse();

  OracleSpecsResponse(const OracleSpecsResponse& from);
  OracleSpecsResponse(OracleSpecsResponse&& from) noexcept
    : OracleSpecsResponse() {
    *this = ::std::move(from);
  }

  inline OracleSpecsResponse& operator=(const OracleSpecsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleSpecsResponse& operator=(OracleSpecsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleSpecsResponse& default_instance();

  static inline const OracleSpecsResponse* internal_default_instance() {
    return reinterpret_cast<const OracleSpecsResponse*>(
               &_OracleSpecsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(OracleSpecsResponse& a, OracleSpecsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleSpecsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleSpecsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleSpecsResponse* New() const final {
    return CreateMaybeMessage<OracleSpecsResponse>(nullptr);
  }

  OracleSpecsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleSpecsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleSpecsResponse& from);
  void MergeFrom(const OracleSpecsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleSpecsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OracleSpecsResponse";
  }
  protected:
  explicit OracleSpecsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOracleSpecsFieldNumber = 1,
  };
  // repeated .oracles.v1.OracleSpec oracle_specs = 1 [json_name = "oracleSpecs"];
  int oracle_specs_size() const;
  private:
  int _internal_oracle_specs_size() const;
  public:
  void clear_oracle_specs();
  ::oracles::v1::OracleSpec* mutable_oracle_specs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleSpec >*
      mutable_oracle_specs();
  private:
  const ::oracles::v1::OracleSpec& _internal_oracle_specs(int index) const;
  ::oracles::v1::OracleSpec* _internal_add_oracle_specs();
  public:
  const ::oracles::v1::OracleSpec& oracle_specs(int index) const;
  ::oracles::v1::OracleSpec* add_oracle_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleSpec >&
      oracle_specs() const;

  // @@protoc_insertion_point(class_scope:api.v1.OracleSpecsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleSpec > oracle_specs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OracleDataBySpecRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OracleDataBySpecRequest) */ {
 public:
  inline OracleDataBySpecRequest() : OracleDataBySpecRequest(nullptr) {}
  virtual ~OracleDataBySpecRequest();

  OracleDataBySpecRequest(const OracleDataBySpecRequest& from);
  OracleDataBySpecRequest(OracleDataBySpecRequest&& from) noexcept
    : OracleDataBySpecRequest() {
    *this = ::std::move(from);
  }

  inline OracleDataBySpecRequest& operator=(const OracleDataBySpecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleDataBySpecRequest& operator=(OracleDataBySpecRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleDataBySpecRequest& default_instance();

  static inline const OracleDataBySpecRequest* internal_default_instance() {
    return reinterpret_cast<const OracleDataBySpecRequest*>(
               &_OracleDataBySpecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(OracleDataBySpecRequest& a, OracleDataBySpecRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleDataBySpecRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleDataBySpecRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleDataBySpecRequest* New() const final {
    return CreateMaybeMessage<OracleDataBySpecRequest>(nullptr);
  }

  OracleDataBySpecRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleDataBySpecRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleDataBySpecRequest& from);
  void MergeFrom(const OracleDataBySpecRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleDataBySpecRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OracleDataBySpecRequest";
  }
  protected:
  explicit OracleDataBySpecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.v1.OracleDataBySpecRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OracleDataBySpecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.OracleDataBySpecResponse) */ {
 public:
  inline OracleDataBySpecResponse() : OracleDataBySpecResponse(nullptr) {}
  virtual ~OracleDataBySpecResponse();

  OracleDataBySpecResponse(const OracleDataBySpecResponse& from);
  OracleDataBySpecResponse(OracleDataBySpecResponse&& from) noexcept
    : OracleDataBySpecResponse() {
    *this = ::std::move(from);
  }

  inline OracleDataBySpecResponse& operator=(const OracleDataBySpecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleDataBySpecResponse& operator=(OracleDataBySpecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleDataBySpecResponse& default_instance();

  static inline const OracleDataBySpecResponse* internal_default_instance() {
    return reinterpret_cast<const OracleDataBySpecResponse*>(
               &_OracleDataBySpecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(OracleDataBySpecResponse& a, OracleDataBySpecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleDataBySpecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleDataBySpecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleDataBySpecResponse* New() const final {
    return CreateMaybeMessage<OracleDataBySpecResponse>(nullptr);
  }

  OracleDataBySpecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleDataBySpecResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleDataBySpecResponse& from);
  void MergeFrom(const OracleDataBySpecResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleDataBySpecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.OracleDataBySpecResponse";
  }
  protected:
  explicit OracleDataBySpecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOracleDataFieldNumber = 1,
  };
  // repeated .oracles.v1.OracleData oracle_data = 1 [json_name = "oracleData"];
  int oracle_data_size() const;
  private:
  int _internal_oracle_data_size() const;
  public:
  void clear_oracle_data();
  ::oracles::v1::OracleData* mutable_oracle_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleData >*
      mutable_oracle_data();
  private:
  const ::oracles::v1::OracleData& _internal_oracle_data(int index) const;
  ::oracles::v1::OracleData* _internal_add_oracle_data();
  public:
  const ::oracles::v1::OracleData& oracle_data(int index) const;
  ::oracles::v1::OracleData* add_oracle_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleData >&
      oracle_data() const;

  // @@protoc_insertion_point(class_scope:api.v1.OracleDataBySpecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleData > oracle_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastBlockHeightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LastBlockHeightRequest) */ {
 public:
  inline LastBlockHeightRequest() : LastBlockHeightRequest(nullptr) {}
  virtual ~LastBlockHeightRequest();

  LastBlockHeightRequest(const LastBlockHeightRequest& from);
  LastBlockHeightRequest(LastBlockHeightRequest&& from) noexcept
    : LastBlockHeightRequest() {
    *this = ::std::move(from);
  }

  inline LastBlockHeightRequest& operator=(const LastBlockHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastBlockHeightRequest& operator=(LastBlockHeightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastBlockHeightRequest& default_instance();

  static inline const LastBlockHeightRequest* internal_default_instance() {
    return reinterpret_cast<const LastBlockHeightRequest*>(
               &_LastBlockHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(LastBlockHeightRequest& a, LastBlockHeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LastBlockHeightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastBlockHeightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastBlockHeightRequest* New() const final {
    return CreateMaybeMessage<LastBlockHeightRequest>(nullptr);
  }

  LastBlockHeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastBlockHeightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastBlockHeightRequest& from);
  void MergeFrom(const LastBlockHeightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastBlockHeightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LastBlockHeightRequest";
  }
  protected:
  explicit LastBlockHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.v1.LastBlockHeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastBlockHeightResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.LastBlockHeightResponse) */ {
 public:
  inline LastBlockHeightResponse() : LastBlockHeightResponse(nullptr) {}
  virtual ~LastBlockHeightResponse();

  LastBlockHeightResponse(const LastBlockHeightResponse& from);
  LastBlockHeightResponse(LastBlockHeightResponse&& from) noexcept
    : LastBlockHeightResponse() {
    *this = ::std::move(from);
  }

  inline LastBlockHeightResponse& operator=(const LastBlockHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastBlockHeightResponse& operator=(LastBlockHeightResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastBlockHeightResponse& default_instance();

  static inline const LastBlockHeightResponse* internal_default_instance() {
    return reinterpret_cast<const LastBlockHeightResponse*>(
               &_LastBlockHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(LastBlockHeightResponse& a, LastBlockHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LastBlockHeightResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastBlockHeightResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastBlockHeightResponse* New() const final {
    return CreateMaybeMessage<LastBlockHeightResponse>(nullptr);
  }

  LastBlockHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastBlockHeightResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastBlockHeightResponse& from);
  void MergeFrom(const LastBlockHeightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastBlockHeightResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.LastBlockHeightResponse";
  }
  protected:
  explicit LastBlockHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.LastBlockHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PropagateChainEventRequest

// .vega.commands.v1.ChainEvent evt = 1 [json_name = "evt"];
inline bool PropagateChainEventRequest::_internal_has_evt() const {
  return this != internal_default_instance() && evt_ != nullptr;
}
inline bool PropagateChainEventRequest::has_evt() const {
  return _internal_has_evt();
}
inline const ::vega::commands::v1::ChainEvent& PropagateChainEventRequest::_internal_evt() const {
  const ::vega::commands::v1::ChainEvent* p = evt_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::ChainEvent&>(
      ::vega::commands::v1::_ChainEvent_default_instance_);
}
inline const ::vega::commands::v1::ChainEvent& PropagateChainEventRequest::evt() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventRequest.evt)
  return _internal_evt();
}
inline void PropagateChainEventRequest::unsafe_arena_set_allocated_evt(
    ::vega::commands::v1::ChainEvent* evt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evt_);
  }
  evt_ = evt;
  if (evt) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PropagateChainEventRequest.evt)
}
inline ::vega::commands::v1::ChainEvent* PropagateChainEventRequest::release_evt() {

  ::vega::commands::v1::ChainEvent* temp = evt_;
  evt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::ChainEvent* PropagateChainEventRequest::unsafe_arena_release_evt() {
  // @@protoc_insertion_point(field_release:api.v1.PropagateChainEventRequest.evt)

  ::vega::commands::v1::ChainEvent* temp = evt_;
  evt_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::ChainEvent* PropagateChainEventRequest::_internal_mutable_evt() {

  if (evt_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::ChainEvent>(GetArena());
    evt_ = p;
  }
  return evt_;
}
inline ::vega::commands::v1::ChainEvent* PropagateChainEventRequest::mutable_evt() {
  // @@protoc_insertion_point(field_mutable:api.v1.PropagateChainEventRequest.evt)
  return _internal_mutable_evt();
}
inline void PropagateChainEventRequest::set_allocated_evt(::vega::commands::v1::ChainEvent* evt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(evt_);
  }
  if (evt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evt)->GetArena();
    if (message_arena != submessage_arena) {
      evt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evt, submessage_arena);
    }

  } else {

  }
  evt_ = evt;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PropagateChainEventRequest.evt)
}

// string pub_key = 2 [json_name = "pubKey"];
inline void PropagateChainEventRequest::clear_pub_key() {
  pub_key_.ClearToEmpty();
}
inline const std::string& PropagateChainEventRequest::pub_key() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventRequest.pub_key)
  return _internal_pub_key();
}
inline void PropagateChainEventRequest::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:api.v1.PropagateChainEventRequest.pub_key)
}
inline std::string* PropagateChainEventRequest::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:api.v1.PropagateChainEventRequest.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& PropagateChainEventRequest::_internal_pub_key() const {
  return pub_key_.Get();
}
inline void PropagateChainEventRequest::_internal_set_pub_key(const std::string& value) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropagateChainEventRequest::set_pub_key(std::string&& value) {

  pub_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PropagateChainEventRequest.pub_key)
}
inline void PropagateChainEventRequest::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PropagateChainEventRequest.pub_key)
}
inline void PropagateChainEventRequest::set_pub_key(const char* value,
    size_t size) {

  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PropagateChainEventRequest.pub_key)
}
inline std::string* PropagateChainEventRequest::_internal_mutable_pub_key() {

  return pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropagateChainEventRequest::release_pub_key() {
  // @@protoc_insertion_point(field_release:api.v1.PropagateChainEventRequest.pub_key)
  return pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropagateChainEventRequest::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {

  } else {

  }
  pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PropagateChainEventRequest.pub_key)
}

// bytes signature = 3 [json_name = "signature"];
inline void PropagateChainEventRequest::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& PropagateChainEventRequest::signature() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventRequest.signature)
  return _internal_signature();
}
inline void PropagateChainEventRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:api.v1.PropagateChainEventRequest.signature)
}
inline std::string* PropagateChainEventRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:api.v1.PropagateChainEventRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& PropagateChainEventRequest::_internal_signature() const {
  return signature_.Get();
}
inline void PropagateChainEventRequest::_internal_set_signature(const std::string& value) {

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropagateChainEventRequest::set_signature(std::string&& value) {

  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PropagateChainEventRequest.signature)
}
inline void PropagateChainEventRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PropagateChainEventRequest.signature)
}
inline void PropagateChainEventRequest::set_signature(const void* value,
    size_t size) {

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PropagateChainEventRequest.signature)
}
inline std::string* PropagateChainEventRequest::_internal_mutable_signature() {

  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropagateChainEventRequest::release_signature() {
  // @@protoc_insertion_point(field_release:api.v1.PropagateChainEventRequest.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropagateChainEventRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {

  } else {

  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PropagateChainEventRequest.signature)
}

// -------------------------------------------------------------------

// PropagateChainEventResponse

// bool success = 1 [json_name = "success"];
inline void PropagateChainEventResponse::clear_success() {
  success_ = false;
}
inline bool PropagateChainEventResponse::_internal_success() const {
  return success_;
}
inline bool PropagateChainEventResponse::success() const {
  // @@protoc_insertion_point(field_get:api.v1.PropagateChainEventResponse.success)
  return _internal_success();
}
inline void PropagateChainEventResponse::_internal_set_success(bool value) {

  success_ = value;
}
inline void PropagateChainEventResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:api.v1.PropagateChainEventResponse.success)
}

// -------------------------------------------------------------------

// SubmitTransactionRequest

// .vega.SignedBundle tx = 1 [json_name = "tx"];
inline bool SubmitTransactionRequest::_internal_has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline bool SubmitTransactionRequest::has_tx() const {
  return _internal_has_tx();
}
inline const ::vega::SignedBundle& SubmitTransactionRequest::_internal_tx() const {
  const ::vega::SignedBundle* p = tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::SignedBundle&>(
      ::vega::_SignedBundle_default_instance_);
}
inline const ::vega::SignedBundle& SubmitTransactionRequest::tx() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionRequest.tx)
  return _internal_tx();
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_tx(
    ::vega::SignedBundle* tx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  tx_ = tx;
  if (tx) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.SubmitTransactionRequest.tx)
}
inline ::vega::SignedBundle* SubmitTransactionRequest::release_tx() {

  ::vega::SignedBundle* temp = tx_;
  tx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::SignedBundle* SubmitTransactionRequest::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:api.v1.SubmitTransactionRequest.tx)

  ::vega::SignedBundle* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::vega::SignedBundle* SubmitTransactionRequest::_internal_mutable_tx() {

  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::SignedBundle>(GetArena());
    tx_ = p;
  }
  return tx_;
}
inline ::vega::SignedBundle* SubmitTransactionRequest::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:api.v1.SubmitTransactionRequest.tx)
  return _internal_mutable_tx();
}
inline void SubmitTransactionRequest::set_allocated_tx(::vega::SignedBundle* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx)->GetArena();
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }

  } else {

  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:api.v1.SubmitTransactionRequest.tx)
}

// .api.v1.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
inline void SubmitTransactionRequest::clear_type() {
  type_ = 0;
}
inline ::api::v1::SubmitTransactionRequest_Type SubmitTransactionRequest::_internal_type() const {
  return static_cast< ::api::v1::SubmitTransactionRequest_Type >(type_);
}
inline ::api::v1::SubmitTransactionRequest_Type SubmitTransactionRequest::type() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionRequest.type)
  return _internal_type();
}
inline void SubmitTransactionRequest::_internal_set_type(::api::v1::SubmitTransactionRequest_Type value) {

  type_ = value;
}
inline void SubmitTransactionRequest::set_type(::api::v1::SubmitTransactionRequest_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.v1.SubmitTransactionRequest.type)
}

// -------------------------------------------------------------------

// SubmitTransactionResponse

// bool success = 1 [json_name = "success"];
inline void SubmitTransactionResponse::clear_success() {
  success_ = false;
}
inline bool SubmitTransactionResponse::_internal_success() const {
  return success_;
}
inline bool SubmitTransactionResponse::success() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionResponse.success)
  return _internal_success();
}
inline void SubmitTransactionResponse::_internal_set_success(bool value) {

  success_ = value;
}
inline void SubmitTransactionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:api.v1.SubmitTransactionResponse.success)
}

// -------------------------------------------------------------------

// SubmitTransactionV2Request

// .vega.commands.v1.Transaction tx = 1 [json_name = "tx"];
inline bool SubmitTransactionV2Request::_internal_has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline bool SubmitTransactionV2Request::has_tx() const {
  return _internal_has_tx();
}
inline const ::vega::commands::v1::Transaction& SubmitTransactionV2Request::_internal_tx() const {
  const ::vega::commands::v1::Transaction* p = tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::Transaction&>(
      ::vega::commands::v1::_Transaction_default_instance_);
}
inline const ::vega::commands::v1::Transaction& SubmitTransactionV2Request::tx() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionV2Request.tx)
  return _internal_tx();
}
inline void SubmitTransactionV2Request::unsafe_arena_set_allocated_tx(
    ::vega::commands::v1::Transaction* tx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  tx_ = tx;
  if (tx) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.SubmitTransactionV2Request.tx)
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::release_tx() {

  ::vega::commands::v1::Transaction* temp = tx_;
  tx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:api.v1.SubmitTransactionV2Request.tx)

  ::vega::commands::v1::Transaction* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::_internal_mutable_tx() {

  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::Transaction>(GetArena());
    tx_ = p;
  }
  return tx_;
}
inline ::vega::commands::v1::Transaction* SubmitTransactionV2Request::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:api.v1.SubmitTransactionV2Request.tx)
  return _internal_mutable_tx();
}
inline void SubmitTransactionV2Request::set_allocated_tx(::vega::commands::v1::Transaction* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx)->GetArena();
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }

  } else {

  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:api.v1.SubmitTransactionV2Request.tx)
}

// .api.v1.SubmitTransactionV2Request.Type type = 2 [json_name = "type"];
inline void SubmitTransactionV2Request::clear_type() {
  type_ = 0;
}
inline ::api::v1::SubmitTransactionV2Request_Type SubmitTransactionV2Request::_internal_type() const {
  return static_cast< ::api::v1::SubmitTransactionV2Request_Type >(type_);
}
inline ::api::v1::SubmitTransactionV2Request_Type SubmitTransactionV2Request::type() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionV2Request.type)
  return _internal_type();
}
inline void SubmitTransactionV2Request::_internal_set_type(::api::v1::SubmitTransactionV2Request_Type value) {

  type_ = value;
}
inline void SubmitTransactionV2Request::set_type(::api::v1::SubmitTransactionV2Request_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.v1.SubmitTransactionV2Request.type)
}

// -------------------------------------------------------------------

// SubmitTransactionV2Response

// bool success = 1 [json_name = "success"];
inline void SubmitTransactionV2Response::clear_success() {
  success_ = false;
}
inline bool SubmitTransactionV2Response::_internal_success() const {
  return success_;
}
inline bool SubmitTransactionV2Response::success() const {
  // @@protoc_insertion_point(field_get:api.v1.SubmitTransactionV2Response.success)
  return _internal_success();
}
inline void SubmitTransactionV2Response::_internal_set_success(bool value) {

  success_ = value;
}
inline void SubmitTransactionV2Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:api.v1.SubmitTransactionV2Response.success)
}

// -------------------------------------------------------------------

// PrepareWithdrawRequest

// .vega.commands.v1.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
inline bool PrepareWithdrawRequest::_internal_has_withdraw() const {
  return this != internal_default_instance() && withdraw_ != nullptr;
}
inline bool PrepareWithdrawRequest::has_withdraw() const {
  return _internal_has_withdraw();
}
inline const ::vega::commands::v1::WithdrawSubmission& PrepareWithdrawRequest::_internal_withdraw() const {
  const ::vega::commands::v1::WithdrawSubmission* p = withdraw_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::WithdrawSubmission&>(
      ::vega::commands::v1::_WithdrawSubmission_default_instance_);
}
inline const ::vega::commands::v1::WithdrawSubmission& PrepareWithdrawRequest::withdraw() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareWithdrawRequest.withdraw)
  return _internal_withdraw();
}
inline void PrepareWithdrawRequest::unsafe_arena_set_allocated_withdraw(
    ::vega::commands::v1::WithdrawSubmission* withdraw) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw_);
  }
  withdraw_ = withdraw;
  if (withdraw) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareWithdrawRequest.withdraw)
}
inline ::vega::commands::v1::WithdrawSubmission* PrepareWithdrawRequest::release_withdraw() {

  ::vega::commands::v1::WithdrawSubmission* temp = withdraw_;
  withdraw_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::WithdrawSubmission* PrepareWithdrawRequest::unsafe_arena_release_withdraw() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareWithdrawRequest.withdraw)

  ::vega::commands::v1::WithdrawSubmission* temp = withdraw_;
  withdraw_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::WithdrawSubmission* PrepareWithdrawRequest::_internal_mutable_withdraw() {

  if (withdraw_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::WithdrawSubmission>(GetArena());
    withdraw_ = p;
  }
  return withdraw_;
}
inline ::vega::commands::v1::WithdrawSubmission* PrepareWithdrawRequest::mutable_withdraw() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareWithdrawRequest.withdraw)
  return _internal_mutable_withdraw();
}
inline void PrepareWithdrawRequest::set_allocated_withdraw(::vega::commands::v1::WithdrawSubmission* withdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw_);
  }
  if (withdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw)->GetArena();
    if (message_arena != submessage_arena) {
      withdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw, submessage_arena);
    }

  } else {

  }
  withdraw_ = withdraw;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareWithdrawRequest.withdraw)
}

// -------------------------------------------------------------------

// PrepareWithdrawResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareWithdrawResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareWithdrawResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareWithdrawResponse.blob)
  return _internal_blob();
}
inline void PrepareWithdrawResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareWithdrawResponse.blob)
}
inline std::string* PrepareWithdrawResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareWithdrawResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareWithdrawResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareWithdrawResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareWithdrawResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareWithdrawResponse.blob)
}
inline void PrepareWithdrawResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareWithdrawResponse.blob)
}
inline void PrepareWithdrawResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareWithdrawResponse.blob)
}
inline std::string* PrepareWithdrawResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareWithdrawResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareWithdrawResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareWithdrawResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareWithdrawResponse.blob)
}

// -------------------------------------------------------------------

// PrepareSubmitOrderResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareSubmitOrderResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareSubmitOrderResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareSubmitOrderResponse.blob)
  return _internal_blob();
}
inline void PrepareSubmitOrderResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareSubmitOrderResponse.blob)
}
inline std::string* PrepareSubmitOrderResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareSubmitOrderResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareSubmitOrderResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareSubmitOrderResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareSubmitOrderResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareSubmitOrderResponse.blob)
}
inline void PrepareSubmitOrderResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareSubmitOrderResponse.blob)
}
inline void PrepareSubmitOrderResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareSubmitOrderResponse.blob)
}
inline std::string* PrepareSubmitOrderResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareSubmitOrderResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareSubmitOrderResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareSubmitOrderResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareSubmitOrderResponse.blob)
}

// string submit_id = 2 [json_name = "submitId"];
inline void PrepareSubmitOrderResponse::clear_submit_id() {
  submit_id_.ClearToEmpty();
}
inline const std::string& PrepareSubmitOrderResponse::submit_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareSubmitOrderResponse.submit_id)
  return _internal_submit_id();
}
inline void PrepareSubmitOrderResponse::set_submit_id(const std::string& value) {
  _internal_set_submit_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareSubmitOrderResponse.submit_id)
}
inline std::string* PrepareSubmitOrderResponse::mutable_submit_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareSubmitOrderResponse.submit_id)
  return _internal_mutable_submit_id();
}
inline const std::string& PrepareSubmitOrderResponse::_internal_submit_id() const {
  return submit_id_.Get();
}
inline void PrepareSubmitOrderResponse::_internal_set_submit_id(const std::string& value) {

  submit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareSubmitOrderResponse::set_submit_id(std::string&& value) {

  submit_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareSubmitOrderResponse.submit_id)
}
inline void PrepareSubmitOrderResponse::set_submit_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  submit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareSubmitOrderResponse.submit_id)
}
inline void PrepareSubmitOrderResponse::set_submit_id(const char* value,
    size_t size) {

  submit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareSubmitOrderResponse.submit_id)
}
inline std::string* PrepareSubmitOrderResponse::_internal_mutable_submit_id() {

  return submit_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareSubmitOrderResponse::release_submit_id() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareSubmitOrderResponse.submit_id)
  return submit_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareSubmitOrderResponse::set_allocated_submit_id(std::string* submit_id) {
  if (submit_id != nullptr) {

  } else {

  }
  submit_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submit_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareSubmitOrderResponse.submit_id)
}

// -------------------------------------------------------------------

// PrepareCancelOrderResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareCancelOrderResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareCancelOrderResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareCancelOrderResponse.blob)
  return _internal_blob();
}
inline void PrepareCancelOrderResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareCancelOrderResponse.blob)
}
inline std::string* PrepareCancelOrderResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareCancelOrderResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareCancelOrderResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareCancelOrderResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareCancelOrderResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareCancelOrderResponse.blob)
}
inline void PrepareCancelOrderResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareCancelOrderResponse.blob)
}
inline void PrepareCancelOrderResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareCancelOrderResponse.blob)
}
inline std::string* PrepareCancelOrderResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareCancelOrderResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareCancelOrderResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareCancelOrderResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareCancelOrderResponse.blob)
}

// -------------------------------------------------------------------

// PrepareAmendOrderResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareAmendOrderResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareAmendOrderResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareAmendOrderResponse.blob)
  return _internal_blob();
}
inline void PrepareAmendOrderResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareAmendOrderResponse.blob)
}
inline std::string* PrepareAmendOrderResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareAmendOrderResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareAmendOrderResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareAmendOrderResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareAmendOrderResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareAmendOrderResponse.blob)
}
inline void PrepareAmendOrderResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareAmendOrderResponse.blob)
}
inline void PrepareAmendOrderResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareAmendOrderResponse.blob)
}
inline std::string* PrepareAmendOrderResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareAmendOrderResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareAmendOrderResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareAmendOrderResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareAmendOrderResponse.blob)
}

// -------------------------------------------------------------------

// PrepareSubmitOrderRequest

// .vega.commands.v1.OrderSubmission submission = 1 [json_name = "submission"];
inline bool PrepareSubmitOrderRequest::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool PrepareSubmitOrderRequest::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::commands::v1::OrderSubmission& PrepareSubmitOrderRequest::_internal_submission() const {
  const ::vega::commands::v1::OrderSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::OrderSubmission&>(
      ::vega::commands::v1::_OrderSubmission_default_instance_);
}
inline const ::vega::commands::v1::OrderSubmission& PrepareSubmitOrderRequest::submission() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareSubmitOrderRequest.submission)
  return _internal_submission();
}
inline void PrepareSubmitOrderRequest::unsafe_arena_set_allocated_submission(
    ::vega::commands::v1::OrderSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareSubmitOrderRequest.submission)
}
inline ::vega::commands::v1::OrderSubmission* PrepareSubmitOrderRequest::release_submission() {

  ::vega::commands::v1::OrderSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::OrderSubmission* PrepareSubmitOrderRequest::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareSubmitOrderRequest.submission)

  ::vega::commands::v1::OrderSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::OrderSubmission* PrepareSubmitOrderRequest::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::OrderSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::commands::v1::OrderSubmission* PrepareSubmitOrderRequest::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareSubmitOrderRequest.submission)
  return _internal_mutable_submission();
}
inline void PrepareSubmitOrderRequest::set_allocated_submission(::vega::commands::v1::OrderSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareSubmitOrderRequest.submission)
}

// -------------------------------------------------------------------

// PrepareCancelOrderRequest

// .vega.commands.v1.OrderCancellation cancellation = 1 [json_name = "cancellation"];
inline bool PrepareCancelOrderRequest::_internal_has_cancellation() const {
  return this != internal_default_instance() && cancellation_ != nullptr;
}
inline bool PrepareCancelOrderRequest::has_cancellation() const {
  return _internal_has_cancellation();
}
inline const ::vega::commands::v1::OrderCancellation& PrepareCancelOrderRequest::_internal_cancellation() const {
  const ::vega::commands::v1::OrderCancellation* p = cancellation_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::OrderCancellation&>(
      ::vega::commands::v1::_OrderCancellation_default_instance_);
}
inline const ::vega::commands::v1::OrderCancellation& PrepareCancelOrderRequest::cancellation() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareCancelOrderRequest.cancellation)
  return _internal_cancellation();
}
inline void PrepareCancelOrderRequest::unsafe_arena_set_allocated_cancellation(
    ::vega::commands::v1::OrderCancellation* cancellation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancellation_);
  }
  cancellation_ = cancellation;
  if (cancellation) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareCancelOrderRequest.cancellation)
}
inline ::vega::commands::v1::OrderCancellation* PrepareCancelOrderRequest::release_cancellation() {

  ::vega::commands::v1::OrderCancellation* temp = cancellation_;
  cancellation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::OrderCancellation* PrepareCancelOrderRequest::unsafe_arena_release_cancellation() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareCancelOrderRequest.cancellation)

  ::vega::commands::v1::OrderCancellation* temp = cancellation_;
  cancellation_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::OrderCancellation* PrepareCancelOrderRequest::_internal_mutable_cancellation() {

  if (cancellation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::OrderCancellation>(GetArena());
    cancellation_ = p;
  }
  return cancellation_;
}
inline ::vega::commands::v1::OrderCancellation* PrepareCancelOrderRequest::mutable_cancellation() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareCancelOrderRequest.cancellation)
  return _internal_mutable_cancellation();
}
inline void PrepareCancelOrderRequest::set_allocated_cancellation(::vega::commands::v1::OrderCancellation* cancellation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancellation_);
  }
  if (cancellation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancellation)->GetArena();
    if (message_arena != submessage_arena) {
      cancellation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancellation, submessage_arena);
    }

  } else {

  }
  cancellation_ = cancellation;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareCancelOrderRequest.cancellation)
}

// -------------------------------------------------------------------

// PrepareAmendOrderRequest

// .vega.commands.v1.OrderAmendment amendment = 1 [json_name = "amendment"];
inline bool PrepareAmendOrderRequest::_internal_has_amendment() const {
  return this != internal_default_instance() && amendment_ != nullptr;
}
inline bool PrepareAmendOrderRequest::has_amendment() const {
  return _internal_has_amendment();
}
inline const ::vega::commands::v1::OrderAmendment& PrepareAmendOrderRequest::_internal_amendment() const {
  const ::vega::commands::v1::OrderAmendment* p = amendment_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::OrderAmendment&>(
      ::vega::commands::v1::_OrderAmendment_default_instance_);
}
inline const ::vega::commands::v1::OrderAmendment& PrepareAmendOrderRequest::amendment() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareAmendOrderRequest.amendment)
  return _internal_amendment();
}
inline void PrepareAmendOrderRequest::unsafe_arena_set_allocated_amendment(
    ::vega::commands::v1::OrderAmendment* amendment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amendment_);
  }
  amendment_ = amendment;
  if (amendment) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareAmendOrderRequest.amendment)
}
inline ::vega::commands::v1::OrderAmendment* PrepareAmendOrderRequest::release_amendment() {

  ::vega::commands::v1::OrderAmendment* temp = amendment_;
  amendment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::OrderAmendment* PrepareAmendOrderRequest::unsafe_arena_release_amendment() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareAmendOrderRequest.amendment)

  ::vega::commands::v1::OrderAmendment* temp = amendment_;
  amendment_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::OrderAmendment* PrepareAmendOrderRequest::_internal_mutable_amendment() {

  if (amendment_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::OrderAmendment>(GetArena());
    amendment_ = p;
  }
  return amendment_;
}
inline ::vega::commands::v1::OrderAmendment* PrepareAmendOrderRequest::mutable_amendment() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareAmendOrderRequest.amendment)
  return _internal_mutable_amendment();
}
inline void PrepareAmendOrderRequest::set_allocated_amendment(::vega::commands::v1::OrderAmendment* amendment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amendment_);
  }
  if (amendment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amendment)->GetArena();
    if (message_arena != submessage_arena) {
      amendment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amendment, submessage_arena);
    }

  } else {

  }
  amendment_ = amendment;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareAmendOrderRequest.amendment)
}

// -------------------------------------------------------------------

// AssetsRequest

// -------------------------------------------------------------------

// AssetsResponse

// repeated .vega.Asset assets = 1 [json_name = "assets"];
inline int AssetsResponse::_internal_assets_size() const {
  return assets_.size();
}
inline int AssetsResponse::assets_size() const {
  return _internal_assets_size();
}
inline ::vega::Asset* AssetsResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.AssetsResponse.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >*
AssetsResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.AssetsResponse.assets)
  return &assets_;
}
inline const ::vega::Asset& AssetsResponse::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::vega::Asset& AssetsResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.AssetsResponse.assets)
  return _internal_assets(index);
}
inline ::vega::Asset* AssetsResponse::_internal_add_assets() {
  return assets_.Add();
}
inline ::vega::Asset* AssetsResponse::add_assets() {
  // @@protoc_insertion_point(field_add:api.v1.AssetsResponse.assets)
  return _internal_add_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >&
AssetsResponse::assets() const {
  // @@protoc_insertion_point(field_list:api.v1.AssetsResponse.assets)
  return assets_;
}

// -------------------------------------------------------------------

// AssetByIDRequest

// string id = 1 [json_name = "id", (.validator.field) = {
inline void AssetByIDRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AssetByIDRequest::id() const {
  // @@protoc_insertion_point(field_get:api.v1.AssetByIDRequest.id)
  return _internal_id();
}
inline void AssetByIDRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.v1.AssetByIDRequest.id)
}
inline std::string* AssetByIDRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.AssetByIDRequest.id)
  return _internal_mutable_id();
}
inline const std::string& AssetByIDRequest::_internal_id() const {
  return id_.Get();
}
inline void AssetByIDRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetByIDRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.AssetByIDRequest.id)
}
inline void AssetByIDRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.AssetByIDRequest.id)
}
inline void AssetByIDRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.AssetByIDRequest.id)
}
inline std::string* AssetByIDRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetByIDRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.v1.AssetByIDRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetByIDRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.AssetByIDRequest.id)
}

// -------------------------------------------------------------------

// AssetByIDResponse

// .vega.Asset asset = 1 [json_name = "asset"];
inline bool AssetByIDResponse::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool AssetByIDResponse::has_asset() const {
  return _internal_has_asset();
}
inline const ::vega::Asset& AssetByIDResponse::_internal_asset() const {
  const ::vega::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Asset&>(
      ::vega::_Asset_default_instance_);
}
inline const ::vega::Asset& AssetByIDResponse::asset() const {
  // @@protoc_insertion_point(field_get:api.v1.AssetByIDResponse.asset)
  return _internal_asset();
}
inline void AssetByIDResponse::unsafe_arena_set_allocated_asset(
    ::vega::Asset* asset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.AssetByIDResponse.asset)
}
inline ::vega::Asset* AssetByIDResponse::release_asset() {

  ::vega::Asset* temp = asset_;
  asset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Asset* AssetByIDResponse::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:api.v1.AssetByIDResponse.asset)

  ::vega::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::vega::Asset* AssetByIDResponse::_internal_mutable_asset() {

  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Asset>(GetArena());
    asset_ = p;
  }
  return asset_;
}
inline ::vega::Asset* AssetByIDResponse::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.v1.AssetByIDResponse.asset)
  return _internal_mutable_asset();
}
inline void AssetByIDResponse::set_allocated_asset(::vega::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset)->GetArena();
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }

  } else {

  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:api.v1.AssetByIDResponse.asset)
}

// -------------------------------------------------------------------

// GetNodeSignaturesAggregateRequest

// string id = 1 [json_name = "id", (.validator.field) = {
inline void GetNodeSignaturesAggregateRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetNodeSignaturesAggregateRequest::id() const {
  // @@protoc_insertion_point(field_get:api.v1.GetNodeSignaturesAggregateRequest.id)
  return _internal_id();
}
inline void GetNodeSignaturesAggregateRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.v1.GetNodeSignaturesAggregateRequest.id)
}
inline std::string* GetNodeSignaturesAggregateRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNodeSignaturesAggregateRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetNodeSignaturesAggregateRequest::_internal_id() const {
  return id_.Get();
}
inline void GetNodeSignaturesAggregateRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetNodeSignaturesAggregateRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.GetNodeSignaturesAggregateRequest.id)
}
inline void GetNodeSignaturesAggregateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.GetNodeSignaturesAggregateRequest.id)
}
inline void GetNodeSignaturesAggregateRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.GetNodeSignaturesAggregateRequest.id)
}
inline std::string* GetNodeSignaturesAggregateRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetNodeSignaturesAggregateRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.v1.GetNodeSignaturesAggregateRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetNodeSignaturesAggregateRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetNodeSignaturesAggregateRequest.id)
}

// -------------------------------------------------------------------

// GetNodeSignaturesAggregateResponse

// repeated .vega.commands.v1.NodeSignature signatures = 1 [json_name = "signatures"];
inline int GetNodeSignaturesAggregateResponse::_internal_signatures_size() const {
  return signatures_.size();
}
inline int GetNodeSignaturesAggregateResponse::signatures_size() const {
  return _internal_signatures_size();
}
inline ::vega::commands::v1::NodeSignature* GetNodeSignaturesAggregateResponse::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNodeSignaturesAggregateResponse.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::commands::v1::NodeSignature >*
GetNodeSignaturesAggregateResponse::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetNodeSignaturesAggregateResponse.signatures)
  return &signatures_;
}
inline const ::vega::commands::v1::NodeSignature& GetNodeSignaturesAggregateResponse::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::vega::commands::v1::NodeSignature& GetNodeSignaturesAggregateResponse::signatures(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetNodeSignaturesAggregateResponse.signatures)
  return _internal_signatures(index);
}
inline ::vega::commands::v1::NodeSignature* GetNodeSignaturesAggregateResponse::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::vega::commands::v1::NodeSignature* GetNodeSignaturesAggregateResponse::add_signatures() {
  // @@protoc_insertion_point(field_add:api.v1.GetNodeSignaturesAggregateResponse.signatures)
  return _internal_add_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::commands::v1::NodeSignature >&
GetNodeSignaturesAggregateResponse::signatures() const {
  // @@protoc_insertion_point(field_list:api.v1.GetNodeSignaturesAggregateResponse.signatures)
  return signatures_;
}

// -------------------------------------------------------------------

// OptionalProposalState

// .vega.Proposal.State value = 1 [json_name = "value"];
inline void OptionalProposalState::clear_value() {
  value_ = 0;
}
inline ::vega::Proposal_State OptionalProposalState::_internal_value() const {
  return static_cast< ::vega::Proposal_State >(value_);
}
inline ::vega::Proposal_State OptionalProposalState::value() const {
  // @@protoc_insertion_point(field_get:api.v1.OptionalProposalState.value)
  return _internal_value();
}
inline void OptionalProposalState::_internal_set_value(::vega::Proposal_State value) {

  value_ = value;
}
inline void OptionalProposalState::set_value(::vega::Proposal_State value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:api.v1.OptionalProposalState.value)
}

// -------------------------------------------------------------------

// GetProposalsRequest

// .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
inline bool GetProposalsRequest::_internal_has_select_in_state() const {
  return this != internal_default_instance() && select_in_state_ != nullptr;
}
inline bool GetProposalsRequest::has_select_in_state() const {
  return _internal_has_select_in_state();
}
inline void GetProposalsRequest::clear_select_in_state() {
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
}
inline const ::api::v1::OptionalProposalState& GetProposalsRequest::_internal_select_in_state() const {
  const ::api::v1::OptionalProposalState* p = select_in_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::OptionalProposalState&>(
      ::api::v1::_OptionalProposalState_default_instance_);
}
inline const ::api::v1::OptionalProposalState& GetProposalsRequest::select_in_state() const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalsRequest.select_in_state)
  return _internal_select_in_state();
}
inline void GetProposalsRequest::unsafe_arena_set_allocated_select_in_state(
    ::api::v1::OptionalProposalState* select_in_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_in_state_);
  }
  select_in_state_ = select_in_state;
  if (select_in_state) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetProposalsRequest.select_in_state)
}
inline ::api::v1::OptionalProposalState* GetProposalsRequest::release_select_in_state() {

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::OptionalProposalState* GetProposalsRequest::unsafe_arena_release_select_in_state() {
  // @@protoc_insertion_point(field_release:api.v1.GetProposalsRequest.select_in_state)

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  return temp;
}
inline ::api::v1::OptionalProposalState* GetProposalsRequest::_internal_mutable_select_in_state() {

  if (select_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::OptionalProposalState>(GetArena());
    select_in_state_ = p;
  }
  return select_in_state_;
}
inline ::api::v1::OptionalProposalState* GetProposalsRequest::mutable_select_in_state() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalsRequest.select_in_state)
  return _internal_mutable_select_in_state();
}
inline void GetProposalsRequest::set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_in_state_;
  }
  if (select_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_in_state);
    if (message_arena != submessage_arena) {
      select_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_in_state, submessage_arena);
    }

  } else {

  }
  select_in_state_ = select_in_state;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetProposalsRequest.select_in_state)
}

// -------------------------------------------------------------------

// GetProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.v1.GetProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.v1.GetProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetProposalsByPartyRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void GetProposalsByPartyRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& GetProposalsByPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalsByPartyRequest.party_id)
  return _internal_party_id();
}
inline void GetProposalsByPartyRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.GetProposalsByPartyRequest.party_id)
}
inline std::string* GetProposalsByPartyRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalsByPartyRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& GetProposalsByPartyRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void GetProposalsByPartyRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetProposalsByPartyRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.GetProposalsByPartyRequest.party_id)
}
inline void GetProposalsByPartyRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.GetProposalsByPartyRequest.party_id)
}
inline void GetProposalsByPartyRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.GetProposalsByPartyRequest.party_id)
}
inline std::string* GetProposalsByPartyRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetProposalsByPartyRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.GetProposalsByPartyRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProposalsByPartyRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetProposalsByPartyRequest.party_id)
}

// .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
inline bool GetProposalsByPartyRequest::_internal_has_select_in_state() const {
  return this != internal_default_instance() && select_in_state_ != nullptr;
}
inline bool GetProposalsByPartyRequest::has_select_in_state() const {
  return _internal_has_select_in_state();
}
inline void GetProposalsByPartyRequest::clear_select_in_state() {
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
}
inline const ::api::v1::OptionalProposalState& GetProposalsByPartyRequest::_internal_select_in_state() const {
  const ::api::v1::OptionalProposalState* p = select_in_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::OptionalProposalState&>(
      ::api::v1::_OptionalProposalState_default_instance_);
}
inline const ::api::v1::OptionalProposalState& GetProposalsByPartyRequest::select_in_state() const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalsByPartyRequest.select_in_state)
  return _internal_select_in_state();
}
inline void GetProposalsByPartyRequest::unsafe_arena_set_allocated_select_in_state(
    ::api::v1::OptionalProposalState* select_in_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_in_state_);
  }
  select_in_state_ = select_in_state;
  if (select_in_state) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetProposalsByPartyRequest.select_in_state)
}
inline ::api::v1::OptionalProposalState* GetProposalsByPartyRequest::release_select_in_state() {

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::OptionalProposalState* GetProposalsByPartyRequest::unsafe_arena_release_select_in_state() {
  // @@protoc_insertion_point(field_release:api.v1.GetProposalsByPartyRequest.select_in_state)

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  return temp;
}
inline ::api::v1::OptionalProposalState* GetProposalsByPartyRequest::_internal_mutable_select_in_state() {

  if (select_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::OptionalProposalState>(GetArena());
    select_in_state_ = p;
  }
  return select_in_state_;
}
inline ::api::v1::OptionalProposalState* GetProposalsByPartyRequest::mutable_select_in_state() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalsByPartyRequest.select_in_state)
  return _internal_mutable_select_in_state();
}
inline void GetProposalsByPartyRequest::set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_in_state_;
  }
  if (select_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_in_state);
    if (message_arena != submessage_arena) {
      select_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_in_state, submessage_arena);
    }

  } else {

  }
  select_in_state_ = select_in_state;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetProposalsByPartyRequest.select_in_state)
}

// -------------------------------------------------------------------

// GetProposalsByPartyResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetProposalsByPartyResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetProposalsByPartyResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetProposalsByPartyResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalsByPartyResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetProposalsByPartyResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetProposalsByPartyResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetProposalsByPartyResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetProposalsByPartyResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalsByPartyResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetProposalsByPartyResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetProposalsByPartyResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.v1.GetProposalsByPartyResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetProposalsByPartyResponse::data() const {
  // @@protoc_insertion_point(field_list:api.v1.GetProposalsByPartyResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetVotesByPartyRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void GetVotesByPartyRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& GetVotesByPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.GetVotesByPartyRequest.party_id)
  return _internal_party_id();
}
inline void GetVotesByPartyRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.GetVotesByPartyRequest.party_id)
}
inline std::string* GetVotesByPartyRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetVotesByPartyRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& GetVotesByPartyRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void GetVotesByPartyRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetVotesByPartyRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.GetVotesByPartyRequest.party_id)
}
inline void GetVotesByPartyRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.GetVotesByPartyRequest.party_id)
}
inline void GetVotesByPartyRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.GetVotesByPartyRequest.party_id)
}
inline std::string* GetVotesByPartyRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetVotesByPartyRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.GetVotesByPartyRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVotesByPartyRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetVotesByPartyRequest.party_id)
}

// -------------------------------------------------------------------

// GetVotesByPartyResponse

// repeated .vega.Vote votes = 1 [json_name = "votes"];
inline int GetVotesByPartyResponse::_internal_votes_size() const {
  return votes_.size();
}
inline int GetVotesByPartyResponse::votes_size() const {
  return _internal_votes_size();
}
inline ::vega::Vote* GetVotesByPartyResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetVotesByPartyResponse.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >*
GetVotesByPartyResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetVotesByPartyResponse.votes)
  return &votes_;
}
inline const ::vega::Vote& GetVotesByPartyResponse::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::vega::Vote& GetVotesByPartyResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetVotesByPartyResponse.votes)
  return _internal_votes(index);
}
inline ::vega::Vote* GetVotesByPartyResponse::_internal_add_votes() {
  return votes_.Add();
}
inline ::vega::Vote* GetVotesByPartyResponse::add_votes() {
  // @@protoc_insertion_point(field_add:api.v1.GetVotesByPartyResponse.votes)
  return _internal_add_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >&
GetVotesByPartyResponse::votes() const {
  // @@protoc_insertion_point(field_list:api.v1.GetVotesByPartyResponse.votes)
  return votes_;
}

// -------------------------------------------------------------------

// GetNewMarketProposalsRequest

// .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
inline bool GetNewMarketProposalsRequest::_internal_has_select_in_state() const {
  return this != internal_default_instance() && select_in_state_ != nullptr;
}
inline bool GetNewMarketProposalsRequest::has_select_in_state() const {
  return _internal_has_select_in_state();
}
inline void GetNewMarketProposalsRequest::clear_select_in_state() {
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
}
inline const ::api::v1::OptionalProposalState& GetNewMarketProposalsRequest::_internal_select_in_state() const {
  const ::api::v1::OptionalProposalState* p = select_in_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::OptionalProposalState&>(
      ::api::v1::_OptionalProposalState_default_instance_);
}
inline const ::api::v1::OptionalProposalState& GetNewMarketProposalsRequest::select_in_state() const {
  // @@protoc_insertion_point(field_get:api.v1.GetNewMarketProposalsRequest.select_in_state)
  return _internal_select_in_state();
}
inline void GetNewMarketProposalsRequest::unsafe_arena_set_allocated_select_in_state(
    ::api::v1::OptionalProposalState* select_in_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_in_state_);
  }
  select_in_state_ = select_in_state;
  if (select_in_state) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetNewMarketProposalsRequest.select_in_state)
}
inline ::api::v1::OptionalProposalState* GetNewMarketProposalsRequest::release_select_in_state() {

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::OptionalProposalState* GetNewMarketProposalsRequest::unsafe_arena_release_select_in_state() {
  // @@protoc_insertion_point(field_release:api.v1.GetNewMarketProposalsRequest.select_in_state)

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  return temp;
}
inline ::api::v1::OptionalProposalState* GetNewMarketProposalsRequest::_internal_mutable_select_in_state() {

  if (select_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::OptionalProposalState>(GetArena());
    select_in_state_ = p;
  }
  return select_in_state_;
}
inline ::api::v1::OptionalProposalState* GetNewMarketProposalsRequest::mutable_select_in_state() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNewMarketProposalsRequest.select_in_state)
  return _internal_mutable_select_in_state();
}
inline void GetNewMarketProposalsRequest::set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_in_state_;
  }
  if (select_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_in_state);
    if (message_arena != submessage_arena) {
      select_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_in_state, submessage_arena);
    }

  } else {

  }
  select_in_state_ = select_in_state;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetNewMarketProposalsRequest.select_in_state)
}

// -------------------------------------------------------------------

// GetNewMarketProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetNewMarketProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetNewMarketProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetNewMarketProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNewMarketProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetNewMarketProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetNewMarketProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetNewMarketProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetNewMarketProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetNewMarketProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetNewMarketProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetNewMarketProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.v1.GetNewMarketProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetNewMarketProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.v1.GetNewMarketProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetUpdateMarketProposalsRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void GetUpdateMarketProposalsRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& GetUpdateMarketProposalsRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.GetUpdateMarketProposalsRequest.market_id)
  return _internal_market_id();
}
inline void GetUpdateMarketProposalsRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.GetUpdateMarketProposalsRequest.market_id)
}
inline std::string* GetUpdateMarketProposalsRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetUpdateMarketProposalsRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& GetUpdateMarketProposalsRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void GetUpdateMarketProposalsRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetUpdateMarketProposalsRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.GetUpdateMarketProposalsRequest.market_id)
}
inline void GetUpdateMarketProposalsRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.GetUpdateMarketProposalsRequest.market_id)
}
inline void GetUpdateMarketProposalsRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.GetUpdateMarketProposalsRequest.market_id)
}
inline std::string* GetUpdateMarketProposalsRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetUpdateMarketProposalsRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.GetUpdateMarketProposalsRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUpdateMarketProposalsRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetUpdateMarketProposalsRequest.market_id)
}

// .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
inline bool GetUpdateMarketProposalsRequest::_internal_has_select_in_state() const {
  return this != internal_default_instance() && select_in_state_ != nullptr;
}
inline bool GetUpdateMarketProposalsRequest::has_select_in_state() const {
  return _internal_has_select_in_state();
}
inline void GetUpdateMarketProposalsRequest::clear_select_in_state() {
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
}
inline const ::api::v1::OptionalProposalState& GetUpdateMarketProposalsRequest::_internal_select_in_state() const {
  const ::api::v1::OptionalProposalState* p = select_in_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::OptionalProposalState&>(
      ::api::v1::_OptionalProposalState_default_instance_);
}
inline const ::api::v1::OptionalProposalState& GetUpdateMarketProposalsRequest::select_in_state() const {
  // @@protoc_insertion_point(field_get:api.v1.GetUpdateMarketProposalsRequest.select_in_state)
  return _internal_select_in_state();
}
inline void GetUpdateMarketProposalsRequest::unsafe_arena_set_allocated_select_in_state(
    ::api::v1::OptionalProposalState* select_in_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_in_state_);
  }
  select_in_state_ = select_in_state;
  if (select_in_state) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetUpdateMarketProposalsRequest.select_in_state)
}
inline ::api::v1::OptionalProposalState* GetUpdateMarketProposalsRequest::release_select_in_state() {

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::OptionalProposalState* GetUpdateMarketProposalsRequest::unsafe_arena_release_select_in_state() {
  // @@protoc_insertion_point(field_release:api.v1.GetUpdateMarketProposalsRequest.select_in_state)

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  return temp;
}
inline ::api::v1::OptionalProposalState* GetUpdateMarketProposalsRequest::_internal_mutable_select_in_state() {

  if (select_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::OptionalProposalState>(GetArena());
    select_in_state_ = p;
  }
  return select_in_state_;
}
inline ::api::v1::OptionalProposalState* GetUpdateMarketProposalsRequest::mutable_select_in_state() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetUpdateMarketProposalsRequest.select_in_state)
  return _internal_mutable_select_in_state();
}
inline void GetUpdateMarketProposalsRequest::set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_in_state_;
  }
  if (select_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_in_state);
    if (message_arena != submessage_arena) {
      select_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_in_state, submessage_arena);
    }

  } else {

  }
  select_in_state_ = select_in_state;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetUpdateMarketProposalsRequest.select_in_state)
}

// -------------------------------------------------------------------

// GetUpdateMarketProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetUpdateMarketProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetUpdateMarketProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetUpdateMarketProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetUpdateMarketProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetUpdateMarketProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetUpdateMarketProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetUpdateMarketProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetUpdateMarketProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetUpdateMarketProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetUpdateMarketProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetUpdateMarketProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.v1.GetUpdateMarketProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetUpdateMarketProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.v1.GetUpdateMarketProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetNetworkParametersProposalsRequest

// .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
inline bool GetNetworkParametersProposalsRequest::_internal_has_select_in_state() const {
  return this != internal_default_instance() && select_in_state_ != nullptr;
}
inline bool GetNetworkParametersProposalsRequest::has_select_in_state() const {
  return _internal_has_select_in_state();
}
inline void GetNetworkParametersProposalsRequest::clear_select_in_state() {
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
}
inline const ::api::v1::OptionalProposalState& GetNetworkParametersProposalsRequest::_internal_select_in_state() const {
  const ::api::v1::OptionalProposalState* p = select_in_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::OptionalProposalState&>(
      ::api::v1::_OptionalProposalState_default_instance_);
}
inline const ::api::v1::OptionalProposalState& GetNetworkParametersProposalsRequest::select_in_state() const {
  // @@protoc_insertion_point(field_get:api.v1.GetNetworkParametersProposalsRequest.select_in_state)
  return _internal_select_in_state();
}
inline void GetNetworkParametersProposalsRequest::unsafe_arena_set_allocated_select_in_state(
    ::api::v1::OptionalProposalState* select_in_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_in_state_);
  }
  select_in_state_ = select_in_state;
  if (select_in_state) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetNetworkParametersProposalsRequest.select_in_state)
}
inline ::api::v1::OptionalProposalState* GetNetworkParametersProposalsRequest::release_select_in_state() {

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::OptionalProposalState* GetNetworkParametersProposalsRequest::unsafe_arena_release_select_in_state() {
  // @@protoc_insertion_point(field_release:api.v1.GetNetworkParametersProposalsRequest.select_in_state)

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  return temp;
}
inline ::api::v1::OptionalProposalState* GetNetworkParametersProposalsRequest::_internal_mutable_select_in_state() {

  if (select_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::OptionalProposalState>(GetArena());
    select_in_state_ = p;
  }
  return select_in_state_;
}
inline ::api::v1::OptionalProposalState* GetNetworkParametersProposalsRequest::mutable_select_in_state() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNetworkParametersProposalsRequest.select_in_state)
  return _internal_mutable_select_in_state();
}
inline void GetNetworkParametersProposalsRequest::set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_in_state_;
  }
  if (select_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_in_state);
    if (message_arena != submessage_arena) {
      select_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_in_state, submessage_arena);
    }

  } else {

  }
  select_in_state_ = select_in_state;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetNetworkParametersProposalsRequest.select_in_state)
}

// -------------------------------------------------------------------

// GetNetworkParametersProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetNetworkParametersProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetNetworkParametersProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetNetworkParametersProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNetworkParametersProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetNetworkParametersProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetNetworkParametersProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetNetworkParametersProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetNetworkParametersProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetNetworkParametersProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetNetworkParametersProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetNetworkParametersProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.v1.GetNetworkParametersProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetNetworkParametersProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.v1.GetNetworkParametersProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetNewAssetProposalsRequest

// .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
inline bool GetNewAssetProposalsRequest::_internal_has_select_in_state() const {
  return this != internal_default_instance() && select_in_state_ != nullptr;
}
inline bool GetNewAssetProposalsRequest::has_select_in_state() const {
  return _internal_has_select_in_state();
}
inline void GetNewAssetProposalsRequest::clear_select_in_state() {
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
}
inline const ::api::v1::OptionalProposalState& GetNewAssetProposalsRequest::_internal_select_in_state() const {
  const ::api::v1::OptionalProposalState* p = select_in_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::OptionalProposalState&>(
      ::api::v1::_OptionalProposalState_default_instance_);
}
inline const ::api::v1::OptionalProposalState& GetNewAssetProposalsRequest::select_in_state() const {
  // @@protoc_insertion_point(field_get:api.v1.GetNewAssetProposalsRequest.select_in_state)
  return _internal_select_in_state();
}
inline void GetNewAssetProposalsRequest::unsafe_arena_set_allocated_select_in_state(
    ::api::v1::OptionalProposalState* select_in_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_in_state_);
  }
  select_in_state_ = select_in_state;
  if (select_in_state) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetNewAssetProposalsRequest.select_in_state)
}
inline ::api::v1::OptionalProposalState* GetNewAssetProposalsRequest::release_select_in_state() {

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::OptionalProposalState* GetNewAssetProposalsRequest::unsafe_arena_release_select_in_state() {
  // @@protoc_insertion_point(field_release:api.v1.GetNewAssetProposalsRequest.select_in_state)

  ::api::v1::OptionalProposalState* temp = select_in_state_;
  select_in_state_ = nullptr;
  return temp;
}
inline ::api::v1::OptionalProposalState* GetNewAssetProposalsRequest::_internal_mutable_select_in_state() {

  if (select_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::OptionalProposalState>(GetArena());
    select_in_state_ = p;
  }
  return select_in_state_;
}
inline ::api::v1::OptionalProposalState* GetNewAssetProposalsRequest::mutable_select_in_state() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNewAssetProposalsRequest.select_in_state)
  return _internal_mutable_select_in_state();
}
inline void GetNewAssetProposalsRequest::set_allocated_select_in_state(::api::v1::OptionalProposalState* select_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_in_state_;
  }
  if (select_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_in_state);
    if (message_arena != submessage_arena) {
      select_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_in_state, submessage_arena);
    }

  } else {

  }
  select_in_state_ = select_in_state;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetNewAssetProposalsRequest.select_in_state)
}

// -------------------------------------------------------------------

// GetNewAssetProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetNewAssetProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetNewAssetProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetNewAssetProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.GetNewAssetProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetNewAssetProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.GetNewAssetProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetNewAssetProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetNewAssetProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.GetNewAssetProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetNewAssetProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetNewAssetProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.v1.GetNewAssetProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetNewAssetProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.v1.GetNewAssetProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetProposalByIDRequest

// string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
inline void GetProposalByIDRequest::clear_proposal_id() {
  proposal_id_.ClearToEmpty();
}
inline const std::string& GetProposalByIDRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalByIDRequest.proposal_id)
  return _internal_proposal_id();
}
inline void GetProposalByIDRequest::set_proposal_id(const std::string& value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:api.v1.GetProposalByIDRequest.proposal_id)
}
inline std::string* GetProposalByIDRequest::mutable_proposal_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalByIDRequest.proposal_id)
  return _internal_mutable_proposal_id();
}
inline const std::string& GetProposalByIDRequest::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void GetProposalByIDRequest::_internal_set_proposal_id(const std::string& value) {

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetProposalByIDRequest::set_proposal_id(std::string&& value) {

  proposal_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.GetProposalByIDRequest.proposal_id)
}
inline void GetProposalByIDRequest::set_proposal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.GetProposalByIDRequest.proposal_id)
}
inline void GetProposalByIDRequest::set_proposal_id(const char* value,
    size_t size) {

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.GetProposalByIDRequest.proposal_id)
}
inline std::string* GetProposalByIDRequest::_internal_mutable_proposal_id() {

  return proposal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetProposalByIDRequest::release_proposal_id() {
  // @@protoc_insertion_point(field_release:api.v1.GetProposalByIDRequest.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProposalByIDRequest::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {

  } else {

  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetProposalByIDRequest.proposal_id)
}

// -------------------------------------------------------------------

// GetProposalByIDResponse

// .vega.GovernanceData data = 1 [json_name = "data"];
inline bool GetProposalByIDResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetProposalByIDResponse::has_data() const {
  return _internal_has_data();
}
inline const ::vega::GovernanceData& GetProposalByIDResponse::_internal_data() const {
  const ::vega::GovernanceData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::GovernanceData&>(
      ::vega::_GovernanceData_default_instance_);
}
inline const ::vega::GovernanceData& GetProposalByIDResponse::data() const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalByIDResponse.data)
  return _internal_data();
}
inline void GetProposalByIDResponse::unsafe_arena_set_allocated_data(
    ::vega::GovernanceData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetProposalByIDResponse.data)
}
inline ::vega::GovernanceData* GetProposalByIDResponse::release_data() {

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::GovernanceData* GetProposalByIDResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api.v1.GetProposalByIDResponse.data)

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vega::GovernanceData* GetProposalByIDResponse::_internal_mutable_data() {

  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::GovernanceData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::vega::GovernanceData* GetProposalByIDResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalByIDResponse.data)
  return _internal_mutable_data();
}
inline void GetProposalByIDResponse::set_allocated_data(::vega::GovernanceData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }

  } else {

  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetProposalByIDResponse.data)
}

// -------------------------------------------------------------------

// GetProposalByReferenceRequest

// string reference = 1 [json_name = "reference", (.validator.field) = {
inline void GetProposalByReferenceRequest::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& GetProposalByReferenceRequest::reference() const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalByReferenceRequest.reference)
  return _internal_reference();
}
inline void GetProposalByReferenceRequest::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:api.v1.GetProposalByReferenceRequest.reference)
}
inline std::string* GetProposalByReferenceRequest::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalByReferenceRequest.reference)
  return _internal_mutable_reference();
}
inline const std::string& GetProposalByReferenceRequest::_internal_reference() const {
  return reference_.Get();
}
inline void GetProposalByReferenceRequest::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetProposalByReferenceRequest::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.GetProposalByReferenceRequest.reference)
}
inline void GetProposalByReferenceRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.GetProposalByReferenceRequest.reference)
}
inline void GetProposalByReferenceRequest::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.GetProposalByReferenceRequest.reference)
}
inline std::string* GetProposalByReferenceRequest::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetProposalByReferenceRequest::release_reference() {
  // @@protoc_insertion_point(field_release:api.v1.GetProposalByReferenceRequest.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProposalByReferenceRequest::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetProposalByReferenceRequest.reference)
}

// -------------------------------------------------------------------

// GetProposalByReferenceResponse

// .vega.GovernanceData data = 1 [json_name = "data"];
inline bool GetProposalByReferenceResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetProposalByReferenceResponse::has_data() const {
  return _internal_has_data();
}
inline const ::vega::GovernanceData& GetProposalByReferenceResponse::_internal_data() const {
  const ::vega::GovernanceData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::GovernanceData&>(
      ::vega::_GovernanceData_default_instance_);
}
inline const ::vega::GovernanceData& GetProposalByReferenceResponse::data() const {
  // @@protoc_insertion_point(field_get:api.v1.GetProposalByReferenceResponse.data)
  return _internal_data();
}
inline void GetProposalByReferenceResponse::unsafe_arena_set_allocated_data(
    ::vega::GovernanceData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.GetProposalByReferenceResponse.data)
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::release_data() {

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api.v1.GetProposalByReferenceResponse.data)

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::_internal_mutable_data() {

  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::GovernanceData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:api.v1.GetProposalByReferenceResponse.data)
  return _internal_mutable_data();
}
inline void GetProposalByReferenceResponse::set_allocated_data(::vega::GovernanceData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }

  } else {

  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api.v1.GetProposalByReferenceResponse.data)
}

// -------------------------------------------------------------------

// ObserveGovernanceRequest

// -------------------------------------------------------------------

// ObserveGovernanceResponse

// .vega.GovernanceData data = 1 [json_name = "data"];
inline bool ObserveGovernanceResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ObserveGovernanceResponse::has_data() const {
  return _internal_has_data();
}
inline const ::vega::GovernanceData& ObserveGovernanceResponse::_internal_data() const {
  const ::vega::GovernanceData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::GovernanceData&>(
      ::vega::_GovernanceData_default_instance_);
}
inline const ::vega::GovernanceData& ObserveGovernanceResponse::data() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveGovernanceResponse.data)
  return _internal_data();
}
inline void ObserveGovernanceResponse::unsafe_arena_set_allocated_data(
    ::vega::GovernanceData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.ObserveGovernanceResponse.data)
}
inline ::vega::GovernanceData* ObserveGovernanceResponse::release_data() {

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::GovernanceData* ObserveGovernanceResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api.v1.ObserveGovernanceResponse.data)

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vega::GovernanceData* ObserveGovernanceResponse::_internal_mutable_data() {

  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::GovernanceData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::vega::GovernanceData* ObserveGovernanceResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveGovernanceResponse.data)
  return _internal_mutable_data();
}
inline void ObserveGovernanceResponse::set_allocated_data(::vega::GovernanceData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }

  } else {

  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObserveGovernanceResponse.data)
}

// -------------------------------------------------------------------

// ObservePartyProposalsRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void ObservePartyProposalsRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& ObservePartyProposalsRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ObservePartyProposalsRequest.party_id)
  return _internal_party_id();
}
inline void ObservePartyProposalsRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ObservePartyProposalsRequest.party_id)
}
inline std::string* ObservePartyProposalsRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObservePartyProposalsRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& ObservePartyProposalsRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void ObservePartyProposalsRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObservePartyProposalsRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ObservePartyProposalsRequest.party_id)
}
inline void ObservePartyProposalsRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ObservePartyProposalsRequest.party_id)
}
inline void ObservePartyProposalsRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ObservePartyProposalsRequest.party_id)
}
inline std::string* ObservePartyProposalsRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObservePartyProposalsRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.ObservePartyProposalsRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObservePartyProposalsRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObservePartyProposalsRequest.party_id)
}

// -------------------------------------------------------------------

// ObservePartyProposalsResponse

// .vega.GovernanceData data = 1 [json_name = "data"];
inline bool ObservePartyProposalsResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ObservePartyProposalsResponse::has_data() const {
  return _internal_has_data();
}
inline const ::vega::GovernanceData& ObservePartyProposalsResponse::_internal_data() const {
  const ::vega::GovernanceData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::GovernanceData&>(
      ::vega::_GovernanceData_default_instance_);
}
inline const ::vega::GovernanceData& ObservePartyProposalsResponse::data() const {
  // @@protoc_insertion_point(field_get:api.v1.ObservePartyProposalsResponse.data)
  return _internal_data();
}
inline void ObservePartyProposalsResponse::unsafe_arena_set_allocated_data(
    ::vega::GovernanceData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.ObservePartyProposalsResponse.data)
}
inline ::vega::GovernanceData* ObservePartyProposalsResponse::release_data() {

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::GovernanceData* ObservePartyProposalsResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api.v1.ObservePartyProposalsResponse.data)

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vega::GovernanceData* ObservePartyProposalsResponse::_internal_mutable_data() {

  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::GovernanceData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::vega::GovernanceData* ObservePartyProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObservePartyProposalsResponse.data)
  return _internal_mutable_data();
}
inline void ObservePartyProposalsResponse::set_allocated_data(::vega::GovernanceData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }

  } else {

  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObservePartyProposalsResponse.data)
}

// -------------------------------------------------------------------

// ObserveProposalVotesRequest

// string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
inline void ObserveProposalVotesRequest::clear_proposal_id() {
  proposal_id_.ClearToEmpty();
}
inline const std::string& ObserveProposalVotesRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveProposalVotesRequest.proposal_id)
  return _internal_proposal_id();
}
inline void ObserveProposalVotesRequest::set_proposal_id(const std::string& value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveProposalVotesRequest.proposal_id)
}
inline std::string* ObserveProposalVotesRequest::mutable_proposal_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveProposalVotesRequest.proposal_id)
  return _internal_mutable_proposal_id();
}
inline const std::string& ObserveProposalVotesRequest::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void ObserveProposalVotesRequest::_internal_set_proposal_id(const std::string& value) {

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveProposalVotesRequest::set_proposal_id(std::string&& value) {

  proposal_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ObserveProposalVotesRequest.proposal_id)
}
inline void ObserveProposalVotesRequest::set_proposal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ObserveProposalVotesRequest.proposal_id)
}
inline void ObserveProposalVotesRequest::set_proposal_id(const char* value,
    size_t size) {

  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ObserveProposalVotesRequest.proposal_id)
}
inline std::string* ObserveProposalVotesRequest::_internal_mutable_proposal_id() {

  return proposal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveProposalVotesRequest::release_proposal_id() {
  // @@protoc_insertion_point(field_release:api.v1.ObserveProposalVotesRequest.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveProposalVotesRequest::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {

  } else {

  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObserveProposalVotesRequest.proposal_id)
}

// -------------------------------------------------------------------

// ObserveProposalVotesResponse

// .vega.Vote vote = 1 [json_name = "vote"];
inline bool ObserveProposalVotesResponse::_internal_has_vote() const {
  return this != internal_default_instance() && vote_ != nullptr;
}
inline bool ObserveProposalVotesResponse::has_vote() const {
  return _internal_has_vote();
}
inline const ::vega::Vote& ObserveProposalVotesResponse::_internal_vote() const {
  const ::vega::Vote* p = vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Vote&>(
      ::vega::_Vote_default_instance_);
}
inline const ::vega::Vote& ObserveProposalVotesResponse::vote() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveProposalVotesResponse.vote)
  return _internal_vote();
}
inline void ObserveProposalVotesResponse::unsafe_arena_set_allocated_vote(
    ::vega::Vote* vote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  vote_ = vote;
  if (vote) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.ObserveProposalVotesResponse.vote)
}
inline ::vega::Vote* ObserveProposalVotesResponse::release_vote() {

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Vote* ObserveProposalVotesResponse::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_release:api.v1.ObserveProposalVotesResponse.vote)

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  return temp;
}
inline ::vega::Vote* ObserveProposalVotesResponse::_internal_mutable_vote() {

  if (vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Vote>(GetArena());
    vote_ = p;
  }
  return vote_;
}
inline ::vega::Vote* ObserveProposalVotesResponse::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveProposalVotesResponse.vote)
  return _internal_mutable_vote();
}
inline void ObserveProposalVotesResponse::set_allocated_vote(::vega::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote)->GetArena();
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }

  } else {

  }
  vote_ = vote;
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObserveProposalVotesResponse.vote)
}

// -------------------------------------------------------------------

// ObservePartyVotesRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void ObservePartyVotesRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& ObservePartyVotesRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ObservePartyVotesRequest.party_id)
  return _internal_party_id();
}
inline void ObservePartyVotesRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ObservePartyVotesRequest.party_id)
}
inline std::string* ObservePartyVotesRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObservePartyVotesRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& ObservePartyVotesRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void ObservePartyVotesRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObservePartyVotesRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ObservePartyVotesRequest.party_id)
}
inline void ObservePartyVotesRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ObservePartyVotesRequest.party_id)
}
inline void ObservePartyVotesRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ObservePartyVotesRequest.party_id)
}
inline std::string* ObservePartyVotesRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObservePartyVotesRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.ObservePartyVotesRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObservePartyVotesRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObservePartyVotesRequest.party_id)
}

// -------------------------------------------------------------------

// ObservePartyVotesResponse

// .vega.Vote vote = 1 [json_name = "vote"];
inline bool ObservePartyVotesResponse::_internal_has_vote() const {
  return this != internal_default_instance() && vote_ != nullptr;
}
inline bool ObservePartyVotesResponse::has_vote() const {
  return _internal_has_vote();
}
inline const ::vega::Vote& ObservePartyVotesResponse::_internal_vote() const {
  const ::vega::Vote* p = vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Vote&>(
      ::vega::_Vote_default_instance_);
}
inline const ::vega::Vote& ObservePartyVotesResponse::vote() const {
  // @@protoc_insertion_point(field_get:api.v1.ObservePartyVotesResponse.vote)
  return _internal_vote();
}
inline void ObservePartyVotesResponse::unsafe_arena_set_allocated_vote(
    ::vega::Vote* vote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  vote_ = vote;
  if (vote) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.ObservePartyVotesResponse.vote)
}
inline ::vega::Vote* ObservePartyVotesResponse::release_vote() {

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Vote* ObservePartyVotesResponse::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_release:api.v1.ObservePartyVotesResponse.vote)

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  return temp;
}
inline ::vega::Vote* ObservePartyVotesResponse::_internal_mutable_vote() {

  if (vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Vote>(GetArena());
    vote_ = p;
  }
  return vote_;
}
inline ::vega::Vote* ObservePartyVotesResponse::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObservePartyVotesResponse.vote)
  return _internal_mutable_vote();
}
inline void ObservePartyVotesResponse::set_allocated_vote(::vega::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote)->GetArena();
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }

  } else {

  }
  vote_ = vote;
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObservePartyVotesResponse.vote)
}

// -------------------------------------------------------------------

// MarginLevelsSubscribeRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void MarginLevelsSubscribeRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& MarginLevelsSubscribeRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarginLevelsSubscribeRequest.party_id)
  return _internal_party_id();
}
inline void MarginLevelsSubscribeRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarginLevelsSubscribeRequest.party_id)
}
inline std::string* MarginLevelsSubscribeRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarginLevelsSubscribeRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& MarginLevelsSubscribeRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void MarginLevelsSubscribeRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsSubscribeRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarginLevelsSubscribeRequest.party_id)
}
inline void MarginLevelsSubscribeRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarginLevelsSubscribeRequest.party_id)
}
inline void MarginLevelsSubscribeRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarginLevelsSubscribeRequest.party_id)
}
inline std::string* MarginLevelsSubscribeRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsSubscribeRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarginLevelsSubscribeRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsSubscribeRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarginLevelsSubscribeRequest.party_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void MarginLevelsSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarginLevelsSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarginLevelsSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void MarginLevelsSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarginLevelsSubscribeRequest.market_id)
}
inline std::string* MarginLevelsSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarginLevelsSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarginLevelsSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarginLevelsSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarginLevelsSubscribeRequest.market_id)
}
inline void MarginLevelsSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarginLevelsSubscribeRequest.market_id)
}
inline void MarginLevelsSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarginLevelsSubscribeRequest.market_id)
}
inline std::string* MarginLevelsSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarginLevelsSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarginLevelsSubscribeRequest.market_id)
}

// -------------------------------------------------------------------

// MarginLevelsSubscribeResponse

// .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
inline bool MarginLevelsSubscribeResponse::_internal_has_margin_levels() const {
  return this != internal_default_instance() && margin_levels_ != nullptr;
}
inline bool MarginLevelsSubscribeResponse::has_margin_levels() const {
  return _internal_has_margin_levels();
}
inline const ::vega::MarginLevels& MarginLevelsSubscribeResponse::_internal_margin_levels() const {
  const ::vega::MarginLevels* p = margin_levels_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarginLevels&>(
      ::vega::_MarginLevels_default_instance_);
}
inline const ::vega::MarginLevels& MarginLevelsSubscribeResponse::margin_levels() const {
  // @@protoc_insertion_point(field_get:api.v1.MarginLevelsSubscribeResponse.margin_levels)
  return _internal_margin_levels();
}
inline void MarginLevelsSubscribeResponse::unsafe_arena_set_allocated_margin_levels(
    ::vega::MarginLevels* margin_levels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_levels_);
  }
  margin_levels_ = margin_levels;
  if (margin_levels) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.MarginLevelsSubscribeResponse.margin_levels)
}
inline ::vega::MarginLevels* MarginLevelsSubscribeResponse::release_margin_levels() {

  ::vega::MarginLevels* temp = margin_levels_;
  margin_levels_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarginLevels* MarginLevelsSubscribeResponse::unsafe_arena_release_margin_levels() {
  // @@protoc_insertion_point(field_release:api.v1.MarginLevelsSubscribeResponse.margin_levels)

  ::vega::MarginLevels* temp = margin_levels_;
  margin_levels_ = nullptr;
  return temp;
}
inline ::vega::MarginLevels* MarginLevelsSubscribeResponse::_internal_mutable_margin_levels() {

  if (margin_levels_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarginLevels>(GetArena());
    margin_levels_ = p;
  }
  return margin_levels_;
}
inline ::vega::MarginLevels* MarginLevelsSubscribeResponse::mutable_margin_levels() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarginLevelsSubscribeResponse.margin_levels)
  return _internal_mutable_margin_levels();
}
inline void MarginLevelsSubscribeResponse::set_allocated_margin_levels(::vega::MarginLevels* margin_levels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_levels_);
  }
  if (margin_levels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_levels)->GetArena();
    if (message_arena != submessage_arena) {
      margin_levels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin_levels, submessage_arena);
    }

  } else {

  }
  margin_levels_ = margin_levels;
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarginLevelsSubscribeResponse.margin_levels)
}

// -------------------------------------------------------------------

// MarginLevelsRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void MarginLevelsRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& MarginLevelsRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarginLevelsRequest.party_id)
  return _internal_party_id();
}
inline void MarginLevelsRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarginLevelsRequest.party_id)
}
inline std::string* MarginLevelsRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarginLevelsRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& MarginLevelsRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void MarginLevelsRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarginLevelsRequest.party_id)
}
inline void MarginLevelsRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarginLevelsRequest.party_id)
}
inline void MarginLevelsRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarginLevelsRequest.party_id)
}
inline std::string* MarginLevelsRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarginLevelsRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarginLevelsRequest.party_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void MarginLevelsRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarginLevelsRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarginLevelsRequest.market_id)
  return _internal_market_id();
}
inline void MarginLevelsRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarginLevelsRequest.market_id)
}
inline std::string* MarginLevelsRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarginLevelsRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarginLevelsRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarginLevelsRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarginLevelsRequest.market_id)
}
inline void MarginLevelsRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarginLevelsRequest.market_id)
}
inline void MarginLevelsRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarginLevelsRequest.market_id)
}
inline std::string* MarginLevelsRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarginLevelsRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarginLevelsRequest.market_id)
}

// -------------------------------------------------------------------

// MarginLevelsResponse

// repeated .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
inline int MarginLevelsResponse::_internal_margin_levels_size() const {
  return margin_levels_.size();
}
inline int MarginLevelsResponse::margin_levels_size() const {
  return _internal_margin_levels_size();
}
inline ::vega::MarginLevels* MarginLevelsResponse::mutable_margin_levels(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.MarginLevelsResponse.margin_levels)
  return margin_levels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >*
MarginLevelsResponse::mutable_margin_levels() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.MarginLevelsResponse.margin_levels)
  return &margin_levels_;
}
inline const ::vega::MarginLevels& MarginLevelsResponse::_internal_margin_levels(int index) const {
  return margin_levels_.Get(index);
}
inline const ::vega::MarginLevels& MarginLevelsResponse::margin_levels(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.MarginLevelsResponse.margin_levels)
  return _internal_margin_levels(index);
}
inline ::vega::MarginLevels* MarginLevelsResponse::_internal_add_margin_levels() {
  return margin_levels_.Add();
}
inline ::vega::MarginLevels* MarginLevelsResponse::add_margin_levels() {
  // @@protoc_insertion_point(field_add:api.v1.MarginLevelsResponse.margin_levels)
  return _internal_add_margin_levels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >&
MarginLevelsResponse::margin_levels() const {
  // @@protoc_insertion_point(field_list:api.v1.MarginLevelsResponse.margin_levels)
  return margin_levels_;
}

// -------------------------------------------------------------------

// MarketsDataSubscribeRequest

// string market_id = 1 [json_name = "marketId"];
inline void MarketsDataSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketsDataSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketsDataSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void MarketsDataSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketsDataSubscribeRequest.market_id)
}
inline std::string* MarketsDataSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketsDataSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketsDataSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketsDataSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketsDataSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketsDataSubscribeRequest.market_id)
}
inline void MarketsDataSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketsDataSubscribeRequest.market_id)
}
inline void MarketsDataSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketsDataSubscribeRequest.market_id)
}
inline std::string* MarketsDataSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketsDataSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketsDataSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketsDataSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketsDataSubscribeRequest.market_id)
}

// -------------------------------------------------------------------

// MarketsDataSubscribeResponse

// .vega.MarketData market_data = 1 [json_name = "marketData"];
inline bool MarketsDataSubscribeResponse::_internal_has_market_data() const {
  return this != internal_default_instance() && market_data_ != nullptr;
}
inline bool MarketsDataSubscribeResponse::has_market_data() const {
  return _internal_has_market_data();
}
inline const ::vega::MarketData& MarketsDataSubscribeResponse::_internal_market_data() const {
  const ::vega::MarketData* p = market_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarketData&>(
      ::vega::_MarketData_default_instance_);
}
inline const ::vega::MarketData& MarketsDataSubscribeResponse::market_data() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketsDataSubscribeResponse.market_data)
  return _internal_market_data();
}
inline void MarketsDataSubscribeResponse::unsafe_arena_set_allocated_market_data(
    ::vega::MarketData* market_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_data_);
  }
  market_data_ = market_data;
  if (market_data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.MarketsDataSubscribeResponse.market_data)
}
inline ::vega::MarketData* MarketsDataSubscribeResponse::release_market_data() {

  ::vega::MarketData* temp = market_data_;
  market_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarketData* MarketsDataSubscribeResponse::unsafe_arena_release_market_data() {
  // @@protoc_insertion_point(field_release:api.v1.MarketsDataSubscribeResponse.market_data)

  ::vega::MarketData* temp = market_data_;
  market_data_ = nullptr;
  return temp;
}
inline ::vega::MarketData* MarketsDataSubscribeResponse::_internal_mutable_market_data() {

  if (market_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarketData>(GetArena());
    market_data_ = p;
  }
  return market_data_;
}
inline ::vega::MarketData* MarketsDataSubscribeResponse::mutable_market_data() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketsDataSubscribeResponse.market_data)
  return _internal_mutable_market_data();
}
inline void MarketsDataSubscribeResponse::set_allocated_market_data(::vega::MarketData* market_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_data_);
  }
  if (market_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_data)->GetArena();
    if (message_arena != submessage_arena) {
      market_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_data, submessage_arena);
    }

  } else {

  }
  market_data_ = market_data;
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketsDataSubscribeResponse.market_data)
}

// -------------------------------------------------------------------

// MarketDataByIDRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void MarketDataByIDRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketDataByIDRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDataByIDRequest.market_id)
  return _internal_market_id();
}
inline void MarketDataByIDRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketDataByIDRequest.market_id)
}
inline std::string* MarketDataByIDRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDataByIDRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketDataByIDRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketDataByIDRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDataByIDRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketDataByIDRequest.market_id)
}
inline void MarketDataByIDRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketDataByIDRequest.market_id)
}
inline void MarketDataByIDRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketDataByIDRequest.market_id)
}
inline std::string* MarketDataByIDRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDataByIDRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDataByIDRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataByIDRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDataByIDRequest.market_id)
}

// -------------------------------------------------------------------

// MarketDataByIDResponse

// .vega.MarketData market_data = 1 [json_name = "marketData"];
inline bool MarketDataByIDResponse::_internal_has_market_data() const {
  return this != internal_default_instance() && market_data_ != nullptr;
}
inline bool MarketDataByIDResponse::has_market_data() const {
  return _internal_has_market_data();
}
inline const ::vega::MarketData& MarketDataByIDResponse::_internal_market_data() const {
  const ::vega::MarketData* p = market_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarketData&>(
      ::vega::_MarketData_default_instance_);
}
inline const ::vega::MarketData& MarketDataByIDResponse::market_data() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDataByIDResponse.market_data)
  return _internal_market_data();
}
inline void MarketDataByIDResponse::unsafe_arena_set_allocated_market_data(
    ::vega::MarketData* market_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_data_);
  }
  market_data_ = market_data;
  if (market_data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.MarketDataByIDResponse.market_data)
}
inline ::vega::MarketData* MarketDataByIDResponse::release_market_data() {

  ::vega::MarketData* temp = market_data_;
  market_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarketData* MarketDataByIDResponse::unsafe_arena_release_market_data() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDataByIDResponse.market_data)

  ::vega::MarketData* temp = market_data_;
  market_data_ = nullptr;
  return temp;
}
inline ::vega::MarketData* MarketDataByIDResponse::_internal_mutable_market_data() {

  if (market_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarketData>(GetArena());
    market_data_ = p;
  }
  return market_data_;
}
inline ::vega::MarketData* MarketDataByIDResponse::mutable_market_data() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDataByIDResponse.market_data)
  return _internal_mutable_market_data();
}
inline void MarketDataByIDResponse::set_allocated_market_data(::vega::MarketData* market_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_data_);
  }
  if (market_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_data)->GetArena();
    if (message_arena != submessage_arena) {
      market_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_data, submessage_arena);
    }

  } else {

  }
  market_data_ = market_data;
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDataByIDResponse.market_data)
}

// -------------------------------------------------------------------

// MarketsDataRequest

// -------------------------------------------------------------------

// MarketsDataResponse

// repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
inline int MarketsDataResponse::_internal_markets_data_size() const {
  return markets_data_.size();
}
inline int MarketsDataResponse::markets_data_size() const {
  return _internal_markets_data_size();
}
inline ::vega::MarketData* MarketsDataResponse::mutable_markets_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketsDataResponse.markets_data)
  return markets_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >*
MarketsDataResponse::mutable_markets_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.MarketsDataResponse.markets_data)
  return &markets_data_;
}
inline const ::vega::MarketData& MarketsDataResponse::_internal_markets_data(int index) const {
  return markets_data_.Get(index);
}
inline const ::vega::MarketData& MarketsDataResponse::markets_data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.MarketsDataResponse.markets_data)
  return _internal_markets_data(index);
}
inline ::vega::MarketData* MarketsDataResponse::_internal_add_markets_data() {
  return markets_data_.Add();
}
inline ::vega::MarketData* MarketsDataResponse::add_markets_data() {
  // @@protoc_insertion_point(field_add:api.v1.MarketsDataResponse.markets_data)
  return _internal_add_markets_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >&
MarketsDataResponse::markets_data() const {
  // @@protoc_insertion_point(field_list:api.v1.MarketsDataResponse.markets_data)
  return markets_data_;
}

// -------------------------------------------------------------------

// LastTradeRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void LastTradeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& LastTradeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.LastTradeRequest.market_id)
  return _internal_market_id();
}
inline void LastTradeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.LastTradeRequest.market_id)
}
inline std::string* LastTradeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.LastTradeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& LastTradeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void LastTradeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LastTradeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.LastTradeRequest.market_id)
}
inline void LastTradeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.LastTradeRequest.market_id)
}
inline void LastTradeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.LastTradeRequest.market_id)
}
inline std::string* LastTradeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LastTradeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.LastTradeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LastTradeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.LastTradeRequest.market_id)
}

// -------------------------------------------------------------------

// LastTradeResponse

// .vega.Trade trade = 1 [json_name = "trade"];
inline bool LastTradeResponse::_internal_has_trade() const {
  return this != internal_default_instance() && trade_ != nullptr;
}
inline bool LastTradeResponse::has_trade() const {
  return _internal_has_trade();
}
inline const ::vega::Trade& LastTradeResponse::_internal_trade() const {
  const ::vega::Trade* p = trade_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Trade&>(
      ::vega::_Trade_default_instance_);
}
inline const ::vega::Trade& LastTradeResponse::trade() const {
  // @@protoc_insertion_point(field_get:api.v1.LastTradeResponse.trade)
  return _internal_trade();
}
inline void LastTradeResponse::unsafe_arena_set_allocated_trade(
    ::vega::Trade* trade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_);
  }
  trade_ = trade;
  if (trade) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.LastTradeResponse.trade)
}
inline ::vega::Trade* LastTradeResponse::release_trade() {

  ::vega::Trade* temp = trade_;
  trade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Trade* LastTradeResponse::unsafe_arena_release_trade() {
  // @@protoc_insertion_point(field_release:api.v1.LastTradeResponse.trade)

  ::vega::Trade* temp = trade_;
  trade_ = nullptr;
  return temp;
}
inline ::vega::Trade* LastTradeResponse::_internal_mutable_trade() {

  if (trade_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Trade>(GetArena());
    trade_ = p;
  }
  return trade_;
}
inline ::vega::Trade* LastTradeResponse::mutable_trade() {
  // @@protoc_insertion_point(field_mutable:api.v1.LastTradeResponse.trade)
  return _internal_mutable_trade();
}
inline void LastTradeResponse::set_allocated_trade(::vega::Trade* trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_);
  }
  if (trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade)->GetArena();
    if (message_arena != submessage_arena) {
      trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }

  } else {

  }
  trade_ = trade;
  // @@protoc_insertion_point(field_set_allocated:api.v1.LastTradeResponse.trade)
}

// -------------------------------------------------------------------

// MarketByIDRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void MarketByIDRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketByIDRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketByIDRequest.market_id)
  return _internal_market_id();
}
inline void MarketByIDRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketByIDRequest.market_id)
}
inline std::string* MarketByIDRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketByIDRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketByIDRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketByIDRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketByIDRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketByIDRequest.market_id)
}
inline void MarketByIDRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketByIDRequest.market_id)
}
inline void MarketByIDRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketByIDRequest.market_id)
}
inline std::string* MarketByIDRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketByIDRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketByIDRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketByIDRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketByIDRequest.market_id)
}

// -------------------------------------------------------------------

// MarketByIDResponse

// .vega.Market market = 1 [json_name = "market"];
inline bool MarketByIDResponse::_internal_has_market() const {
  return this != internal_default_instance() && market_ != nullptr;
}
inline bool MarketByIDResponse::has_market() const {
  return _internal_has_market();
}
inline const ::vega::Market& MarketByIDResponse::_internal_market() const {
  const ::vega::Market* p = market_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Market&>(
      ::vega::_Market_default_instance_);
}
inline const ::vega::Market& MarketByIDResponse::market() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketByIDResponse.market)
  return _internal_market();
}
inline void MarketByIDResponse::unsafe_arena_set_allocated_market(
    ::vega::Market* market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_);
  }
  market_ = market;
  if (market) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.MarketByIDResponse.market)
}
inline ::vega::Market* MarketByIDResponse::release_market() {

  ::vega::Market* temp = market_;
  market_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Market* MarketByIDResponse::unsafe_arena_release_market() {
  // @@protoc_insertion_point(field_release:api.v1.MarketByIDResponse.market)

  ::vega::Market* temp = market_;
  market_ = nullptr;
  return temp;
}
inline ::vega::Market* MarketByIDResponse::_internal_mutable_market() {

  if (market_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Market>(GetArena());
    market_ = p;
  }
  return market_;
}
inline ::vega::Market* MarketByIDResponse::mutable_market() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketByIDResponse.market)
  return _internal_mutable_market();
}
inline void MarketByIDResponse::set_allocated_market(::vega::Market* market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_);
  }
  if (market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market)->GetArena();
    if (message_arena != submessage_arena) {
      market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market, submessage_arena);
    }

  } else {

  }
  market_ = market;
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketByIDResponse.market)
}

// -------------------------------------------------------------------

// PartyByIDRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void PartyByIDRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& PartyByIDRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PartyByIDRequest.party_id)
  return _internal_party_id();
}
inline void PartyByIDRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PartyByIDRequest.party_id)
}
inline std::string* PartyByIDRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PartyByIDRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& PartyByIDRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void PartyByIDRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyByIDRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PartyByIDRequest.party_id)
}
inline void PartyByIDRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PartyByIDRequest.party_id)
}
inline void PartyByIDRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PartyByIDRequest.party_id)
}
inline std::string* PartyByIDRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyByIDRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.PartyByIDRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyByIDRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PartyByIDRequest.party_id)
}

// -------------------------------------------------------------------

// PartyByIDResponse

// .vega.Party party = 1 [json_name = "party"];
inline bool PartyByIDResponse::_internal_has_party() const {
  return this != internal_default_instance() && party_ != nullptr;
}
inline bool PartyByIDResponse::has_party() const {
  return _internal_has_party();
}
inline const ::vega::Party& PartyByIDResponse::_internal_party() const {
  const ::vega::Party* p = party_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Party&>(
      ::vega::_Party_default_instance_);
}
inline const ::vega::Party& PartyByIDResponse::party() const {
  // @@protoc_insertion_point(field_get:api.v1.PartyByIDResponse.party)
  return _internal_party();
}
inline void PartyByIDResponse::unsafe_arena_set_allocated_party(
    ::vega::Party* party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_);
  }
  party_ = party;
  if (party) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PartyByIDResponse.party)
}
inline ::vega::Party* PartyByIDResponse::release_party() {

  ::vega::Party* temp = party_;
  party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Party* PartyByIDResponse::unsafe_arena_release_party() {
  // @@protoc_insertion_point(field_release:api.v1.PartyByIDResponse.party)

  ::vega::Party* temp = party_;
  party_ = nullptr;
  return temp;
}
inline ::vega::Party* PartyByIDResponse::_internal_mutable_party() {

  if (party_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Party>(GetArena());
    party_ = p;
  }
  return party_;
}
inline ::vega::Party* PartyByIDResponse::mutable_party() {
  // @@protoc_insertion_point(field_mutable:api.v1.PartyByIDResponse.party)
  return _internal_mutable_party();
}
inline void PartyByIDResponse::set_allocated_party(::vega::Party* party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_);
  }
  if (party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party)->GetArena();
    if (message_arena != submessage_arena) {
      party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }

  } else {

  }
  party_ = party;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PartyByIDResponse.party)
}

// -------------------------------------------------------------------

// PartiesRequest

// -------------------------------------------------------------------

// PartiesResponse

// repeated .vega.Party parties = 1 [json_name = "parties"];
inline int PartiesResponse::_internal_parties_size() const {
  return parties_.size();
}
inline int PartiesResponse::parties_size() const {
  return _internal_parties_size();
}
inline ::vega::Party* PartiesResponse::mutable_parties(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.PartiesResponse.parties)
  return parties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >*
PartiesResponse::mutable_parties() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.PartiesResponse.parties)
  return &parties_;
}
inline const ::vega::Party& PartiesResponse::_internal_parties(int index) const {
  return parties_.Get(index);
}
inline const ::vega::Party& PartiesResponse::parties(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.PartiesResponse.parties)
  return _internal_parties(index);
}
inline ::vega::Party* PartiesResponse::_internal_add_parties() {
  return parties_.Add();
}
inline ::vega::Party* PartiesResponse::add_parties() {
  // @@protoc_insertion_point(field_add:api.v1.PartiesResponse.parties)
  return _internal_add_parties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >&
PartiesResponse::parties() const {
  // @@protoc_insertion_point(field_list:api.v1.PartiesResponse.parties)
  return parties_;
}

// -------------------------------------------------------------------

// TradesByPartyRequest

// string party_id = 1 [json_name = "partyId"];
inline void TradesByPartyRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& TradesByPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByPartyRequest.party_id)
  return _internal_party_id();
}
inline void TradesByPartyRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.TradesByPartyRequest.party_id)
}
inline std::string* TradesByPartyRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByPartyRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& TradesByPartyRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void TradesByPartyRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByPartyRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.TradesByPartyRequest.party_id)
}
inline void TradesByPartyRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.TradesByPartyRequest.party_id)
}
inline void TradesByPartyRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.TradesByPartyRequest.party_id)
}
inline std::string* TradesByPartyRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByPartyRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.TradesByPartyRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByPartyRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesByPartyRequest.party_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void TradesByPartyRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& TradesByPartyRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByPartyRequest.market_id)
  return _internal_market_id();
}
inline void TradesByPartyRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.TradesByPartyRequest.market_id)
}
inline std::string* TradesByPartyRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByPartyRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& TradesByPartyRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void TradesByPartyRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByPartyRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.TradesByPartyRequest.market_id)
}
inline void TradesByPartyRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.TradesByPartyRequest.market_id)
}
inline void TradesByPartyRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.TradesByPartyRequest.market_id)
}
inline std::string* TradesByPartyRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByPartyRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.TradesByPartyRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByPartyRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesByPartyRequest.market_id)
}

// .api.v1.Pagination pagination = 3 [json_name = "pagination"];
inline bool TradesByPartyRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool TradesByPartyRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void TradesByPartyRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::v1::Pagination& TradesByPartyRequest::_internal_pagination() const {
  const ::api::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::Pagination&>(
      ::api::v1::_Pagination_default_instance_);
}
inline const ::api::v1::Pagination& TradesByPartyRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByPartyRequest.pagination)
  return _internal_pagination();
}
inline void TradesByPartyRequest::unsafe_arena_set_allocated_pagination(
    ::api::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.TradesByPartyRequest.pagination)
}
inline ::api::v1::Pagination* TradesByPartyRequest::release_pagination() {

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::Pagination* TradesByPartyRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.v1.TradesByPartyRequest.pagination)

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::v1::Pagination* TradesByPartyRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::v1::Pagination* TradesByPartyRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByPartyRequest.pagination)
  return _internal_mutable_pagination();
}
inline void TradesByPartyRequest::set_allocated_pagination(::api::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesByPartyRequest.pagination)
}

// -------------------------------------------------------------------

// TradesByPartyResponse

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesByPartyResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesByPartyResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesByPartyResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByPartyResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesByPartyResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.TradesByPartyResponse.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesByPartyResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesByPartyResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByPartyResponse.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesByPartyResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesByPartyResponse::add_trades() {
  // @@protoc_insertion_point(field_add:api.v1.TradesByPartyResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesByPartyResponse::trades() const {
  // @@protoc_insertion_point(field_list:api.v1.TradesByPartyResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// TradesByOrderRequest

// string order_id = 1 [json_name = "orderId"];
inline void TradesByOrderRequest::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& TradesByOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByOrderRequest.order_id)
  return _internal_order_id();
}
inline void TradesByOrderRequest::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:api.v1.TradesByOrderRequest.order_id)
}
inline std::string* TradesByOrderRequest::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByOrderRequest.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& TradesByOrderRequest::_internal_order_id() const {
  return order_id_.Get();
}
inline void TradesByOrderRequest::_internal_set_order_id(const std::string& value) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByOrderRequest::set_order_id(std::string&& value) {

  order_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.TradesByOrderRequest.order_id)
}
inline void TradesByOrderRequest::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.TradesByOrderRequest.order_id)
}
inline void TradesByOrderRequest::set_order_id(const char* value,
    size_t size) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.TradesByOrderRequest.order_id)
}
inline std::string* TradesByOrderRequest::_internal_mutable_order_id() {

  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:api.v1.TradesByOrderRequest.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByOrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {

  } else {

  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesByOrderRequest.order_id)
}

// -------------------------------------------------------------------

// TradesByOrderResponse

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesByOrderResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesByOrderResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesByOrderResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByOrderResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesByOrderResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.TradesByOrderResponse.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesByOrderResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesByOrderResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByOrderResponse.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesByOrderResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesByOrderResponse::add_trades() {
  // @@protoc_insertion_point(field_add:api.v1.TradesByOrderResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesByOrderResponse::trades() const {
  // @@protoc_insertion_point(field_list:api.v1.TradesByOrderResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// AccountsSubscribeRequest

// string market_id = 1 [json_name = "marketId"];
inline void AccountsSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& AccountsSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.AccountsSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void AccountsSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.AccountsSubscribeRequest.market_id)
}
inline std::string* AccountsSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.AccountsSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& AccountsSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void AccountsSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountsSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.AccountsSubscribeRequest.market_id)
}
inline void AccountsSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.AccountsSubscribeRequest.market_id)
}
inline void AccountsSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.AccountsSubscribeRequest.market_id)
}
inline std::string* AccountsSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountsSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.AccountsSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountsSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.AccountsSubscribeRequest.market_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void AccountsSubscribeRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& AccountsSubscribeRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.AccountsSubscribeRequest.party_id)
  return _internal_party_id();
}
inline void AccountsSubscribeRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.AccountsSubscribeRequest.party_id)
}
inline std::string* AccountsSubscribeRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.AccountsSubscribeRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& AccountsSubscribeRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void AccountsSubscribeRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountsSubscribeRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.AccountsSubscribeRequest.party_id)
}
inline void AccountsSubscribeRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.AccountsSubscribeRequest.party_id)
}
inline void AccountsSubscribeRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.AccountsSubscribeRequest.party_id)
}
inline std::string* AccountsSubscribeRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountsSubscribeRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.AccountsSubscribeRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountsSubscribeRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.AccountsSubscribeRequest.party_id)
}

// string asset = 3 [json_name = "asset"];
inline void AccountsSubscribeRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& AccountsSubscribeRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.v1.AccountsSubscribeRequest.asset)
  return _internal_asset();
}
inline void AccountsSubscribeRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.v1.AccountsSubscribeRequest.asset)
}
inline std::string* AccountsSubscribeRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.v1.AccountsSubscribeRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& AccountsSubscribeRequest::_internal_asset() const {
  return asset_.Get();
}
inline void AccountsSubscribeRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountsSubscribeRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.AccountsSubscribeRequest.asset)
}
inline void AccountsSubscribeRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.AccountsSubscribeRequest.asset)
}
inline void AccountsSubscribeRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.AccountsSubscribeRequest.asset)
}
inline std::string* AccountsSubscribeRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountsSubscribeRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.v1.AccountsSubscribeRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountsSubscribeRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.AccountsSubscribeRequest.asset)
}

// .vega.AccountType type = 4 [json_name = "type"];
inline void AccountsSubscribeRequest::clear_type() {
  type_ = 0;
}
inline ::vega::AccountType AccountsSubscribeRequest::_internal_type() const {
  return static_cast< ::vega::AccountType >(type_);
}
inline ::vega::AccountType AccountsSubscribeRequest::type() const {
  // @@protoc_insertion_point(field_get:api.v1.AccountsSubscribeRequest.type)
  return _internal_type();
}
inline void AccountsSubscribeRequest::_internal_set_type(::vega::AccountType value) {

  type_ = value;
}
inline void AccountsSubscribeRequest::set_type(::vega::AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.v1.AccountsSubscribeRequest.type)
}

// -------------------------------------------------------------------

// AccountsSubscribeResponse

// .vega.Account account = 1 [json_name = "account"];
inline bool AccountsSubscribeResponse::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AccountsSubscribeResponse::has_account() const {
  return _internal_has_account();
}
inline const ::vega::Account& AccountsSubscribeResponse::_internal_account() const {
  const ::vega::Account* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Account&>(
      ::vega::_Account_default_instance_);
}
inline const ::vega::Account& AccountsSubscribeResponse::account() const {
  // @@protoc_insertion_point(field_get:api.v1.AccountsSubscribeResponse.account)
  return _internal_account();
}
inline void AccountsSubscribeResponse::unsafe_arena_set_allocated_account(
    ::vega::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.AccountsSubscribeResponse.account)
}
inline ::vega::Account* AccountsSubscribeResponse::release_account() {

  ::vega::Account* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Account* AccountsSubscribeResponse::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:api.v1.AccountsSubscribeResponse.account)

  ::vega::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::vega::Account* AccountsSubscribeResponse::_internal_mutable_account() {

  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::vega::Account* AccountsSubscribeResponse::mutable_account() {
  // @@protoc_insertion_point(field_mutable:api.v1.AccountsSubscribeResponse.account)
  return _internal_mutable_account();
}
inline void AccountsSubscribeResponse::set_allocated_account(::vega::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account)->GetArena();
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }

  } else {

  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:api.v1.AccountsSubscribeResponse.account)
}

// -------------------------------------------------------------------

// OrdersSubscribeRequest

// string market_id = 1 [json_name = "marketId"];
inline void OrdersSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& OrdersSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void OrdersSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrdersSubscribeRequest.market_id)
}
inline std::string* OrdersSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& OrdersSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void OrdersSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrdersSubscribeRequest.market_id)
}
inline void OrdersSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrdersSubscribeRequest.market_id)
}
inline void OrdersSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrdersSubscribeRequest.market_id)
}
inline std::string* OrdersSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrdersSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrdersSubscribeRequest.market_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void OrdersSubscribeRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& OrdersSubscribeRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersSubscribeRequest.party_id)
  return _internal_party_id();
}
inline void OrdersSubscribeRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrdersSubscribeRequest.party_id)
}
inline std::string* OrdersSubscribeRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersSubscribeRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& OrdersSubscribeRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void OrdersSubscribeRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersSubscribeRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrdersSubscribeRequest.party_id)
}
inline void OrdersSubscribeRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrdersSubscribeRequest.party_id)
}
inline void OrdersSubscribeRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrdersSubscribeRequest.party_id)
}
inline std::string* OrdersSubscribeRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersSubscribeRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrdersSubscribeRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersSubscribeRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrdersSubscribeRequest.party_id)
}

// -------------------------------------------------------------------

// TradesSubscribeRequest

// string market_id = 1 [json_name = "marketId"];
inline void TradesSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& TradesSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void TradesSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.TradesSubscribeRequest.market_id)
}
inline std::string* TradesSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& TradesSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void TradesSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.TradesSubscribeRequest.market_id)
}
inline void TradesSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.TradesSubscribeRequest.market_id)
}
inline void TradesSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.TradesSubscribeRequest.market_id)
}
inline std::string* TradesSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.TradesSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesSubscribeRequest.market_id)
}

// string party_id = 2 [json_name = "partyId"];
inline void TradesSubscribeRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& TradesSubscribeRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesSubscribeRequest.party_id)
  return _internal_party_id();
}
inline void TradesSubscribeRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.TradesSubscribeRequest.party_id)
}
inline std::string* TradesSubscribeRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesSubscribeRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& TradesSubscribeRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void TradesSubscribeRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesSubscribeRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.TradesSubscribeRequest.party_id)
}
inline void TradesSubscribeRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.TradesSubscribeRequest.party_id)
}
inline void TradesSubscribeRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.TradesSubscribeRequest.party_id)
}
inline std::string* TradesSubscribeRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesSubscribeRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.TradesSubscribeRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesSubscribeRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesSubscribeRequest.party_id)
}

// -------------------------------------------------------------------

// CandlesSubscribeRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void CandlesSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& CandlesSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.CandlesSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void CandlesSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.CandlesSubscribeRequest.market_id)
}
inline std::string* CandlesSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.CandlesSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& CandlesSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void CandlesSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CandlesSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.CandlesSubscribeRequest.market_id)
}
inline void CandlesSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.CandlesSubscribeRequest.market_id)
}
inline void CandlesSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.CandlesSubscribeRequest.market_id)
}
inline std::string* CandlesSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CandlesSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.CandlesSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CandlesSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.CandlesSubscribeRequest.market_id)
}

// .vega.Interval interval = 2 [json_name = "interval"];
inline void CandlesSubscribeRequest::clear_interval() {
  interval_ = 0;
}
inline ::vega::Interval CandlesSubscribeRequest::_internal_interval() const {
  return static_cast< ::vega::Interval >(interval_);
}
inline ::vega::Interval CandlesSubscribeRequest::interval() const {
  // @@protoc_insertion_point(field_get:api.v1.CandlesSubscribeRequest.interval)
  return _internal_interval();
}
inline void CandlesSubscribeRequest::_internal_set_interval(::vega::Interval value) {

  interval_ = value;
}
inline void CandlesSubscribeRequest::set_interval(::vega::Interval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:api.v1.CandlesSubscribeRequest.interval)
}

// -------------------------------------------------------------------

// CandlesSubscribeResponse

// .vega.Candle candle = 1 [json_name = "candle"];
inline bool CandlesSubscribeResponse::_internal_has_candle() const {
  return this != internal_default_instance() && candle_ != nullptr;
}
inline bool CandlesSubscribeResponse::has_candle() const {
  return _internal_has_candle();
}
inline const ::vega::Candle& CandlesSubscribeResponse::_internal_candle() const {
  const ::vega::Candle* p = candle_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Candle&>(
      ::vega::_Candle_default_instance_);
}
inline const ::vega::Candle& CandlesSubscribeResponse::candle() const {
  // @@protoc_insertion_point(field_get:api.v1.CandlesSubscribeResponse.candle)
  return _internal_candle();
}
inline void CandlesSubscribeResponse::unsafe_arena_set_allocated_candle(
    ::vega::Candle* candle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candle_);
  }
  candle_ = candle;
  if (candle) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.CandlesSubscribeResponse.candle)
}
inline ::vega::Candle* CandlesSubscribeResponse::release_candle() {

  ::vega::Candle* temp = candle_;
  candle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Candle* CandlesSubscribeResponse::unsafe_arena_release_candle() {
  // @@protoc_insertion_point(field_release:api.v1.CandlesSubscribeResponse.candle)

  ::vega::Candle* temp = candle_;
  candle_ = nullptr;
  return temp;
}
inline ::vega::Candle* CandlesSubscribeResponse::_internal_mutable_candle() {

  if (candle_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Candle>(GetArena());
    candle_ = p;
  }
  return candle_;
}
inline ::vega::Candle* CandlesSubscribeResponse::mutable_candle() {
  // @@protoc_insertion_point(field_mutable:api.v1.CandlesSubscribeResponse.candle)
  return _internal_mutable_candle();
}
inline void CandlesSubscribeResponse::set_allocated_candle(::vega::Candle* candle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(candle_);
  }
  if (candle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candle)->GetArena();
    if (message_arena != submessage_arena) {
      candle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candle, submessage_arena);
    }

  } else {

  }
  candle_ = candle;
  // @@protoc_insertion_point(field_set_allocated:api.v1.CandlesSubscribeResponse.candle)
}

// -------------------------------------------------------------------

// MarketDepthSubscribeRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void MarketDepthSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void MarketDepthSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketDepthSubscribeRequest.market_id)
}
inline std::string* MarketDepthSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketDepthSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketDepthSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketDepthSubscribeRequest.market_id)
}
inline void MarketDepthSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketDepthSubscribeRequest.market_id)
}
inline void MarketDepthSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketDepthSubscribeRequest.market_id)
}
inline std::string* MarketDepthSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDepthSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDepthSubscribeRequest.market_id)
}

// -------------------------------------------------------------------

// MarketDepthSubscribeResponse

// .vega.MarketDepth market_depth = 1 [json_name = "marketDepth"];
inline bool MarketDepthSubscribeResponse::_internal_has_market_depth() const {
  return this != internal_default_instance() && market_depth_ != nullptr;
}
inline bool MarketDepthSubscribeResponse::has_market_depth() const {
  return _internal_has_market_depth();
}
inline const ::vega::MarketDepth& MarketDepthSubscribeResponse::_internal_market_depth() const {
  const ::vega::MarketDepth* p = market_depth_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarketDepth&>(
      ::vega::_MarketDepth_default_instance_);
}
inline const ::vega::MarketDepth& MarketDepthSubscribeResponse::market_depth() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthSubscribeResponse.market_depth)
  return _internal_market_depth();
}
inline void MarketDepthSubscribeResponse::unsafe_arena_set_allocated_market_depth(
    ::vega::MarketDepth* market_depth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_depth_);
  }
  market_depth_ = market_depth;
  if (market_depth) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.MarketDepthSubscribeResponse.market_depth)
}
inline ::vega::MarketDepth* MarketDepthSubscribeResponse::release_market_depth() {

  ::vega::MarketDepth* temp = market_depth_;
  market_depth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarketDepth* MarketDepthSubscribeResponse::unsafe_arena_release_market_depth() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDepthSubscribeResponse.market_depth)

  ::vega::MarketDepth* temp = market_depth_;
  market_depth_ = nullptr;
  return temp;
}
inline ::vega::MarketDepth* MarketDepthSubscribeResponse::_internal_mutable_market_depth() {

  if (market_depth_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarketDepth>(GetArena());
    market_depth_ = p;
  }
  return market_depth_;
}
inline ::vega::MarketDepth* MarketDepthSubscribeResponse::mutable_market_depth() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthSubscribeResponse.market_depth)
  return _internal_mutable_market_depth();
}
inline void MarketDepthSubscribeResponse::set_allocated_market_depth(::vega::MarketDepth* market_depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_depth_);
  }
  if (market_depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_depth)->GetArena();
    if (message_arena != submessage_arena) {
      market_depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_depth, submessage_arena);
    }

  } else {

  }
  market_depth_ = market_depth;
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDepthSubscribeResponse.market_depth)
}

// -------------------------------------------------------------------

// MarketDepthUpdatesSubscribeRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void MarketDepthUpdatesSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthUpdatesSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void MarketDepthUpdatesSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
}
inline std::string* MarketDepthUpdatesSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketDepthUpdatesSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketDepthUpdatesSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthUpdatesSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
}
inline void MarketDepthUpdatesSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
}
inline void MarketDepthUpdatesSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
}
inline std::string* MarketDepthUpdatesSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthUpdatesSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthUpdatesSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDepthUpdatesSubscribeRequest.market_id)
}

// -------------------------------------------------------------------

// MarketDepthUpdatesSubscribeResponse

// .vega.MarketDepthUpdate update = 1 [json_name = "update"];
inline bool MarketDepthUpdatesSubscribeResponse::_internal_has_update() const {
  return this != internal_default_instance() && update_ != nullptr;
}
inline bool MarketDepthUpdatesSubscribeResponse::has_update() const {
  return _internal_has_update();
}
inline const ::vega::MarketDepthUpdate& MarketDepthUpdatesSubscribeResponse::_internal_update() const {
  const ::vega::MarketDepthUpdate* p = update_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarketDepthUpdate&>(
      ::vega::_MarketDepthUpdate_default_instance_);
}
inline const ::vega::MarketDepthUpdate& MarketDepthUpdatesSubscribeResponse::update() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthUpdatesSubscribeResponse.update)
  return _internal_update();
}
inline void MarketDepthUpdatesSubscribeResponse::unsafe_arena_set_allocated_update(
    ::vega::MarketDepthUpdate* update) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_);
  }
  update_ = update;
  if (update) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.MarketDepthUpdatesSubscribeResponse.update)
}
inline ::vega::MarketDepthUpdate* MarketDepthUpdatesSubscribeResponse::release_update() {

  ::vega::MarketDepthUpdate* temp = update_;
  update_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarketDepthUpdate* MarketDepthUpdatesSubscribeResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDepthUpdatesSubscribeResponse.update)

  ::vega::MarketDepthUpdate* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::vega::MarketDepthUpdate* MarketDepthUpdatesSubscribeResponse::_internal_mutable_update() {

  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarketDepthUpdate>(GetArena());
    update_ = p;
  }
  return update_;
}
inline ::vega::MarketDepthUpdate* MarketDepthUpdatesSubscribeResponse::mutable_update() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthUpdatesSubscribeResponse.update)
  return _internal_mutable_update();
}
inline void MarketDepthUpdatesSubscribeResponse::set_allocated_update(::vega::MarketDepthUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_);
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update)->GetArena();
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }

  } else {

  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDepthUpdatesSubscribeResponse.update)
}

// -------------------------------------------------------------------

// PositionsSubscribeRequest

// string party_id = 1 [json_name = "partyId"];
inline void PositionsSubscribeRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& PositionsSubscribeRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PositionsSubscribeRequest.party_id)
  return _internal_party_id();
}
inline void PositionsSubscribeRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PositionsSubscribeRequest.party_id)
}
inline std::string* PositionsSubscribeRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PositionsSubscribeRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& PositionsSubscribeRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void PositionsSubscribeRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsSubscribeRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PositionsSubscribeRequest.party_id)
}
inline void PositionsSubscribeRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PositionsSubscribeRequest.party_id)
}
inline void PositionsSubscribeRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PositionsSubscribeRequest.party_id)
}
inline std::string* PositionsSubscribeRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsSubscribeRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.PositionsSubscribeRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsSubscribeRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PositionsSubscribeRequest.party_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void PositionsSubscribeRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& PositionsSubscribeRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PositionsSubscribeRequest.market_id)
  return _internal_market_id();
}
inline void PositionsSubscribeRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PositionsSubscribeRequest.market_id)
}
inline std::string* PositionsSubscribeRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PositionsSubscribeRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& PositionsSubscribeRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void PositionsSubscribeRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsSubscribeRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PositionsSubscribeRequest.market_id)
}
inline void PositionsSubscribeRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PositionsSubscribeRequest.market_id)
}
inline void PositionsSubscribeRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PositionsSubscribeRequest.market_id)
}
inline std::string* PositionsSubscribeRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsSubscribeRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.PositionsSubscribeRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsSubscribeRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PositionsSubscribeRequest.market_id)
}

// -------------------------------------------------------------------

// PositionsSubscribeResponse

// .vega.Position position = 1 [json_name = "position"];
inline bool PositionsSubscribeResponse::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PositionsSubscribeResponse::has_position() const {
  return _internal_has_position();
}
inline const ::vega::Position& PositionsSubscribeResponse::_internal_position() const {
  const ::vega::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Position&>(
      ::vega::_Position_default_instance_);
}
inline const ::vega::Position& PositionsSubscribeResponse::position() const {
  // @@protoc_insertion_point(field_get:api.v1.PositionsSubscribeResponse.position)
  return _internal_position();
}
inline void PositionsSubscribeResponse::unsafe_arena_set_allocated_position(
    ::vega::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PositionsSubscribeResponse.position)
}
inline ::vega::Position* PositionsSubscribeResponse::release_position() {

  ::vega::Position* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Position* PositionsSubscribeResponse::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:api.v1.PositionsSubscribeResponse.position)

  ::vega::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vega::Position* PositionsSubscribeResponse::_internal_mutable_position() {

  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::vega::Position* PositionsSubscribeResponse::mutable_position() {
  // @@protoc_insertion_point(field_mutable:api.v1.PositionsSubscribeResponse.position)
  return _internal_mutable_position();
}
inline void PositionsSubscribeResponse::set_allocated_position(::vega::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }

  } else {

  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PositionsSubscribeResponse.position)
}

// -------------------------------------------------------------------

// OrdersByMarketRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void OrdersByMarketRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& OrdersByMarketRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersByMarketRequest.market_id)
  return _internal_market_id();
}
inline void OrdersByMarketRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrdersByMarketRequest.market_id)
}
inline std::string* OrdersByMarketRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersByMarketRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& OrdersByMarketRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void OrdersByMarketRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersByMarketRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrdersByMarketRequest.market_id)
}
inline void OrdersByMarketRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrdersByMarketRequest.market_id)
}
inline void OrdersByMarketRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrdersByMarketRequest.market_id)
}
inline std::string* OrdersByMarketRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersByMarketRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrdersByMarketRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersByMarketRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrdersByMarketRequest.market_id)
}

// .api.v1.Pagination pagination = 2 [json_name = "pagination"];
inline bool OrdersByMarketRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool OrdersByMarketRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void OrdersByMarketRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::v1::Pagination& OrdersByMarketRequest::_internal_pagination() const {
  const ::api::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::Pagination&>(
      ::api::v1::_Pagination_default_instance_);
}
inline const ::api::v1::Pagination& OrdersByMarketRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersByMarketRequest.pagination)
  return _internal_pagination();
}
inline void OrdersByMarketRequest::unsafe_arena_set_allocated_pagination(
    ::api::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.OrdersByMarketRequest.pagination)
}
inline ::api::v1::Pagination* OrdersByMarketRequest::release_pagination() {

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::Pagination* OrdersByMarketRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.v1.OrdersByMarketRequest.pagination)

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::v1::Pagination* OrdersByMarketRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::v1::Pagination* OrdersByMarketRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersByMarketRequest.pagination)
  return _internal_mutable_pagination();
}
inline void OrdersByMarketRequest::set_allocated_pagination(::api::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrdersByMarketRequest.pagination)
}

// -------------------------------------------------------------------

// OrdersByMarketResponse

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrdersByMarketResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int OrdersByMarketResponse::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrdersByMarketResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersByMarketResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrdersByMarketResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.OrdersByMarketResponse.orders)
  return &orders_;
}
inline const ::vega::Order& OrdersByMarketResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrdersByMarketResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersByMarketResponse.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrdersByMarketResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrdersByMarketResponse::add_orders() {
  // @@protoc_insertion_point(field_add:api.v1.OrdersByMarketResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrdersByMarketResponse::orders() const {
  // @@protoc_insertion_point(field_list:api.v1.OrdersByMarketResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// OrdersByPartyRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void OrdersByPartyRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& OrdersByPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersByPartyRequest.party_id)
  return _internal_party_id();
}
inline void OrdersByPartyRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrdersByPartyRequest.party_id)
}
inline std::string* OrdersByPartyRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersByPartyRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& OrdersByPartyRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void OrdersByPartyRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersByPartyRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrdersByPartyRequest.party_id)
}
inline void OrdersByPartyRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrdersByPartyRequest.party_id)
}
inline void OrdersByPartyRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrdersByPartyRequest.party_id)
}
inline std::string* OrdersByPartyRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersByPartyRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrdersByPartyRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersByPartyRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrdersByPartyRequest.party_id)
}

// .api.v1.Pagination pagination = 2 [json_name = "pagination"];
inline bool OrdersByPartyRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool OrdersByPartyRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void OrdersByPartyRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::v1::Pagination& OrdersByPartyRequest::_internal_pagination() const {
  const ::api::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::Pagination&>(
      ::api::v1::_Pagination_default_instance_);
}
inline const ::api::v1::Pagination& OrdersByPartyRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersByPartyRequest.pagination)
  return _internal_pagination();
}
inline void OrdersByPartyRequest::unsafe_arena_set_allocated_pagination(
    ::api::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.OrdersByPartyRequest.pagination)
}
inline ::api::v1::Pagination* OrdersByPartyRequest::release_pagination() {

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::Pagination* OrdersByPartyRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.v1.OrdersByPartyRequest.pagination)

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::v1::Pagination* OrdersByPartyRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::v1::Pagination* OrdersByPartyRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersByPartyRequest.pagination)
  return _internal_mutable_pagination();
}
inline void OrdersByPartyRequest::set_allocated_pagination(::api::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrdersByPartyRequest.pagination)
}

// -------------------------------------------------------------------

// OrdersByPartyResponse

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrdersByPartyResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int OrdersByPartyResponse::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrdersByPartyResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersByPartyResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrdersByPartyResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.OrdersByPartyResponse.orders)
  return &orders_;
}
inline const ::vega::Order& OrdersByPartyResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrdersByPartyResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersByPartyResponse.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrdersByPartyResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrdersByPartyResponse::add_orders() {
  // @@protoc_insertion_point(field_add:api.v1.OrdersByPartyResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrdersByPartyResponse::orders() const {
  // @@protoc_insertion_point(field_list:api.v1.OrdersByPartyResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// OrderByMarketAndIDRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void OrderByMarketAndIDRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& OrderByMarketAndIDRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByMarketAndIDRequest.market_id)
  return _internal_market_id();
}
inline void OrderByMarketAndIDRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrderByMarketAndIDRequest.market_id)
}
inline std::string* OrderByMarketAndIDRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderByMarketAndIDRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& OrderByMarketAndIDRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void OrderByMarketAndIDRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByMarketAndIDRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrderByMarketAndIDRequest.market_id)
}
inline void OrderByMarketAndIDRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrderByMarketAndIDRequest.market_id)
}
inline void OrderByMarketAndIDRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrderByMarketAndIDRequest.market_id)
}
inline std::string* OrderByMarketAndIDRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByMarketAndIDRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrderByMarketAndIDRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByMarketAndIDRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderByMarketAndIDRequest.market_id)
}

// string order_id = 2 [json_name = "orderId", (.validator.field) = {
inline void OrderByMarketAndIDRequest::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& OrderByMarketAndIDRequest::order_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByMarketAndIDRequest.order_id)
  return _internal_order_id();
}
inline void OrderByMarketAndIDRequest::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrderByMarketAndIDRequest.order_id)
}
inline std::string* OrderByMarketAndIDRequest::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderByMarketAndIDRequest.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& OrderByMarketAndIDRequest::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderByMarketAndIDRequest::_internal_set_order_id(const std::string& value) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByMarketAndIDRequest::set_order_id(std::string&& value) {

  order_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrderByMarketAndIDRequest.order_id)
}
inline void OrderByMarketAndIDRequest::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrderByMarketAndIDRequest.order_id)
}
inline void OrderByMarketAndIDRequest::set_order_id(const char* value,
    size_t size) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrderByMarketAndIDRequest.order_id)
}
inline std::string* OrderByMarketAndIDRequest::_internal_mutable_order_id() {

  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByMarketAndIDRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrderByMarketAndIDRequest.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByMarketAndIDRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {

  } else {

  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderByMarketAndIDRequest.order_id)
}

// -------------------------------------------------------------------

// OrderByMarketAndIDResponse

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderByMarketAndIDResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderByMarketAndIDResponse::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& OrderByMarketAndIDResponse::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderByMarketAndIDResponse::order() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByMarketAndIDResponse.order)
  return _internal_order();
}
inline void OrderByMarketAndIDResponse::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.OrderByMarketAndIDResponse.order)
}
inline ::vega::Order* OrderByMarketAndIDResponse::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderByMarketAndIDResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.v1.OrderByMarketAndIDResponse.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderByMarketAndIDResponse::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderByMarketAndIDResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderByMarketAndIDResponse.order)
  return _internal_mutable_order();
}
inline void OrderByMarketAndIDResponse::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderByMarketAndIDResponse.order)
}

// -------------------------------------------------------------------

// OrderByReferenceRequest

// string reference = 1 [json_name = "reference", (.validator.field) = {
inline void OrderByReferenceRequest::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& OrderByReferenceRequest::reference() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByReferenceRequest.reference)
  return _internal_reference();
}
inline void OrderByReferenceRequest::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:api.v1.OrderByReferenceRequest.reference)
}
inline std::string* OrderByReferenceRequest::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderByReferenceRequest.reference)
  return _internal_mutable_reference();
}
inline const std::string& OrderByReferenceRequest::_internal_reference() const {
  return reference_.Get();
}
inline void OrderByReferenceRequest::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByReferenceRequest::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrderByReferenceRequest.reference)
}
inline void OrderByReferenceRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrderByReferenceRequest.reference)
}
inline void OrderByReferenceRequest::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrderByReferenceRequest.reference)
}
inline std::string* OrderByReferenceRequest::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByReferenceRequest::release_reference() {
  // @@protoc_insertion_point(field_release:api.v1.OrderByReferenceRequest.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByReferenceRequest::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderByReferenceRequest.reference)
}

// -------------------------------------------------------------------

// OrderByReferenceResponse

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderByReferenceResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderByReferenceResponse::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& OrderByReferenceResponse::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderByReferenceResponse::order() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByReferenceResponse.order)
  return _internal_order();
}
inline void OrderByReferenceResponse::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.OrderByReferenceResponse.order)
}
inline ::vega::Order* OrderByReferenceResponse::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderByReferenceResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.v1.OrderByReferenceResponse.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderByReferenceResponse::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderByReferenceResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderByReferenceResponse.order)
  return _internal_mutable_order();
}
inline void OrderByReferenceResponse::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderByReferenceResponse.order)
}

// -------------------------------------------------------------------

// MarketsRequest

// -------------------------------------------------------------------

// MarketsResponse

// repeated .vega.Market markets = 1 [json_name = "markets"];
inline int MarketsResponse::_internal_markets_size() const {
  return markets_.size();
}
inline int MarketsResponse::markets_size() const {
  return _internal_markets_size();
}
inline ::vega::Market* MarketsResponse::mutable_markets(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketsResponse.markets)
  return markets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >*
MarketsResponse::mutable_markets() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.MarketsResponse.markets)
  return &markets_;
}
inline const ::vega::Market& MarketsResponse::_internal_markets(int index) const {
  return markets_.Get(index);
}
inline const ::vega::Market& MarketsResponse::markets(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.MarketsResponse.markets)
  return _internal_markets(index);
}
inline ::vega::Market* MarketsResponse::_internal_add_markets() {
  return markets_.Add();
}
inline ::vega::Market* MarketsResponse::add_markets() {
  // @@protoc_insertion_point(field_add:api.v1.MarketsResponse.markets)
  return _internal_add_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >&
MarketsResponse::markets() const {
  // @@protoc_insertion_point(field_list:api.v1.MarketsResponse.markets)
  return markets_;
}

// -------------------------------------------------------------------

// CandlesRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void CandlesRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& CandlesRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.CandlesRequest.market_id)
  return _internal_market_id();
}
inline void CandlesRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.CandlesRequest.market_id)
}
inline std::string* CandlesRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.CandlesRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& CandlesRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void CandlesRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CandlesRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.CandlesRequest.market_id)
}
inline void CandlesRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.CandlesRequest.market_id)
}
inline void CandlesRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.CandlesRequest.market_id)
}
inline std::string* CandlesRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CandlesRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.CandlesRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CandlesRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.CandlesRequest.market_id)
}

// int64 since_timestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
inline void CandlesRequest::clear_since_timestamp() {
  since_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CandlesRequest::_internal_since_timestamp() const {
  return since_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CandlesRequest::since_timestamp() const {
  // @@protoc_insertion_point(field_get:api.v1.CandlesRequest.since_timestamp)
  return _internal_since_timestamp();
}
inline void CandlesRequest::_internal_set_since_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  since_timestamp_ = value;
}
inline void CandlesRequest::set_since_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_since_timestamp(value);
  // @@protoc_insertion_point(field_set:api.v1.CandlesRequest.since_timestamp)
}

// .vega.Interval interval = 3 [json_name = "interval"];
inline void CandlesRequest::clear_interval() {
  interval_ = 0;
}
inline ::vega::Interval CandlesRequest::_internal_interval() const {
  return static_cast< ::vega::Interval >(interval_);
}
inline ::vega::Interval CandlesRequest::interval() const {
  // @@protoc_insertion_point(field_get:api.v1.CandlesRequest.interval)
  return _internal_interval();
}
inline void CandlesRequest::_internal_set_interval(::vega::Interval value) {

  interval_ = value;
}
inline void CandlesRequest::set_interval(::vega::Interval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:api.v1.CandlesRequest.interval)
}

// -------------------------------------------------------------------

// CandlesResponse

// repeated .vega.Candle candles = 1 [json_name = "candles"];
inline int CandlesResponse::_internal_candles_size() const {
  return candles_.size();
}
inline int CandlesResponse::candles_size() const {
  return _internal_candles_size();
}
inline ::vega::Candle* CandlesResponse::mutable_candles(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.CandlesResponse.candles)
  return candles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >*
CandlesResponse::mutable_candles() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.CandlesResponse.candles)
  return &candles_;
}
inline const ::vega::Candle& CandlesResponse::_internal_candles(int index) const {
  return candles_.Get(index);
}
inline const ::vega::Candle& CandlesResponse::candles(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.CandlesResponse.candles)
  return _internal_candles(index);
}
inline ::vega::Candle* CandlesResponse::_internal_add_candles() {
  return candles_.Add();
}
inline ::vega::Candle* CandlesResponse::add_candles() {
  // @@protoc_insertion_point(field_add:api.v1.CandlesResponse.candles)
  return _internal_add_candles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >&
CandlesResponse::candles() const {
  // @@protoc_insertion_point(field_list:api.v1.CandlesResponse.candles)
  return candles_;
}

// -------------------------------------------------------------------

// MarketDepthRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void MarketDepthRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthRequest.market_id)
  return _internal_market_id();
}
inline void MarketDepthRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketDepthRequest.market_id)
}
inline std::string* MarketDepthRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketDepthRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketDepthRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketDepthRequest.market_id)
}
inline void MarketDepthRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketDepthRequest.market_id)
}
inline void MarketDepthRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketDepthRequest.market_id)
}
inline std::string* MarketDepthRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDepthRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDepthRequest.market_id)
}

// uint64 max_depth = 2 [json_name = "maxDepth"];
inline void MarketDepthRequest::clear_max_depth() {
  max_depth_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthRequest::_internal_max_depth() const {
  return max_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthRequest::max_depth() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthRequest.max_depth)
  return _internal_max_depth();
}
inline void MarketDepthRequest::_internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  max_depth_ = value;
}
inline void MarketDepthRequest::set_max_depth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_depth(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketDepthRequest.max_depth)
}

// -------------------------------------------------------------------

// MarketDepthResponse

// string market_id = 1 [json_name = "marketId"];
inline void MarketDepthResponse::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthResponse::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthResponse.market_id)
  return _internal_market_id();
}
inline void MarketDepthResponse::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketDepthResponse.market_id)
}
inline std::string* MarketDepthResponse::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthResponse.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketDepthResponse::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketDepthResponse::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthResponse::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketDepthResponse.market_id)
}
inline void MarketDepthResponse::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketDepthResponse.market_id)
}
inline void MarketDepthResponse::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketDepthResponse.market_id)
}
inline std::string* MarketDepthResponse::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthResponse::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDepthResponse.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthResponse::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDepthResponse.market_id)
}

// repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
inline int MarketDepthResponse::_internal_buy_size() const {
  return buy_.size();
}
inline int MarketDepthResponse::buy_size() const {
  return _internal_buy_size();
}
inline ::vega::PriceLevel* MarketDepthResponse::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthResponse.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthResponse::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.MarketDepthResponse.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepthResponse::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthResponse::buy(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthResponse.buy)
  return _internal_buy(index);
}
inline ::vega::PriceLevel* MarketDepthResponse::_internal_add_buy() {
  return buy_.Add();
}
inline ::vega::PriceLevel* MarketDepthResponse::add_buy() {
  // @@protoc_insertion_point(field_add:api.v1.MarketDepthResponse.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthResponse::buy() const {
  // @@protoc_insertion_point(field_list:api.v1.MarketDepthResponse.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
inline int MarketDepthResponse::_internal_sell_size() const {
  return sell_.size();
}
inline int MarketDepthResponse::sell_size() const {
  return _internal_sell_size();
}
inline ::vega::PriceLevel* MarketDepthResponse::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthResponse.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthResponse::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.MarketDepthResponse.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepthResponse::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthResponse::sell(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthResponse.sell)
  return _internal_sell(index);
}
inline ::vega::PriceLevel* MarketDepthResponse::_internal_add_sell() {
  return sell_.Add();
}
inline ::vega::PriceLevel* MarketDepthResponse::add_sell() {
  // @@protoc_insertion_point(field_add:api.v1.MarketDepthResponse.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthResponse::sell() const {
  // @@protoc_insertion_point(field_list:api.v1.MarketDepthResponse.sell)
  return sell_;
}

// .vega.Trade last_trade = 4 [json_name = "lastTrade"];
inline bool MarketDepthResponse::_internal_has_last_trade() const {
  return this != internal_default_instance() && last_trade_ != nullptr;
}
inline bool MarketDepthResponse::has_last_trade() const {
  return _internal_has_last_trade();
}
inline const ::vega::Trade& MarketDepthResponse::_internal_last_trade() const {
  const ::vega::Trade* p = last_trade_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Trade&>(
      ::vega::_Trade_default_instance_);
}
inline const ::vega::Trade& MarketDepthResponse::last_trade() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthResponse.last_trade)
  return _internal_last_trade();
}
inline void MarketDepthResponse::unsafe_arena_set_allocated_last_trade(
    ::vega::Trade* last_trade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_trade_);
  }
  last_trade_ = last_trade;
  if (last_trade) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.MarketDepthResponse.last_trade)
}
inline ::vega::Trade* MarketDepthResponse::release_last_trade() {

  ::vega::Trade* temp = last_trade_;
  last_trade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Trade* MarketDepthResponse::unsafe_arena_release_last_trade() {
  // @@protoc_insertion_point(field_release:api.v1.MarketDepthResponse.last_trade)

  ::vega::Trade* temp = last_trade_;
  last_trade_ = nullptr;
  return temp;
}
inline ::vega::Trade* MarketDepthResponse::_internal_mutable_last_trade() {

  if (last_trade_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Trade>(GetArena());
    last_trade_ = p;
  }
  return last_trade_;
}
inline ::vega::Trade* MarketDepthResponse::mutable_last_trade() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketDepthResponse.last_trade)
  return _internal_mutable_last_trade();
}
inline void MarketDepthResponse::set_allocated_last_trade(::vega::Trade* last_trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_trade_);
  }
  if (last_trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_trade)->GetArena();
    if (message_arena != submessage_arena) {
      last_trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_trade, submessage_arena);
    }

  } else {

  }
  last_trade_ = last_trade;
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketDepthResponse.last_trade)
}

// uint64 sequence_number = 5 [json_name = "sequenceNumber"];
inline void MarketDepthResponse::clear_sequence_number() {
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthResponse::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthResponse::sequence_number() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketDepthResponse.sequence_number)
  return _internal_sequence_number();
}
inline void MarketDepthResponse::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  sequence_number_ = value;
}
inline void MarketDepthResponse::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketDepthResponse.sequence_number)
}

// -------------------------------------------------------------------

// TradesByMarketRequest

// string market_id = 1 [json_name = "marketId", (.validator.field) = {
inline void TradesByMarketRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& TradesByMarketRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByMarketRequest.market_id)
  return _internal_market_id();
}
inline void TradesByMarketRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.TradesByMarketRequest.market_id)
}
inline std::string* TradesByMarketRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByMarketRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& TradesByMarketRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void TradesByMarketRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByMarketRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.TradesByMarketRequest.market_id)
}
inline void TradesByMarketRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.TradesByMarketRequest.market_id)
}
inline void TradesByMarketRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.TradesByMarketRequest.market_id)
}
inline std::string* TradesByMarketRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByMarketRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.TradesByMarketRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByMarketRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesByMarketRequest.market_id)
}

// .api.v1.Pagination pagination = 2 [json_name = "pagination"];
inline bool TradesByMarketRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool TradesByMarketRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void TradesByMarketRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::v1::Pagination& TradesByMarketRequest::_internal_pagination() const {
  const ::api::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::Pagination&>(
      ::api::v1::_Pagination_default_instance_);
}
inline const ::api::v1::Pagination& TradesByMarketRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByMarketRequest.pagination)
  return _internal_pagination();
}
inline void TradesByMarketRequest::unsafe_arena_set_allocated_pagination(
    ::api::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.TradesByMarketRequest.pagination)
}
inline ::api::v1::Pagination* TradesByMarketRequest::release_pagination() {

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::Pagination* TradesByMarketRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.v1.TradesByMarketRequest.pagination)

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::v1::Pagination* TradesByMarketRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::v1::Pagination* TradesByMarketRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByMarketRequest.pagination)
  return _internal_mutable_pagination();
}
inline void TradesByMarketRequest::set_allocated_pagination(::api::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.v1.TradesByMarketRequest.pagination)
}

// -------------------------------------------------------------------

// TradesByMarketResponse

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesByMarketResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesByMarketResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesByMarketResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesByMarketResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesByMarketResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.TradesByMarketResponse.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesByMarketResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesByMarketResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.TradesByMarketResponse.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesByMarketResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesByMarketResponse::add_trades() {
  // @@protoc_insertion_point(field_add:api.v1.TradesByMarketResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesByMarketResponse::trades() const {
  // @@protoc_insertion_point(field_list:api.v1.TradesByMarketResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// PositionsByPartyRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void PositionsByPartyRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& PositionsByPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PositionsByPartyRequest.party_id)
  return _internal_party_id();
}
inline void PositionsByPartyRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PositionsByPartyRequest.party_id)
}
inline std::string* PositionsByPartyRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PositionsByPartyRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& PositionsByPartyRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void PositionsByPartyRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsByPartyRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PositionsByPartyRequest.party_id)
}
inline void PositionsByPartyRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PositionsByPartyRequest.party_id)
}
inline void PositionsByPartyRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PositionsByPartyRequest.party_id)
}
inline std::string* PositionsByPartyRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsByPartyRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.PositionsByPartyRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsByPartyRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PositionsByPartyRequest.party_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void PositionsByPartyRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& PositionsByPartyRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PositionsByPartyRequest.market_id)
  return _internal_market_id();
}
inline void PositionsByPartyRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PositionsByPartyRequest.market_id)
}
inline std::string* PositionsByPartyRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PositionsByPartyRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& PositionsByPartyRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void PositionsByPartyRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsByPartyRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PositionsByPartyRequest.market_id)
}
inline void PositionsByPartyRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PositionsByPartyRequest.market_id)
}
inline void PositionsByPartyRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PositionsByPartyRequest.market_id)
}
inline std::string* PositionsByPartyRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsByPartyRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.PositionsByPartyRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsByPartyRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PositionsByPartyRequest.market_id)
}

// -------------------------------------------------------------------

// PositionsByPartyResponse

// repeated .vega.Position positions = 1 [json_name = "positions"];
inline int PositionsByPartyResponse::_internal_positions_size() const {
  return positions_.size();
}
inline int PositionsByPartyResponse::positions_size() const {
  return _internal_positions_size();
}
inline ::vega::Position* PositionsByPartyResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.PositionsByPartyResponse.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >*
PositionsByPartyResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.PositionsByPartyResponse.positions)
  return &positions_;
}
inline const ::vega::Position& PositionsByPartyResponse::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::vega::Position& PositionsByPartyResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.PositionsByPartyResponse.positions)
  return _internal_positions(index);
}
inline ::vega::Position* PositionsByPartyResponse::_internal_add_positions() {
  return positions_.Add();
}
inline ::vega::Position* PositionsByPartyResponse::add_positions() {
  // @@protoc_insertion_point(field_add:api.v1.PositionsByPartyResponse.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >&
PositionsByPartyResponse::positions() const {
  // @@protoc_insertion_point(field_list:api.v1.PositionsByPartyResponse.positions)
  return positions_;
}

// -------------------------------------------------------------------

// GetVegaTimeRequest

// -------------------------------------------------------------------

// GetVegaTimeResponse

// int64 timestamp = 1 [json_name = "timestamp"];
inline void GetVegaTimeResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetVegaTimeResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetVegaTimeResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:api.v1.GetVegaTimeResponse.timestamp)
  return _internal_timestamp();
}
inline void GetVegaTimeResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void GetVegaTimeResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:api.v1.GetVegaTimeResponse.timestamp)
}

// -------------------------------------------------------------------

// Pagination

// uint64 skip = 1 [json_name = "skip"];
inline void Pagination::clear_skip() {
  skip_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::_internal_skip() const {
  return skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::skip() const {
  // @@protoc_insertion_point(field_get:api.v1.Pagination.skip)
  return _internal_skip();
}
inline void Pagination::_internal_set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  skip_ = value;
}
inline void Pagination::set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_skip(value);
  // @@protoc_insertion_point(field_set:api.v1.Pagination.skip)
}

// uint64 limit = 2 [json_name = "limit"];
inline void Pagination::clear_limit() {
  limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::limit() const {
  // @@protoc_insertion_point(field_get:api.v1.Pagination.limit)
  return _internal_limit();
}
inline void Pagination::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  limit_ = value;
}
inline void Pagination::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:api.v1.Pagination.limit)
}

// bool descending = 3 [json_name = "descending"];
inline void Pagination::clear_descending() {
  descending_ = false;
}
inline bool Pagination::_internal_descending() const {
  return descending_;
}
inline bool Pagination::descending() const {
  // @@protoc_insertion_point(field_get:api.v1.Pagination.descending)
  return _internal_descending();
}
inline void Pagination::_internal_set_descending(bool value) {

  descending_ = value;
}
inline void Pagination::set_descending(bool value) {
  _internal_set_descending(value);
  // @@protoc_insertion_point(field_set:api.v1.Pagination.descending)
}

// -------------------------------------------------------------------

// OrdersSubscribeResponse

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrdersSubscribeResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int OrdersSubscribeResponse::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrdersSubscribeResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.OrdersSubscribeResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrdersSubscribeResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.OrdersSubscribeResponse.orders)
  return &orders_;
}
inline const ::vega::Order& OrdersSubscribeResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrdersSubscribeResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.OrdersSubscribeResponse.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrdersSubscribeResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrdersSubscribeResponse::add_orders() {
  // @@protoc_insertion_point(field_add:api.v1.OrdersSubscribeResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrdersSubscribeResponse::orders() const {
  // @@protoc_insertion_point(field_list:api.v1.OrdersSubscribeResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// TradesSubscribeResponse

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesSubscribeResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesSubscribeResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesSubscribeResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.TradesSubscribeResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesSubscribeResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.TradesSubscribeResponse.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesSubscribeResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesSubscribeResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.TradesSubscribeResponse.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesSubscribeResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesSubscribeResponse::add_trades() {
  // @@protoc_insertion_point(field_add:api.v1.TradesSubscribeResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesSubscribeResponse::trades() const {
  // @@protoc_insertion_point(field_list:api.v1.TradesSubscribeResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// TransferResponsesSubscribeRequest

// -------------------------------------------------------------------

// TransferResponsesSubscribeResponse

// .vega.TransferResponse response = 1 [json_name = "response"];
inline bool TransferResponsesSubscribeResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool TransferResponsesSubscribeResponse::has_response() const {
  return _internal_has_response();
}
inline const ::vega::TransferResponse& TransferResponsesSubscribeResponse::_internal_response() const {
  const ::vega::TransferResponse* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::TransferResponse&>(
      ::vega::_TransferResponse_default_instance_);
}
inline const ::vega::TransferResponse& TransferResponsesSubscribeResponse::response() const {
  // @@protoc_insertion_point(field_get:api.v1.TransferResponsesSubscribeResponse.response)
  return _internal_response();
}
inline void TransferResponsesSubscribeResponse::unsafe_arena_set_allocated_response(
    ::vega::TransferResponse* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.TransferResponsesSubscribeResponse.response)
}
inline ::vega::TransferResponse* TransferResponsesSubscribeResponse::release_response() {

  ::vega::TransferResponse* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::TransferResponse* TransferResponsesSubscribeResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:api.v1.TransferResponsesSubscribeResponse.response)

  ::vega::TransferResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::vega::TransferResponse* TransferResponsesSubscribeResponse::_internal_mutable_response() {

  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::TransferResponse>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::vega::TransferResponse* TransferResponsesSubscribeResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:api.v1.TransferResponsesSubscribeResponse.response)
  return _internal_mutable_response();
}
inline void TransferResponsesSubscribeResponse::set_allocated_response(::vega::TransferResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }

  } else {

  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:api.v1.TransferResponsesSubscribeResponse.response)
}

// -------------------------------------------------------------------

// PartyAccountsRequest

// string party_id = 1 [json_name = "partyId"];
inline void PartyAccountsRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& PartyAccountsRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PartyAccountsRequest.party_id)
  return _internal_party_id();
}
inline void PartyAccountsRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PartyAccountsRequest.party_id)
}
inline std::string* PartyAccountsRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PartyAccountsRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& PartyAccountsRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void PartyAccountsRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyAccountsRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PartyAccountsRequest.party_id)
}
inline void PartyAccountsRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PartyAccountsRequest.party_id)
}
inline void PartyAccountsRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PartyAccountsRequest.party_id)
}
inline std::string* PartyAccountsRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyAccountsRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.PartyAccountsRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyAccountsRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PartyAccountsRequest.party_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void PartyAccountsRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& PartyAccountsRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.PartyAccountsRequest.market_id)
  return _internal_market_id();
}
inline void PartyAccountsRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.PartyAccountsRequest.market_id)
}
inline std::string* PartyAccountsRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.PartyAccountsRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& PartyAccountsRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void PartyAccountsRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyAccountsRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PartyAccountsRequest.market_id)
}
inline void PartyAccountsRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PartyAccountsRequest.market_id)
}
inline void PartyAccountsRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PartyAccountsRequest.market_id)
}
inline std::string* PartyAccountsRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyAccountsRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.PartyAccountsRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyAccountsRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PartyAccountsRequest.market_id)
}

// .vega.AccountType type = 3 [json_name = "type"];
inline void PartyAccountsRequest::clear_type() {
  type_ = 0;
}
inline ::vega::AccountType PartyAccountsRequest::_internal_type() const {
  return static_cast< ::vega::AccountType >(type_);
}
inline ::vega::AccountType PartyAccountsRequest::type() const {
  // @@protoc_insertion_point(field_get:api.v1.PartyAccountsRequest.type)
  return _internal_type();
}
inline void PartyAccountsRequest::_internal_set_type(::vega::AccountType value) {

  type_ = value;
}
inline void PartyAccountsRequest::set_type(::vega::AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.v1.PartyAccountsRequest.type)
}

// string asset = 4 [json_name = "asset"];
inline void PartyAccountsRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& PartyAccountsRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.v1.PartyAccountsRequest.asset)
  return _internal_asset();
}
inline void PartyAccountsRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.v1.PartyAccountsRequest.asset)
}
inline std::string* PartyAccountsRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.v1.PartyAccountsRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& PartyAccountsRequest::_internal_asset() const {
  return asset_.Get();
}
inline void PartyAccountsRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyAccountsRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PartyAccountsRequest.asset)
}
inline void PartyAccountsRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PartyAccountsRequest.asset)
}
inline void PartyAccountsRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PartyAccountsRequest.asset)
}
inline std::string* PartyAccountsRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyAccountsRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.v1.PartyAccountsRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyAccountsRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PartyAccountsRequest.asset)
}

// -------------------------------------------------------------------

// PartyAccountsResponse

// repeated .vega.Account accounts = 1 [json_name = "accounts"];
inline int PartyAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int PartyAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::vega::Account* PartyAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.PartyAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
PartyAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.PartyAccountsResponse.accounts)
  return &accounts_;
}
inline const ::vega::Account& PartyAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vega::Account& PartyAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.PartyAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::vega::Account* PartyAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vega::Account* PartyAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:api.v1.PartyAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
PartyAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:api.v1.PartyAccountsResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// MarketAccountsRequest

// string market_id = 1 [json_name = "marketId"];
inline void MarketAccountsRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& MarketAccountsRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketAccountsRequest.market_id)
  return _internal_market_id();
}
inline void MarketAccountsRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketAccountsRequest.market_id)
}
inline std::string* MarketAccountsRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketAccountsRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& MarketAccountsRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void MarketAccountsRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketAccountsRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketAccountsRequest.market_id)
}
inline void MarketAccountsRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketAccountsRequest.market_id)
}
inline void MarketAccountsRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketAccountsRequest.market_id)
}
inline std::string* MarketAccountsRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketAccountsRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.MarketAccountsRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketAccountsRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketAccountsRequest.market_id)
}

// string asset = 2 [json_name = "asset"];
inline void MarketAccountsRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& MarketAccountsRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.v1.MarketAccountsRequest.asset)
  return _internal_asset();
}
inline void MarketAccountsRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.v1.MarketAccountsRequest.asset)
}
inline std::string* MarketAccountsRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketAccountsRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& MarketAccountsRequest::_internal_asset() const {
  return asset_.Get();
}
inline void MarketAccountsRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketAccountsRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.MarketAccountsRequest.asset)
}
inline void MarketAccountsRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.MarketAccountsRequest.asset)
}
inline void MarketAccountsRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.MarketAccountsRequest.asset)
}
inline std::string* MarketAccountsRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketAccountsRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.v1.MarketAccountsRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketAccountsRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.MarketAccountsRequest.asset)
}

// -------------------------------------------------------------------

// MarketAccountsResponse

// repeated .vega.Account accounts = 1 [json_name = "accounts"];
inline int MarketAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int MarketAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::vega::Account* MarketAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.MarketAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
MarketAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.MarketAccountsResponse.accounts)
  return &accounts_;
}
inline const ::vega::Account& MarketAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vega::Account& MarketAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.MarketAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::vega::Account* MarketAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vega::Account* MarketAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:api.v1.MarketAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
MarketAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:api.v1.MarketAccountsResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// FeeInfrastructureAccountsRequest

// string asset = 1 [json_name = "asset"];
inline void FeeInfrastructureAccountsRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& FeeInfrastructureAccountsRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.v1.FeeInfrastructureAccountsRequest.asset)
  return _internal_asset();
}
inline void FeeInfrastructureAccountsRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.v1.FeeInfrastructureAccountsRequest.asset)
}
inline std::string* FeeInfrastructureAccountsRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.v1.FeeInfrastructureAccountsRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& FeeInfrastructureAccountsRequest::_internal_asset() const {
  return asset_.Get();
}
inline void FeeInfrastructureAccountsRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FeeInfrastructureAccountsRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.FeeInfrastructureAccountsRequest.asset)
}
inline void FeeInfrastructureAccountsRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.FeeInfrastructureAccountsRequest.asset)
}
inline void FeeInfrastructureAccountsRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.FeeInfrastructureAccountsRequest.asset)
}
inline std::string* FeeInfrastructureAccountsRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FeeInfrastructureAccountsRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.v1.FeeInfrastructureAccountsRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FeeInfrastructureAccountsRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.FeeInfrastructureAccountsRequest.asset)
}

// -------------------------------------------------------------------

// FeeInfrastructureAccountsResponse

// repeated .vega.Account accounts = 1 [json_name = "accounts"];
inline int FeeInfrastructureAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int FeeInfrastructureAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::vega::Account* FeeInfrastructureAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.FeeInfrastructureAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
FeeInfrastructureAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.FeeInfrastructureAccountsResponse.accounts)
  return &accounts_;
}
inline const ::vega::Account& FeeInfrastructureAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vega::Account& FeeInfrastructureAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.FeeInfrastructureAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::vega::Account* FeeInfrastructureAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vega::Account* FeeInfrastructureAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:api.v1.FeeInfrastructureAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
FeeInfrastructureAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:api.v1.FeeInfrastructureAccountsResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// PrepareProposalSubmissionRequest

// .vega.commands.v1.ProposalSubmission submission = 1 [json_name = "submission"];
inline bool PrepareProposalSubmissionRequest::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool PrepareProposalSubmissionRequest::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::commands::v1::ProposalSubmission& PrepareProposalSubmissionRequest::_internal_submission() const {
  const ::vega::commands::v1::ProposalSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::ProposalSubmission&>(
      ::vega::commands::v1::_ProposalSubmission_default_instance_);
}
inline const ::vega::commands::v1::ProposalSubmission& PrepareProposalSubmissionRequest::submission() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareProposalSubmissionRequest.submission)
  return _internal_submission();
}
inline void PrepareProposalSubmissionRequest::unsafe_arena_set_allocated_submission(
    ::vega::commands::v1::ProposalSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareProposalSubmissionRequest.submission)
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionRequest::release_submission() {

  ::vega::commands::v1::ProposalSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionRequest::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareProposalSubmissionRequest.submission)

  ::vega::commands::v1::ProposalSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionRequest::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::ProposalSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionRequest::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareProposalSubmissionRequest.submission)
  return _internal_mutable_submission();
}
inline void PrepareProposalSubmissionRequest::set_allocated_submission(::vega::commands::v1::ProposalSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareProposalSubmissionRequest.submission)
}

// -------------------------------------------------------------------

// PrepareProposalSubmissionResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareProposalSubmissionResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareProposalSubmissionResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareProposalSubmissionResponse.blob)
  return _internal_blob();
}
inline void PrepareProposalSubmissionResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareProposalSubmissionResponse.blob)
}
inline std::string* PrepareProposalSubmissionResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareProposalSubmissionResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareProposalSubmissionResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareProposalSubmissionResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareProposalSubmissionResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareProposalSubmissionResponse.blob)
}
inline void PrepareProposalSubmissionResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareProposalSubmissionResponse.blob)
}
inline void PrepareProposalSubmissionResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareProposalSubmissionResponse.blob)
}
inline std::string* PrepareProposalSubmissionResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareProposalSubmissionResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareProposalSubmissionResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareProposalSubmissionResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareProposalSubmissionResponse.blob)
}

// .vega.commands.v1.ProposalSubmission submission = 2 [json_name = "submission"];
inline bool PrepareProposalSubmissionResponse::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool PrepareProposalSubmissionResponse::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::commands::v1::ProposalSubmission& PrepareProposalSubmissionResponse::_internal_submission() const {
  const ::vega::commands::v1::ProposalSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::ProposalSubmission&>(
      ::vega::commands::v1::_ProposalSubmission_default_instance_);
}
inline const ::vega::commands::v1::ProposalSubmission& PrepareProposalSubmissionResponse::submission() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareProposalSubmissionResponse.submission)
  return _internal_submission();
}
inline void PrepareProposalSubmissionResponse::unsafe_arena_set_allocated_submission(
    ::vega::commands::v1::ProposalSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareProposalSubmissionResponse.submission)
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionResponse::release_submission() {

  ::vega::commands::v1::ProposalSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionResponse::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareProposalSubmissionResponse.submission)

  ::vega::commands::v1::ProposalSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionResponse::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::ProposalSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::commands::v1::ProposalSubmission* PrepareProposalSubmissionResponse::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareProposalSubmissionResponse.submission)
  return _internal_mutable_submission();
}
inline void PrepareProposalSubmissionResponse::set_allocated_submission(::vega::commands::v1::ProposalSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareProposalSubmissionResponse.submission)
}

// -------------------------------------------------------------------

// PrepareVoteSubmissionRequest

// .vega.commands.v1.VoteSubmission submission = 1 [json_name = "submission", (.validator.field) = {
inline bool PrepareVoteSubmissionRequest::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool PrepareVoteSubmissionRequest::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::commands::v1::VoteSubmission& PrepareVoteSubmissionRequest::_internal_submission() const {
  const ::vega::commands::v1::VoteSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::VoteSubmission&>(
      ::vega::commands::v1::_VoteSubmission_default_instance_);
}
inline const ::vega::commands::v1::VoteSubmission& PrepareVoteSubmissionRequest::submission() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareVoteSubmissionRequest.submission)
  return _internal_submission();
}
inline void PrepareVoteSubmissionRequest::unsafe_arena_set_allocated_submission(
    ::vega::commands::v1::VoteSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareVoteSubmissionRequest.submission)
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionRequest::release_submission() {

  ::vega::commands::v1::VoteSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionRequest::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareVoteSubmissionRequest.submission)

  ::vega::commands::v1::VoteSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionRequest::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::VoteSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionRequest::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareVoteSubmissionRequest.submission)
  return _internal_mutable_submission();
}
inline void PrepareVoteSubmissionRequest::set_allocated_submission(::vega::commands::v1::VoteSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareVoteSubmissionRequest.submission)
}

// -------------------------------------------------------------------

// PrepareVoteSubmissionResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareVoteSubmissionResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareVoteSubmissionResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareVoteSubmissionResponse.blob)
  return _internal_blob();
}
inline void PrepareVoteSubmissionResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareVoteSubmissionResponse.blob)
}
inline std::string* PrepareVoteSubmissionResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareVoteSubmissionResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareVoteSubmissionResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareVoteSubmissionResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareVoteSubmissionResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareVoteSubmissionResponse.blob)
}
inline void PrepareVoteSubmissionResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareVoteSubmissionResponse.blob)
}
inline void PrepareVoteSubmissionResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareVoteSubmissionResponse.blob)
}
inline std::string* PrepareVoteSubmissionResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareVoteSubmissionResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareVoteSubmissionResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareVoteSubmissionResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareVoteSubmissionResponse.blob)
}

// .vega.commands.v1.VoteSubmission submission = 2 [json_name = "submission"];
inline bool PrepareVoteSubmissionResponse::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool PrepareVoteSubmissionResponse::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::commands::v1::VoteSubmission& PrepareVoteSubmissionResponse::_internal_submission() const {
  const ::vega::commands::v1::VoteSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::VoteSubmission&>(
      ::vega::commands::v1::_VoteSubmission_default_instance_);
}
inline const ::vega::commands::v1::VoteSubmission& PrepareVoteSubmissionResponse::submission() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareVoteSubmissionResponse.submission)
  return _internal_submission();
}
inline void PrepareVoteSubmissionResponse::unsafe_arena_set_allocated_submission(
    ::vega::commands::v1::VoteSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareVoteSubmissionResponse.submission)
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionResponse::release_submission() {

  ::vega::commands::v1::VoteSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionResponse::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareVoteSubmissionResponse.submission)

  ::vega::commands::v1::VoteSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionResponse::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::VoteSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::commands::v1::VoteSubmission* PrepareVoteSubmissionResponse::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareVoteSubmissionResponse.submission)
  return _internal_mutable_submission();
}
inline void PrepareVoteSubmissionResponse::set_allocated_submission(::vega::commands::v1::VoteSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareVoteSubmissionResponse.submission)
}

// -------------------------------------------------------------------

// PrepareLiquidityProvisionRequest

// .vega.commands.v1.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
inline bool PrepareLiquidityProvisionRequest::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool PrepareLiquidityProvisionRequest::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::commands::v1::LiquidityProvisionSubmission& PrepareLiquidityProvisionRequest::_internal_submission() const {
  const ::vega::commands::v1::LiquidityProvisionSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::commands::v1::LiquidityProvisionSubmission&>(
      ::vega::commands::v1::_LiquidityProvisionSubmission_default_instance_);
}
inline const ::vega::commands::v1::LiquidityProvisionSubmission& PrepareLiquidityProvisionRequest::submission() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareLiquidityProvisionRequest.submission)
  return _internal_submission();
}
inline void PrepareLiquidityProvisionRequest::unsafe_arena_set_allocated_submission(
    ::vega::commands::v1::LiquidityProvisionSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.PrepareLiquidityProvisionRequest.submission)
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::release_submission() {

  ::vega::commands::v1::LiquidityProvisionSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareLiquidityProvisionRequest.submission)

  ::vega::commands::v1::LiquidityProvisionSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::commands::v1::LiquidityProvisionSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::commands::v1::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareLiquidityProvisionRequest.submission)
  return _internal_mutable_submission();
}
inline void PrepareLiquidityProvisionRequest::set_allocated_submission(::vega::commands::v1::LiquidityProvisionSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareLiquidityProvisionRequest.submission)
}

// -------------------------------------------------------------------

// PrepareLiquidityProvisionResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareLiquidityProvisionResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareLiquidityProvisionResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.v1.PrepareLiquidityProvisionResponse.blob)
  return _internal_blob();
}
inline void PrepareLiquidityProvisionResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.v1.PrepareLiquidityProvisionResponse.blob)
}
inline std::string* PrepareLiquidityProvisionResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.v1.PrepareLiquidityProvisionResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareLiquidityProvisionResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareLiquidityProvisionResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareLiquidityProvisionResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.PrepareLiquidityProvisionResponse.blob)
}
inline void PrepareLiquidityProvisionResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.PrepareLiquidityProvisionResponse.blob)
}
inline void PrepareLiquidityProvisionResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.PrepareLiquidityProvisionResponse.blob)
}
inline std::string* PrepareLiquidityProvisionResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareLiquidityProvisionResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.v1.PrepareLiquidityProvisionResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareLiquidityProvisionResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.PrepareLiquidityProvisionResponse.blob)
}

// -------------------------------------------------------------------

// OrderByIDRequest

// string order_id = 1 [json_name = "orderId", (.validator.field) = {
inline void OrderByIDRequest::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& OrderByIDRequest::order_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByIDRequest.order_id)
  return _internal_order_id();
}
inline void OrderByIDRequest::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrderByIDRequest.order_id)
}
inline std::string* OrderByIDRequest::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderByIDRequest.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& OrderByIDRequest::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderByIDRequest::_internal_set_order_id(const std::string& value) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByIDRequest::set_order_id(std::string&& value) {

  order_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrderByIDRequest.order_id)
}
inline void OrderByIDRequest::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrderByIDRequest.order_id)
}
inline void OrderByIDRequest::set_order_id(const char* value,
    size_t size) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrderByIDRequest.order_id)
}
inline std::string* OrderByIDRequest::_internal_mutable_order_id() {

  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByIDRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrderByIDRequest.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByIDRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {

  } else {

  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderByIDRequest.order_id)
}

// uint64 version = 2 [json_name = "version"];
inline void OrderByIDRequest::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderByIDRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderByIDRequest::version() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByIDRequest.version)
  return _internal_version();
}
inline void OrderByIDRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  version_ = value;
}
inline void OrderByIDRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:api.v1.OrderByIDRequest.version)
}

// -------------------------------------------------------------------

// OrderByIDResponse

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderByIDResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderByIDResponse::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& OrderByIDResponse::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderByIDResponse::order() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderByIDResponse.order)
  return _internal_order();
}
inline void OrderByIDResponse::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.OrderByIDResponse.order)
}
inline ::vega::Order* OrderByIDResponse::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderByIDResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.v1.OrderByIDResponse.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderByIDResponse::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderByIDResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderByIDResponse.order)
  return _internal_mutable_order();
}
inline void OrderByIDResponse::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderByIDResponse.order)
}

// -------------------------------------------------------------------

// OrderVersionsByIDRequest

// string order_id = 1 [json_name = "orderId", (.validator.field) = {
inline void OrderVersionsByIDRequest::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& OrderVersionsByIDRequest::order_id() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderVersionsByIDRequest.order_id)
  return _internal_order_id();
}
inline void OrderVersionsByIDRequest::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OrderVersionsByIDRequest.order_id)
}
inline std::string* OrderVersionsByIDRequest::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderVersionsByIDRequest.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& OrderVersionsByIDRequest::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderVersionsByIDRequest::_internal_set_order_id(const std::string& value) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderVersionsByIDRequest::set_order_id(std::string&& value) {

  order_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OrderVersionsByIDRequest.order_id)
}
inline void OrderVersionsByIDRequest::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OrderVersionsByIDRequest.order_id)
}
inline void OrderVersionsByIDRequest::set_order_id(const char* value,
    size_t size) {

  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OrderVersionsByIDRequest.order_id)
}
inline std::string* OrderVersionsByIDRequest::_internal_mutable_order_id() {

  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderVersionsByIDRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:api.v1.OrderVersionsByIDRequest.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderVersionsByIDRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {

  } else {

  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderVersionsByIDRequest.order_id)
}

// .api.v1.Pagination pagination = 2 [json_name = "pagination"];
inline bool OrderVersionsByIDRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool OrderVersionsByIDRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void OrderVersionsByIDRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::v1::Pagination& OrderVersionsByIDRequest::_internal_pagination() const {
  const ::api::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::Pagination&>(
      ::api::v1::_Pagination_default_instance_);
}
inline const ::api::v1::Pagination& OrderVersionsByIDRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.v1.OrderVersionsByIDRequest.pagination)
  return _internal_pagination();
}
inline void OrderVersionsByIDRequest::unsafe_arena_set_allocated_pagination(
    ::api::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.OrderVersionsByIDRequest.pagination)
}
inline ::api::v1::Pagination* OrderVersionsByIDRequest::release_pagination() {

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::Pagination* OrderVersionsByIDRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.v1.OrderVersionsByIDRequest.pagination)

  ::api::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::v1::Pagination* OrderVersionsByIDRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::v1::Pagination* OrderVersionsByIDRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderVersionsByIDRequest.pagination)
  return _internal_mutable_pagination();
}
inline void OrderVersionsByIDRequest::set_allocated_pagination(::api::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.v1.OrderVersionsByIDRequest.pagination)
}

// -------------------------------------------------------------------

// OrderVersionsByIDResponse

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrderVersionsByIDResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int OrderVersionsByIDResponse::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrderVersionsByIDResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.OrderVersionsByIDResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrderVersionsByIDResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.OrderVersionsByIDResponse.orders)
  return &orders_;
}
inline const ::vega::Order& OrderVersionsByIDResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrderVersionsByIDResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.OrderVersionsByIDResponse.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrderVersionsByIDResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrderVersionsByIDResponse::add_orders() {
  // @@protoc_insertion_point(field_add:api.v1.OrderVersionsByIDResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrderVersionsByIDResponse::orders() const {
  // @@protoc_insertion_point(field_list:api.v1.OrderVersionsByIDResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// EstimateFeeRequest

// .vega.Order order = 1 [json_name = "order"];
inline bool EstimateFeeRequest::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool EstimateFeeRequest::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& EstimateFeeRequest::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& EstimateFeeRequest::order() const {
  // @@protoc_insertion_point(field_get:api.v1.EstimateFeeRequest.order)
  return _internal_order();
}
inline void EstimateFeeRequest::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.EstimateFeeRequest.order)
}
inline ::vega::Order* EstimateFeeRequest::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* EstimateFeeRequest::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.v1.EstimateFeeRequest.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* EstimateFeeRequest::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* EstimateFeeRequest::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.v1.EstimateFeeRequest.order)
  return _internal_mutable_order();
}
inline void EstimateFeeRequest::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.v1.EstimateFeeRequest.order)
}

// -------------------------------------------------------------------

// EstimateFeeResponse

// .vega.Fee fee = 2 [json_name = "fee"];
inline bool EstimateFeeResponse::_internal_has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline bool EstimateFeeResponse::has_fee() const {
  return _internal_has_fee();
}
inline const ::vega::Fee& EstimateFeeResponse::_internal_fee() const {
  const ::vega::Fee* p = fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Fee&>(
      ::vega::_Fee_default_instance_);
}
inline const ::vega::Fee& EstimateFeeResponse::fee() const {
  // @@protoc_insertion_point(field_get:api.v1.EstimateFeeResponse.fee)
  return _internal_fee();
}
inline void EstimateFeeResponse::unsafe_arena_set_allocated_fee(
    ::vega::Fee* fee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  fee_ = fee;
  if (fee) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.EstimateFeeResponse.fee)
}
inline ::vega::Fee* EstimateFeeResponse::release_fee() {

  ::vega::Fee* temp = fee_;
  fee_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Fee* EstimateFeeResponse::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_release:api.v1.EstimateFeeResponse.fee)

  ::vega::Fee* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::vega::Fee* EstimateFeeResponse::_internal_mutable_fee() {

  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArena());
    fee_ = p;
  }
  return fee_;
}
inline ::vega::Fee* EstimateFeeResponse::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:api.v1.EstimateFeeResponse.fee)
  return _internal_mutable_fee();
}
inline void EstimateFeeResponse::set_allocated_fee(::vega::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee)->GetArena();
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }

  } else {

  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:api.v1.EstimateFeeResponse.fee)
}

// -------------------------------------------------------------------

// EstimateMarginRequest

// .vega.Order order = 1 [json_name = "order"];
inline bool EstimateMarginRequest::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool EstimateMarginRequest::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& EstimateMarginRequest::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& EstimateMarginRequest::order() const {
  // @@protoc_insertion_point(field_get:api.v1.EstimateMarginRequest.order)
  return _internal_order();
}
inline void EstimateMarginRequest::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.EstimateMarginRequest.order)
}
inline ::vega::Order* EstimateMarginRequest::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* EstimateMarginRequest::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.v1.EstimateMarginRequest.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* EstimateMarginRequest::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* EstimateMarginRequest::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.v1.EstimateMarginRequest.order)
  return _internal_mutable_order();
}
inline void EstimateMarginRequest::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.v1.EstimateMarginRequest.order)
}

// -------------------------------------------------------------------

// EstimateMarginResponse

// .vega.MarginLevels margin_levels = 2 [json_name = "marginLevels"];
inline bool EstimateMarginResponse::_internal_has_margin_levels() const {
  return this != internal_default_instance() && margin_levels_ != nullptr;
}
inline bool EstimateMarginResponse::has_margin_levels() const {
  return _internal_has_margin_levels();
}
inline const ::vega::MarginLevels& EstimateMarginResponse::_internal_margin_levels() const {
  const ::vega::MarginLevels* p = margin_levels_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarginLevels&>(
      ::vega::_MarginLevels_default_instance_);
}
inline const ::vega::MarginLevels& EstimateMarginResponse::margin_levels() const {
  // @@protoc_insertion_point(field_get:api.v1.EstimateMarginResponse.margin_levels)
  return _internal_margin_levels();
}
inline void EstimateMarginResponse::unsafe_arena_set_allocated_margin_levels(
    ::vega::MarginLevels* margin_levels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_levels_);
  }
  margin_levels_ = margin_levels;
  if (margin_levels) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.EstimateMarginResponse.margin_levels)
}
inline ::vega::MarginLevels* EstimateMarginResponse::release_margin_levels() {

  ::vega::MarginLevels* temp = margin_levels_;
  margin_levels_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarginLevels* EstimateMarginResponse::unsafe_arena_release_margin_levels() {
  // @@protoc_insertion_point(field_release:api.v1.EstimateMarginResponse.margin_levels)

  ::vega::MarginLevels* temp = margin_levels_;
  margin_levels_ = nullptr;
  return temp;
}
inline ::vega::MarginLevels* EstimateMarginResponse::_internal_mutable_margin_levels() {

  if (margin_levels_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarginLevels>(GetArena());
    margin_levels_ = p;
  }
  return margin_levels_;
}
inline ::vega::MarginLevels* EstimateMarginResponse::mutable_margin_levels() {
  // @@protoc_insertion_point(field_mutable:api.v1.EstimateMarginResponse.margin_levels)
  return _internal_mutable_margin_levels();
}
inline void EstimateMarginResponse::set_allocated_margin_levels(::vega::MarginLevels* margin_levels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_levels_);
  }
  if (margin_levels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_levels)->GetArena();
    if (message_arena != submessage_arena) {
      margin_levels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin_levels, submessage_arena);
    }

  } else {

  }
  margin_levels_ = margin_levels;
  // @@protoc_insertion_point(field_set_allocated:api.v1.EstimateMarginResponse.margin_levels)
}

// -------------------------------------------------------------------

// ObserveEventBusRequest

// repeated .vega.events.v1.BusEventType type = 1 [json_name = "type"];
inline int ObserveEventBusRequest::_internal_type_size() const {
  return type_.size();
}
inline int ObserveEventBusRequest::type_size() const {
  return _internal_type_size();
}
inline void ObserveEventBusRequest::clear_type() {
  type_.Clear();
}
inline ::vega::events::v1::BusEventType ObserveEventBusRequest::_internal_type(int index) const {
  return static_cast< ::vega::events::v1::BusEventType >(type_.Get(index));
}
inline ::vega::events::v1::BusEventType ObserveEventBusRequest::type(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.type)
  return _internal_type(index);
}
inline void ObserveEventBusRequest::set_type(int index, ::vega::events::v1::BusEventType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.type)
}
inline void ObserveEventBusRequest::_internal_add_type(::vega::events::v1::BusEventType value) {
  type_.Add(value);
}
inline void ObserveEventBusRequest::add_type(::vega::events::v1::BusEventType value) {
  // @@protoc_insertion_point(field_add:api.v1.ObserveEventBusRequest.type)
  _internal_add_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ObserveEventBusRequest::type() const {
  // @@protoc_insertion_point(field_list:api.v1.ObserveEventBusRequest.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ObserveEventBusRequest::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ObserveEventBusRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ObserveEventBusRequest.type)
  return _internal_mutable_type();
}

// string market_id = 2 [json_name = "marketId"];
inline void ObserveEventBusRequest::clear_market_id() {
  market_id_.ClearToEmpty();
}
inline const std::string& ObserveEventBusRequest::market_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.market_id)
  return _internal_market_id();
}
inline void ObserveEventBusRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.market_id)
}
inline std::string* ObserveEventBusRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveEventBusRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& ObserveEventBusRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void ObserveEventBusRequest::_internal_set_market_id(const std::string& value) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveEventBusRequest::set_market_id(std::string&& value) {

  market_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ObserveEventBusRequest.market_id)
}
inline void ObserveEventBusRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ObserveEventBusRequest.market_id)
}
inline void ObserveEventBusRequest::set_market_id(const char* value,
    size_t size) {

  market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ObserveEventBusRequest.market_id)
}
inline std::string* ObserveEventBusRequest::_internal_mutable_market_id() {

  return market_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveEventBusRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:api.v1.ObserveEventBusRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveEventBusRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {

  } else {

  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObserveEventBusRequest.market_id)
}

// string party_id = 3 [json_name = "partyId"];
inline void ObserveEventBusRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& ObserveEventBusRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.party_id)
  return _internal_party_id();
}
inline void ObserveEventBusRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.party_id)
}
inline std::string* ObserveEventBusRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveEventBusRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& ObserveEventBusRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void ObserveEventBusRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveEventBusRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ObserveEventBusRequest.party_id)
}
inline void ObserveEventBusRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ObserveEventBusRequest.party_id)
}
inline void ObserveEventBusRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ObserveEventBusRequest.party_id)
}
inline std::string* ObserveEventBusRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveEventBusRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.ObserveEventBusRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveEventBusRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ObserveEventBusRequest.party_id)
}

// int64 batch_size = 4 [json_name = "batchSize"];
inline void ObserveEventBusRequest::clear_batch_size() {
  batch_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObserveEventBusRequest::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObserveEventBusRequest::batch_size() const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusRequest.batch_size)
  return _internal_batch_size();
}
inline void ObserveEventBusRequest::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value) {

  batch_size_ = value;
}
inline void ObserveEventBusRequest::set_batch_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:api.v1.ObserveEventBusRequest.batch_size)
}

// -------------------------------------------------------------------

// ObserveEventBusResponse

// repeated .vega.events.v1.BusEvent events = 1 [json_name = "events"];
inline int ObserveEventBusResponse::_internal_events_size() const {
  return events_.size();
}
inline int ObserveEventBusResponse::events_size() const {
  return _internal_events_size();
}
inline ::vega::events::v1::BusEvent* ObserveEventBusResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.ObserveEventBusResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >*
ObserveEventBusResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ObserveEventBusResponse.events)
  return &events_;
}
inline const ::vega::events::v1::BusEvent& ObserveEventBusResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::vega::events::v1::BusEvent& ObserveEventBusResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ObserveEventBusResponse.events)
  return _internal_events(index);
}
inline ::vega::events::v1::BusEvent* ObserveEventBusResponse::_internal_add_events() {
  return events_.Add();
}
inline ::vega::events::v1::BusEvent* ObserveEventBusResponse::add_events() {
  // @@protoc_insertion_point(field_add:api.v1.ObserveEventBusResponse.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::events::v1::BusEvent >&
ObserveEventBusResponse::events() const {
  // @@protoc_insertion_point(field_list:api.v1.ObserveEventBusResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// StatisticsRequest

// -------------------------------------------------------------------

// StatisticsResponse

// .vega.Statistics statistics = 1 [json_name = "statistics"];
inline bool StatisticsResponse::_internal_has_statistics() const {
  return this != internal_default_instance() && statistics_ != nullptr;
}
inline bool StatisticsResponse::has_statistics() const {
  return _internal_has_statistics();
}
inline const ::vega::Statistics& StatisticsResponse::_internal_statistics() const {
  const ::vega::Statistics* p = statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Statistics&>(
      ::vega::_Statistics_default_instance_);
}
inline const ::vega::Statistics& StatisticsResponse::statistics() const {
  // @@protoc_insertion_point(field_get:api.v1.StatisticsResponse.statistics)
  return _internal_statistics();
}
inline void StatisticsResponse::unsafe_arena_set_allocated_statistics(
    ::vega::Statistics* statistics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistics_);
  }
  statistics_ = statistics;
  if (statistics) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.StatisticsResponse.statistics)
}
inline ::vega::Statistics* StatisticsResponse::release_statistics() {

  ::vega::Statistics* temp = statistics_;
  statistics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Statistics* StatisticsResponse::unsafe_arena_release_statistics() {
  // @@protoc_insertion_point(field_release:api.v1.StatisticsResponse.statistics)

  ::vega::Statistics* temp = statistics_;
  statistics_ = nullptr;
  return temp;
}
inline ::vega::Statistics* StatisticsResponse::_internal_mutable_statistics() {

  if (statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Statistics>(GetArena());
    statistics_ = p;
  }
  return statistics_;
}
inline ::vega::Statistics* StatisticsResponse::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable:api.v1.StatisticsResponse.statistics)
  return _internal_mutable_statistics();
}
inline void StatisticsResponse::set_allocated_statistics(::vega::Statistics* statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistics_);
  }
  if (statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistics)->GetArena();
    if (message_arena != submessage_arena) {
      statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistics, submessage_arena);
    }

  } else {

  }
  statistics_ = statistics;
  // @@protoc_insertion_point(field_set_allocated:api.v1.StatisticsResponse.statistics)
}

// -------------------------------------------------------------------

// WithdrawalsRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void WithdrawalsRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& WithdrawalsRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.WithdrawalsRequest.party_id)
  return _internal_party_id();
}
inline void WithdrawalsRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.WithdrawalsRequest.party_id)
}
inline std::string* WithdrawalsRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.WithdrawalsRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& WithdrawalsRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void WithdrawalsRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawalsRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.WithdrawalsRequest.party_id)
}
inline void WithdrawalsRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.WithdrawalsRequest.party_id)
}
inline void WithdrawalsRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.WithdrawalsRequest.party_id)
}
inline std::string* WithdrawalsRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawalsRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.WithdrawalsRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawalsRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.WithdrawalsRequest.party_id)
}

// -------------------------------------------------------------------

// WithdrawalsResponse

// repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
inline int WithdrawalsResponse::_internal_withdrawals_size() const {
  return withdrawals_.size();
}
inline int WithdrawalsResponse::withdrawals_size() const {
  return _internal_withdrawals_size();
}
inline ::vega::Withdrawal* WithdrawalsResponse::mutable_withdrawals(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.WithdrawalsResponse.withdrawals)
  return withdrawals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >*
WithdrawalsResponse::mutable_withdrawals() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.WithdrawalsResponse.withdrawals)
  return &withdrawals_;
}
inline const ::vega::Withdrawal& WithdrawalsResponse::_internal_withdrawals(int index) const {
  return withdrawals_.Get(index);
}
inline const ::vega::Withdrawal& WithdrawalsResponse::withdrawals(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.WithdrawalsResponse.withdrawals)
  return _internal_withdrawals(index);
}
inline ::vega::Withdrawal* WithdrawalsResponse::_internal_add_withdrawals() {
  return withdrawals_.Add();
}
inline ::vega::Withdrawal* WithdrawalsResponse::add_withdrawals() {
  // @@protoc_insertion_point(field_add:api.v1.WithdrawalsResponse.withdrawals)
  return _internal_add_withdrawals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >&
WithdrawalsResponse::withdrawals() const {
  // @@protoc_insertion_point(field_list:api.v1.WithdrawalsResponse.withdrawals)
  return withdrawals_;
}

// -------------------------------------------------------------------

// WithdrawalRequest

// string id = 1 [json_name = "id", (.validator.field) = {
inline void WithdrawalRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& WithdrawalRequest::id() const {
  // @@protoc_insertion_point(field_get:api.v1.WithdrawalRequest.id)
  return _internal_id();
}
inline void WithdrawalRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.v1.WithdrawalRequest.id)
}
inline std::string* WithdrawalRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.WithdrawalRequest.id)
  return _internal_mutable_id();
}
inline const std::string& WithdrawalRequest::_internal_id() const {
  return id_.Get();
}
inline void WithdrawalRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawalRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.WithdrawalRequest.id)
}
inline void WithdrawalRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.WithdrawalRequest.id)
}
inline void WithdrawalRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.WithdrawalRequest.id)
}
inline std::string* WithdrawalRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawalRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.v1.WithdrawalRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawalRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.WithdrawalRequest.id)
}

// -------------------------------------------------------------------

// WithdrawalResponse

// .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
inline bool WithdrawalResponse::_internal_has_withdrawal() const {
  return this != internal_default_instance() && withdrawal_ != nullptr;
}
inline bool WithdrawalResponse::has_withdrawal() const {
  return _internal_has_withdrawal();
}
inline const ::vega::Withdrawal& WithdrawalResponse::_internal_withdrawal() const {
  const ::vega::Withdrawal* p = withdrawal_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Withdrawal&>(
      ::vega::_Withdrawal_default_instance_);
}
inline const ::vega::Withdrawal& WithdrawalResponse::withdrawal() const {
  // @@protoc_insertion_point(field_get:api.v1.WithdrawalResponse.withdrawal)
  return _internal_withdrawal();
}
inline void WithdrawalResponse::unsafe_arena_set_allocated_withdrawal(
    ::vega::Withdrawal* withdrawal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawal_);
  }
  withdrawal_ = withdrawal;
  if (withdrawal) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.WithdrawalResponse.withdrawal)
}
inline ::vega::Withdrawal* WithdrawalResponse::release_withdrawal() {

  ::vega::Withdrawal* temp = withdrawal_;
  withdrawal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Withdrawal* WithdrawalResponse::unsafe_arena_release_withdrawal() {
  // @@protoc_insertion_point(field_release:api.v1.WithdrawalResponse.withdrawal)

  ::vega::Withdrawal* temp = withdrawal_;
  withdrawal_ = nullptr;
  return temp;
}
inline ::vega::Withdrawal* WithdrawalResponse::_internal_mutable_withdrawal() {

  if (withdrawal_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Withdrawal>(GetArena());
    withdrawal_ = p;
  }
  return withdrawal_;
}
inline ::vega::Withdrawal* WithdrawalResponse::mutable_withdrawal() {
  // @@protoc_insertion_point(field_mutable:api.v1.WithdrawalResponse.withdrawal)
  return _internal_mutable_withdrawal();
}
inline void WithdrawalResponse::set_allocated_withdrawal(::vega::Withdrawal* withdrawal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawal_);
  }
  if (withdrawal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawal)->GetArena();
    if (message_arena != submessage_arena) {
      withdrawal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawal, submessage_arena);
    }

  } else {

  }
  withdrawal_ = withdrawal;
  // @@protoc_insertion_point(field_set_allocated:api.v1.WithdrawalResponse.withdrawal)
}

// -------------------------------------------------------------------

// ERC20WithdrawalApprovalRequest

// string withdrawal_id = 1 [json_name = "withdrawalId", (.validator.field) = {
inline void ERC20WithdrawalApprovalRequest::clear_withdrawal_id() {
  withdrawal_id_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalRequest::withdrawal_id() const {
  // @@protoc_insertion_point(field_get:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
  return _internal_withdrawal_id();
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawal_id(const std::string& value) {
  _internal_set_withdrawal_id(value);
  // @@protoc_insertion_point(field_set:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
}
inline std::string* ERC20WithdrawalApprovalRequest::mutable_withdrawal_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
  return _internal_mutable_withdrawal_id();
}
inline const std::string& ERC20WithdrawalApprovalRequest::_internal_withdrawal_id() const {
  return withdrawal_id_.Get();
}
inline void ERC20WithdrawalApprovalRequest::_internal_set_withdrawal_id(const std::string& value) {

  withdrawal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawal_id(std::string&& value) {

  withdrawal_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  withdrawal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawal_id(const char* value,
    size_t size) {

  withdrawal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
}
inline std::string* ERC20WithdrawalApprovalRequest::_internal_mutable_withdrawal_id() {

  return withdrawal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalRequest::release_withdrawal_id() {
  // @@protoc_insertion_point(field_release:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
  return withdrawal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalRequest::set_allocated_withdrawal_id(std::string* withdrawal_id) {
  if (withdrawal_id != nullptr) {

  } else {

  }
  withdrawal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), withdrawal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id)
}

// -------------------------------------------------------------------

// ERC20WithdrawalApprovalResponse

// string asset_source = 1 [json_name = "assetSource"];
inline void ERC20WithdrawalApprovalResponse::clear_asset_source() {
  asset_source_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::asset_source() const {
  // @@protoc_insertion_point(field_get:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
  return _internal_asset_source();
}
inline void ERC20WithdrawalApprovalResponse::set_asset_source(const std::string& value) {
  _internal_set_asset_source(value);
  // @@protoc_insertion_point(field_set:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_asset_source() {
  // @@protoc_insertion_point(field_mutable:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
  return _internal_mutable_asset_source();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_asset_source() const {
  return asset_source_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_asset_source(const std::string& value) {

  asset_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_asset_source(std::string&& value) {

  asset_source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
}
inline void ERC20WithdrawalApprovalResponse::set_asset_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
}
inline void ERC20WithdrawalApprovalResponse::set_asset_source(const char* value,
    size_t size) {

  asset_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_asset_source() {

  return asset_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_asset_source() {
  // @@protoc_insertion_point(field_release:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
  return asset_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_asset_source(std::string* asset_source) {
  if (asset_source != nullptr) {

  } else {

  }
  asset_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ERC20WithdrawalApprovalResponse.asset_source)
}

// string amount = 2 [json_name = "amount"];
inline void ERC20WithdrawalApprovalResponse::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::amount() const {
  // @@protoc_insertion_point(field_get:api.v1.ERC20WithdrawalApprovalResponse.amount)
  return _internal_amount();
}
inline void ERC20WithdrawalApprovalResponse::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:api.v1.ERC20WithdrawalApprovalResponse.amount)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:api.v1.ERC20WithdrawalApprovalResponse.amount)
  return _internal_mutable_amount();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_amount() const {
  return amount_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ERC20WithdrawalApprovalResponse.amount)
}
inline void ERC20WithdrawalApprovalResponse::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ERC20WithdrawalApprovalResponse.amount)
}
inline void ERC20WithdrawalApprovalResponse::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ERC20WithdrawalApprovalResponse.amount)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_amount() {
  // @@protoc_insertion_point(field_release:api.v1.ERC20WithdrawalApprovalResponse.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ERC20WithdrawalApprovalResponse.amount)
}

// int64 expiry = 3 [json_name = "expiry"];
inline void ERC20WithdrawalApprovalResponse::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ERC20WithdrawalApprovalResponse::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ERC20WithdrawalApprovalResponse::expiry() const {
  // @@protoc_insertion_point(field_get:api.v1.ERC20WithdrawalApprovalResponse.expiry)
  return _internal_expiry();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expiry_ = value;
}
inline void ERC20WithdrawalApprovalResponse::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:api.v1.ERC20WithdrawalApprovalResponse.expiry)
}

// string nonce = 4 [json_name = "nonce"];
inline void ERC20WithdrawalApprovalResponse::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::nonce() const {
  // @@protoc_insertion_point(field_get:api.v1.ERC20WithdrawalApprovalResponse.nonce)
  return _internal_nonce();
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:api.v1.ERC20WithdrawalApprovalResponse.nonce)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:api.v1.ERC20WithdrawalApprovalResponse.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_nonce() const {
  return nonce_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_nonce(const std::string& value) {

  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(std::string&& value) {

  nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ERC20WithdrawalApprovalResponse.nonce)
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ERC20WithdrawalApprovalResponse.nonce)
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(const char* value,
    size_t size) {

  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ERC20WithdrawalApprovalResponse.nonce)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_nonce() {

  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_nonce() {
  // @@protoc_insertion_point(field_release:api.v1.ERC20WithdrawalApprovalResponse.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {

  } else {

  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ERC20WithdrawalApprovalResponse.nonce)
}

// string signatures = 5 [json_name = "signatures"];
inline void ERC20WithdrawalApprovalResponse::clear_signatures() {
  signatures_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::signatures() const {
  // @@protoc_insertion_point(field_get:api.v1.ERC20WithdrawalApprovalResponse.signatures)
  return _internal_signatures();
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(const std::string& value) {
  _internal_set_signatures(value);
  // @@protoc_insertion_point(field_set:api.v1.ERC20WithdrawalApprovalResponse.signatures)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable:api.v1.ERC20WithdrawalApprovalResponse.signatures)
  return _internal_mutable_signatures();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_signatures() const {
  return signatures_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_signatures(const std::string& value) {

  signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(std::string&& value) {

  signatures_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.ERC20WithdrawalApprovalResponse.signatures)
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.ERC20WithdrawalApprovalResponse.signatures)
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(const char* value,
    size_t size) {

  signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.ERC20WithdrawalApprovalResponse.signatures)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_signatures() {

  return signatures_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_signatures() {
  // @@protoc_insertion_point(field_release:api.v1.ERC20WithdrawalApprovalResponse.signatures)
  return signatures_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_signatures(std::string* signatures) {
  if (signatures != nullptr) {

  } else {

  }
  signatures_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signatures,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.ERC20WithdrawalApprovalResponse.signatures)
}

// -------------------------------------------------------------------

// DepositsRequest

// string party_id = 1 [json_name = "partyId", (.validator.field) = {
inline void DepositsRequest::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& DepositsRequest::party_id() const {
  // @@protoc_insertion_point(field_get:api.v1.DepositsRequest.party_id)
  return _internal_party_id();
}
inline void DepositsRequest::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:api.v1.DepositsRequest.party_id)
}
inline std::string* DepositsRequest::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.DepositsRequest.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& DepositsRequest::_internal_party_id() const {
  return party_id_.Get();
}
inline void DepositsRequest::_internal_set_party_id(const std::string& value) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DepositsRequest::set_party_id(std::string&& value) {

  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.DepositsRequest.party_id)
}
inline void DepositsRequest::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.DepositsRequest.party_id)
}
inline void DepositsRequest::set_party_id(const char* value,
    size_t size) {

  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.DepositsRequest.party_id)
}
inline std::string* DepositsRequest::_internal_mutable_party_id() {

  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DepositsRequest::release_party_id() {
  // @@protoc_insertion_point(field_release:api.v1.DepositsRequest.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepositsRequest::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {

  } else {

  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.DepositsRequest.party_id)
}

// -------------------------------------------------------------------

// DepositsResponse

// repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
inline int DepositsResponse::_internal_deposits_size() const {
  return deposits_.size();
}
inline int DepositsResponse::deposits_size() const {
  return _internal_deposits_size();
}
inline ::vega::Deposit* DepositsResponse::mutable_deposits(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.DepositsResponse.deposits)
  return deposits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >*
DepositsResponse::mutable_deposits() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.DepositsResponse.deposits)
  return &deposits_;
}
inline const ::vega::Deposit& DepositsResponse::_internal_deposits(int index) const {
  return deposits_.Get(index);
}
inline const ::vega::Deposit& DepositsResponse::deposits(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.DepositsResponse.deposits)
  return _internal_deposits(index);
}
inline ::vega::Deposit* DepositsResponse::_internal_add_deposits() {
  return deposits_.Add();
}
inline ::vega::Deposit* DepositsResponse::add_deposits() {
  // @@protoc_insertion_point(field_add:api.v1.DepositsResponse.deposits)
  return _internal_add_deposits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >&
DepositsResponse::deposits() const {
  // @@protoc_insertion_point(field_list:api.v1.DepositsResponse.deposits)
  return deposits_;
}

// -------------------------------------------------------------------

// DepositRequest

// string id = 1 [json_name = "id", (.validator.field) = {
inline void DepositRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DepositRequest::id() const {
  // @@protoc_insertion_point(field_get:api.v1.DepositRequest.id)
  return _internal_id();
}
inline void DepositRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.v1.DepositRequest.id)
}
inline std::string* DepositRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.DepositRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DepositRequest::_internal_id() const {
  return id_.Get();
}
inline void DepositRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DepositRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.DepositRequest.id)
}
inline void DepositRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.DepositRequest.id)
}
inline void DepositRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.DepositRequest.id)
}
inline std::string* DepositRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DepositRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.v1.DepositRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepositRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.DepositRequest.id)
}

// -------------------------------------------------------------------

// DepositResponse

// .vega.Deposit deposit = 1 [json_name = "deposit"];
inline bool DepositResponse::_internal_has_deposit() const {
  return this != internal_default_instance() && deposit_ != nullptr;
}
inline bool DepositResponse::has_deposit() const {
  return _internal_has_deposit();
}
inline const ::vega::Deposit& DepositResponse::_internal_deposit() const {
  const ::vega::Deposit* p = deposit_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Deposit&>(
      ::vega::_Deposit_default_instance_);
}
inline const ::vega::Deposit& DepositResponse::deposit() const {
  // @@protoc_insertion_point(field_get:api.v1.DepositResponse.deposit)
  return _internal_deposit();
}
inline void DepositResponse::unsafe_arena_set_allocated_deposit(
    ::vega::Deposit* deposit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_);
  }
  deposit_ = deposit;
  if (deposit) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.DepositResponse.deposit)
}
inline ::vega::Deposit* DepositResponse::release_deposit() {

  ::vega::Deposit* temp = deposit_;
  deposit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Deposit* DepositResponse::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_release:api.v1.DepositResponse.deposit)

  ::vega::Deposit* temp = deposit_;
  deposit_ = nullptr;
  return temp;
}
inline ::vega::Deposit* DepositResponse::_internal_mutable_deposit() {

  if (deposit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Deposit>(GetArena());
    deposit_ = p;
  }
  return deposit_;
}
inline ::vega::Deposit* DepositResponse::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable:api.v1.DepositResponse.deposit)
  return _internal_mutable_deposit();
}
inline void DepositResponse::set_allocated_deposit(::vega::Deposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_);
  }
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit)->GetArena();
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }

  } else {

  }
  deposit_ = deposit;
  // @@protoc_insertion_point(field_set_allocated:api.v1.DepositResponse.deposit)
}

// -------------------------------------------------------------------

// NetworkParametersRequest

// -------------------------------------------------------------------

// NetworkParametersResponse

// repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
inline int NetworkParametersResponse::_internal_network_parameters_size() const {
  return network_parameters_.size();
}
inline int NetworkParametersResponse::network_parameters_size() const {
  return _internal_network_parameters_size();
}
inline ::vega::NetworkParameter* NetworkParametersResponse::mutable_network_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.NetworkParametersResponse.network_parameters)
  return network_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
NetworkParametersResponse::mutable_network_parameters() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.NetworkParametersResponse.network_parameters)
  return &network_parameters_;
}
inline const ::vega::NetworkParameter& NetworkParametersResponse::_internal_network_parameters(int index) const {
  return network_parameters_.Get(index);
}
inline const ::vega::NetworkParameter& NetworkParametersResponse::network_parameters(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.NetworkParametersResponse.network_parameters)
  return _internal_network_parameters(index);
}
inline ::vega::NetworkParameter* NetworkParametersResponse::_internal_add_network_parameters() {
  return network_parameters_.Add();
}
inline ::vega::NetworkParameter* NetworkParametersResponse::add_network_parameters() {
  // @@protoc_insertion_point(field_add:api.v1.NetworkParametersResponse.network_parameters)
  return _internal_add_network_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
NetworkParametersResponse::network_parameters() const {
  // @@protoc_insertion_point(field_list:api.v1.NetworkParametersResponse.network_parameters)
  return network_parameters_;
}

// -------------------------------------------------------------------

// LiquidityProvisionsRequest

// string market = 1 [json_name = "market"];
inline void LiquidityProvisionsRequest::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionsRequest::market() const {
  // @@protoc_insertion_point(field_get:api.v1.LiquidityProvisionsRequest.market)
  return _internal_market();
}
inline void LiquidityProvisionsRequest::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:api.v1.LiquidityProvisionsRequest.market)
}
inline std::string* LiquidityProvisionsRequest::mutable_market() {
  // @@protoc_insertion_point(field_mutable:api.v1.LiquidityProvisionsRequest.market)
  return _internal_mutable_market();
}
inline const std::string& LiquidityProvisionsRequest::_internal_market() const {
  return market_.Get();
}
inline void LiquidityProvisionsRequest::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionsRequest::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.LiquidityProvisionsRequest.market)
}
inline void LiquidityProvisionsRequest::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.LiquidityProvisionsRequest.market)
}
inline void LiquidityProvisionsRequest::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.LiquidityProvisionsRequest.market)
}
inline std::string* LiquidityProvisionsRequest::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionsRequest::release_market() {
  // @@protoc_insertion_point(field_release:api.v1.LiquidityProvisionsRequest.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionsRequest::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.LiquidityProvisionsRequest.market)
}

// string party = 2 [json_name = "party"];
inline void LiquidityProvisionsRequest::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionsRequest::party() const {
  // @@protoc_insertion_point(field_get:api.v1.LiquidityProvisionsRequest.party)
  return _internal_party();
}
inline void LiquidityProvisionsRequest::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:api.v1.LiquidityProvisionsRequest.party)
}
inline std::string* LiquidityProvisionsRequest::mutable_party() {
  // @@protoc_insertion_point(field_mutable:api.v1.LiquidityProvisionsRequest.party)
  return _internal_mutable_party();
}
inline const std::string& LiquidityProvisionsRequest::_internal_party() const {
  return party_.Get();
}
inline void LiquidityProvisionsRequest::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionsRequest::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.LiquidityProvisionsRequest.party)
}
inline void LiquidityProvisionsRequest::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.LiquidityProvisionsRequest.party)
}
inline void LiquidityProvisionsRequest::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.LiquidityProvisionsRequest.party)
}
inline std::string* LiquidityProvisionsRequest::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionsRequest::release_party() {
  // @@protoc_insertion_point(field_release:api.v1.LiquidityProvisionsRequest.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionsRequest::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.LiquidityProvisionsRequest.party)
}

// -------------------------------------------------------------------

// LiquidityProvisionsResponse

// repeated .vega.LiquidityProvision liquidity_provisions = 1 [json_name = "liquidityProvisions"];
inline int LiquidityProvisionsResponse::_internal_liquidity_provisions_size() const {
  return liquidity_provisions_.size();
}
inline int LiquidityProvisionsResponse::liquidity_provisions_size() const {
  return _internal_liquidity_provisions_size();
}
inline ::vega::LiquidityProvision* LiquidityProvisionsResponse::mutable_liquidity_provisions(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.LiquidityProvisionsResponse.liquidity_provisions)
  return liquidity_provisions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >*
LiquidityProvisionsResponse::mutable_liquidity_provisions() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.LiquidityProvisionsResponse.liquidity_provisions)
  return &liquidity_provisions_;
}
inline const ::vega::LiquidityProvision& LiquidityProvisionsResponse::_internal_liquidity_provisions(int index) const {
  return liquidity_provisions_.Get(index);
}
inline const ::vega::LiquidityProvision& LiquidityProvisionsResponse::liquidity_provisions(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.LiquidityProvisionsResponse.liquidity_provisions)
  return _internal_liquidity_provisions(index);
}
inline ::vega::LiquidityProvision* LiquidityProvisionsResponse::_internal_add_liquidity_provisions() {
  return liquidity_provisions_.Add();
}
inline ::vega::LiquidityProvision* LiquidityProvisionsResponse::add_liquidity_provisions() {
  // @@protoc_insertion_point(field_add:api.v1.LiquidityProvisionsResponse.liquidity_provisions)
  return _internal_add_liquidity_provisions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >&
LiquidityProvisionsResponse::liquidity_provisions() const {
  // @@protoc_insertion_point(field_list:api.v1.LiquidityProvisionsResponse.liquidity_provisions)
  return liquidity_provisions_;
}

// -------------------------------------------------------------------

// OracleSpecRequest

// string id = 1 [json_name = "id", (.validator.field) = {
inline void OracleSpecRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OracleSpecRequest::id() const {
  // @@protoc_insertion_point(field_get:api.v1.OracleSpecRequest.id)
  return _internal_id();
}
inline void OracleSpecRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OracleSpecRequest.id)
}
inline std::string* OracleSpecRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OracleSpecRequest.id)
  return _internal_mutable_id();
}
inline const std::string& OracleSpecRequest::_internal_id() const {
  return id_.Get();
}
inline void OracleSpecRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OracleSpecRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OracleSpecRequest.id)
}
inline void OracleSpecRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OracleSpecRequest.id)
}
inline void OracleSpecRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OracleSpecRequest.id)
}
inline std::string* OracleSpecRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OracleSpecRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.v1.OracleSpecRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OracleSpecRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OracleSpecRequest.id)
}

// -------------------------------------------------------------------

// OracleSpecResponse

// .oracles.v1.OracleSpec oracle_spec = 1 [json_name = "oracleSpec"];
inline bool OracleSpecResponse::_internal_has_oracle_spec() const {
  return this != internal_default_instance() && oracle_spec_ != nullptr;
}
inline bool OracleSpecResponse::has_oracle_spec() const {
  return _internal_has_oracle_spec();
}
inline const ::oracles::v1::OracleSpec& OracleSpecResponse::_internal_oracle_spec() const {
  const ::oracles::v1::OracleSpec* p = oracle_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::oracles::v1::OracleSpec&>(
      ::oracles::v1::_OracleSpec_default_instance_);
}
inline const ::oracles::v1::OracleSpec& OracleSpecResponse::oracle_spec() const {
  // @@protoc_insertion_point(field_get:api.v1.OracleSpecResponse.oracle_spec)
  return _internal_oracle_spec();
}
inline void OracleSpecResponse::unsafe_arena_set_allocated_oracle_spec(
    ::oracles::v1::OracleSpec* oracle_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oracle_spec_);
  }
  oracle_spec_ = oracle_spec;
  if (oracle_spec) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.OracleSpecResponse.oracle_spec)
}
inline ::oracles::v1::OracleSpec* OracleSpecResponse::release_oracle_spec() {

  ::oracles::v1::OracleSpec* temp = oracle_spec_;
  oracle_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::oracles::v1::OracleSpec* OracleSpecResponse::unsafe_arena_release_oracle_spec() {
  // @@protoc_insertion_point(field_release:api.v1.OracleSpecResponse.oracle_spec)

  ::oracles::v1::OracleSpec* temp = oracle_spec_;
  oracle_spec_ = nullptr;
  return temp;
}
inline ::oracles::v1::OracleSpec* OracleSpecResponse::_internal_mutable_oracle_spec() {

  if (oracle_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::oracles::v1::OracleSpec>(GetArena());
    oracle_spec_ = p;
  }
  return oracle_spec_;
}
inline ::oracles::v1::OracleSpec* OracleSpecResponse::mutable_oracle_spec() {
  // @@protoc_insertion_point(field_mutable:api.v1.OracleSpecResponse.oracle_spec)
  return _internal_mutable_oracle_spec();
}
inline void OracleSpecResponse::set_allocated_oracle_spec(::oracles::v1::OracleSpec* oracle_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oracle_spec_);
  }
  if (oracle_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oracle_spec)->GetArena();
    if (message_arena != submessage_arena) {
      oracle_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oracle_spec, submessage_arena);
    }

  } else {

  }
  oracle_spec_ = oracle_spec;
  // @@protoc_insertion_point(field_set_allocated:api.v1.OracleSpecResponse.oracle_spec)
}

// -------------------------------------------------------------------

// OracleSpecsRequest

// -------------------------------------------------------------------

// OracleSpecsResponse

// repeated .oracles.v1.OracleSpec oracle_specs = 1 [json_name = "oracleSpecs"];
inline int OracleSpecsResponse::_internal_oracle_specs_size() const {
  return oracle_specs_.size();
}
inline int OracleSpecsResponse::oracle_specs_size() const {
  return _internal_oracle_specs_size();
}
inline ::oracles::v1::OracleSpec* OracleSpecsResponse::mutable_oracle_specs(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.OracleSpecsResponse.oracle_specs)
  return oracle_specs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleSpec >*
OracleSpecsResponse::mutable_oracle_specs() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.OracleSpecsResponse.oracle_specs)
  return &oracle_specs_;
}
inline const ::oracles::v1::OracleSpec& OracleSpecsResponse::_internal_oracle_specs(int index) const {
  return oracle_specs_.Get(index);
}
inline const ::oracles::v1::OracleSpec& OracleSpecsResponse::oracle_specs(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.OracleSpecsResponse.oracle_specs)
  return _internal_oracle_specs(index);
}
inline ::oracles::v1::OracleSpec* OracleSpecsResponse::_internal_add_oracle_specs() {
  return oracle_specs_.Add();
}
inline ::oracles::v1::OracleSpec* OracleSpecsResponse::add_oracle_specs() {
  // @@protoc_insertion_point(field_add:api.v1.OracleSpecsResponse.oracle_specs)
  return _internal_add_oracle_specs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleSpec >&
OracleSpecsResponse::oracle_specs() const {
  // @@protoc_insertion_point(field_list:api.v1.OracleSpecsResponse.oracle_specs)
  return oracle_specs_;
}

// -------------------------------------------------------------------

// OracleDataBySpecRequest

// string id = 1 [json_name = "id", (.validator.field) = {
inline void OracleDataBySpecRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OracleDataBySpecRequest::id() const {
  // @@protoc_insertion_point(field_get:api.v1.OracleDataBySpecRequest.id)
  return _internal_id();
}
inline void OracleDataBySpecRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.v1.OracleDataBySpecRequest.id)
}
inline std::string* OracleDataBySpecRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.v1.OracleDataBySpecRequest.id)
  return _internal_mutable_id();
}
inline const std::string& OracleDataBySpecRequest::_internal_id() const {
  return id_.Get();
}
inline void OracleDataBySpecRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OracleDataBySpecRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.OracleDataBySpecRequest.id)
}
inline void OracleDataBySpecRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.OracleDataBySpecRequest.id)
}
inline void OracleDataBySpecRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.OracleDataBySpecRequest.id)
}
inline std::string* OracleDataBySpecRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OracleDataBySpecRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.v1.OracleDataBySpecRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OracleDataBySpecRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.OracleDataBySpecRequest.id)
}

// -------------------------------------------------------------------

// OracleDataBySpecResponse

// repeated .oracles.v1.OracleData oracle_data = 1 [json_name = "oracleData"];
inline int OracleDataBySpecResponse::_internal_oracle_data_size() const {
  return oracle_data_.size();
}
inline int OracleDataBySpecResponse::oracle_data_size() const {
  return _internal_oracle_data_size();
}
inline ::oracles::v1::OracleData* OracleDataBySpecResponse::mutable_oracle_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.OracleDataBySpecResponse.oracle_data)
  return oracle_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleData >*
OracleDataBySpecResponse::mutable_oracle_data() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.OracleDataBySpecResponse.oracle_data)
  return &oracle_data_;
}
inline const ::oracles::v1::OracleData& OracleDataBySpecResponse::_internal_oracle_data(int index) const {
  return oracle_data_.Get(index);
}
inline const ::oracles::v1::OracleData& OracleDataBySpecResponse::oracle_data(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.OracleDataBySpecResponse.oracle_data)
  return _internal_oracle_data(index);
}
inline ::oracles::v1::OracleData* OracleDataBySpecResponse::_internal_add_oracle_data() {
  return oracle_data_.Add();
}
inline ::oracles::v1::OracleData* OracleDataBySpecResponse::add_oracle_data() {
  // @@protoc_insertion_point(field_add:api.v1.OracleDataBySpecResponse.oracle_data)
  return _internal_add_oracle_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oracles::v1::OracleData >&
OracleDataBySpecResponse::oracle_data() const {
  // @@protoc_insertion_point(field_list:api.v1.OracleDataBySpecResponse.oracle_data)
  return oracle_data_;
}

// -------------------------------------------------------------------

// LastBlockHeightRequest

// -------------------------------------------------------------------

// LastBlockHeightResponse

// uint64 height = 1 [json_name = "height"];
inline void LastBlockHeightResponse::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LastBlockHeightResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LastBlockHeightResponse::height() const {
  // @@protoc_insertion_point(field_get:api.v1.LastBlockHeightResponse.height)
  return _internal_height();
}
inline void LastBlockHeightResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  height_ = value;
}
inline void LastBlockHeightResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api.v1.LastBlockHeightResponse.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::api::v1::SubmitTransactionRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::SubmitTransactionRequest_Type>() {
  return ::api::v1::SubmitTransactionRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::api::v1::SubmitTransactionV2Request_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::SubmitTransactionV2Request_Type>() {
  return ::api::v1::SubmitTransactionV2Request_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto
