// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/trading.proto

#include "api/trading.pb.h"
#include "api/trading.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace api {
namespace v1 {

static const char* TradingService_method_names[] = {
  "/api.v1.TradingService/PrepareSubmitOrder",
  "/api.v1.TradingService/PrepareCancelOrder",
  "/api.v1.TradingService/PrepareAmendOrder",
  "/api.v1.TradingService/PrepareWithdraw",
  "/api.v1.TradingService/SubmitTransaction",
  "/api.v1.TradingService/PrepareProposalSubmission",
  "/api.v1.TradingService/PrepareVoteSubmission",
  "/api.v1.TradingService/PropagateChainEvent",
  "/api.v1.TradingService/PrepareLiquidityProvision",
};

std::unique_ptr< TradingService::Stub> TradingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingService::Stub> stub(new TradingService::Stub(channel));
  return stub;
}

TradingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PrepareSubmitOrder_(TradingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareCancelOrder_(TradingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareAmendOrder_(TradingService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareWithdraw_(TradingService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitTransaction_(TradingService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareProposalSubmission_(TradingService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareVoteSubmission_(TradingService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PropagateChainEvent_(TradingService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareLiquidityProvision_(TradingService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TradingService::Stub::PrepareSubmitOrder(::grpc::ClientContext* context, const ::api::v1::PrepareSubmitOrderRequest& request, ::api::v1::PrepareSubmitOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PrepareSubmitOrderRequest, ::api::v1::PrepareSubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareSubmitOrder_, context, request, response);
}

void TradingService::Stub::experimental_async::PrepareSubmitOrder(::grpc::ClientContext* context, const ::api::v1::PrepareSubmitOrderRequest* request, ::api::v1::PrepareSubmitOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PrepareSubmitOrderRequest, ::api::v1::PrepareSubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareSubmitOrder_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PrepareSubmitOrder(::grpc::ClientContext* context, const ::api::v1::PrepareSubmitOrderRequest* request, ::api::v1::PrepareSubmitOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareSubmitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareSubmitOrderResponse>* TradingService::Stub::PrepareAsyncPrepareSubmitOrderRaw(::grpc::ClientContext* context, const ::api::v1::PrepareSubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PrepareSubmitOrderResponse, ::api::v1::PrepareSubmitOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareSubmitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareSubmitOrderResponse>* TradingService::Stub::AsyncPrepareSubmitOrderRaw(::grpc::ClientContext* context, const ::api::v1::PrepareSubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareSubmitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PrepareCancelOrder(::grpc::ClientContext* context, const ::api::v1::PrepareCancelOrderRequest& request, ::api::v1::PrepareCancelOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PrepareCancelOrderRequest, ::api::v1::PrepareCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareCancelOrder_, context, request, response);
}

void TradingService::Stub::experimental_async::PrepareCancelOrder(::grpc::ClientContext* context, const ::api::v1::PrepareCancelOrderRequest* request, ::api::v1::PrepareCancelOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PrepareCancelOrderRequest, ::api::v1::PrepareCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareCancelOrder_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PrepareCancelOrder(::grpc::ClientContext* context, const ::api::v1::PrepareCancelOrderRequest* request, ::api::v1::PrepareCancelOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareCancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareCancelOrderResponse>* TradingService::Stub::PrepareAsyncPrepareCancelOrderRaw(::grpc::ClientContext* context, const ::api::v1::PrepareCancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PrepareCancelOrderResponse, ::api::v1::PrepareCancelOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareCancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareCancelOrderResponse>* TradingService::Stub::AsyncPrepareCancelOrderRaw(::grpc::ClientContext* context, const ::api::v1::PrepareCancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PrepareAmendOrder(::grpc::ClientContext* context, const ::api::v1::PrepareAmendOrderRequest& request, ::api::v1::PrepareAmendOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PrepareAmendOrderRequest, ::api::v1::PrepareAmendOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareAmendOrder_, context, request, response);
}

void TradingService::Stub::experimental_async::PrepareAmendOrder(::grpc::ClientContext* context, const ::api::v1::PrepareAmendOrderRequest* request, ::api::v1::PrepareAmendOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PrepareAmendOrderRequest, ::api::v1::PrepareAmendOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareAmendOrder_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PrepareAmendOrder(::grpc::ClientContext* context, const ::api::v1::PrepareAmendOrderRequest* request, ::api::v1::PrepareAmendOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareAmendOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareAmendOrderResponse>* TradingService::Stub::PrepareAsyncPrepareAmendOrderRaw(::grpc::ClientContext* context, const ::api::v1::PrepareAmendOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PrepareAmendOrderResponse, ::api::v1::PrepareAmendOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareAmendOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareAmendOrderResponse>* TradingService::Stub::AsyncPrepareAmendOrderRaw(::grpc::ClientContext* context, const ::api::v1::PrepareAmendOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareAmendOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PrepareWithdraw(::grpc::ClientContext* context, const ::api::v1::PrepareWithdrawRequest& request, ::api::v1::PrepareWithdrawResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PrepareWithdrawRequest, ::api::v1::PrepareWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareWithdraw_, context, request, response);
}

void TradingService::Stub::experimental_async::PrepareWithdraw(::grpc::ClientContext* context, const ::api::v1::PrepareWithdrawRequest* request, ::api::v1::PrepareWithdrawResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PrepareWithdrawRequest, ::api::v1::PrepareWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareWithdraw_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PrepareWithdraw(::grpc::ClientContext* context, const ::api::v1::PrepareWithdrawRequest* request, ::api::v1::PrepareWithdrawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareWithdraw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareWithdrawResponse>* TradingService::Stub::PrepareAsyncPrepareWithdrawRaw(::grpc::ClientContext* context, const ::api::v1::PrepareWithdrawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PrepareWithdrawResponse, ::api::v1::PrepareWithdrawRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareWithdraw_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareWithdrawResponse>* TradingService::Stub::AsyncPrepareWithdrawRaw(::grpc::ClientContext* context, const ::api::v1::PrepareWithdrawRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareWithdrawRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::SubmitTransaction(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionRequest& request, ::api::v1::SubmitTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::SubmitTransactionRequest, ::api::v1::SubmitTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTransaction_, context, request, response);
}

void TradingService::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionRequest* request, ::api::v1::SubmitTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::SubmitTransactionRequest, ::api::v1::SubmitTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionRequest* request, ::api::v1::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionResponse>* TradingService::Stub::PrepareAsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::SubmitTransactionResponse, ::api::v1::SubmitTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::SubmitTransactionResponse>* TradingService::Stub::AsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::api::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PrepareProposalSubmission(::grpc::ClientContext* context, const ::api::v1::PrepareProposalSubmissionRequest& request, ::api::v1::PrepareProposalSubmissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PrepareProposalSubmissionRequest, ::api::v1::PrepareProposalSubmissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareProposalSubmission_, context, request, response);
}

void TradingService::Stub::experimental_async::PrepareProposalSubmission(::grpc::ClientContext* context, const ::api::v1::PrepareProposalSubmissionRequest* request, ::api::v1::PrepareProposalSubmissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PrepareProposalSubmissionRequest, ::api::v1::PrepareProposalSubmissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareProposalSubmission_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PrepareProposalSubmission(::grpc::ClientContext* context, const ::api::v1::PrepareProposalSubmissionRequest* request, ::api::v1::PrepareProposalSubmissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareProposalSubmission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareProposalSubmissionResponse>* TradingService::Stub::PrepareAsyncPrepareProposalSubmissionRaw(::grpc::ClientContext* context, const ::api::v1::PrepareProposalSubmissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PrepareProposalSubmissionResponse, ::api::v1::PrepareProposalSubmissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareProposalSubmission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareProposalSubmissionResponse>* TradingService::Stub::AsyncPrepareProposalSubmissionRaw(::grpc::ClientContext* context, const ::api::v1::PrepareProposalSubmissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareProposalSubmissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PrepareVoteSubmission(::grpc::ClientContext* context, const ::api::v1::PrepareVoteSubmissionRequest& request, ::api::v1::PrepareVoteSubmissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PrepareVoteSubmissionRequest, ::api::v1::PrepareVoteSubmissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareVoteSubmission_, context, request, response);
}

void TradingService::Stub::experimental_async::PrepareVoteSubmission(::grpc::ClientContext* context, const ::api::v1::PrepareVoteSubmissionRequest* request, ::api::v1::PrepareVoteSubmissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PrepareVoteSubmissionRequest, ::api::v1::PrepareVoteSubmissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareVoteSubmission_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PrepareVoteSubmission(::grpc::ClientContext* context, const ::api::v1::PrepareVoteSubmissionRequest* request, ::api::v1::PrepareVoteSubmissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareVoteSubmission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareVoteSubmissionResponse>* TradingService::Stub::PrepareAsyncPrepareVoteSubmissionRaw(::grpc::ClientContext* context, const ::api::v1::PrepareVoteSubmissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PrepareVoteSubmissionResponse, ::api::v1::PrepareVoteSubmissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareVoteSubmission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareVoteSubmissionResponse>* TradingService::Stub::AsyncPrepareVoteSubmissionRaw(::grpc::ClientContext* context, const ::api::v1::PrepareVoteSubmissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareVoteSubmissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::api::v1::PropagateChainEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PropagateChainEvent_, context, request, response);
}

void TradingService::Stub::experimental_async::PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PropagateChainEvent_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PropagateChainEvent(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PropagateChainEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>* TradingService::Stub::PrepareAsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PropagateChainEventResponse, ::api::v1::PropagateChainEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PropagateChainEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PropagateChainEventResponse>* TradingService::Stub::AsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::v1::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPropagateChainEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::PrepareLiquidityProvision(::grpc::ClientContext* context, const ::api::v1::PrepareLiquidityProvisionRequest& request, ::api::v1::PrepareLiquidityProvisionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PrepareLiquidityProvisionRequest, ::api::v1::PrepareLiquidityProvisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareLiquidityProvision_, context, request, response);
}

void TradingService::Stub::experimental_async::PrepareLiquidityProvision(::grpc::ClientContext* context, const ::api::v1::PrepareLiquidityProvisionRequest* request, ::api::v1::PrepareLiquidityProvisionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PrepareLiquidityProvisionRequest, ::api::v1::PrepareLiquidityProvisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareLiquidityProvision_, context, request, response, std::move(f));
}

void TradingService::Stub::experimental_async::PrepareLiquidityProvision(::grpc::ClientContext* context, const ::api::v1::PrepareLiquidityProvisionRequest* request, ::api::v1::PrepareLiquidityProvisionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareLiquidityProvision_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareLiquidityProvisionResponse>* TradingService::Stub::PrepareAsyncPrepareLiquidityProvisionRaw(::grpc::ClientContext* context, const ::api::v1::PrepareLiquidityProvisionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PrepareLiquidityProvisionResponse, ::api::v1::PrepareLiquidityProvisionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareLiquidityProvision_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PrepareLiquidityProvisionResponse>* TradingService::Stub::AsyncPrepareLiquidityProvisionRaw(::grpc::ClientContext* context, const ::api::v1::PrepareLiquidityProvisionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareLiquidityProvisionRaw(context, request, cq);
  result->StartCall();
  return result;
}

TradingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PrepareSubmitOrderRequest, ::api::v1::PrepareSubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PrepareSubmitOrderRequest* req,
             ::api::v1::PrepareSubmitOrderResponse* resp) {
               return service->PrepareSubmitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PrepareCancelOrderRequest, ::api::v1::PrepareCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PrepareCancelOrderRequest* req,
             ::api::v1::PrepareCancelOrderResponse* resp) {
               return service->PrepareCancelOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PrepareAmendOrderRequest, ::api::v1::PrepareAmendOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PrepareAmendOrderRequest* req,
             ::api::v1::PrepareAmendOrderResponse* resp) {
               return service->PrepareAmendOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PrepareWithdrawRequest, ::api::v1::PrepareWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PrepareWithdrawRequest* req,
             ::api::v1::PrepareWithdrawResponse* resp) {
               return service->PrepareWithdraw(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::SubmitTransactionRequest, ::api::v1::SubmitTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::SubmitTransactionRequest* req,
             ::api::v1::SubmitTransactionResponse* resp) {
               return service->SubmitTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PrepareProposalSubmissionRequest, ::api::v1::PrepareProposalSubmissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PrepareProposalSubmissionRequest* req,
             ::api::v1::PrepareProposalSubmissionResponse* resp) {
               return service->PrepareProposalSubmission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PrepareVoteSubmissionRequest, ::api::v1::PrepareVoteSubmissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PrepareVoteSubmissionRequest* req,
             ::api::v1::PrepareVoteSubmissionResponse* resp) {
               return service->PrepareVoteSubmission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PropagateChainEventRequest, ::api::v1::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PropagateChainEventRequest* req,
             ::api::v1::PropagateChainEventResponse* resp) {
               return service->PropagateChainEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::api::v1::PrepareLiquidityProvisionRequest, ::api::v1::PrepareLiquidityProvisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PrepareLiquidityProvisionRequest* req,
             ::api::v1::PrepareLiquidityProvisionResponse* resp) {
               return service->PrepareLiquidityProvision(ctx, req, resp);
             }, this)));
}

TradingService::Service::~Service() {
}

::grpc::Status TradingService::Service::PrepareSubmitOrder(::grpc::ServerContext* context, const ::api::v1::PrepareSubmitOrderRequest* request, ::api::v1::PrepareSubmitOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PrepareCancelOrder(::grpc::ServerContext* context, const ::api::v1::PrepareCancelOrderRequest* request, ::api::v1::PrepareCancelOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PrepareAmendOrder(::grpc::ServerContext* context, const ::api::v1::PrepareAmendOrderRequest* request, ::api::v1::PrepareAmendOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PrepareWithdraw(::grpc::ServerContext* context, const ::api::v1::PrepareWithdrawRequest* request, ::api::v1::PrepareWithdrawResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::SubmitTransaction(::grpc::ServerContext* context, const ::api::v1::SubmitTransactionRequest* request, ::api::v1::SubmitTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PrepareProposalSubmission(::grpc::ServerContext* context, const ::api::v1::PrepareProposalSubmissionRequest* request, ::api::v1::PrepareProposalSubmissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PrepareVoteSubmission(::grpc::ServerContext* context, const ::api::v1::PrepareVoteSubmissionRequest* request, ::api::v1::PrepareVoteSubmissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PropagateChainEvent(::grpc::ServerContext* context, const ::api::v1::PropagateChainEventRequest* request, ::api::v1::PropagateChainEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::PrepareLiquidityProvision(::grpc::ServerContext* context, const ::api::v1::PrepareLiquidityProvisionRequest* request, ::api::v1::PrepareLiquidityProvisionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TradingDataService_method_names[] = {
  "/api.v1.TradingDataService/MarketAccounts",
  "/api.v1.TradingDataService/PartyAccounts",
  "/api.v1.TradingDataService/FeeInfrastructureAccounts",
  "/api.v1.TradingDataService/Candles",
  "/api.v1.TradingDataService/MarketDataByID",
  "/api.v1.TradingDataService/MarketsData",
  "/api.v1.TradingDataService/MarketByID",
  "/api.v1.TradingDataService/MarketDepth",
  "/api.v1.TradingDataService/Markets",
  "/api.v1.TradingDataService/OrderByMarketAndID",
  "/api.v1.TradingDataService/OrderByReference",
  "/api.v1.TradingDataService/OrdersByMarket",
  "/api.v1.TradingDataService/OrdersByParty",
  "/api.v1.TradingDataService/OrderByID",
  "/api.v1.TradingDataService/OrderVersionsByID",
  "/api.v1.TradingDataService/MarginLevels",
  "/api.v1.TradingDataService/Parties",
  "/api.v1.TradingDataService/PartyByID",
  "/api.v1.TradingDataService/PositionsByParty",
  "/api.v1.TradingDataService/LastTrade",
  "/api.v1.TradingDataService/TradesByMarket",
  "/api.v1.TradingDataService/TradesByOrder",
  "/api.v1.TradingDataService/TradesByParty",
  "/api.v1.TradingDataService/GetProposals",
  "/api.v1.TradingDataService/GetProposalsByParty",
  "/api.v1.TradingDataService/GetVotesByParty",
  "/api.v1.TradingDataService/GetNewMarketProposals",
  "/api.v1.TradingDataService/GetUpdateMarketProposals",
  "/api.v1.TradingDataService/GetNetworkParametersProposals",
  "/api.v1.TradingDataService/GetNewAssetProposals",
  "/api.v1.TradingDataService/GetProposalByID",
  "/api.v1.TradingDataService/GetProposalByReference",
  "/api.v1.TradingDataService/ObserveGovernance",
  "/api.v1.TradingDataService/ObservePartyProposals",
  "/api.v1.TradingDataService/ObservePartyVotes",
  "/api.v1.TradingDataService/ObserveProposalVotes",
  "/api.v1.TradingDataService/ObserveEventBus",
  "/api.v1.TradingDataService/Statistics",
  "/api.v1.TradingDataService/GetVegaTime",
  "/api.v1.TradingDataService/AccountsSubscribe",
  "/api.v1.TradingDataService/CandlesSubscribe",
  "/api.v1.TradingDataService/MarginLevelsSubscribe",
  "/api.v1.TradingDataService/MarketDepthSubscribe",
  "/api.v1.TradingDataService/MarketDepthUpdatesSubscribe",
  "/api.v1.TradingDataService/MarketsDataSubscribe",
  "/api.v1.TradingDataService/OrdersSubscribe",
  "/api.v1.TradingDataService/PositionsSubscribe",
  "/api.v1.TradingDataService/TradesSubscribe",
  "/api.v1.TradingDataService/TransferResponsesSubscribe",
  "/api.v1.TradingDataService/GetNodeSignaturesAggregate",
  "/api.v1.TradingDataService/AssetByID",
  "/api.v1.TradingDataService/Assets",
  "/api.v1.TradingDataService/EstimateFee",
  "/api.v1.TradingDataService/EstimateMargin",
  "/api.v1.TradingDataService/ERC20WithdrawalApproval",
  "/api.v1.TradingDataService/Withdrawal",
  "/api.v1.TradingDataService/Withdrawals",
  "/api.v1.TradingDataService/Deposit",
  "/api.v1.TradingDataService/Deposits",
  "/api.v1.TradingDataService/NetworkParameters",
  "/api.v1.TradingDataService/LiquidityProvisions",
  "/api.v1.TradingDataService/OracleSpec",
  "/api.v1.TradingDataService/OracleSpecs",
  "/api.v1.TradingDataService/OracleDataBySpec",
};

std::unique_ptr< TradingDataService::Stub> TradingDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingDataService::Stub> stub(new TradingDataService::Stub(channel));
  return stub;
}

TradingDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_MarketAccounts_(TradingDataService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PartyAccounts_(TradingDataService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeInfrastructureAccounts_(TradingDataService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Candles_(TradingDataService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketDataByID_(TradingDataService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketsData_(TradingDataService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketByID_(TradingDataService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketDepth_(TradingDataService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Markets_(TradingDataService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderByMarketAndID_(TradingDataService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderByReference_(TradingDataService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrdersByMarket_(TradingDataService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrdersByParty_(TradingDataService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderByID_(TradingDataService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderVersionsByID_(TradingDataService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarginLevels_(TradingDataService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Parties_(TradingDataService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PartyByID_(TradingDataService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PositionsByParty_(TradingDataService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LastTrade_(TradingDataService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradesByMarket_(TradingDataService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradesByOrder_(TradingDataService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradesByParty_(TradingDataService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposals_(TradingDataService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposalsByParty_(TradingDataService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVotesByParty_(TradingDataService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewMarketProposals_(TradingDataService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUpdateMarketProposals_(TradingDataService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNetworkParametersProposals_(TradingDataService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewAssetProposals_(TradingDataService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposalByID_(TradingDataService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposalByReference_(TradingDataService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ObserveGovernance_(TradingDataService_method_names[32], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObservePartyProposals_(TradingDataService_method_names[33], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObservePartyVotes_(TradingDataService_method_names[34], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObserveProposalVotes_(TradingDataService_method_names[35], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObserveEventBus_(TradingDataService_method_names[36], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Statistics_(TradingDataService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVegaTime_(TradingDataService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AccountsSubscribe_(TradingDataService_method_names[39], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CandlesSubscribe_(TradingDataService_method_names[40], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarginLevelsSubscribe_(TradingDataService_method_names[41], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarketDepthSubscribe_(TradingDataService_method_names[42], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarketDepthUpdatesSubscribe_(TradingDataService_method_names[43], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarketsDataSubscribe_(TradingDataService_method_names[44], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OrdersSubscribe_(TradingDataService_method_names[45], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PositionsSubscribe_(TradingDataService_method_names[46], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TradesSubscribe_(TradingDataService_method_names[47], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TransferResponsesSubscribe_(TradingDataService_method_names[48], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNodeSignaturesAggregate_(TradingDataService_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssetByID_(TradingDataService_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Assets_(TradingDataService_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateFee_(TradingDataService_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateMargin_(TradingDataService_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ERC20WithdrawalApproval_(TradingDataService_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Withdrawal_(TradingDataService_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Withdrawals_(TradingDataService_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deposit_(TradingDataService_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deposits_(TradingDataService_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NetworkParameters_(TradingDataService_method_names[59], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LiquidityProvisions_(TradingDataService_method_names[60], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OracleSpec_(TradingDataService_method_names[61], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OracleSpecs_(TradingDataService_method_names[62], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OracleDataBySpec_(TradingDataService_method_names[63], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TradingDataService::Stub::MarketAccounts(::grpc::ClientContext* context, const ::api::v1::MarketAccountsRequest& request, ::api::v1::MarketAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::MarketAccountsRequest, ::api::v1::MarketAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketAccounts_, context, request, response);
}

void TradingDataService::Stub::experimental_async::MarketAccounts(::grpc::ClientContext* context, const ::api::v1::MarketAccountsRequest* request, ::api::v1::MarketAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::MarketAccountsRequest, ::api::v1::MarketAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketAccounts_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::MarketAccounts(::grpc::ClientContext* context, const ::api::v1::MarketAccountsRequest* request, ::api::v1::MarketAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketAccountsResponse>* TradingDataService::Stub::PrepareAsyncMarketAccountsRaw(::grpc::ClientContext* context, const ::api::v1::MarketAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::MarketAccountsResponse, ::api::v1::MarketAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketAccountsResponse>* TradingDataService::Stub::AsyncMarketAccountsRaw(::grpc::ClientContext* context, const ::api::v1::MarketAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::PartyAccounts(::grpc::ClientContext* context, const ::api::v1::PartyAccountsRequest& request, ::api::v1::PartyAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PartyAccountsRequest, ::api::v1::PartyAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PartyAccounts_, context, request, response);
}

void TradingDataService::Stub::experimental_async::PartyAccounts(::grpc::ClientContext* context, const ::api::v1::PartyAccountsRequest* request, ::api::v1::PartyAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PartyAccountsRequest, ::api::v1::PartyAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyAccounts_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::PartyAccounts(::grpc::ClientContext* context, const ::api::v1::PartyAccountsRequest* request, ::api::v1::PartyAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PartyAccountsResponse>* TradingDataService::Stub::PrepareAsyncPartyAccountsRaw(::grpc::ClientContext* context, const ::api::v1::PartyAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PartyAccountsResponse, ::api::v1::PartyAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PartyAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PartyAccountsResponse>* TradingDataService::Stub::AsyncPartyAccountsRaw(::grpc::ClientContext* context, const ::api::v1::PartyAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartyAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::FeeInfrastructureAccounts(::grpc::ClientContext* context, const ::api::v1::FeeInfrastructureAccountsRequest& request, ::api::v1::FeeInfrastructureAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::FeeInfrastructureAccountsRequest, ::api::v1::FeeInfrastructureAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeeInfrastructureAccounts_, context, request, response);
}

void TradingDataService::Stub::experimental_async::FeeInfrastructureAccounts(::grpc::ClientContext* context, const ::api::v1::FeeInfrastructureAccountsRequest* request, ::api::v1::FeeInfrastructureAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::FeeInfrastructureAccountsRequest, ::api::v1::FeeInfrastructureAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeInfrastructureAccounts_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::FeeInfrastructureAccounts(::grpc::ClientContext* context, const ::api::v1::FeeInfrastructureAccountsRequest* request, ::api::v1::FeeInfrastructureAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeInfrastructureAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::FeeInfrastructureAccountsResponse>* TradingDataService::Stub::PrepareAsyncFeeInfrastructureAccountsRaw(::grpc::ClientContext* context, const ::api::v1::FeeInfrastructureAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::FeeInfrastructureAccountsResponse, ::api::v1::FeeInfrastructureAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeeInfrastructureAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::FeeInfrastructureAccountsResponse>* TradingDataService::Stub::AsyncFeeInfrastructureAccountsRaw(::grpc::ClientContext* context, const ::api::v1::FeeInfrastructureAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeeInfrastructureAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Candles(::grpc::ClientContext* context, const ::api::v1::CandlesRequest& request, ::api::v1::CandlesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::CandlesRequest, ::api::v1::CandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Candles_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Candles(::grpc::ClientContext* context, const ::api::v1::CandlesRequest* request, ::api::v1::CandlesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::CandlesRequest, ::api::v1::CandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Candles_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Candles(::grpc::ClientContext* context, const ::api::v1::CandlesRequest* request, ::api::v1::CandlesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Candles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::CandlesResponse>* TradingDataService::Stub::PrepareAsyncCandlesRaw(::grpc::ClientContext* context, const ::api::v1::CandlesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::CandlesResponse, ::api::v1::CandlesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Candles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::CandlesResponse>* TradingDataService::Stub::AsyncCandlesRaw(::grpc::ClientContext* context, const ::api::v1::CandlesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCandlesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::MarketDataByID(::grpc::ClientContext* context, const ::api::v1::MarketDataByIDRequest& request, ::api::v1::MarketDataByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::MarketDataByIDRequest, ::api::v1::MarketDataByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketDataByID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::MarketDataByID(::grpc::ClientContext* context, const ::api::v1::MarketDataByIDRequest* request, ::api::v1::MarketDataByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::MarketDataByIDRequest, ::api::v1::MarketDataByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDataByID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::MarketDataByID(::grpc::ClientContext* context, const ::api::v1::MarketDataByIDRequest* request, ::api::v1::MarketDataByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDataByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketDataByIDResponse>* TradingDataService::Stub::PrepareAsyncMarketDataByIDRaw(::grpc::ClientContext* context, const ::api::v1::MarketDataByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::MarketDataByIDResponse, ::api::v1::MarketDataByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketDataByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketDataByIDResponse>* TradingDataService::Stub::AsyncMarketDataByIDRaw(::grpc::ClientContext* context, const ::api::v1::MarketDataByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketDataByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::MarketsData(::grpc::ClientContext* context, const ::api::v1::MarketsDataRequest& request, ::api::v1::MarketsDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::MarketsDataRequest, ::api::v1::MarketsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketsData_, context, request, response);
}

void TradingDataService::Stub::experimental_async::MarketsData(::grpc::ClientContext* context, const ::api::v1::MarketsDataRequest* request, ::api::v1::MarketsDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::MarketsDataRequest, ::api::v1::MarketsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketsData_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::MarketsData(::grpc::ClientContext* context, const ::api::v1::MarketsDataRequest* request, ::api::v1::MarketsDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketsData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketsDataResponse>* TradingDataService::Stub::PrepareAsyncMarketsDataRaw(::grpc::ClientContext* context, const ::api::v1::MarketsDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::MarketsDataResponse, ::api::v1::MarketsDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketsData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketsDataResponse>* TradingDataService::Stub::AsyncMarketsDataRaw(::grpc::ClientContext* context, const ::api::v1::MarketsDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketsDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::MarketByID(::grpc::ClientContext* context, const ::api::v1::MarketByIDRequest& request, ::api::v1::MarketByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::MarketByIDRequest, ::api::v1::MarketByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketByID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::MarketByID(::grpc::ClientContext* context, const ::api::v1::MarketByIDRequest* request, ::api::v1::MarketByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::MarketByIDRequest, ::api::v1::MarketByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketByID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::MarketByID(::grpc::ClientContext* context, const ::api::v1::MarketByIDRequest* request, ::api::v1::MarketByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketByIDResponse>* TradingDataService::Stub::PrepareAsyncMarketByIDRaw(::grpc::ClientContext* context, const ::api::v1::MarketByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::MarketByIDResponse, ::api::v1::MarketByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketByIDResponse>* TradingDataService::Stub::AsyncMarketByIDRaw(::grpc::ClientContext* context, const ::api::v1::MarketByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::MarketDepth(::grpc::ClientContext* context, const ::api::v1::MarketDepthRequest& request, ::api::v1::MarketDepthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::MarketDepthRequest, ::api::v1::MarketDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketDepth_, context, request, response);
}

void TradingDataService::Stub::experimental_async::MarketDepth(::grpc::ClientContext* context, const ::api::v1::MarketDepthRequest* request, ::api::v1::MarketDepthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::MarketDepthRequest, ::api::v1::MarketDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDepth_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::MarketDepth(::grpc::ClientContext* context, const ::api::v1::MarketDepthRequest* request, ::api::v1::MarketDepthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDepth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketDepthResponse>* TradingDataService::Stub::PrepareAsyncMarketDepthRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::MarketDepthResponse, ::api::v1::MarketDepthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketDepth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketDepthResponse>* TradingDataService::Stub::AsyncMarketDepthRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketDepthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Markets(::grpc::ClientContext* context, const ::api::v1::MarketsRequest& request, ::api::v1::MarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::MarketsRequest, ::api::v1::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Markets_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Markets(::grpc::ClientContext* context, const ::api::v1::MarketsRequest* request, ::api::v1::MarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::MarketsRequest, ::api::v1::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Markets_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Markets(::grpc::ClientContext* context, const ::api::v1::MarketsRequest* request, ::api::v1::MarketsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Markets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketsResponse>* TradingDataService::Stub::PrepareAsyncMarketsRaw(::grpc::ClientContext* context, const ::api::v1::MarketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::MarketsResponse, ::api::v1::MarketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Markets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarketsResponse>* TradingDataService::Stub::AsyncMarketsRaw(::grpc::ClientContext* context, const ::api::v1::MarketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OrderByMarketAndID(::grpc::ClientContext* context, const ::api::v1::OrderByMarketAndIDRequest& request, ::api::v1::OrderByMarketAndIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OrderByMarketAndIDRequest, ::api::v1::OrderByMarketAndIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderByMarketAndID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OrderByMarketAndID(::grpc::ClientContext* context, const ::api::v1::OrderByMarketAndIDRequest* request, ::api::v1::OrderByMarketAndIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OrderByMarketAndIDRequest, ::api::v1::OrderByMarketAndIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByMarketAndID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OrderByMarketAndID(::grpc::ClientContext* context, const ::api::v1::OrderByMarketAndIDRequest* request, ::api::v1::OrderByMarketAndIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByMarketAndID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderByMarketAndIDResponse>* TradingDataService::Stub::PrepareAsyncOrderByMarketAndIDRaw(::grpc::ClientContext* context, const ::api::v1::OrderByMarketAndIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OrderByMarketAndIDResponse, ::api::v1::OrderByMarketAndIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderByMarketAndID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderByMarketAndIDResponse>* TradingDataService::Stub::AsyncOrderByMarketAndIDRaw(::grpc::ClientContext* context, const ::api::v1::OrderByMarketAndIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderByMarketAndIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OrderByReference(::grpc::ClientContext* context, const ::api::v1::OrderByReferenceRequest& request, ::api::v1::OrderByReferenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OrderByReferenceRequest, ::api::v1::OrderByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderByReference_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OrderByReference(::grpc::ClientContext* context, const ::api::v1::OrderByReferenceRequest* request, ::api::v1::OrderByReferenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OrderByReferenceRequest, ::api::v1::OrderByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByReference_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OrderByReference(::grpc::ClientContext* context, const ::api::v1::OrderByReferenceRequest* request, ::api::v1::OrderByReferenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByReference_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderByReferenceResponse>* TradingDataService::Stub::PrepareAsyncOrderByReferenceRaw(::grpc::ClientContext* context, const ::api::v1::OrderByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OrderByReferenceResponse, ::api::v1::OrderByReferenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderByReference_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderByReferenceResponse>* TradingDataService::Stub::AsyncOrderByReferenceRaw(::grpc::ClientContext* context, const ::api::v1::OrderByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderByReferenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OrdersByMarket(::grpc::ClientContext* context, const ::api::v1::OrdersByMarketRequest& request, ::api::v1::OrdersByMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OrdersByMarketRequest, ::api::v1::OrdersByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrdersByMarket_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OrdersByMarket(::grpc::ClientContext* context, const ::api::v1::OrdersByMarketRequest* request, ::api::v1::OrdersByMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OrdersByMarketRequest, ::api::v1::OrdersByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByMarket_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OrdersByMarket(::grpc::ClientContext* context, const ::api::v1::OrdersByMarketRequest* request, ::api::v1::OrdersByMarketResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrdersByMarketResponse>* TradingDataService::Stub::PrepareAsyncOrdersByMarketRaw(::grpc::ClientContext* context, const ::api::v1::OrdersByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OrdersByMarketResponse, ::api::v1::OrdersByMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrdersByMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrdersByMarketResponse>* TradingDataService::Stub::AsyncOrdersByMarketRaw(::grpc::ClientContext* context, const ::api::v1::OrdersByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrdersByMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OrdersByParty(::grpc::ClientContext* context, const ::api::v1::OrdersByPartyRequest& request, ::api::v1::OrdersByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OrdersByPartyRequest, ::api::v1::OrdersByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrdersByParty_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OrdersByParty(::grpc::ClientContext* context, const ::api::v1::OrdersByPartyRequest* request, ::api::v1::OrdersByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OrdersByPartyRequest, ::api::v1::OrdersByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByParty_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OrdersByParty(::grpc::ClientContext* context, const ::api::v1::OrdersByPartyRequest* request, ::api::v1::OrdersByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrdersByPartyResponse>* TradingDataService::Stub::PrepareAsyncOrdersByPartyRaw(::grpc::ClientContext* context, const ::api::v1::OrdersByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OrdersByPartyResponse, ::api::v1::OrdersByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrdersByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrdersByPartyResponse>* TradingDataService::Stub::AsyncOrdersByPartyRaw(::grpc::ClientContext* context, const ::api::v1::OrdersByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrdersByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OrderByID(::grpc::ClientContext* context, const ::api::v1::OrderByIDRequest& request, ::api::v1::OrderByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OrderByIDRequest, ::api::v1::OrderByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderByID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OrderByID(::grpc::ClientContext* context, const ::api::v1::OrderByIDRequest* request, ::api::v1::OrderByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OrderByIDRequest, ::api::v1::OrderByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OrderByID(::grpc::ClientContext* context, const ::api::v1::OrderByIDRequest* request, ::api::v1::OrderByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderByIDResponse>* TradingDataService::Stub::PrepareAsyncOrderByIDRaw(::grpc::ClientContext* context, const ::api::v1::OrderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OrderByIDResponse, ::api::v1::OrderByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderByIDResponse>* TradingDataService::Stub::AsyncOrderByIDRaw(::grpc::ClientContext* context, const ::api::v1::OrderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OrderVersionsByID(::grpc::ClientContext* context, const ::api::v1::OrderVersionsByIDRequest& request, ::api::v1::OrderVersionsByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OrderVersionsByIDRequest, ::api::v1::OrderVersionsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderVersionsByID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OrderVersionsByID(::grpc::ClientContext* context, const ::api::v1::OrderVersionsByIDRequest* request, ::api::v1::OrderVersionsByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OrderVersionsByIDRequest, ::api::v1::OrderVersionsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderVersionsByID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OrderVersionsByID(::grpc::ClientContext* context, const ::api::v1::OrderVersionsByIDRequest* request, ::api::v1::OrderVersionsByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderVersionsByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderVersionsByIDResponse>* TradingDataService::Stub::PrepareAsyncOrderVersionsByIDRaw(::grpc::ClientContext* context, const ::api::v1::OrderVersionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OrderVersionsByIDResponse, ::api::v1::OrderVersionsByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderVersionsByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OrderVersionsByIDResponse>* TradingDataService::Stub::AsyncOrderVersionsByIDRaw(::grpc::ClientContext* context, const ::api::v1::OrderVersionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderVersionsByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::MarginLevels(::grpc::ClientContext* context, const ::api::v1::MarginLevelsRequest& request, ::api::v1::MarginLevelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::MarginLevelsRequest, ::api::v1::MarginLevelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarginLevels_, context, request, response);
}

void TradingDataService::Stub::experimental_async::MarginLevels(::grpc::ClientContext* context, const ::api::v1::MarginLevelsRequest* request, ::api::v1::MarginLevelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::MarginLevelsRequest, ::api::v1::MarginLevelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarginLevels_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::MarginLevels(::grpc::ClientContext* context, const ::api::v1::MarginLevelsRequest* request, ::api::v1::MarginLevelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarginLevels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarginLevelsResponse>* TradingDataService::Stub::PrepareAsyncMarginLevelsRaw(::grpc::ClientContext* context, const ::api::v1::MarginLevelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::MarginLevelsResponse, ::api::v1::MarginLevelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarginLevels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::MarginLevelsResponse>* TradingDataService::Stub::AsyncMarginLevelsRaw(::grpc::ClientContext* context, const ::api::v1::MarginLevelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarginLevelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Parties(::grpc::ClientContext* context, const ::api::v1::PartiesRequest& request, ::api::v1::PartiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PartiesRequest, ::api::v1::PartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Parties_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Parties(::grpc::ClientContext* context, const ::api::v1::PartiesRequest* request, ::api::v1::PartiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PartiesRequest, ::api::v1::PartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parties_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Parties(::grpc::ClientContext* context, const ::api::v1::PartiesRequest* request, ::api::v1::PartiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PartiesResponse>* TradingDataService::Stub::PrepareAsyncPartiesRaw(::grpc::ClientContext* context, const ::api::v1::PartiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PartiesResponse, ::api::v1::PartiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Parties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PartiesResponse>* TradingDataService::Stub::AsyncPartiesRaw(::grpc::ClientContext* context, const ::api::v1::PartiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::PartyByID(::grpc::ClientContext* context, const ::api::v1::PartyByIDRequest& request, ::api::v1::PartyByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PartyByIDRequest, ::api::v1::PartyByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PartyByID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::PartyByID(::grpc::ClientContext* context, const ::api::v1::PartyByIDRequest* request, ::api::v1::PartyByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PartyByIDRequest, ::api::v1::PartyByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyByID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::PartyByID(::grpc::ClientContext* context, const ::api::v1::PartyByIDRequest* request, ::api::v1::PartyByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PartyByIDResponse>* TradingDataService::Stub::PrepareAsyncPartyByIDRaw(::grpc::ClientContext* context, const ::api::v1::PartyByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PartyByIDResponse, ::api::v1::PartyByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PartyByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PartyByIDResponse>* TradingDataService::Stub::AsyncPartyByIDRaw(::grpc::ClientContext* context, const ::api::v1::PartyByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartyByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::PositionsByParty(::grpc::ClientContext* context, const ::api::v1::PositionsByPartyRequest& request, ::api::v1::PositionsByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::PositionsByPartyRequest, ::api::v1::PositionsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PositionsByParty_, context, request, response);
}

void TradingDataService::Stub::experimental_async::PositionsByParty(::grpc::ClientContext* context, const ::api::v1::PositionsByPartyRequest* request, ::api::v1::PositionsByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::PositionsByPartyRequest, ::api::v1::PositionsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PositionsByParty_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::PositionsByParty(::grpc::ClientContext* context, const ::api::v1::PositionsByPartyRequest* request, ::api::v1::PositionsByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PositionsByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PositionsByPartyResponse>* TradingDataService::Stub::PrepareAsyncPositionsByPartyRaw(::grpc::ClientContext* context, const ::api::v1::PositionsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::PositionsByPartyResponse, ::api::v1::PositionsByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PositionsByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::PositionsByPartyResponse>* TradingDataService::Stub::AsyncPositionsByPartyRaw(::grpc::ClientContext* context, const ::api::v1::PositionsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPositionsByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::LastTrade(::grpc::ClientContext* context, const ::api::v1::LastTradeRequest& request, ::api::v1::LastTradeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::LastTradeRequest, ::api::v1::LastTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LastTrade_, context, request, response);
}

void TradingDataService::Stub::experimental_async::LastTrade(::grpc::ClientContext* context, const ::api::v1::LastTradeRequest* request, ::api::v1::LastTradeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::LastTradeRequest, ::api::v1::LastTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastTrade_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::LastTrade(::grpc::ClientContext* context, const ::api::v1::LastTradeRequest* request, ::api::v1::LastTradeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastTrade_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::LastTradeResponse>* TradingDataService::Stub::PrepareAsyncLastTradeRaw(::grpc::ClientContext* context, const ::api::v1::LastTradeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::LastTradeResponse, ::api::v1::LastTradeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LastTrade_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::LastTradeResponse>* TradingDataService::Stub::AsyncLastTradeRaw(::grpc::ClientContext* context, const ::api::v1::LastTradeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLastTradeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::TradesByMarket(::grpc::ClientContext* context, const ::api::v1::TradesByMarketRequest& request, ::api::v1::TradesByMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::TradesByMarketRequest, ::api::v1::TradesByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradesByMarket_, context, request, response);
}

void TradingDataService::Stub::experimental_async::TradesByMarket(::grpc::ClientContext* context, const ::api::v1::TradesByMarketRequest* request, ::api::v1::TradesByMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::TradesByMarketRequest, ::api::v1::TradesByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByMarket_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::TradesByMarket(::grpc::ClientContext* context, const ::api::v1::TradesByMarketRequest* request, ::api::v1::TradesByMarketResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::TradesByMarketResponse>* TradingDataService::Stub::PrepareAsyncTradesByMarketRaw(::grpc::ClientContext* context, const ::api::v1::TradesByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::TradesByMarketResponse, ::api::v1::TradesByMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradesByMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::TradesByMarketResponse>* TradingDataService::Stub::AsyncTradesByMarketRaw(::grpc::ClientContext* context, const ::api::v1::TradesByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradesByMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::TradesByOrder(::grpc::ClientContext* context, const ::api::v1::TradesByOrderRequest& request, ::api::v1::TradesByOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::TradesByOrderRequest, ::api::v1::TradesByOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradesByOrder_, context, request, response);
}

void TradingDataService::Stub::experimental_async::TradesByOrder(::grpc::ClientContext* context, const ::api::v1::TradesByOrderRequest* request, ::api::v1::TradesByOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::TradesByOrderRequest, ::api::v1::TradesByOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByOrder_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::TradesByOrder(::grpc::ClientContext* context, const ::api::v1::TradesByOrderRequest* request, ::api::v1::TradesByOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::TradesByOrderResponse>* TradingDataService::Stub::PrepareAsyncTradesByOrderRaw(::grpc::ClientContext* context, const ::api::v1::TradesByOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::TradesByOrderResponse, ::api::v1::TradesByOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradesByOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::TradesByOrderResponse>* TradingDataService::Stub::AsyncTradesByOrderRaw(::grpc::ClientContext* context, const ::api::v1::TradesByOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradesByOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::TradesByParty(::grpc::ClientContext* context, const ::api::v1::TradesByPartyRequest& request, ::api::v1::TradesByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::TradesByPartyRequest, ::api::v1::TradesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradesByParty_, context, request, response);
}

void TradingDataService::Stub::experimental_async::TradesByParty(::grpc::ClientContext* context, const ::api::v1::TradesByPartyRequest* request, ::api::v1::TradesByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::TradesByPartyRequest, ::api::v1::TradesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByParty_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::TradesByParty(::grpc::ClientContext* context, const ::api::v1::TradesByPartyRequest* request, ::api::v1::TradesByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::TradesByPartyResponse>* TradingDataService::Stub::PrepareAsyncTradesByPartyRaw(::grpc::ClientContext* context, const ::api::v1::TradesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::TradesByPartyResponse, ::api::v1::TradesByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradesByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::TradesByPartyResponse>* TradingDataService::Stub::AsyncTradesByPartyRaw(::grpc::ClientContext* context, const ::api::v1::TradesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradesByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetProposals(::grpc::ClientContext* context, const ::api::v1::GetProposalsRequest& request, ::api::v1::GetProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetProposalsRequest, ::api::v1::GetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposals_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetProposals(::grpc::ClientContext* context, const ::api::v1::GetProposalsRequest* request, ::api::v1::GetProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetProposalsRequest, ::api::v1::GetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposals_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetProposals(::grpc::ClientContext* context, const ::api::v1::GetProposalsRequest* request, ::api::v1::GetProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalsResponse>* TradingDataService::Stub::PrepareAsyncGetProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetProposalsResponse, ::api::v1::GetProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalsResponse>* TradingDataService::Stub::AsyncGetProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetProposalsByParty(::grpc::ClientContext* context, const ::api::v1::GetProposalsByPartyRequest& request, ::api::v1::GetProposalsByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetProposalsByPartyRequest, ::api::v1::GetProposalsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposalsByParty_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetProposalsByParty(::grpc::ClientContext* context, const ::api::v1::GetProposalsByPartyRequest* request, ::api::v1::GetProposalsByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetProposalsByPartyRequest, ::api::v1::GetProposalsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalsByParty_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetProposalsByParty(::grpc::ClientContext* context, const ::api::v1::GetProposalsByPartyRequest* request, ::api::v1::GetProposalsByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalsByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalsByPartyResponse>* TradingDataService::Stub::PrepareAsyncGetProposalsByPartyRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetProposalsByPartyResponse, ::api::v1::GetProposalsByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposalsByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalsByPartyResponse>* TradingDataService::Stub::AsyncGetProposalsByPartyRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalsByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetVotesByParty(::grpc::ClientContext* context, const ::api::v1::GetVotesByPartyRequest& request, ::api::v1::GetVotesByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetVotesByPartyRequest, ::api::v1::GetVotesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVotesByParty_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetVotesByParty(::grpc::ClientContext* context, const ::api::v1::GetVotesByPartyRequest* request, ::api::v1::GetVotesByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetVotesByPartyRequest, ::api::v1::GetVotesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVotesByParty_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetVotesByParty(::grpc::ClientContext* context, const ::api::v1::GetVotesByPartyRequest* request, ::api::v1::GetVotesByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVotesByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetVotesByPartyResponse>* TradingDataService::Stub::PrepareAsyncGetVotesByPartyRaw(::grpc::ClientContext* context, const ::api::v1::GetVotesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetVotesByPartyResponse, ::api::v1::GetVotesByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVotesByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetVotesByPartyResponse>* TradingDataService::Stub::AsyncGetVotesByPartyRaw(::grpc::ClientContext* context, const ::api::v1::GetVotesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVotesByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetNewMarketProposals(::grpc::ClientContext* context, const ::api::v1::GetNewMarketProposalsRequest& request, ::api::v1::GetNewMarketProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetNewMarketProposalsRequest, ::api::v1::GetNewMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNewMarketProposals_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetNewMarketProposals(::grpc::ClientContext* context, const ::api::v1::GetNewMarketProposalsRequest* request, ::api::v1::GetNewMarketProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetNewMarketProposalsRequest, ::api::v1::GetNewMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewMarketProposals_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetNewMarketProposals(::grpc::ClientContext* context, const ::api::v1::GetNewMarketProposalsRequest* request, ::api::v1::GetNewMarketProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewMarketProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNewMarketProposalsResponse>* TradingDataService::Stub::PrepareAsyncGetNewMarketProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetNewMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetNewMarketProposalsResponse, ::api::v1::GetNewMarketProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNewMarketProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNewMarketProposalsResponse>* TradingDataService::Stub::AsyncGetNewMarketProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetNewMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNewMarketProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetUpdateMarketProposals(::grpc::ClientContext* context, const ::api::v1::GetUpdateMarketProposalsRequest& request, ::api::v1::GetUpdateMarketProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetUpdateMarketProposalsRequest, ::api::v1::GetUpdateMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUpdateMarketProposals_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetUpdateMarketProposals(::grpc::ClientContext* context, const ::api::v1::GetUpdateMarketProposalsRequest* request, ::api::v1::GetUpdateMarketProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetUpdateMarketProposalsRequest, ::api::v1::GetUpdateMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUpdateMarketProposals_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetUpdateMarketProposals(::grpc::ClientContext* context, const ::api::v1::GetUpdateMarketProposalsRequest* request, ::api::v1::GetUpdateMarketProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUpdateMarketProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetUpdateMarketProposalsResponse>* TradingDataService::Stub::PrepareAsyncGetUpdateMarketProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetUpdateMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetUpdateMarketProposalsResponse, ::api::v1::GetUpdateMarketProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUpdateMarketProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetUpdateMarketProposalsResponse>* TradingDataService::Stub::AsyncGetUpdateMarketProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetUpdateMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUpdateMarketProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetNetworkParametersProposals(::grpc::ClientContext* context, const ::api::v1::GetNetworkParametersProposalsRequest& request, ::api::v1::GetNetworkParametersProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetNetworkParametersProposalsRequest, ::api::v1::GetNetworkParametersProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNetworkParametersProposals_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetNetworkParametersProposals(::grpc::ClientContext* context, const ::api::v1::GetNetworkParametersProposalsRequest* request, ::api::v1::GetNetworkParametersProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetNetworkParametersProposalsRequest, ::api::v1::GetNetworkParametersProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkParametersProposals_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetNetworkParametersProposals(::grpc::ClientContext* context, const ::api::v1::GetNetworkParametersProposalsRequest* request, ::api::v1::GetNetworkParametersProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkParametersProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNetworkParametersProposalsResponse>* TradingDataService::Stub::PrepareAsyncGetNetworkParametersProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetNetworkParametersProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetNetworkParametersProposalsResponse, ::api::v1::GetNetworkParametersProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNetworkParametersProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNetworkParametersProposalsResponse>* TradingDataService::Stub::AsyncGetNetworkParametersProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetNetworkParametersProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNetworkParametersProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetNewAssetProposals(::grpc::ClientContext* context, const ::api::v1::GetNewAssetProposalsRequest& request, ::api::v1::GetNewAssetProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetNewAssetProposalsRequest, ::api::v1::GetNewAssetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNewAssetProposals_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetNewAssetProposals(::grpc::ClientContext* context, const ::api::v1::GetNewAssetProposalsRequest* request, ::api::v1::GetNewAssetProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetNewAssetProposalsRequest, ::api::v1::GetNewAssetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewAssetProposals_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetNewAssetProposals(::grpc::ClientContext* context, const ::api::v1::GetNewAssetProposalsRequest* request, ::api::v1::GetNewAssetProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewAssetProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNewAssetProposalsResponse>* TradingDataService::Stub::PrepareAsyncGetNewAssetProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetNewAssetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetNewAssetProposalsResponse, ::api::v1::GetNewAssetProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNewAssetProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNewAssetProposalsResponse>* TradingDataService::Stub::AsyncGetNewAssetProposalsRaw(::grpc::ClientContext* context, const ::api::v1::GetNewAssetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNewAssetProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetProposalByID(::grpc::ClientContext* context, const ::api::v1::GetProposalByIDRequest& request, ::api::v1::GetProposalByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetProposalByIDRequest, ::api::v1::GetProposalByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposalByID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetProposalByID(::grpc::ClientContext* context, const ::api::v1::GetProposalByIDRequest* request, ::api::v1::GetProposalByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetProposalByIDRequest, ::api::v1::GetProposalByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetProposalByID(::grpc::ClientContext* context, const ::api::v1::GetProposalByIDRequest* request, ::api::v1::GetProposalByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalByIDResponse>* TradingDataService::Stub::PrepareAsyncGetProposalByIDRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetProposalByIDResponse, ::api::v1::GetProposalByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposalByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalByIDResponse>* TradingDataService::Stub::AsyncGetProposalByIDRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetProposalByReference(::grpc::ClientContext* context, const ::api::v1::GetProposalByReferenceRequest& request, ::api::v1::GetProposalByReferenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetProposalByReferenceRequest, ::api::v1::GetProposalByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposalByReference_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetProposalByReference(::grpc::ClientContext* context, const ::api::v1::GetProposalByReferenceRequest* request, ::api::v1::GetProposalByReferenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetProposalByReferenceRequest, ::api::v1::GetProposalByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByReference_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetProposalByReference(::grpc::ClientContext* context, const ::api::v1::GetProposalByReferenceRequest* request, ::api::v1::GetProposalByReferenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByReference_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalByReferenceResponse>* TradingDataService::Stub::PrepareAsyncGetProposalByReferenceRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetProposalByReferenceResponse, ::api::v1::GetProposalByReferenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposalByReference_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetProposalByReferenceResponse>* TradingDataService::Stub::AsyncGetProposalByReferenceRaw(::grpc::ClientContext* context, const ::api::v1::GetProposalByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalByReferenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::api::v1::ObserveGovernanceResponse>* TradingDataService::Stub::ObserveGovernanceRaw(::grpc::ClientContext* context, const ::api::v1::ObserveGovernanceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::ObserveGovernanceResponse>::Create(channel_.get(), rpcmethod_ObserveGovernance_, context, request);
}

void TradingDataService::Stub::experimental_async::ObserveGovernance(::grpc::ClientContext* context, ::api::v1::ObserveGovernanceRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::ObserveGovernanceResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::ObserveGovernanceResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ObserveGovernance_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::ObserveGovernanceResponse>* TradingDataService::Stub::AsyncObserveGovernanceRaw(::grpc::ClientContext* context, const ::api::v1::ObserveGovernanceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObserveGovernanceResponse>::Create(channel_.get(), cq, rpcmethod_ObserveGovernance_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::ObserveGovernanceResponse>* TradingDataService::Stub::PrepareAsyncObserveGovernanceRaw(::grpc::ClientContext* context, const ::api::v1::ObserveGovernanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObserveGovernanceResponse>::Create(channel_.get(), cq, rpcmethod_ObserveGovernance_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::ObservePartyProposalsResponse>* TradingDataService::Stub::ObservePartyProposalsRaw(::grpc::ClientContext* context, const ::api::v1::ObservePartyProposalsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::ObservePartyProposalsResponse>::Create(channel_.get(), rpcmethod_ObservePartyProposals_, context, request);
}

void TradingDataService::Stub::experimental_async::ObservePartyProposals(::grpc::ClientContext* context, ::api::v1::ObservePartyProposalsRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::ObservePartyProposalsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::ObservePartyProposalsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ObservePartyProposals_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::ObservePartyProposalsResponse>* TradingDataService::Stub::AsyncObservePartyProposalsRaw(::grpc::ClientContext* context, const ::api::v1::ObservePartyProposalsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObservePartyProposalsResponse>::Create(channel_.get(), cq, rpcmethod_ObservePartyProposals_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::ObservePartyProposalsResponse>* TradingDataService::Stub::PrepareAsyncObservePartyProposalsRaw(::grpc::ClientContext* context, const ::api::v1::ObservePartyProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObservePartyProposalsResponse>::Create(channel_.get(), cq, rpcmethod_ObservePartyProposals_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::ObservePartyVotesResponse>* TradingDataService::Stub::ObservePartyVotesRaw(::grpc::ClientContext* context, const ::api::v1::ObservePartyVotesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::ObservePartyVotesResponse>::Create(channel_.get(), rpcmethod_ObservePartyVotes_, context, request);
}

void TradingDataService::Stub::experimental_async::ObservePartyVotes(::grpc::ClientContext* context, ::api::v1::ObservePartyVotesRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::ObservePartyVotesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::ObservePartyVotesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ObservePartyVotes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::ObservePartyVotesResponse>* TradingDataService::Stub::AsyncObservePartyVotesRaw(::grpc::ClientContext* context, const ::api::v1::ObservePartyVotesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObservePartyVotesResponse>::Create(channel_.get(), cq, rpcmethod_ObservePartyVotes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::ObservePartyVotesResponse>* TradingDataService::Stub::PrepareAsyncObservePartyVotesRaw(::grpc::ClientContext* context, const ::api::v1::ObservePartyVotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObservePartyVotesResponse>::Create(channel_.get(), cq, rpcmethod_ObservePartyVotes_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::ObserveProposalVotesResponse>* TradingDataService::Stub::ObserveProposalVotesRaw(::grpc::ClientContext* context, const ::api::v1::ObserveProposalVotesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::ObserveProposalVotesResponse>::Create(channel_.get(), rpcmethod_ObserveProposalVotes_, context, request);
}

void TradingDataService::Stub::experimental_async::ObserveProposalVotes(::grpc::ClientContext* context, ::api::v1::ObserveProposalVotesRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::ObserveProposalVotesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::ObserveProposalVotesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ObserveProposalVotes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::ObserveProposalVotesResponse>* TradingDataService::Stub::AsyncObserveProposalVotesRaw(::grpc::ClientContext* context, const ::api::v1::ObserveProposalVotesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObserveProposalVotesResponse>::Create(channel_.get(), cq, rpcmethod_ObserveProposalVotes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::ObserveProposalVotesResponse>* TradingDataService::Stub::PrepareAsyncObserveProposalVotesRaw(::grpc::ClientContext* context, const ::api::v1::ObserveProposalVotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::ObserveProposalVotesResponse>::Create(channel_.get(), cq, rpcmethod_ObserveProposalVotes_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* TradingDataService::Stub::ObserveEventBusRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>::Create(channel_.get(), rpcmethod_ObserveEventBus_, context);
}

void TradingDataService::Stub::experimental_async::ObserveEventBus(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::api::v1::ObserveEventBusRequest,::api::v1::ObserveEventBusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ObserveEventBus_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* TradingDataService::Stub::AsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>::Create(channel_.get(), cq, rpcmethod_ObserveEventBus_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>* TradingDataService::Stub::PrepareAsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>::Create(channel_.get(), cq, rpcmethod_ObserveEventBus_, context, false, nullptr);
}

::grpc::Status TradingDataService::Stub::Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::api::v1::StatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Statistics_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Statistics_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Statistics(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Statistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>* TradingDataService::Stub::PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::StatisticsResponse, ::api::v1::StatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Statistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::StatisticsResponse>* TradingDataService::Stub::AsyncStatisticsRaw(::grpc::ClientContext* context, const ::api::v1::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::api::v1::GetVegaTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVegaTime_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVegaTime_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetVegaTime(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVegaTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>* TradingDataService::Stub::PrepareAsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetVegaTimeResponse, ::api::v1::GetVegaTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVegaTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetVegaTimeResponse>* TradingDataService::Stub::AsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::api::v1::GetVegaTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVegaTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::api::v1::AccountsSubscribeResponse>* TradingDataService::Stub::AccountsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::AccountsSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::AccountsSubscribeResponse>::Create(channel_.get(), rpcmethod_AccountsSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::AccountsSubscribe(::grpc::ClientContext* context, ::api::v1::AccountsSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::AccountsSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::AccountsSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_AccountsSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::AccountsSubscribeResponse>* TradingDataService::Stub::AsyncAccountsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::AccountsSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::AccountsSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_AccountsSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::AccountsSubscribeResponse>* TradingDataService::Stub::PrepareAsyncAccountsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::AccountsSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::AccountsSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_AccountsSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::CandlesSubscribeResponse>* TradingDataService::Stub::CandlesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::CandlesSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::CandlesSubscribeResponse>::Create(channel_.get(), rpcmethod_CandlesSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::CandlesSubscribe(::grpc::ClientContext* context, ::api::v1::CandlesSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::CandlesSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::CandlesSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CandlesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::CandlesSubscribeResponse>* TradingDataService::Stub::AsyncCandlesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::CandlesSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::CandlesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_CandlesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::CandlesSubscribeResponse>* TradingDataService::Stub::PrepareAsyncCandlesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::CandlesSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::CandlesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_CandlesSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::MarginLevelsSubscribeResponse>* TradingDataService::Stub::MarginLevelsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarginLevelsSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::MarginLevelsSubscribeResponse>::Create(channel_.get(), rpcmethod_MarginLevelsSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::MarginLevelsSubscribe(::grpc::ClientContext* context, ::api::v1::MarginLevelsSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::MarginLevelsSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::MarginLevelsSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MarginLevelsSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::MarginLevelsSubscribeResponse>* TradingDataService::Stub::AsyncMarginLevelsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarginLevelsSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarginLevelsSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarginLevelsSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::MarginLevelsSubscribeResponse>* TradingDataService::Stub::PrepareAsyncMarginLevelsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarginLevelsSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarginLevelsSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarginLevelsSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::MarketDepthSubscribeResponse>* TradingDataService::Stub::MarketDepthSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::MarketDepthSubscribeResponse>::Create(channel_.get(), rpcmethod_MarketDepthSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::MarketDepthSubscribe(::grpc::ClientContext* context, ::api::v1::MarketDepthSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::MarketDepthSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::MarketDepthSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketDepthSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::MarketDepthSubscribeResponse>* TradingDataService::Stub::AsyncMarketDepthSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarketDepthSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarketDepthSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::MarketDepthSubscribeResponse>* TradingDataService::Stub::PrepareAsyncMarketDepthSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarketDepthSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarketDepthSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::MarketDepthUpdatesSubscribeResponse>* TradingDataService::Stub::MarketDepthUpdatesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthUpdatesSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::MarketDepthUpdatesSubscribeResponse>::Create(channel_.get(), rpcmethod_MarketDepthUpdatesSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::MarketDepthUpdatesSubscribe(::grpc::ClientContext* context, ::api::v1::MarketDepthUpdatesSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::MarketDepthUpdatesSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::MarketDepthUpdatesSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketDepthUpdatesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::MarketDepthUpdatesSubscribeResponse>* TradingDataService::Stub::AsyncMarketDepthUpdatesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthUpdatesSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarketDepthUpdatesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarketDepthUpdatesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::MarketDepthUpdatesSubscribeResponse>* TradingDataService::Stub::PrepareAsyncMarketDepthUpdatesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketDepthUpdatesSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarketDepthUpdatesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarketDepthUpdatesSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::MarketsDataSubscribeResponse>* TradingDataService::Stub::MarketsDataSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketsDataSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::MarketsDataSubscribeResponse>::Create(channel_.get(), rpcmethod_MarketsDataSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::MarketsDataSubscribe(::grpc::ClientContext* context, ::api::v1::MarketsDataSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::MarketsDataSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::MarketsDataSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketsDataSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::MarketsDataSubscribeResponse>* TradingDataService::Stub::AsyncMarketsDataSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketsDataSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarketsDataSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarketsDataSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::MarketsDataSubscribeResponse>* TradingDataService::Stub::PrepareAsyncMarketsDataSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::MarketsDataSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::MarketsDataSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_MarketsDataSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::OrdersSubscribeResponse>* TradingDataService::Stub::OrdersSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::OrdersSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::OrdersSubscribeResponse>::Create(channel_.get(), rpcmethod_OrdersSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::OrdersSubscribe(::grpc::ClientContext* context, ::api::v1::OrdersSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::OrdersSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::OrdersSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_OrdersSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::OrdersSubscribeResponse>* TradingDataService::Stub::AsyncOrdersSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::OrdersSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::OrdersSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_OrdersSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::OrdersSubscribeResponse>* TradingDataService::Stub::PrepareAsyncOrdersSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::OrdersSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::OrdersSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_OrdersSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::PositionsSubscribeResponse>* TradingDataService::Stub::PositionsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::PositionsSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::PositionsSubscribeResponse>::Create(channel_.get(), rpcmethod_PositionsSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::PositionsSubscribe(::grpc::ClientContext* context, ::api::v1::PositionsSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::PositionsSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::PositionsSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PositionsSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::PositionsSubscribeResponse>* TradingDataService::Stub::AsyncPositionsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::PositionsSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::PositionsSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_PositionsSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::PositionsSubscribeResponse>* TradingDataService::Stub::PrepareAsyncPositionsSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::PositionsSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::PositionsSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_PositionsSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::TradesSubscribeResponse>* TradingDataService::Stub::TradesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::TradesSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::TradesSubscribeResponse>::Create(channel_.get(), rpcmethod_TradesSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::TradesSubscribe(::grpc::ClientContext* context, ::api::v1::TradesSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::TradesSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::TradesSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_TradesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::TradesSubscribeResponse>* TradingDataService::Stub::AsyncTradesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::TradesSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::TradesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_TradesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::TradesSubscribeResponse>* TradingDataService::Stub::PrepareAsyncTradesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::TradesSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::TradesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_TradesSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::v1::TransferResponsesSubscribeResponse>* TradingDataService::Stub::TransferResponsesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::TransferResponsesSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::v1::TransferResponsesSubscribeResponse>::Create(channel_.get(), rpcmethod_TransferResponsesSubscribe_, context, request);
}

void TradingDataService::Stub::experimental_async::TransferResponsesSubscribe(::grpc::ClientContext* context, ::api::v1::TransferResponsesSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::v1::TransferResponsesSubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::v1::TransferResponsesSubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_TransferResponsesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::v1::TransferResponsesSubscribeResponse>* TradingDataService::Stub::AsyncTransferResponsesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::TransferResponsesSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::TransferResponsesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_TransferResponsesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::v1::TransferResponsesSubscribeResponse>* TradingDataService::Stub::PrepareAsyncTransferResponsesSubscribeRaw(::grpc::ClientContext* context, const ::api::v1::TransferResponsesSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::v1::TransferResponsesSubscribeResponse>::Create(channel_.get(), cq, rpcmethod_TransferResponsesSubscribe_, context, request, false, nullptr);
}

::grpc::Status TradingDataService::Stub::GetNodeSignaturesAggregate(::grpc::ClientContext* context, const ::api::v1::GetNodeSignaturesAggregateRequest& request, ::api::v1::GetNodeSignaturesAggregateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetNodeSignaturesAggregateRequest, ::api::v1::GetNodeSignaturesAggregateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodeSignaturesAggregate_, context, request, response);
}

void TradingDataService::Stub::experimental_async::GetNodeSignaturesAggregate(::grpc::ClientContext* context, const ::api::v1::GetNodeSignaturesAggregateRequest* request, ::api::v1::GetNodeSignaturesAggregateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetNodeSignaturesAggregateRequest, ::api::v1::GetNodeSignaturesAggregateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeSignaturesAggregate_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::GetNodeSignaturesAggregate(::grpc::ClientContext* context, const ::api::v1::GetNodeSignaturesAggregateRequest* request, ::api::v1::GetNodeSignaturesAggregateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeSignaturesAggregate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNodeSignaturesAggregateResponse>* TradingDataService::Stub::PrepareAsyncGetNodeSignaturesAggregateRaw(::grpc::ClientContext* context, const ::api::v1::GetNodeSignaturesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::GetNodeSignaturesAggregateResponse, ::api::v1::GetNodeSignaturesAggregateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodeSignaturesAggregate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::GetNodeSignaturesAggregateResponse>* TradingDataService::Stub::AsyncGetNodeSignaturesAggregateRaw(::grpc::ClientContext* context, const ::api::v1::GetNodeSignaturesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeSignaturesAggregateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::AssetByID(::grpc::ClientContext* context, const ::api::v1::AssetByIDRequest& request, ::api::v1::AssetByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::AssetByIDRequest, ::api::v1::AssetByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssetByID_, context, request, response);
}

void TradingDataService::Stub::experimental_async::AssetByID(::grpc::ClientContext* context, const ::api::v1::AssetByIDRequest* request, ::api::v1::AssetByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::AssetByIDRequest, ::api::v1::AssetByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssetByID_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::AssetByID(::grpc::ClientContext* context, const ::api::v1::AssetByIDRequest* request, ::api::v1::AssetByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssetByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::AssetByIDResponse>* TradingDataService::Stub::PrepareAsyncAssetByIDRaw(::grpc::ClientContext* context, const ::api::v1::AssetByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::AssetByIDResponse, ::api::v1::AssetByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssetByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::AssetByIDResponse>* TradingDataService::Stub::AsyncAssetByIDRaw(::grpc::ClientContext* context, const ::api::v1::AssetByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssetByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Assets(::grpc::ClientContext* context, const ::api::v1::AssetsRequest& request, ::api::v1::AssetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::AssetsRequest, ::api::v1::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Assets_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Assets(::grpc::ClientContext* context, const ::api::v1::AssetsRequest* request, ::api::v1::AssetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::AssetsRequest, ::api::v1::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Assets_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Assets(::grpc::ClientContext* context, const ::api::v1::AssetsRequest* request, ::api::v1::AssetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Assets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::AssetsResponse>* TradingDataService::Stub::PrepareAsyncAssetsRaw(::grpc::ClientContext* context, const ::api::v1::AssetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::AssetsResponse, ::api::v1::AssetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Assets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::AssetsResponse>* TradingDataService::Stub::AsyncAssetsRaw(::grpc::ClientContext* context, const ::api::v1::AssetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::EstimateFee(::grpc::ClientContext* context, const ::api::v1::EstimateFeeRequest& request, ::api::v1::EstimateFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::EstimateFeeRequest, ::api::v1::EstimateFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstimateFee_, context, request, response);
}

void TradingDataService::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::api::v1::EstimateFeeRequest* request, ::api::v1::EstimateFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::EstimateFeeRequest, ::api::v1::EstimateFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::api::v1::EstimateFeeRequest* request, ::api::v1::EstimateFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::EstimateFeeResponse>* TradingDataService::Stub::PrepareAsyncEstimateFeeRaw(::grpc::ClientContext* context, const ::api::v1::EstimateFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::EstimateFeeResponse, ::api::v1::EstimateFeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstimateFee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::EstimateFeeResponse>* TradingDataService::Stub::AsyncEstimateFeeRaw(::grpc::ClientContext* context, const ::api::v1::EstimateFeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstimateFeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::EstimateMargin(::grpc::ClientContext* context, const ::api::v1::EstimateMarginRequest& request, ::api::v1::EstimateMarginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::EstimateMarginRequest, ::api::v1::EstimateMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstimateMargin_, context, request, response);
}

void TradingDataService::Stub::experimental_async::EstimateMargin(::grpc::ClientContext* context, const ::api::v1::EstimateMarginRequest* request, ::api::v1::EstimateMarginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::EstimateMarginRequest, ::api::v1::EstimateMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateMargin_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::EstimateMargin(::grpc::ClientContext* context, const ::api::v1::EstimateMarginRequest* request, ::api::v1::EstimateMarginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateMargin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::EstimateMarginResponse>* TradingDataService::Stub::PrepareAsyncEstimateMarginRaw(::grpc::ClientContext* context, const ::api::v1::EstimateMarginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::EstimateMarginResponse, ::api::v1::EstimateMarginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstimateMargin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::EstimateMarginResponse>* TradingDataService::Stub::AsyncEstimateMarginRaw(::grpc::ClientContext* context, const ::api::v1::EstimateMarginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstimateMarginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::ERC20WithdrawalApproval(::grpc::ClientContext* context, const ::api::v1::ERC20WithdrawalApprovalRequest& request, ::api::v1::ERC20WithdrawalApprovalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::ERC20WithdrawalApprovalRequest, ::api::v1::ERC20WithdrawalApprovalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ERC20WithdrawalApproval_, context, request, response);
}

void TradingDataService::Stub::experimental_async::ERC20WithdrawalApproval(::grpc::ClientContext* context, const ::api::v1::ERC20WithdrawalApprovalRequest* request, ::api::v1::ERC20WithdrawalApprovalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::ERC20WithdrawalApprovalRequest, ::api::v1::ERC20WithdrawalApprovalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20WithdrawalApproval_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::ERC20WithdrawalApproval(::grpc::ClientContext* context, const ::api::v1::ERC20WithdrawalApprovalRequest* request, ::api::v1::ERC20WithdrawalApprovalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20WithdrawalApproval_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::ERC20WithdrawalApprovalResponse>* TradingDataService::Stub::PrepareAsyncERC20WithdrawalApprovalRaw(::grpc::ClientContext* context, const ::api::v1::ERC20WithdrawalApprovalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::ERC20WithdrawalApprovalResponse, ::api::v1::ERC20WithdrawalApprovalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ERC20WithdrawalApproval_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::ERC20WithdrawalApprovalResponse>* TradingDataService::Stub::AsyncERC20WithdrawalApprovalRaw(::grpc::ClientContext* context, const ::api::v1::ERC20WithdrawalApprovalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncERC20WithdrawalApprovalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Withdrawal(::grpc::ClientContext* context, const ::api::v1::WithdrawalRequest& request, ::api::v1::WithdrawalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::WithdrawalRequest, ::api::v1::WithdrawalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Withdrawal_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Withdrawal(::grpc::ClientContext* context, const ::api::v1::WithdrawalRequest* request, ::api::v1::WithdrawalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::WithdrawalRequest, ::api::v1::WithdrawalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawal_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Withdrawal(::grpc::ClientContext* context, const ::api::v1::WithdrawalRequest* request, ::api::v1::WithdrawalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::WithdrawalResponse>* TradingDataService::Stub::PrepareAsyncWithdrawalRaw(::grpc::ClientContext* context, const ::api::v1::WithdrawalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::WithdrawalResponse, ::api::v1::WithdrawalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Withdrawal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::WithdrawalResponse>* TradingDataService::Stub::AsyncWithdrawalRaw(::grpc::ClientContext* context, const ::api::v1::WithdrawalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Withdrawals(::grpc::ClientContext* context, const ::api::v1::WithdrawalsRequest& request, ::api::v1::WithdrawalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::WithdrawalsRequest, ::api::v1::WithdrawalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Withdrawals_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Withdrawals(::grpc::ClientContext* context, const ::api::v1::WithdrawalsRequest* request, ::api::v1::WithdrawalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::WithdrawalsRequest, ::api::v1::WithdrawalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawals_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Withdrawals(::grpc::ClientContext* context, const ::api::v1::WithdrawalsRequest* request, ::api::v1::WithdrawalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::WithdrawalsResponse>* TradingDataService::Stub::PrepareAsyncWithdrawalsRaw(::grpc::ClientContext* context, const ::api::v1::WithdrawalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::WithdrawalsResponse, ::api::v1::WithdrawalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Withdrawals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::WithdrawalsResponse>* TradingDataService::Stub::AsyncWithdrawalsRaw(::grpc::ClientContext* context, const ::api::v1::WithdrawalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Deposit(::grpc::ClientContext* context, const ::api::v1::DepositRequest& request, ::api::v1::DepositResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::DepositRequest, ::api::v1::DepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deposit_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::api::v1::DepositRequest* request, ::api::v1::DepositResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::DepositRequest, ::api::v1::DepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::api::v1::DepositRequest* request, ::api::v1::DepositResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DepositResponse>* TradingDataService::Stub::PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::api::v1::DepositRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::DepositResponse, ::api::v1::DepositRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deposit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DepositResponse>* TradingDataService::Stub::AsyncDepositRaw(::grpc::ClientContext* context, const ::api::v1::DepositRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::Deposits(::grpc::ClientContext* context, const ::api::v1::DepositsRequest& request, ::api::v1::DepositsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::DepositsRequest, ::api::v1::DepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deposits_, context, request, response);
}

void TradingDataService::Stub::experimental_async::Deposits(::grpc::ClientContext* context, const ::api::v1::DepositsRequest* request, ::api::v1::DepositsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::DepositsRequest, ::api::v1::DepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposits_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::Deposits(::grpc::ClientContext* context, const ::api::v1::DepositsRequest* request, ::api::v1::DepositsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposits_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DepositsResponse>* TradingDataService::Stub::PrepareAsyncDepositsRaw(::grpc::ClientContext* context, const ::api::v1::DepositsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::DepositsResponse, ::api::v1::DepositsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deposits_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DepositsResponse>* TradingDataService::Stub::AsyncDepositsRaw(::grpc::ClientContext* context, const ::api::v1::DepositsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::NetworkParameters(::grpc::ClientContext* context, const ::api::v1::NetworkParametersRequest& request, ::api::v1::NetworkParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::NetworkParametersRequest, ::api::v1::NetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NetworkParameters_, context, request, response);
}

void TradingDataService::Stub::experimental_async::NetworkParameters(::grpc::ClientContext* context, const ::api::v1::NetworkParametersRequest* request, ::api::v1::NetworkParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::NetworkParametersRequest, ::api::v1::NetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NetworkParameters_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::NetworkParameters(::grpc::ClientContext* context, const ::api::v1::NetworkParametersRequest* request, ::api::v1::NetworkParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NetworkParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::NetworkParametersResponse>* TradingDataService::Stub::PrepareAsyncNetworkParametersRaw(::grpc::ClientContext* context, const ::api::v1::NetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::NetworkParametersResponse, ::api::v1::NetworkParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NetworkParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::NetworkParametersResponse>* TradingDataService::Stub::AsyncNetworkParametersRaw(::grpc::ClientContext* context, const ::api::v1::NetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNetworkParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::LiquidityProvisions(::grpc::ClientContext* context, const ::api::v1::LiquidityProvisionsRequest& request, ::api::v1::LiquidityProvisionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::LiquidityProvisionsRequest, ::api::v1::LiquidityProvisionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LiquidityProvisions_, context, request, response);
}

void TradingDataService::Stub::experimental_async::LiquidityProvisions(::grpc::ClientContext* context, const ::api::v1::LiquidityProvisionsRequest* request, ::api::v1::LiquidityProvisionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::LiquidityProvisionsRequest, ::api::v1::LiquidityProvisionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidityProvisions_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::LiquidityProvisions(::grpc::ClientContext* context, const ::api::v1::LiquidityProvisionsRequest* request, ::api::v1::LiquidityProvisionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidityProvisions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::LiquidityProvisionsResponse>* TradingDataService::Stub::PrepareAsyncLiquidityProvisionsRaw(::grpc::ClientContext* context, const ::api::v1::LiquidityProvisionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::LiquidityProvisionsResponse, ::api::v1::LiquidityProvisionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LiquidityProvisions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::LiquidityProvisionsResponse>* TradingDataService::Stub::AsyncLiquidityProvisionsRaw(::grpc::ClientContext* context, const ::api::v1::LiquidityProvisionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLiquidityProvisionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OracleSpec(::grpc::ClientContext* context, const ::api::v1::OracleSpecRequest& request, ::api::v1::OracleSpecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OracleSpecRequest, ::api::v1::OracleSpecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleSpec_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OracleSpec(::grpc::ClientContext* context, const ::api::v1::OracleSpecRequest* request, ::api::v1::OracleSpecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OracleSpecRequest, ::api::v1::OracleSpecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleSpec_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OracleSpec(::grpc::ClientContext* context, const ::api::v1::OracleSpecRequest* request, ::api::v1::OracleSpecResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleSpec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OracleSpecResponse>* TradingDataService::Stub::PrepareAsyncOracleSpecRaw(::grpc::ClientContext* context, const ::api::v1::OracleSpecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OracleSpecResponse, ::api::v1::OracleSpecRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleSpec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OracleSpecResponse>* TradingDataService::Stub::AsyncOracleSpecRaw(::grpc::ClientContext* context, const ::api::v1::OracleSpecRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleSpecRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OracleSpecs(::grpc::ClientContext* context, const ::api::v1::OracleSpecsRequest& request, ::api::v1::OracleSpecsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OracleSpecsRequest, ::api::v1::OracleSpecsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleSpecs_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OracleSpecs(::grpc::ClientContext* context, const ::api::v1::OracleSpecsRequest* request, ::api::v1::OracleSpecsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OracleSpecsRequest, ::api::v1::OracleSpecsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleSpecs_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OracleSpecs(::grpc::ClientContext* context, const ::api::v1::OracleSpecsRequest* request, ::api::v1::OracleSpecsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleSpecs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OracleSpecsResponse>* TradingDataService::Stub::PrepareAsyncOracleSpecsRaw(::grpc::ClientContext* context, const ::api::v1::OracleSpecsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OracleSpecsResponse, ::api::v1::OracleSpecsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleSpecs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OracleSpecsResponse>* TradingDataService::Stub::AsyncOracleSpecsRaw(::grpc::ClientContext* context, const ::api::v1::OracleSpecsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleSpecsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingDataService::Stub::OracleDataBySpec(::grpc::ClientContext* context, const ::api::v1::OracleDataBySpecRequest& request, ::api::v1::OracleDataBySpecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::OracleDataBySpecRequest, ::api::v1::OracleDataBySpecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleDataBySpec_, context, request, response);
}

void TradingDataService::Stub::experimental_async::OracleDataBySpec(::grpc::ClientContext* context, const ::api::v1::OracleDataBySpecRequest* request, ::api::v1::OracleDataBySpecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::OracleDataBySpecRequest, ::api::v1::OracleDataBySpecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleDataBySpec_, context, request, response, std::move(f));
}

void TradingDataService::Stub::experimental_async::OracleDataBySpec(::grpc::ClientContext* context, const ::api::v1::OracleDataBySpecRequest* request, ::api::v1::OracleDataBySpecResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleDataBySpec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OracleDataBySpecResponse>* TradingDataService::Stub::PrepareAsyncOracleDataBySpecRaw(::grpc::ClientContext* context, const ::api::v1::OracleDataBySpecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::OracleDataBySpecResponse, ::api::v1::OracleDataBySpecRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleDataBySpec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::OracleDataBySpecResponse>* TradingDataService::Stub::AsyncOracleDataBySpecRaw(::grpc::ClientContext* context, const ::api::v1::OracleDataBySpecRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleDataBySpecRaw(context, request, cq);
  result->StartCall();
  return result;
}

TradingDataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::MarketAccountsRequest, ::api::v1::MarketAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketAccountsRequest* req,
             ::api::v1::MarketAccountsResponse* resp) {
               return service->MarketAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::PartyAccountsRequest, ::api::v1::PartyAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PartyAccountsRequest* req,
             ::api::v1::PartyAccountsResponse* resp) {
               return service->PartyAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::FeeInfrastructureAccountsRequest, ::api::v1::FeeInfrastructureAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::FeeInfrastructureAccountsRequest* req,
             ::api::v1::FeeInfrastructureAccountsResponse* resp) {
               return service->FeeInfrastructureAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::CandlesRequest, ::api::v1::CandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::CandlesRequest* req,
             ::api::v1::CandlesResponse* resp) {
               return service->Candles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::MarketDataByIDRequest, ::api::v1::MarketDataByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketDataByIDRequest* req,
             ::api::v1::MarketDataByIDResponse* resp) {
               return service->MarketDataByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::MarketsDataRequest, ::api::v1::MarketsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketsDataRequest* req,
             ::api::v1::MarketsDataResponse* resp) {
               return service->MarketsData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::MarketByIDRequest, ::api::v1::MarketByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketByIDRequest* req,
             ::api::v1::MarketByIDResponse* resp) {
               return service->MarketByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::MarketDepthRequest, ::api::v1::MarketDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketDepthRequest* req,
             ::api::v1::MarketDepthResponse* resp) {
               return service->MarketDepth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::MarketsRequest, ::api::v1::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketsRequest* req,
             ::api::v1::MarketsResponse* resp) {
               return service->Markets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OrderByMarketAndIDRequest, ::api::v1::OrderByMarketAndIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OrderByMarketAndIDRequest* req,
             ::api::v1::OrderByMarketAndIDResponse* resp) {
               return service->OrderByMarketAndID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OrderByReferenceRequest, ::api::v1::OrderByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OrderByReferenceRequest* req,
             ::api::v1::OrderByReferenceResponse* resp) {
               return service->OrderByReference(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OrdersByMarketRequest, ::api::v1::OrdersByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OrdersByMarketRequest* req,
             ::api::v1::OrdersByMarketResponse* resp) {
               return service->OrdersByMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OrdersByPartyRequest, ::api::v1::OrdersByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OrdersByPartyRequest* req,
             ::api::v1::OrdersByPartyResponse* resp) {
               return service->OrdersByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OrderByIDRequest, ::api::v1::OrderByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OrderByIDRequest* req,
             ::api::v1::OrderByIDResponse* resp) {
               return service->OrderByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OrderVersionsByIDRequest, ::api::v1::OrderVersionsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OrderVersionsByIDRequest* req,
             ::api::v1::OrderVersionsByIDResponse* resp) {
               return service->OrderVersionsByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::MarginLevelsRequest, ::api::v1::MarginLevelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarginLevelsRequest* req,
             ::api::v1::MarginLevelsResponse* resp) {
               return service->MarginLevels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::PartiesRequest, ::api::v1::PartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PartiesRequest* req,
             ::api::v1::PartiesResponse* resp) {
               return service->Parties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::PartyByIDRequest, ::api::v1::PartyByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PartyByIDRequest* req,
             ::api::v1::PartyByIDResponse* resp) {
               return service->PartyByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::PositionsByPartyRequest, ::api::v1::PositionsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PositionsByPartyRequest* req,
             ::api::v1::PositionsByPartyResponse* resp) {
               return service->PositionsByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::LastTradeRequest, ::api::v1::LastTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::LastTradeRequest* req,
             ::api::v1::LastTradeResponse* resp) {
               return service->LastTrade(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::TradesByMarketRequest, ::api::v1::TradesByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::TradesByMarketRequest* req,
             ::api::v1::TradesByMarketResponse* resp) {
               return service->TradesByMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::TradesByOrderRequest, ::api::v1::TradesByOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::TradesByOrderRequest* req,
             ::api::v1::TradesByOrderResponse* resp) {
               return service->TradesByOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::TradesByPartyRequest, ::api::v1::TradesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::TradesByPartyRequest* req,
             ::api::v1::TradesByPartyResponse* resp) {
               return service->TradesByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetProposalsRequest, ::api::v1::GetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetProposalsRequest* req,
             ::api::v1::GetProposalsResponse* resp) {
               return service->GetProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetProposalsByPartyRequest, ::api::v1::GetProposalsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetProposalsByPartyRequest* req,
             ::api::v1::GetProposalsByPartyResponse* resp) {
               return service->GetProposalsByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetVotesByPartyRequest, ::api::v1::GetVotesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetVotesByPartyRequest* req,
             ::api::v1::GetVotesByPartyResponse* resp) {
               return service->GetVotesByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetNewMarketProposalsRequest, ::api::v1::GetNewMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetNewMarketProposalsRequest* req,
             ::api::v1::GetNewMarketProposalsResponse* resp) {
               return service->GetNewMarketProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetUpdateMarketProposalsRequest, ::api::v1::GetUpdateMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetUpdateMarketProposalsRequest* req,
             ::api::v1::GetUpdateMarketProposalsResponse* resp) {
               return service->GetUpdateMarketProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetNetworkParametersProposalsRequest, ::api::v1::GetNetworkParametersProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetNetworkParametersProposalsRequest* req,
             ::api::v1::GetNetworkParametersProposalsResponse* resp) {
               return service->GetNetworkParametersProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetNewAssetProposalsRequest, ::api::v1::GetNewAssetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetNewAssetProposalsRequest* req,
             ::api::v1::GetNewAssetProposalsResponse* resp) {
               return service->GetNewAssetProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetProposalByIDRequest, ::api::v1::GetProposalByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetProposalByIDRequest* req,
             ::api::v1::GetProposalByIDResponse* resp) {
               return service->GetProposalByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetProposalByReferenceRequest, ::api::v1::GetProposalByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetProposalByReferenceRequest* req,
             ::api::v1::GetProposalByReferenceResponse* resp) {
               return service->GetProposalByReference(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[32],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::ObserveGovernanceRequest, ::api::v1::ObserveGovernanceResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::ObserveGovernanceRequest* req,
             ::grpc::ServerWriter<::api::v1::ObserveGovernanceResponse>* writer) {
               return service->ObserveGovernance(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[33],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::ObservePartyProposalsRequest, ::api::v1::ObservePartyProposalsResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::ObservePartyProposalsRequest* req,
             ::grpc::ServerWriter<::api::v1::ObservePartyProposalsResponse>* writer) {
               return service->ObservePartyProposals(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[34],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::ObservePartyVotesRequest, ::api::v1::ObservePartyVotesResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::ObservePartyVotesRequest* req,
             ::grpc::ServerWriter<::api::v1::ObservePartyVotesResponse>* writer) {
               return service->ObservePartyVotes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[35],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::ObserveProposalVotesRequest, ::api::v1::ObserveProposalVotesResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::ObserveProposalVotesRequest* req,
             ::grpc::ServerWriter<::api::v1::ObserveProposalVotesResponse>* writer) {
               return service->ObserveProposalVotes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[36],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TradingDataService::Service, ::api::v1::ObserveEventBusRequest, ::api::v1::ObserveEventBusResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::api::v1::ObserveEventBusResponse,
             ::api::v1::ObserveEventBusRequest>* stream) {
               return service->ObserveEventBus(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::StatisticsRequest, ::api::v1::StatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::StatisticsRequest* req,
             ::api::v1::StatisticsResponse* resp) {
               return service->Statistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetVegaTimeRequest, ::api::v1::GetVegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetVegaTimeRequest* req,
             ::api::v1::GetVegaTimeResponse* resp) {
               return service->GetVegaTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[39],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::AccountsSubscribeRequest, ::api::v1::AccountsSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::AccountsSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::AccountsSubscribeResponse>* writer) {
               return service->AccountsSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[40],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::CandlesSubscribeRequest, ::api::v1::CandlesSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::CandlesSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::CandlesSubscribeResponse>* writer) {
               return service->CandlesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[41],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::MarginLevelsSubscribeRequest, ::api::v1::MarginLevelsSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarginLevelsSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::MarginLevelsSubscribeResponse>* writer) {
               return service->MarginLevelsSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[42],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::MarketDepthSubscribeRequest, ::api::v1::MarketDepthSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketDepthSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::MarketDepthSubscribeResponse>* writer) {
               return service->MarketDepthSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[43],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::MarketDepthUpdatesSubscribeRequest, ::api::v1::MarketDepthUpdatesSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketDepthUpdatesSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::MarketDepthUpdatesSubscribeResponse>* writer) {
               return service->MarketDepthUpdatesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[44],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::MarketsDataSubscribeRequest, ::api::v1::MarketsDataSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::MarketsDataSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::MarketsDataSubscribeResponse>* writer) {
               return service->MarketsDataSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[45],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::OrdersSubscribeRequest, ::api::v1::OrdersSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OrdersSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::OrdersSubscribeResponse>* writer) {
               return service->OrdersSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[46],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::PositionsSubscribeRequest, ::api::v1::PositionsSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::PositionsSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::PositionsSubscribeResponse>* writer) {
               return service->PositionsSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[47],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::TradesSubscribeRequest, ::api::v1::TradesSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::TradesSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::TradesSubscribeResponse>* writer) {
               return service->TradesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[48],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDataService::Service, ::api::v1::TransferResponsesSubscribeRequest, ::api::v1::TransferResponsesSubscribeResponse>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::TransferResponsesSubscribeRequest* req,
             ::grpc::ServerWriter<::api::v1::TransferResponsesSubscribeResponse>* writer) {
               return service->TransferResponsesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::GetNodeSignaturesAggregateRequest, ::api::v1::GetNodeSignaturesAggregateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetNodeSignaturesAggregateRequest* req,
             ::api::v1::GetNodeSignaturesAggregateResponse* resp) {
               return service->GetNodeSignaturesAggregate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::AssetByIDRequest, ::api::v1::AssetByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::AssetByIDRequest* req,
             ::api::v1::AssetByIDResponse* resp) {
               return service->AssetByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::AssetsRequest, ::api::v1::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::AssetsRequest* req,
             ::api::v1::AssetsResponse* resp) {
               return service->Assets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::EstimateFeeRequest, ::api::v1::EstimateFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::EstimateFeeRequest* req,
             ::api::v1::EstimateFeeResponse* resp) {
               return service->EstimateFee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::EstimateMarginRequest, ::api::v1::EstimateMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::EstimateMarginRequest* req,
             ::api::v1::EstimateMarginResponse* resp) {
               return service->EstimateMargin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::ERC20WithdrawalApprovalRequest, ::api::v1::ERC20WithdrawalApprovalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::ERC20WithdrawalApprovalRequest* req,
             ::api::v1::ERC20WithdrawalApprovalResponse* resp) {
               return service->ERC20WithdrawalApproval(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::WithdrawalRequest, ::api::v1::WithdrawalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::WithdrawalRequest* req,
             ::api::v1::WithdrawalResponse* resp) {
               return service->Withdrawal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::WithdrawalsRequest, ::api::v1::WithdrawalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::WithdrawalsRequest* req,
             ::api::v1::WithdrawalsResponse* resp) {
               return service->Withdrawals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::DepositRequest, ::api::v1::DepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::DepositRequest* req,
             ::api::v1::DepositResponse* resp) {
               return service->Deposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::DepositsRequest, ::api::v1::DepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::DepositsRequest* req,
             ::api::v1::DepositsResponse* resp) {
               return service->Deposits(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::NetworkParametersRequest, ::api::v1::NetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::NetworkParametersRequest* req,
             ::api::v1::NetworkParametersResponse* resp) {
               return service->NetworkParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::LiquidityProvisionsRequest, ::api::v1::LiquidityProvisionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::LiquidityProvisionsRequest* req,
             ::api::v1::LiquidityProvisionsResponse* resp) {
               return service->LiquidityProvisions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OracleSpecRequest, ::api::v1::OracleSpecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OracleSpecRequest* req,
             ::api::v1::OracleSpecResponse* resp) {
               return service->OracleSpec(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OracleSpecsRequest, ::api::v1::OracleSpecsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OracleSpecsRequest* req,
             ::api::v1::OracleSpecsResponse* resp) {
               return service->OracleSpecs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDataService_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDataService::Service, ::api::v1::OracleDataBySpecRequest, ::api::v1::OracleDataBySpecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::OracleDataBySpecRequest* req,
             ::api::v1::OracleDataBySpecResponse* resp) {
               return service->OracleDataBySpec(ctx, req, resp);
             }, this)));
}

TradingDataService::Service::~Service() {
}

::grpc::Status TradingDataService::Service::MarketAccounts(::grpc::ServerContext* context, const ::api::v1::MarketAccountsRequest* request, ::api::v1::MarketAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::PartyAccounts(::grpc::ServerContext* context, const ::api::v1::PartyAccountsRequest* request, ::api::v1::PartyAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::FeeInfrastructureAccounts(::grpc::ServerContext* context, const ::api::v1::FeeInfrastructureAccountsRequest* request, ::api::v1::FeeInfrastructureAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Candles(::grpc::ServerContext* context, const ::api::v1::CandlesRequest* request, ::api::v1::CandlesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarketDataByID(::grpc::ServerContext* context, const ::api::v1::MarketDataByIDRequest* request, ::api::v1::MarketDataByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarketsData(::grpc::ServerContext* context, const ::api::v1::MarketsDataRequest* request, ::api::v1::MarketsDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarketByID(::grpc::ServerContext* context, const ::api::v1::MarketByIDRequest* request, ::api::v1::MarketByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarketDepth(::grpc::ServerContext* context, const ::api::v1::MarketDepthRequest* request, ::api::v1::MarketDepthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Markets(::grpc::ServerContext* context, const ::api::v1::MarketsRequest* request, ::api::v1::MarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OrderByMarketAndID(::grpc::ServerContext* context, const ::api::v1::OrderByMarketAndIDRequest* request, ::api::v1::OrderByMarketAndIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OrderByReference(::grpc::ServerContext* context, const ::api::v1::OrderByReferenceRequest* request, ::api::v1::OrderByReferenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OrdersByMarket(::grpc::ServerContext* context, const ::api::v1::OrdersByMarketRequest* request, ::api::v1::OrdersByMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OrdersByParty(::grpc::ServerContext* context, const ::api::v1::OrdersByPartyRequest* request, ::api::v1::OrdersByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OrderByID(::grpc::ServerContext* context, const ::api::v1::OrderByIDRequest* request, ::api::v1::OrderByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OrderVersionsByID(::grpc::ServerContext* context, const ::api::v1::OrderVersionsByIDRequest* request, ::api::v1::OrderVersionsByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarginLevels(::grpc::ServerContext* context, const ::api::v1::MarginLevelsRequest* request, ::api::v1::MarginLevelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Parties(::grpc::ServerContext* context, const ::api::v1::PartiesRequest* request, ::api::v1::PartiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::PartyByID(::grpc::ServerContext* context, const ::api::v1::PartyByIDRequest* request, ::api::v1::PartyByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::PositionsByParty(::grpc::ServerContext* context, const ::api::v1::PositionsByPartyRequest* request, ::api::v1::PositionsByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::LastTrade(::grpc::ServerContext* context, const ::api::v1::LastTradeRequest* request, ::api::v1::LastTradeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::TradesByMarket(::grpc::ServerContext* context, const ::api::v1::TradesByMarketRequest* request, ::api::v1::TradesByMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::TradesByOrder(::grpc::ServerContext* context, const ::api::v1::TradesByOrderRequest* request, ::api::v1::TradesByOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::TradesByParty(::grpc::ServerContext* context, const ::api::v1::TradesByPartyRequest* request, ::api::v1::TradesByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetProposals(::grpc::ServerContext* context, const ::api::v1::GetProposalsRequest* request, ::api::v1::GetProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetProposalsByParty(::grpc::ServerContext* context, const ::api::v1::GetProposalsByPartyRequest* request, ::api::v1::GetProposalsByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetVotesByParty(::grpc::ServerContext* context, const ::api::v1::GetVotesByPartyRequest* request, ::api::v1::GetVotesByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetNewMarketProposals(::grpc::ServerContext* context, const ::api::v1::GetNewMarketProposalsRequest* request, ::api::v1::GetNewMarketProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetUpdateMarketProposals(::grpc::ServerContext* context, const ::api::v1::GetUpdateMarketProposalsRequest* request, ::api::v1::GetUpdateMarketProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetNetworkParametersProposals(::grpc::ServerContext* context, const ::api::v1::GetNetworkParametersProposalsRequest* request, ::api::v1::GetNetworkParametersProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetNewAssetProposals(::grpc::ServerContext* context, const ::api::v1::GetNewAssetProposalsRequest* request, ::api::v1::GetNewAssetProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetProposalByID(::grpc::ServerContext* context, const ::api::v1::GetProposalByIDRequest* request, ::api::v1::GetProposalByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetProposalByReference(::grpc::ServerContext* context, const ::api::v1::GetProposalByReferenceRequest* request, ::api::v1::GetProposalByReferenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::ObserveGovernance(::grpc::ServerContext* context, const ::api::v1::ObserveGovernanceRequest* request, ::grpc::ServerWriter< ::api::v1::ObserveGovernanceResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::ObservePartyProposals(::grpc::ServerContext* context, const ::api::v1::ObservePartyProposalsRequest* request, ::grpc::ServerWriter< ::api::v1::ObservePartyProposalsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::ObservePartyVotes(::grpc::ServerContext* context, const ::api::v1::ObservePartyVotesRequest* request, ::grpc::ServerWriter< ::api::v1::ObservePartyVotesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::ObserveProposalVotes(::grpc::ServerContext* context, const ::api::v1::ObserveProposalVotesRequest* request, ::grpc::ServerWriter< ::api::v1::ObserveProposalVotesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::ObserveEventBus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::v1::ObserveEventBusResponse, ::api::v1::ObserveEventBusRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Statistics(::grpc::ServerContext* context, const ::api::v1::StatisticsRequest* request, ::api::v1::StatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetVegaTime(::grpc::ServerContext* context, const ::api::v1::GetVegaTimeRequest* request, ::api::v1::GetVegaTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::AccountsSubscribe(::grpc::ServerContext* context, const ::api::v1::AccountsSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::AccountsSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::CandlesSubscribe(::grpc::ServerContext* context, const ::api::v1::CandlesSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::CandlesSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarginLevelsSubscribe(::grpc::ServerContext* context, const ::api::v1::MarginLevelsSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::MarginLevelsSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarketDepthSubscribe(::grpc::ServerContext* context, const ::api::v1::MarketDepthSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::MarketDepthSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarketDepthUpdatesSubscribe(::grpc::ServerContext* context, const ::api::v1::MarketDepthUpdatesSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::MarketDepthUpdatesSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::MarketsDataSubscribe(::grpc::ServerContext* context, const ::api::v1::MarketsDataSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::MarketsDataSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OrdersSubscribe(::grpc::ServerContext* context, const ::api::v1::OrdersSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::OrdersSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::PositionsSubscribe(::grpc::ServerContext* context, const ::api::v1::PositionsSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::PositionsSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::TradesSubscribe(::grpc::ServerContext* context, const ::api::v1::TradesSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::TradesSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::TransferResponsesSubscribe(::grpc::ServerContext* context, const ::api::v1::TransferResponsesSubscribeRequest* request, ::grpc::ServerWriter< ::api::v1::TransferResponsesSubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::GetNodeSignaturesAggregate(::grpc::ServerContext* context, const ::api::v1::GetNodeSignaturesAggregateRequest* request, ::api::v1::GetNodeSignaturesAggregateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::AssetByID(::grpc::ServerContext* context, const ::api::v1::AssetByIDRequest* request, ::api::v1::AssetByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Assets(::grpc::ServerContext* context, const ::api::v1::AssetsRequest* request, ::api::v1::AssetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::EstimateFee(::grpc::ServerContext* context, const ::api::v1::EstimateFeeRequest* request, ::api::v1::EstimateFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::EstimateMargin(::grpc::ServerContext* context, const ::api::v1::EstimateMarginRequest* request, ::api::v1::EstimateMarginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::ERC20WithdrawalApproval(::grpc::ServerContext* context, const ::api::v1::ERC20WithdrawalApprovalRequest* request, ::api::v1::ERC20WithdrawalApprovalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Withdrawal(::grpc::ServerContext* context, const ::api::v1::WithdrawalRequest* request, ::api::v1::WithdrawalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Withdrawals(::grpc::ServerContext* context, const ::api::v1::WithdrawalsRequest* request, ::api::v1::WithdrawalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Deposit(::grpc::ServerContext* context, const ::api::v1::DepositRequest* request, ::api::v1::DepositResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::Deposits(::grpc::ServerContext* context, const ::api::v1::DepositsRequest* request, ::api::v1::DepositsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::NetworkParameters(::grpc::ServerContext* context, const ::api::v1::NetworkParametersRequest* request, ::api::v1::NetworkParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::LiquidityProvisions(::grpc::ServerContext* context, const ::api::v1::LiquidityProvisionsRequest* request, ::api::v1::LiquidityProvisionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OracleSpec(::grpc::ServerContext* context, const ::api::v1::OracleSpecRequest* request, ::api::v1::OracleSpecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OracleSpecs(::grpc::ServerContext* context, const ::api::v1::OracleSpecsRequest* request, ::api::v1::OracleSpecsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDataService::Service::OracleDataBySpec(::grpc::ServerContext* context, const ::api::v1::OracleDataBySpecRequest* request, ::api::v1::OracleDataBySpecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1

