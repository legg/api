// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/trading.proto

#include "api/trading.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_2ftrading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalProposalState_api_2ftrading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2ftrading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_api_2ftrading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleData_oracles_2fv1_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleSpec_oracles_2fv1_2fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_assets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Asset_assets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deposit_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fee_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GovernanceData_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvision_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevels_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Market_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketData_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepth_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepthUpdate_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Party_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceLevel_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedBundle_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistics_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransferResponse_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Withdrawal_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fvalidator_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fvalidator_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_commands_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2fv1_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_BusEvent_events_2fv1_2fevents_2eproto;
namespace api {
namespace v1 {
class PropagateChainEventRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropagateChainEventRequest> _instance;
} _PropagateChainEventRequest_default_instance_;
class PropagateChainEventResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropagateChainEventResponse> _instance;
} _PropagateChainEventResponse_default_instance_;
class SubmitTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionRequest> _instance;
} _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionResponse> _instance;
} _SubmitTransactionResponse_default_instance_;
class SubmitTransactionV2RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionV2Request> _instance;
} _SubmitTransactionV2Request_default_instance_;
class SubmitTransactionV2ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionV2Response> _instance;
} _SubmitTransactionV2Response_default_instance_;
class PrepareWithdrawRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareWithdrawRequest> _instance;
} _PrepareWithdrawRequest_default_instance_;
class PrepareWithdrawResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareWithdrawResponse> _instance;
} _PrepareWithdrawResponse_default_instance_;
class PrepareSubmitOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareSubmitOrderResponse> _instance;
} _PrepareSubmitOrderResponse_default_instance_;
class PrepareCancelOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareCancelOrderResponse> _instance;
} _PrepareCancelOrderResponse_default_instance_;
class PrepareAmendOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareAmendOrderResponse> _instance;
} _PrepareAmendOrderResponse_default_instance_;
class PrepareSubmitOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareSubmitOrderRequest> _instance;
} _PrepareSubmitOrderRequest_default_instance_;
class PrepareCancelOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareCancelOrderRequest> _instance;
} _PrepareCancelOrderRequest_default_instance_;
class PrepareAmendOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareAmendOrderRequest> _instance;
} _PrepareAmendOrderRequest_default_instance_;
class AssetsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetsRequest> _instance;
} _AssetsRequest_default_instance_;
class AssetsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetsResponse> _instance;
} _AssetsResponse_default_instance_;
class AssetByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetByIDRequest> _instance;
} _AssetByIDRequest_default_instance_;
class AssetByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetByIDResponse> _instance;
} _AssetByIDResponse_default_instance_;
class GetNodeSignaturesAggregateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeSignaturesAggregateRequest> _instance;
} _GetNodeSignaturesAggregateRequest_default_instance_;
class GetNodeSignaturesAggregateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeSignaturesAggregateResponse> _instance;
} _GetNodeSignaturesAggregateResponse_default_instance_;
class OptionalProposalStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionalProposalState> _instance;
} _OptionalProposalState_default_instance_;
class GetProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsRequest> _instance;
} _GetProposalsRequest_default_instance_;
class GetProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsResponse> _instance;
} _GetProposalsResponse_default_instance_;
class GetProposalsByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsByPartyRequest> _instance;
} _GetProposalsByPartyRequest_default_instance_;
class GetProposalsByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsByPartyResponse> _instance;
} _GetProposalsByPartyResponse_default_instance_;
class GetVotesByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVotesByPartyRequest> _instance;
} _GetVotesByPartyRequest_default_instance_;
class GetVotesByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVotesByPartyResponse> _instance;
} _GetVotesByPartyResponse_default_instance_;
class GetNewMarketProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewMarketProposalsRequest> _instance;
} _GetNewMarketProposalsRequest_default_instance_;
class GetNewMarketProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewMarketProposalsResponse> _instance;
} _GetNewMarketProposalsResponse_default_instance_;
class GetUpdateMarketProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdateMarketProposalsRequest> _instance;
} _GetUpdateMarketProposalsRequest_default_instance_;
class GetUpdateMarketProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdateMarketProposalsResponse> _instance;
} _GetUpdateMarketProposalsResponse_default_instance_;
class GetNetworkParametersProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkParametersProposalsRequest> _instance;
} _GetNetworkParametersProposalsRequest_default_instance_;
class GetNetworkParametersProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkParametersProposalsResponse> _instance;
} _GetNetworkParametersProposalsResponse_default_instance_;
class GetNewAssetProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewAssetProposalsRequest> _instance;
} _GetNewAssetProposalsRequest_default_instance_;
class GetNewAssetProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewAssetProposalsResponse> _instance;
} _GetNewAssetProposalsResponse_default_instance_;
class GetProposalByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByIDRequest> _instance;
} _GetProposalByIDRequest_default_instance_;
class GetProposalByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByIDResponse> _instance;
} _GetProposalByIDResponse_default_instance_;
class GetProposalByReferenceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByReferenceRequest> _instance;
} _GetProposalByReferenceRequest_default_instance_;
class GetProposalByReferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByReferenceResponse> _instance;
} _GetProposalByReferenceResponse_default_instance_;
class ObserveGovernanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveGovernanceRequest> _instance;
} _ObserveGovernanceRequest_default_instance_;
class ObserveGovernanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveGovernanceResponse> _instance;
} _ObserveGovernanceResponse_default_instance_;
class ObservePartyProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservePartyProposalsRequest> _instance;
} _ObservePartyProposalsRequest_default_instance_;
class ObservePartyProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservePartyProposalsResponse> _instance;
} _ObservePartyProposalsResponse_default_instance_;
class ObserveProposalVotesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveProposalVotesRequest> _instance;
} _ObserveProposalVotesRequest_default_instance_;
class ObserveProposalVotesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveProposalVotesResponse> _instance;
} _ObserveProposalVotesResponse_default_instance_;
class ObservePartyVotesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservePartyVotesRequest> _instance;
} _ObservePartyVotesRequest_default_instance_;
class ObservePartyVotesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservePartyVotesResponse> _instance;
} _ObservePartyVotesResponse_default_instance_;
class MarginLevelsSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevelsSubscribeRequest> _instance;
} _MarginLevelsSubscribeRequest_default_instance_;
class MarginLevelsSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevelsSubscribeResponse> _instance;
} _MarginLevelsSubscribeResponse_default_instance_;
class MarginLevelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevelsRequest> _instance;
} _MarginLevelsRequest_default_instance_;
class MarginLevelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevelsResponse> _instance;
} _MarginLevelsResponse_default_instance_;
class MarketsDataSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsDataSubscribeRequest> _instance;
} _MarketsDataSubscribeRequest_default_instance_;
class MarketsDataSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsDataSubscribeResponse> _instance;
} _MarketsDataSubscribeResponse_default_instance_;
class MarketDataByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataByIDRequest> _instance;
} _MarketDataByIDRequest_default_instance_;
class MarketDataByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataByIDResponse> _instance;
} _MarketDataByIDResponse_default_instance_;
class MarketsDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsDataRequest> _instance;
} _MarketsDataRequest_default_instance_;
class MarketsDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsDataResponse> _instance;
} _MarketsDataResponse_default_instance_;
class LastTradeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastTradeRequest> _instance;
} _LastTradeRequest_default_instance_;
class LastTradeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastTradeResponse> _instance;
} _LastTradeResponse_default_instance_;
class MarketByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketByIDRequest> _instance;
} _MarketByIDRequest_default_instance_;
class MarketByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketByIDResponse> _instance;
} _MarketByIDResponse_default_instance_;
class PartyByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyByIDRequest> _instance;
} _PartyByIDRequest_default_instance_;
class PartyByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyByIDResponse> _instance;
} _PartyByIDResponse_default_instance_;
class PartiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartiesRequest> _instance;
} _PartiesRequest_default_instance_;
class PartiesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartiesResponse> _instance;
} _PartiesResponse_default_instance_;
class TradesByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByPartyRequest> _instance;
} _TradesByPartyRequest_default_instance_;
class TradesByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByPartyResponse> _instance;
} _TradesByPartyResponse_default_instance_;
class TradesByOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByOrderRequest> _instance;
} _TradesByOrderRequest_default_instance_;
class TradesByOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByOrderResponse> _instance;
} _TradesByOrderResponse_default_instance_;
class AccountsSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountsSubscribeRequest> _instance;
} _AccountsSubscribeRequest_default_instance_;
class AccountsSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountsSubscribeResponse> _instance;
} _AccountsSubscribeResponse_default_instance_;
class OrdersSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersSubscribeRequest> _instance;
} _OrdersSubscribeRequest_default_instance_;
class TradesSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesSubscribeRequest> _instance;
} _TradesSubscribeRequest_default_instance_;
class CandlesSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandlesSubscribeRequest> _instance;
} _CandlesSubscribeRequest_default_instance_;
class CandlesSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandlesSubscribeResponse> _instance;
} _CandlesSubscribeResponse_default_instance_;
class MarketDepthSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthSubscribeRequest> _instance;
} _MarketDepthSubscribeRequest_default_instance_;
class MarketDepthSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthSubscribeResponse> _instance;
} _MarketDepthSubscribeResponse_default_instance_;
class MarketDepthUpdatesSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthUpdatesSubscribeRequest> _instance;
} _MarketDepthUpdatesSubscribeRequest_default_instance_;
class MarketDepthUpdatesSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthUpdatesSubscribeResponse> _instance;
} _MarketDepthUpdatesSubscribeResponse_default_instance_;
class PositionsSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionsSubscribeRequest> _instance;
} _PositionsSubscribeRequest_default_instance_;
class PositionsSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionsSubscribeResponse> _instance;
} _PositionsSubscribeResponse_default_instance_;
class OrdersByMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByMarketRequest> _instance;
} _OrdersByMarketRequest_default_instance_;
class OrdersByMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByMarketResponse> _instance;
} _OrdersByMarketResponse_default_instance_;
class OrdersByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByPartyRequest> _instance;
} _OrdersByPartyRequest_default_instance_;
class OrdersByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByPartyResponse> _instance;
} _OrdersByPartyResponse_default_instance_;
class OrderByMarketAndIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByMarketAndIDRequest> _instance;
} _OrderByMarketAndIDRequest_default_instance_;
class OrderByMarketAndIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByMarketAndIDResponse> _instance;
} _OrderByMarketAndIDResponse_default_instance_;
class OrderByReferenceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByReferenceRequest> _instance;
} _OrderByReferenceRequest_default_instance_;
class OrderByReferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByReferenceResponse> _instance;
} _OrderByReferenceResponse_default_instance_;
class MarketsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsRequest> _instance;
} _MarketsRequest_default_instance_;
class MarketsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsResponse> _instance;
} _MarketsResponse_default_instance_;
class CandlesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandlesRequest> _instance;
} _CandlesRequest_default_instance_;
class CandlesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandlesResponse> _instance;
} _CandlesResponse_default_instance_;
class MarketDepthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthRequest> _instance;
} _MarketDepthRequest_default_instance_;
class MarketDepthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthResponse> _instance;
} _MarketDepthResponse_default_instance_;
class TradesByMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByMarketRequest> _instance;
} _TradesByMarketRequest_default_instance_;
class TradesByMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByMarketResponse> _instance;
} _TradesByMarketResponse_default_instance_;
class PositionsByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionsByPartyRequest> _instance;
} _PositionsByPartyRequest_default_instance_;
class PositionsByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionsByPartyResponse> _instance;
} _PositionsByPartyResponse_default_instance_;
class GetVegaTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVegaTimeRequest> _instance;
} _GetVegaTimeRequest_default_instance_;
class GetVegaTimeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVegaTimeResponse> _instance;
} _GetVegaTimeResponse_default_instance_;
class PaginationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pagination> _instance;
} _Pagination_default_instance_;
class OrdersSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersSubscribeResponse> _instance;
} _OrdersSubscribeResponse_default_instance_;
class TradesSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesSubscribeResponse> _instance;
} _TradesSubscribeResponse_default_instance_;
class TransferResponsesSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferResponsesSubscribeRequest> _instance;
} _TransferResponsesSubscribeRequest_default_instance_;
class TransferResponsesSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferResponsesSubscribeResponse> _instance;
} _TransferResponsesSubscribeResponse_default_instance_;
class PartyAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyAccountsRequest> _instance;
} _PartyAccountsRequest_default_instance_;
class PartyAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyAccountsResponse> _instance;
} _PartyAccountsResponse_default_instance_;
class MarketAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketAccountsRequest> _instance;
} _MarketAccountsRequest_default_instance_;
class MarketAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketAccountsResponse> _instance;
} _MarketAccountsResponse_default_instance_;
class FeeInfrastructureAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeInfrastructureAccountsRequest> _instance;
} _FeeInfrastructureAccountsRequest_default_instance_;
class FeeInfrastructureAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeInfrastructureAccountsResponse> _instance;
} _FeeInfrastructureAccountsResponse_default_instance_;
class PrepareProposalSubmissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareProposalSubmissionRequest> _instance;
} _PrepareProposalSubmissionRequest_default_instance_;
class PrepareProposalSubmissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareProposalSubmissionResponse> _instance;
} _PrepareProposalSubmissionResponse_default_instance_;
class PrepareVoteSubmissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareVoteSubmissionRequest> _instance;
} _PrepareVoteSubmissionRequest_default_instance_;
class PrepareVoteSubmissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareVoteSubmissionResponse> _instance;
} _PrepareVoteSubmissionResponse_default_instance_;
class PrepareLiquidityProvisionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareLiquidityProvisionRequest> _instance;
} _PrepareLiquidityProvisionRequest_default_instance_;
class PrepareLiquidityProvisionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareLiquidityProvisionResponse> _instance;
} _PrepareLiquidityProvisionResponse_default_instance_;
class OrderByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByIDRequest> _instance;
} _OrderByIDRequest_default_instance_;
class OrderByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByIDResponse> _instance;
} _OrderByIDResponse_default_instance_;
class OrderVersionsByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderVersionsByIDRequest> _instance;
} _OrderVersionsByIDRequest_default_instance_;
class OrderVersionsByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderVersionsByIDResponse> _instance;
} _OrderVersionsByIDResponse_default_instance_;
class EstimateFeeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateFeeRequest> _instance;
} _EstimateFeeRequest_default_instance_;
class EstimateFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateFeeResponse> _instance;
} _EstimateFeeResponse_default_instance_;
class EstimateMarginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateMarginRequest> _instance;
} _EstimateMarginRequest_default_instance_;
class EstimateMarginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateMarginResponse> _instance;
} _EstimateMarginResponse_default_instance_;
class ObserveEventBusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveEventBusRequest> _instance;
} _ObserveEventBusRequest_default_instance_;
class ObserveEventBusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveEventBusResponse> _instance;
} _ObserveEventBusResponse_default_instance_;
class StatisticsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatisticsRequest> _instance;
} _StatisticsRequest_default_instance_;
class StatisticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatisticsResponse> _instance;
} _StatisticsResponse_default_instance_;
class WithdrawalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalsRequest> _instance;
} _WithdrawalsRequest_default_instance_;
class WithdrawalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalsResponse> _instance;
} _WithdrawalsResponse_default_instance_;
class WithdrawalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalRequest> _instance;
} _WithdrawalRequest_default_instance_;
class WithdrawalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalResponse> _instance;
} _WithdrawalResponse_default_instance_;
class ERC20WithdrawalApprovalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20WithdrawalApprovalRequest> _instance;
} _ERC20WithdrawalApprovalRequest_default_instance_;
class ERC20WithdrawalApprovalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20WithdrawalApprovalResponse> _instance;
} _ERC20WithdrawalApprovalResponse_default_instance_;
class DepositsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositsRequest> _instance;
} _DepositsRequest_default_instance_;
class DepositsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositsResponse> _instance;
} _DepositsResponse_default_instance_;
class DepositRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositRequest> _instance;
} _DepositRequest_default_instance_;
class DepositResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositResponse> _instance;
} _DepositResponse_default_instance_;
class NetworkParametersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParametersRequest> _instance;
} _NetworkParametersRequest_default_instance_;
class NetworkParametersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParametersResponse> _instance;
} _NetworkParametersResponse_default_instance_;
class LiquidityProvisionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvisionsRequest> _instance;
} _LiquidityProvisionsRequest_default_instance_;
class LiquidityProvisionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvisionsResponse> _instance;
} _LiquidityProvisionsResponse_default_instance_;
class OracleSpecRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleSpecRequest> _instance;
} _OracleSpecRequest_default_instance_;
class OracleSpecResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleSpecResponse> _instance;
} _OracleSpecResponse_default_instance_;
class OracleSpecsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleSpecsRequest> _instance;
} _OracleSpecsRequest_default_instance_;
class OracleSpecsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleSpecsResponse> _instance;
} _OracleSpecsResponse_default_instance_;
class OracleDataBySpecRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleDataBySpecRequest> _instance;
} _OracleDataBySpecRequest_default_instance_;
class OracleDataBySpecResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleDataBySpecResponse> _instance;
} _OracleDataBySpecResponse_default_instance_;
class LastBlockHeightRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastBlockHeightRequest> _instance;
} _LastBlockHeightRequest_default_instance_;
class LastBlockHeightResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastBlockHeightResponse> _instance;
} _LastBlockHeightResponse_default_instance_;
}  // namespace v1
}  // namespace api
static void InitDefaultsscc_info_AccountsSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_AccountsSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::AccountsSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountsSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_AccountsSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_AccountsSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::AccountsSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountsSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountsSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_AssetByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_AssetByIDRequest_default_instance_;
    new (ptr) ::api::v1::AssetByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssetByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_AssetByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_AssetByIDResponse_default_instance_;
    new (ptr) ::api::v1::AssetByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssetByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Asset_assets_2eproto.base,}};

static void InitDefaultsscc_info_AssetsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_AssetsRequest_default_instance_;
    new (ptr) ::api::v1::AssetsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssetsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_AssetsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_AssetsResponse_default_instance_;
    new (ptr) ::api::v1::AssetsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssetsResponse_api_2ftrading_2eproto}, {
      &scc_info_Asset_assets_2eproto.base,}};

static void InitDefaultsscc_info_CandlesRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_CandlesRequest_default_instance_;
    new (ptr) ::api::v1::CandlesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CandlesRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CandlesRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_CandlesResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_CandlesResponse_default_instance_;
    new (ptr) ::api::v1::CandlesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandlesResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CandlesResponse_api_2ftrading_2eproto}, {
      &scc_info_Candle_vega_2eproto.base,}};

static void InitDefaultsscc_info_CandlesSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_CandlesSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::CandlesSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CandlesSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_CandlesSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_CandlesSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::CandlesSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandlesSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CandlesSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_Candle_vega_2eproto.base,}};

static void InitDefaultsscc_info_DepositRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_DepositRequest_default_instance_;
    new (ptr) ::api::v1::DepositRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepositRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepositRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_DepositResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_DepositResponse_default_instance_;
    new (ptr) ::api::v1::DepositResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepositResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepositResponse_api_2ftrading_2eproto}, {
      &scc_info_Deposit_vega_2eproto.base,}};

static void InitDefaultsscc_info_DepositsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_DepositsRequest_default_instance_;
    new (ptr) ::api::v1::DepositsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepositsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepositsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_DepositsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_DepositsResponse_default_instance_;
    new (ptr) ::api::v1::DepositsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepositsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepositsResponse_api_2ftrading_2eproto}, {
      &scc_info_Deposit_vega_2eproto.base,}};

static void InitDefaultsscc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ERC20WithdrawalApprovalRequest_default_instance_;
    new (ptr) ::api::v1::ERC20WithdrawalApprovalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ERC20WithdrawalApprovalResponse_default_instance_;
    new (ptr) ::api::v1::ERC20WithdrawalApprovalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_EstimateFeeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_EstimateFeeRequest_default_instance_;
    new (ptr) ::api::v1::EstimateFeeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateFeeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateFeeRequest_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_EstimateFeeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_EstimateFeeResponse_default_instance_;
    new (ptr) ::api::v1::EstimateFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateFeeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateFeeResponse_api_2ftrading_2eproto}, {
      &scc_info_Fee_vega_2eproto.base,}};

static void InitDefaultsscc_info_EstimateMarginRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_EstimateMarginRequest_default_instance_;
    new (ptr) ::api::v1::EstimateMarginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateMarginRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateMarginRequest_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_EstimateMarginResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_EstimateMarginResponse_default_instance_;
    new (ptr) ::api::v1::EstimateMarginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateMarginResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateMarginResponse_api_2ftrading_2eproto}, {
      &scc_info_MarginLevels_vega_2eproto.base,}};

static void InitDefaultsscc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_FeeInfrastructureAccountsRequest_default_instance_;
    new (ptr) ::api::v1::FeeInfrastructureAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_FeeInfrastructureAccountsResponse_default_instance_;
    new (ptr) ::api::v1::FeeInfrastructureAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNetworkParametersProposalsRequest_default_instance_;
    new (ptr) ::api::v1::GetNetworkParametersProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNetworkParametersProposalsResponse_default_instance_;
    new (ptr) ::api::v1::GetNetworkParametersProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNewAssetProposalsRequest_default_instance_;
    new (ptr) ::api::v1::GetNewAssetProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNewAssetProposalsResponse_default_instance_;
    new (ptr) ::api::v1::GetNewAssetProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNewMarketProposalsRequest_default_instance_;
    new (ptr) ::api::v1::GetNewMarketProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNewMarketProposalsResponse_default_instance_;
    new (ptr) ::api::v1::GetNewMarketProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNodeSignaturesAggregateRequest_default_instance_;
    new (ptr) ::api::v1::GetNodeSignaturesAggregateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetNodeSignaturesAggregateResponse_default_instance_;
    new (ptr) ::api::v1::GetNodeSignaturesAggregateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto}, {
      &scc_info_NodeSignature_commands_2fv1_2fvalidator_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalByIDRequest_default_instance_;
    new (ptr) ::api::v1::GetProposalByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProposalByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProposalByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetProposalByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalByIDResponse_default_instance_;
    new (ptr) ::api::v1::GetProposalByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalByReferenceRequest_default_instance_;
    new (ptr) ::api::v1::GetProposalByReferenceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalByReferenceResponse_default_instance_;
    new (ptr) ::api::v1::GetProposalByReferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalsByPartyRequest_default_instance_;
    new (ptr) ::api::v1::GetProposalsByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalsByPartyResponse_default_instance_;
    new (ptr) ::api::v1::GetProposalsByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalsRequest_default_instance_;
    new (ptr) ::api::v1::GetProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetProposalsResponse_default_instance_;
    new (ptr) ::api::v1::GetProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetUpdateMarketProposalsRequest_default_instance_;
    new (ptr) ::api::v1::GetUpdateMarketProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetUpdateMarketProposalsResponse_default_instance_;
    new (ptr) ::api::v1::GetUpdateMarketProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetVegaTimeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetVegaTimeRequest_default_instance_;
    new (ptr) ::api::v1::GetVegaTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVegaTimeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetVegaTimeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetVegaTimeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetVegaTimeResponse_default_instance_;
    new (ptr) ::api::v1::GetVegaTimeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVegaTimeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetVegaTimeResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetVotesByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetVotesByPartyRequest_default_instance_;
    new (ptr) ::api::v1::GetVotesByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetVotesByPartyRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetVotesByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_GetVotesByPartyResponse_default_instance_;
    new (ptr) ::api::v1::GetVotesByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetVotesByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_LastBlockHeightRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_LastBlockHeightRequest_default_instance_;
    new (ptr) ::api::v1::LastBlockHeightRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastBlockHeightRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LastBlockHeightRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_LastBlockHeightResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_LastBlockHeightResponse_default_instance_;
    new (ptr) ::api::v1::LastBlockHeightResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastBlockHeightResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LastBlockHeightResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_LastTradeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_LastTradeRequest_default_instance_;
    new (ptr) ::api::v1::LastTradeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastTradeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LastTradeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_LastTradeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_LastTradeResponse_default_instance_;
    new (ptr) ::api::v1::LastTradeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LastTradeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LastTradeResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_LiquidityProvisionsRequest_default_instance_;
    new (ptr) ::api::v1::LiquidityProvisionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_LiquidityProvisionsResponse_default_instance_;
    new (ptr) ::api::v1::LiquidityProvisionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto}, {
      &scc_info_LiquidityProvision_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarginLevelsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarginLevelsRequest_default_instance_;
    new (ptr) ::api::v1::MarginLevelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevelsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarginLevelsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarginLevelsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarginLevelsResponse_default_instance_;
    new (ptr) ::api::v1::MarginLevelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarginLevelsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarginLevelsResponse_api_2ftrading_2eproto}, {
      &scc_info_MarginLevels_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarginLevelsSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::MarginLevelsSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarginLevelsSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarginLevelsSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::MarginLevelsSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarginLevelsSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarginLevelsSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_MarginLevels_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketAccountsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketAccountsRequest_default_instance_;
    new (ptr) ::api::v1::MarketAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketAccountsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketAccountsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketAccountsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketAccountsResponse_default_instance_;
    new (ptr) ::api::v1::MarketAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketAccountsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketAccountsResponse_api_2ftrading_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketByIDRequest_default_instance_;
    new (ptr) ::api::v1::MarketByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketByIDResponse_default_instance_;
    new (ptr) ::api::v1::MarketByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Market_markets_2eproto.base,}};

static void InitDefaultsscc_info_MarketDataByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDataByIDRequest_default_instance_;
    new (ptr) ::api::v1::MarketDataByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDataByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDataByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketDataByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDataByIDResponse_default_instance_;
    new (ptr) ::api::v1::MarketDataByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDataByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_MarketData_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepthRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDepthRequest_default_instance_;
    new (ptr) ::api::v1::MarketDepthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDepthRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDepthRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketDepthResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDepthResponse_default_instance_;
    new (ptr) ::api::v1::MarketDepthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketDepthResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MarketDepthResponse_api_2ftrading_2eproto}, {
      &scc_info_PriceLevel_vega_2eproto.base,
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDepthSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::MarketDepthSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketDepthSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDepthSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::MarketDepthSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepthSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDepthSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_MarketDepth_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDepthUpdatesSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::MarketDepthUpdatesSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketDepthUpdatesSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketDepthUpdatesSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::MarketDepthUpdatesSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepthUpdatesSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDepthUpdatesSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_MarketDepthUpdate_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketsDataRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketsDataRequest_default_instance_;
    new (ptr) ::api::v1::MarketsDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketsDataRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketsDataRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketsDataResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketsDataResponse_default_instance_;
    new (ptr) ::api::v1::MarketsDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketsDataResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketsDataResponse_api_2ftrading_2eproto}, {
      &scc_info_MarketData_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketsDataSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::MarketsDataSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketsDataSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketsDataSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::MarketsDataSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketsDataSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketsDataSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_MarketData_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketsRequest_default_instance_;
    new (ptr) ::api::v1::MarketsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_MarketsResponse_default_instance_;
    new (ptr) ::api::v1::MarketsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketsResponse_api_2ftrading_2eproto}, {
      &scc_info_Market_markets_2eproto.base,}};

static void InitDefaultsscc_info_NetworkParametersRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_NetworkParametersRequest_default_instance_;
    new (ptr) ::api::v1::NetworkParametersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParametersRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkParametersRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_NetworkParametersResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_NetworkParametersResponse_default_instance_;
    new (ptr) ::api::v1::NetworkParametersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkParametersResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetworkParametersResponse_api_2ftrading_2eproto}, {
      &scc_info_NetworkParameter_vega_2eproto.base,}};

static void InitDefaultsscc_info_ObserveEventBusRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObserveEventBusRequest_default_instance_;
    new (ptr) ::api::v1::ObserveEventBusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObserveEventBusRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObserveEventBusRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObserveEventBusResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObserveEventBusResponse_default_instance_;
    new (ptr) ::api::v1::ObserveEventBusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObserveEventBusResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObserveEventBusResponse_api_2ftrading_2eproto}, {
      &scc_info_BusEvent_events_2fv1_2fevents_2eproto.base,}};

static void InitDefaultsscc_info_ObserveGovernanceRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObserveGovernanceRequest_default_instance_;
    new (ptr) ::api::v1::ObserveGovernanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObserveGovernanceRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObserveGovernanceRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObserveGovernanceResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObserveGovernanceResponse_default_instance_;
    new (ptr) ::api::v1::ObserveGovernanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObserveGovernanceResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObserveGovernanceResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObservePartyProposalsRequest_default_instance_;
    new (ptr) ::api::v1::ObservePartyProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObservePartyProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObservePartyProposalsResponse_default_instance_;
    new (ptr) ::api::v1::ObservePartyProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObservePartyProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObservePartyProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_ObservePartyVotesRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObservePartyVotesRequest_default_instance_;
    new (ptr) ::api::v1::ObservePartyVotesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObservePartyVotesRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObservePartyVotesResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObservePartyVotesResponse_default_instance_;
    new (ptr) ::api::v1::ObservePartyVotesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObservePartyVotesResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObservePartyVotesResponse_api_2ftrading_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObserveProposalVotesRequest_default_instance_;
    new (ptr) ::api::v1::ObserveProposalVotesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObserveProposalVotesResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_ObserveProposalVotesResponse_default_instance_;
    new (ptr) ::api::v1::ObserveProposalVotesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObserveProposalVotesResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObserveProposalVotesResponse_api_2ftrading_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_OptionalProposalState_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OptionalProposalState_default_instance_;
    new (ptr) ::api::v1::OptionalProposalState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalProposalState_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionalProposalState_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OracleDataBySpecRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OracleDataBySpecRequest_default_instance_;
    new (ptr) ::api::v1::OracleDataBySpecRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleDataBySpecRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OracleDataBySpecRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OracleDataBySpecResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OracleDataBySpecResponse_default_instance_;
    new (ptr) ::api::v1::OracleDataBySpecResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleDataBySpecResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OracleDataBySpecResponse_api_2ftrading_2eproto}, {
      &scc_info_OracleData_oracles_2fv1_2fdata_2eproto.base,}};

static void InitDefaultsscc_info_OracleSpecRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OracleSpecRequest_default_instance_;
    new (ptr) ::api::v1::OracleSpecRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleSpecRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OracleSpecRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OracleSpecResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OracleSpecResponse_default_instance_;
    new (ptr) ::api::v1::OracleSpecResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleSpecResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OracleSpecResponse_api_2ftrading_2eproto}, {
      &scc_info_OracleSpec_oracles_2fv1_2fspec_2eproto.base,}};

static void InitDefaultsscc_info_OracleSpecsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OracleSpecsRequest_default_instance_;
    new (ptr) ::api::v1::OracleSpecsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleSpecsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OracleSpecsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OracleSpecsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OracleSpecsResponse_default_instance_;
    new (ptr) ::api::v1::OracleSpecsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleSpecsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OracleSpecsResponse_api_2ftrading_2eproto}, {
      &scc_info_OracleSpec_oracles_2fv1_2fspec_2eproto.base,}};

static void InitDefaultsscc_info_OrderByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderByIDRequest_default_instance_;
    new (ptr) ::api::v1::OrderByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrderByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderByIDResponse_default_instance_;
    new (ptr) ::api::v1::OrderByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderByMarketAndIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderByMarketAndIDRequest_default_instance_;
    new (ptr) ::api::v1::OrderByMarketAndIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderByMarketAndIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderByMarketAndIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrderByMarketAndIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderByMarketAndIDResponse_default_instance_;
    new (ptr) ::api::v1::OrderByMarketAndIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderByMarketAndIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderByMarketAndIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderByReferenceRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderByReferenceRequest_default_instance_;
    new (ptr) ::api::v1::OrderByReferenceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderByReferenceRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderByReferenceRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrderByReferenceResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderByReferenceResponse_default_instance_;
    new (ptr) ::api::v1::OrderByReferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderByReferenceResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderByReferenceResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderVersionsByIDRequest_default_instance_;
    new (ptr) ::api::v1::OrderVersionsByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_OrderVersionsByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrderVersionsByIDResponse_default_instance_;
    new (ptr) ::api::v1::OrderVersionsByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderVersionsByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderVersionsByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByMarketRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrdersByMarketRequest_default_instance_;
    new (ptr) ::api::v1::OrdersByMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByMarketRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByMarketRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByMarketResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrdersByMarketResponse_default_instance_;
    new (ptr) ::api::v1::OrdersByMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByMarketResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByMarketResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrdersByPartyRequest_default_instance_;
    new (ptr) ::api::v1::OrdersByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByPartyRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrdersByPartyResponse_default_instance_;
    new (ptr) ::api::v1::OrdersByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrdersSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrdersSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::OrdersSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrdersSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrdersSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_OrdersSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::OrdersSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_Pagination_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_Pagination_default_instance_;
    new (ptr) ::api::v1::Pagination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pagination_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PartiesRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PartiesRequest_default_instance_;
    new (ptr) ::api::v1::PartiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartiesRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartiesRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PartiesResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PartiesResponse_default_instance_;
    new (ptr) ::api::v1::PartiesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartiesResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartiesResponse_api_2ftrading_2eproto}, {
      &scc_info_Party_vega_2eproto.base,}};

static void InitDefaultsscc_info_PartyAccountsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PartyAccountsRequest_default_instance_;
    new (ptr) ::api::v1::PartyAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyAccountsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyAccountsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PartyAccountsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PartyAccountsResponse_default_instance_;
    new (ptr) ::api::v1::PartyAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyAccountsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyAccountsResponse_api_2ftrading_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_PartyByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PartyByIDRequest_default_instance_;
    new (ptr) ::api::v1::PartyByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PartyByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PartyByIDResponse_default_instance_;
    new (ptr) ::api::v1::PartyByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Party_vega_2eproto.base,}};

static void InitDefaultsscc_info_PositionsByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PositionsByPartyRequest_default_instance_;
    new (ptr) ::api::v1::PositionsByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionsByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionsByPartyRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PositionsByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PositionsByPartyResponse_default_instance_;
    new (ptr) ::api::v1::PositionsByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionsByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionsByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Position_vega_2eproto.base,}};

static void InitDefaultsscc_info_PositionsSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PositionsSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::PositionsSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionsSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PositionsSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PositionsSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::PositionsSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionsSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionsSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_Position_vega_2eproto.base,}};

static void InitDefaultsscc_info_PrepareAmendOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareAmendOrderRequest_default_instance_;
    new (ptr) ::api::v1::PrepareAmendOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareAmendOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareAmendOrderRequest_api_2ftrading_2eproto}, {
      &scc_info_OrderAmendment_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareAmendOrderResponse_default_instance_;
    new (ptr) ::api::v1::PrepareAmendOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareCancelOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareCancelOrderRequest_default_instance_;
    new (ptr) ::api::v1::PrepareCancelOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareCancelOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareCancelOrderRequest_api_2ftrading_2eproto}, {
      &scc_info_OrderCancellation_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareCancelOrderResponse_default_instance_;
    new (ptr) ::api::v1::PrepareCancelOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareLiquidityProvisionRequest_default_instance_;
    new (ptr) ::api::v1::PrepareLiquidityProvisionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto}, {
      &scc_info_LiquidityProvisionSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareLiquidityProvisionResponse_default_instance_;
    new (ptr) ::api::v1::PrepareLiquidityProvisionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareProposalSubmissionRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareProposalSubmissionRequest_default_instance_;
    new (ptr) ::api::v1::PrepareProposalSubmissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareProposalSubmissionRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareProposalSubmissionRequest_api_2ftrading_2eproto}, {
      &scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareProposalSubmissionResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareProposalSubmissionResponse_default_instance_;
    new (ptr) ::api::v1::PrepareProposalSubmissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareProposalSubmissionResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareProposalSubmissionResponse_api_2ftrading_2eproto}, {
      &scc_info_ProposalSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareSubmitOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareSubmitOrderRequest_default_instance_;
    new (ptr) ::api::v1::PrepareSubmitOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareSubmitOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareSubmitOrderRequest_api_2ftrading_2eproto}, {
      &scc_info_OrderSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareSubmitOrderResponse_default_instance_;
    new (ptr) ::api::v1::PrepareSubmitOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareVoteSubmissionRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareVoteSubmissionRequest_default_instance_;
    new (ptr) ::api::v1::PrepareVoteSubmissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareVoteSubmissionRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareVoteSubmissionRequest_api_2ftrading_2eproto}, {
      &scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareVoteSubmissionResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareVoteSubmissionResponse_default_instance_;
    new (ptr) ::api::v1::PrepareVoteSubmissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareVoteSubmissionResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareVoteSubmissionResponse_api_2ftrading_2eproto}, {
      &scc_info_VoteSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareWithdrawRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareWithdrawRequest_default_instance_;
    new (ptr) ::api::v1::PrepareWithdrawRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareWithdrawRequest_api_2ftrading_2eproto}, {
      &scc_info_WithdrawSubmission_commands_2fv1_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PrepareWithdrawResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PrepareWithdrawResponse_default_instance_;
    new (ptr) ::api::v1::PrepareWithdrawResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareWithdrawResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PropagateChainEventRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PropagateChainEventRequest_default_instance_;
    new (ptr) ::api::v1::PropagateChainEventRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropagateChainEventRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PropagateChainEventRequest_api_2ftrading_2eproto}, {
      &scc_info_ChainEvent_commands_2fv1_2fvalidator_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PropagateChainEventResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_PropagateChainEventResponse_default_instance_;
    new (ptr) ::api::v1::PropagateChainEventResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropagateChainEventResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropagateChainEventResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_StatisticsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_StatisticsRequest_default_instance_;
    new (ptr) ::api::v1::StatisticsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatisticsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatisticsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_StatisticsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_StatisticsResponse_default_instance_;
    new (ptr) ::api::v1::StatisticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatisticsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatisticsResponse_api_2ftrading_2eproto}, {
      &scc_info_Statistics_vega_2eproto.base,}};

static void InitDefaultsscc_info_SubmitTransactionRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_SubmitTransactionRequest_default_instance_;
    new (ptr) ::api::v1::SubmitTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitTransactionRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitTransactionRequest_api_2ftrading_2eproto}, {
      &scc_info_SignedBundle_vega_2eproto.base,}};

static void InitDefaultsscc_info_SubmitTransactionResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_SubmitTransactionResponse_default_instance_;
    new (ptr) ::api::v1::SubmitTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitTransactionResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitTransactionResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_SubmitTransactionV2Request_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_SubmitTransactionV2Request_default_instance_;
    new (ptr) ::api::v1::SubmitTransactionV2Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitTransactionV2Request_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitTransactionV2Request_api_2ftrading_2eproto}, {
      &scc_info_Transaction_commands_2fv1_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_SubmitTransactionV2Response_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_SubmitTransactionV2Response_default_instance_;
    new (ptr) ::api::v1::SubmitTransactionV2Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitTransactionV2Response_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitTransactionV2Response_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_TradesByMarketRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesByMarketRequest_default_instance_;
    new (ptr) ::api::v1::TradesByMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByMarketRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByMarketRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_TradesByMarketResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesByMarketResponse_default_instance_;
    new (ptr) ::api::v1::TradesByMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByMarketResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByMarketResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradesByOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesByOrderRequest_default_instance_;
    new (ptr) ::api::v1::TradesByOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradesByOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradesByOrderRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_TradesByOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesByOrderResponse_default_instance_;
    new (ptr) ::api::v1::TradesByOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByOrderResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradesByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesByPartyRequest_default_instance_;
    new (ptr) ::api::v1::TradesByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByPartyRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_TradesByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesByPartyResponse_default_instance_;
    new (ptr) ::api::v1::TradesByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradesSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::TradesSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradesSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradesSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_TradesSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TradesSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::TradesSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TransferResponsesSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TransferResponsesSubscribeRequest_default_instance_;
    new (ptr) ::api::v1::TransferResponsesSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferResponsesSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferResponsesSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_TransferResponsesSubscribeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_TransferResponsesSubscribeResponse_default_instance_;
    new (ptr) ::api::v1::TransferResponsesSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferResponsesSubscribeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferResponsesSubscribeResponse_api_2ftrading_2eproto}, {
      &scc_info_TransferResponse_vega_2eproto.base,}};

static void InitDefaultsscc_info_WithdrawalRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_WithdrawalRequest_default_instance_;
    new (ptr) ::api::v1::WithdrawalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawalRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawalRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawalResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_WithdrawalResponse_default_instance_;
    new (ptr) ::api::v1::WithdrawalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawalResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawalResponse_api_2ftrading_2eproto}, {
      &scc_info_Withdrawal_vega_2eproto.base,}};

static void InitDefaultsscc_info_WithdrawalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_WithdrawalsRequest_default_instance_;
    new (ptr) ::api::v1::WithdrawalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawalsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::v1::_WithdrawalsResponse_default_instance_;
    new (ptr) ::api::v1::WithdrawalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawalsResponse_api_2ftrading_2eproto}, {
      &scc_info_Withdrawal_vega_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2ftrading_2eproto[152];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_api_2ftrading_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2ftrading_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2ftrading_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PropagateChainEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PropagateChainEventRequest, evt_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PropagateChainEventRequest, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PropagateChainEventRequest, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PropagateChainEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PropagateChainEventResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionRequest, tx_),
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionV2Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionV2Request, tx_),
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionV2Request, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionV2Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::SubmitTransactionV2Response, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareWithdrawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareWithdrawRequest, withdraw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareWithdrawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareWithdrawResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareSubmitOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareSubmitOrderResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareSubmitOrderResponse, submit_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareCancelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareCancelOrderResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareAmendOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareAmendOrderResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareSubmitOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareSubmitOrderRequest, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareCancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareCancelOrderRequest, cancellation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareAmendOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareAmendOrderRequest, amendment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::AssetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::AssetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::AssetsResponse, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::AssetByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::AssetByIDRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::AssetByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::AssetByIDResponse, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNodeSignaturesAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNodeSignaturesAggregateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNodeSignaturesAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNodeSignaturesAggregateResponse, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OptionalProposalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OptionalProposalState, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsRequest, select_in_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsByPartyRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsByPartyRequest, select_in_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalsByPartyResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetVotesByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetVotesByPartyRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetVotesByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetVotesByPartyResponse, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewMarketProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewMarketProposalsRequest, select_in_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewMarketProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewMarketProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetUpdateMarketProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetUpdateMarketProposalsRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::GetUpdateMarketProposalsRequest, select_in_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetUpdateMarketProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetUpdateMarketProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNetworkParametersProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNetworkParametersProposalsRequest, select_in_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNetworkParametersProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNetworkParametersProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewAssetProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewAssetProposalsRequest, select_in_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewAssetProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetNewAssetProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByIDRequest, proposal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByIDResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByReferenceRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetProposalByReferenceResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveGovernanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveGovernanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveGovernanceResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyProposalsRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveProposalVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveProposalVotesRequest, proposal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveProposalVotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveProposalVotesResponse, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyVotesRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyVotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObservePartyVotesResponse, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsSubscribeRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsSubscribeRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsSubscribeResponse, margin_levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarginLevelsResponse, margin_levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsDataSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsDataSubscribeRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsDataSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsDataSubscribeResponse, market_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDataByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDataByIDRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDataByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDataByIDResponse, market_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsDataResponse, markets_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::LastTradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::LastTradeRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::LastTradeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::LastTradeResponse, trade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketByIDRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketByIDResponse, market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyByIDRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyByIDResponse, party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartiesResponse, parties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByPartyRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByPartyRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByPartyRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByPartyResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByOrderRequest, order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByOrderResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::AccountsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::AccountsSubscribeRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::AccountsSubscribeRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::AccountsSubscribeRequest, asset_),
  PROTOBUF_FIELD_OFFSET(::api::v1::AccountsSubscribeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::AccountsSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::AccountsSubscribeResponse, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersSubscribeRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersSubscribeRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesSubscribeRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesSubscribeRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesSubscribeRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesSubscribeRequest, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesSubscribeResponse, candle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthSubscribeRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthSubscribeResponse, market_depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthUpdatesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthUpdatesSubscribeRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthUpdatesSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthUpdatesSubscribeResponse, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsSubscribeRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsSubscribeRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsSubscribeResponse, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByMarketRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByMarketRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByMarketResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByPartyRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByPartyRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersByPartyResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByMarketAndIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByMarketAndIDRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByMarketAndIDRequest, order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByMarketAndIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByMarketAndIDResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByReferenceRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByReferenceResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketsResponse, markets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesRequest, since_timestamp_),
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesRequest, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::CandlesResponse, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthRequest, max_depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthResponse, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthResponse, buy_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthResponse, sell_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthResponse, last_trade_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketDepthResponse, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByMarketRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByMarketRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesByMarketResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsByPartyRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsByPartyRequest, market_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PositionsByPartyResponse, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetVegaTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetVegaTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::GetVegaTimeResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::Pagination, skip_),
  PROTOBUF_FIELD_OFFSET(::api::v1::Pagination, limit_),
  PROTOBUF_FIELD_OFFSET(::api::v1::Pagination, descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrdersSubscribeResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TradesSubscribeResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TransferResponsesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::TransferResponsesSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::TransferResponsesSubscribeResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyAccountsRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyAccountsRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyAccountsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PartyAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketAccountsRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::MarketAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::FeeInfrastructureAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::FeeInfrastructureAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::FeeInfrastructureAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::FeeInfrastructureAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareProposalSubmissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareProposalSubmissionRequest, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareProposalSubmissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareProposalSubmissionResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareProposalSubmissionResponse, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareVoteSubmissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareVoteSubmissionRequest, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareVoteSubmissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareVoteSubmissionResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareVoteSubmissionResponse, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareLiquidityProvisionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareLiquidityProvisionRequest, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareLiquidityProvisionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::PrepareLiquidityProvisionResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByIDRequest, order_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByIDRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderByIDResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderVersionsByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderVersionsByIDRequest, order_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderVersionsByIDRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderVersionsByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OrderVersionsByIDResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateFeeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateFeeRequest, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateFeeResponse, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateMarginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateMarginRequest, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateMarginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::EstimateMarginResponse, margin_levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveEventBusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveEventBusRequest, type_),
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveEventBusRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveEventBusRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveEventBusRequest, batch_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveEventBusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ObserveEventBusResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::StatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::StatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::StatisticsResponse, statistics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalsRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalsResponse, withdrawals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::WithdrawalResponse, withdrawal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalRequest, withdrawal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalResponse, asset_source_),
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalResponse, amount_),
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalResponse, expiry_),
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalResponse, nonce_),
  PROTOBUF_FIELD_OFFSET(::api::v1::ERC20WithdrawalApprovalResponse, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositsRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositsResponse, deposits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::DepositResponse, deposit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::NetworkParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::NetworkParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::NetworkParametersResponse, network_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::LiquidityProvisionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::LiquidityProvisionsRequest, market_),
  PROTOBUF_FIELD_OFFSET(::api::v1::LiquidityProvisionsRequest, party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::LiquidityProvisionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::LiquidityProvisionsResponse, liquidity_provisions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleSpecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleSpecRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleSpecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleSpecResponse, oracle_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleSpecsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleSpecsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleSpecsResponse, oracle_specs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleDataBySpecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleDataBySpecRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleDataBySpecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::OracleDataBySpecResponse, oracle_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::LastBlockHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::v1::LastBlockHeightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::v1::LastBlockHeightResponse, height_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api::v1::PropagateChainEventRequest)},
  { 8, -1, sizeof(::api::v1::PropagateChainEventResponse)},
  { 14, -1, sizeof(::api::v1::SubmitTransactionRequest)},
  { 21, -1, sizeof(::api::v1::SubmitTransactionResponse)},
  { 27, -1, sizeof(::api::v1::SubmitTransactionV2Request)},
  { 34, -1, sizeof(::api::v1::SubmitTransactionV2Response)},
  { 40, -1, sizeof(::api::v1::PrepareWithdrawRequest)},
  { 46, -1, sizeof(::api::v1::PrepareWithdrawResponse)},
  { 52, -1, sizeof(::api::v1::PrepareSubmitOrderResponse)},
  { 59, -1, sizeof(::api::v1::PrepareCancelOrderResponse)},
  { 65, -1, sizeof(::api::v1::PrepareAmendOrderResponse)},
  { 71, -1, sizeof(::api::v1::PrepareSubmitOrderRequest)},
  { 77, -1, sizeof(::api::v1::PrepareCancelOrderRequest)},
  { 83, -1, sizeof(::api::v1::PrepareAmendOrderRequest)},
  { 89, -1, sizeof(::api::v1::AssetsRequest)},
  { 94, -1, sizeof(::api::v1::AssetsResponse)},
  { 100, -1, sizeof(::api::v1::AssetByIDRequest)},
  { 106, -1, sizeof(::api::v1::AssetByIDResponse)},
  { 112, -1, sizeof(::api::v1::GetNodeSignaturesAggregateRequest)},
  { 118, -1, sizeof(::api::v1::GetNodeSignaturesAggregateResponse)},
  { 124, -1, sizeof(::api::v1::OptionalProposalState)},
  { 130, -1, sizeof(::api::v1::GetProposalsRequest)},
  { 136, -1, sizeof(::api::v1::GetProposalsResponse)},
  { 142, -1, sizeof(::api::v1::GetProposalsByPartyRequest)},
  { 149, -1, sizeof(::api::v1::GetProposalsByPartyResponse)},
  { 155, -1, sizeof(::api::v1::GetVotesByPartyRequest)},
  { 161, -1, sizeof(::api::v1::GetVotesByPartyResponse)},
  { 167, -1, sizeof(::api::v1::GetNewMarketProposalsRequest)},
  { 173, -1, sizeof(::api::v1::GetNewMarketProposalsResponse)},
  { 179, -1, sizeof(::api::v1::GetUpdateMarketProposalsRequest)},
  { 186, -1, sizeof(::api::v1::GetUpdateMarketProposalsResponse)},
  { 192, -1, sizeof(::api::v1::GetNetworkParametersProposalsRequest)},
  { 198, -1, sizeof(::api::v1::GetNetworkParametersProposalsResponse)},
  { 204, -1, sizeof(::api::v1::GetNewAssetProposalsRequest)},
  { 210, -1, sizeof(::api::v1::GetNewAssetProposalsResponse)},
  { 216, -1, sizeof(::api::v1::GetProposalByIDRequest)},
  { 222, -1, sizeof(::api::v1::GetProposalByIDResponse)},
  { 228, -1, sizeof(::api::v1::GetProposalByReferenceRequest)},
  { 234, -1, sizeof(::api::v1::GetProposalByReferenceResponse)},
  { 240, -1, sizeof(::api::v1::ObserveGovernanceRequest)},
  { 245, -1, sizeof(::api::v1::ObserveGovernanceResponse)},
  { 251, -1, sizeof(::api::v1::ObservePartyProposalsRequest)},
  { 257, -1, sizeof(::api::v1::ObservePartyProposalsResponse)},
  { 263, -1, sizeof(::api::v1::ObserveProposalVotesRequest)},
  { 269, -1, sizeof(::api::v1::ObserveProposalVotesResponse)},
  { 275, -1, sizeof(::api::v1::ObservePartyVotesRequest)},
  { 281, -1, sizeof(::api::v1::ObservePartyVotesResponse)},
  { 287, -1, sizeof(::api::v1::MarginLevelsSubscribeRequest)},
  { 294, -1, sizeof(::api::v1::MarginLevelsSubscribeResponse)},
  { 300, -1, sizeof(::api::v1::MarginLevelsRequest)},
  { 307, -1, sizeof(::api::v1::MarginLevelsResponse)},
  { 313, -1, sizeof(::api::v1::MarketsDataSubscribeRequest)},
  { 319, -1, sizeof(::api::v1::MarketsDataSubscribeResponse)},
  { 325, -1, sizeof(::api::v1::MarketDataByIDRequest)},
  { 331, -1, sizeof(::api::v1::MarketDataByIDResponse)},
  { 337, -1, sizeof(::api::v1::MarketsDataRequest)},
  { 342, -1, sizeof(::api::v1::MarketsDataResponse)},
  { 348, -1, sizeof(::api::v1::LastTradeRequest)},
  { 354, -1, sizeof(::api::v1::LastTradeResponse)},
  { 360, -1, sizeof(::api::v1::MarketByIDRequest)},
  { 366, -1, sizeof(::api::v1::MarketByIDResponse)},
  { 372, -1, sizeof(::api::v1::PartyByIDRequest)},
  { 378, -1, sizeof(::api::v1::PartyByIDResponse)},
  { 384, -1, sizeof(::api::v1::PartiesRequest)},
  { 389, -1, sizeof(::api::v1::PartiesResponse)},
  { 395, -1, sizeof(::api::v1::TradesByPartyRequest)},
  { 403, -1, sizeof(::api::v1::TradesByPartyResponse)},
  { 409, -1, sizeof(::api::v1::TradesByOrderRequest)},
  { 415, -1, sizeof(::api::v1::TradesByOrderResponse)},
  { 421, -1, sizeof(::api::v1::AccountsSubscribeRequest)},
  { 430, -1, sizeof(::api::v1::AccountsSubscribeResponse)},
  { 436, -1, sizeof(::api::v1::OrdersSubscribeRequest)},
  { 443, -1, sizeof(::api::v1::TradesSubscribeRequest)},
  { 450, -1, sizeof(::api::v1::CandlesSubscribeRequest)},
  { 457, -1, sizeof(::api::v1::CandlesSubscribeResponse)},
  { 463, -1, sizeof(::api::v1::MarketDepthSubscribeRequest)},
  { 469, -1, sizeof(::api::v1::MarketDepthSubscribeResponse)},
  { 475, -1, sizeof(::api::v1::MarketDepthUpdatesSubscribeRequest)},
  { 481, -1, sizeof(::api::v1::MarketDepthUpdatesSubscribeResponse)},
  { 487, -1, sizeof(::api::v1::PositionsSubscribeRequest)},
  { 494, -1, sizeof(::api::v1::PositionsSubscribeResponse)},
  { 500, -1, sizeof(::api::v1::OrdersByMarketRequest)},
  { 507, -1, sizeof(::api::v1::OrdersByMarketResponse)},
  { 513, -1, sizeof(::api::v1::OrdersByPartyRequest)},
  { 520, -1, sizeof(::api::v1::OrdersByPartyResponse)},
  { 526, -1, sizeof(::api::v1::OrderByMarketAndIDRequest)},
  { 533, -1, sizeof(::api::v1::OrderByMarketAndIDResponse)},
  { 539, -1, sizeof(::api::v1::OrderByReferenceRequest)},
  { 545, -1, sizeof(::api::v1::OrderByReferenceResponse)},
  { 551, -1, sizeof(::api::v1::MarketsRequest)},
  { 556, -1, sizeof(::api::v1::MarketsResponse)},
  { 562, -1, sizeof(::api::v1::CandlesRequest)},
  { 570, -1, sizeof(::api::v1::CandlesResponse)},
  { 576, -1, sizeof(::api::v1::MarketDepthRequest)},
  { 583, -1, sizeof(::api::v1::MarketDepthResponse)},
  { 593, -1, sizeof(::api::v1::TradesByMarketRequest)},
  { 600, -1, sizeof(::api::v1::TradesByMarketResponse)},
  { 606, -1, sizeof(::api::v1::PositionsByPartyRequest)},
  { 613, -1, sizeof(::api::v1::PositionsByPartyResponse)},
  { 619, -1, sizeof(::api::v1::GetVegaTimeRequest)},
  { 624, -1, sizeof(::api::v1::GetVegaTimeResponse)},
  { 630, -1, sizeof(::api::v1::Pagination)},
  { 638, -1, sizeof(::api::v1::OrdersSubscribeResponse)},
  { 644, -1, sizeof(::api::v1::TradesSubscribeResponse)},
  { 650, -1, sizeof(::api::v1::TransferResponsesSubscribeRequest)},
  { 655, -1, sizeof(::api::v1::TransferResponsesSubscribeResponse)},
  { 661, -1, sizeof(::api::v1::PartyAccountsRequest)},
  { 670, -1, sizeof(::api::v1::PartyAccountsResponse)},
  { 676, -1, sizeof(::api::v1::MarketAccountsRequest)},
  { 683, -1, sizeof(::api::v1::MarketAccountsResponse)},
  { 689, -1, sizeof(::api::v1::FeeInfrastructureAccountsRequest)},
  { 695, -1, sizeof(::api::v1::FeeInfrastructureAccountsResponse)},
  { 701, -1, sizeof(::api::v1::PrepareProposalSubmissionRequest)},
  { 707, -1, sizeof(::api::v1::PrepareProposalSubmissionResponse)},
  { 714, -1, sizeof(::api::v1::PrepareVoteSubmissionRequest)},
  { 720, -1, sizeof(::api::v1::PrepareVoteSubmissionResponse)},
  { 727, -1, sizeof(::api::v1::PrepareLiquidityProvisionRequest)},
  { 733, -1, sizeof(::api::v1::PrepareLiquidityProvisionResponse)},
  { 739, -1, sizeof(::api::v1::OrderByIDRequest)},
  { 746, -1, sizeof(::api::v1::OrderByIDResponse)},
  { 752, -1, sizeof(::api::v1::OrderVersionsByIDRequest)},
  { 759, -1, sizeof(::api::v1::OrderVersionsByIDResponse)},
  { 765, -1, sizeof(::api::v1::EstimateFeeRequest)},
  { 771, -1, sizeof(::api::v1::EstimateFeeResponse)},
  { 777, -1, sizeof(::api::v1::EstimateMarginRequest)},
  { 783, -1, sizeof(::api::v1::EstimateMarginResponse)},
  { 789, -1, sizeof(::api::v1::ObserveEventBusRequest)},
  { 798, -1, sizeof(::api::v1::ObserveEventBusResponse)},
  { 804, -1, sizeof(::api::v1::StatisticsRequest)},
  { 809, -1, sizeof(::api::v1::StatisticsResponse)},
  { 815, -1, sizeof(::api::v1::WithdrawalsRequest)},
  { 821, -1, sizeof(::api::v1::WithdrawalsResponse)},
  { 827, -1, sizeof(::api::v1::WithdrawalRequest)},
  { 833, -1, sizeof(::api::v1::WithdrawalResponse)},
  { 839, -1, sizeof(::api::v1::ERC20WithdrawalApprovalRequest)},
  { 845, -1, sizeof(::api::v1::ERC20WithdrawalApprovalResponse)},
  { 855, -1, sizeof(::api::v1::DepositsRequest)},
  { 861, -1, sizeof(::api::v1::DepositsResponse)},
  { 867, -1, sizeof(::api::v1::DepositRequest)},
  { 873, -1, sizeof(::api::v1::DepositResponse)},
  { 879, -1, sizeof(::api::v1::NetworkParametersRequest)},
  { 884, -1, sizeof(::api::v1::NetworkParametersResponse)},
  { 890, -1, sizeof(::api::v1::LiquidityProvisionsRequest)},
  { 897, -1, sizeof(::api::v1::LiquidityProvisionsResponse)},
  { 903, -1, sizeof(::api::v1::OracleSpecRequest)},
  { 909, -1, sizeof(::api::v1::OracleSpecResponse)},
  { 915, -1, sizeof(::api::v1::OracleSpecsRequest)},
  { 920, -1, sizeof(::api::v1::OracleSpecsResponse)},
  { 926, -1, sizeof(::api::v1::OracleDataBySpecRequest)},
  { 932, -1, sizeof(::api::v1::OracleDataBySpecResponse)},
  { 938, -1, sizeof(::api::v1::LastBlockHeightRequest)},
  { 943, -1, sizeof(::api::v1::LastBlockHeightResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PropagateChainEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PropagateChainEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_SubmitTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_SubmitTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_SubmitTransactionV2Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_SubmitTransactionV2Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareWithdrawRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareWithdrawResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareSubmitOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareCancelOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareAmendOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareSubmitOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareCancelOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareAmendOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_AssetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_AssetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_AssetByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_AssetByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNodeSignaturesAggregateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNodeSignaturesAggregateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OptionalProposalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalsByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalsByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetVotesByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetVotesByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNewMarketProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNewMarketProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetUpdateMarketProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetUpdateMarketProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNetworkParametersProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNetworkParametersProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNewAssetProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetNewAssetProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalByReferenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetProposalByReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObserveGovernanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObserveGovernanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObservePartyProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObservePartyProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObserveProposalVotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObserveProposalVotesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObservePartyVotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObservePartyVotesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarginLevelsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarginLevelsSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarginLevelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarginLevelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketsDataSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketsDataSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDataByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDataByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketsDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketsDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_LastTradeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_LastTradeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PartyByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PartyByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PartiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PartiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesByOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesByOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_AccountsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_AccountsSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrdersSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_CandlesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_CandlesSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDepthSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDepthSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDepthUpdatesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDepthUpdatesSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PositionsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PositionsSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrdersByMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrdersByMarketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrdersByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrdersByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderByMarketAndIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderByMarketAndIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderByReferenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderByReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_CandlesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_CandlesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDepthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketDepthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesByMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesByMarketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PositionsByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PositionsByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetVegaTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_GetVegaTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_Pagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrdersSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TradesSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TransferResponsesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_TransferResponsesSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PartyAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PartyAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_MarketAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_FeeInfrastructureAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_FeeInfrastructureAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareProposalSubmissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareProposalSubmissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareVoteSubmissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareVoteSubmissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareLiquidityProvisionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_PrepareLiquidityProvisionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderVersionsByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OrderVersionsByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_EstimateFeeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_EstimateFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_EstimateMarginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_EstimateMarginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObserveEventBusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ObserveEventBusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_StatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_StatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_WithdrawalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_WithdrawalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_WithdrawalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_WithdrawalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ERC20WithdrawalApprovalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_ERC20WithdrawalApprovalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_DepositsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_DepositsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_DepositRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_DepositResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_NetworkParametersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_NetworkParametersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_LiquidityProvisionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_LiquidityProvisionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OracleSpecRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OracleSpecResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OracleSpecsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OracleSpecsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OracleDataBySpecRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_OracleDataBySpecResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_LastBlockHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::v1::_LastBlockHeightResponse_default_instance_),
};

const char descriptor_table_protodef_api_2ftrading_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021api/trading.proto\022\006api.v1\032\nvega.proto\032"
  "\rmarkets.proto\032\020governance.proto\032\014assets"
  ".proto\032\026events/v1/events.proto\032\025oracles/"
  "v1/spec.proto\032\025oracles/v1/data.proto\032\032co"
  "mmands/v1/commands.proto\032\035commands/v1/tr"
  "ansaction.proto\032$commands/v1/validator_c"
  "ommands.proto\0326github.com/mwitkow/go-pro"
  "to-validators/validator.proto\"\203\001\n\032Propag"
  "ateChainEventRequest\022.\n\003evt\030\001 \001(\0132\034.vega"
  ".commands.v1.ChainEventR\003evt\022\027\n\007pub_key\030"
  "\002 \001(\tR\006pubKey\022\034\n\tsignature\030\003 \001(\014R\tsignat"
  "ure\"7\n\033PropagateChainEventResponse\022\030\n\007su"
  "ccess\030\001 \001(\010R\007success\"\307\001\n\030SubmitTransacti"
  "onRequest\022\"\n\002tx\030\001 \001(\0132\022.vega.SignedBundl"
  "eR\002tx\0229\n\004type\030\002 \001(\0162%.api.v1.SubmitTrans"
  "actionRequest.TypeR\004type\"L\n\004Type\022\024\n\020TYPE"
  "_UNSPECIFIED\020\000\022\016\n\nTYPE_ASYNC\020\001\022\r\n\tTYPE_S"
  "YNC\020\002\022\017\n\013TYPE_COMMIT\020\003\"5\n\031SubmitTransact"
  "ionResponse\022\030\n\007success\030\001 \001(\010R\007success\"\326\001"
  "\n\032SubmitTransactionV2Request\022-\n\002tx\030\001 \001(\013"
  "2\035.vega.commands.v1.TransactionR\002tx\022;\n\004t"
  "ype\030\002 \001(\0162\'.api.v1.SubmitTransactionV2Re"
  "quest.TypeR\004type\"L\n\004Type\022\024\n\020TYPE_UNSPECI"
  "FIED\020\000\022\016\n\nTYPE_ASYNC\020\001\022\r\n\tTYPE_SYNC\020\002\022\017\n"
  "\013TYPE_COMMIT\020\003\"7\n\033SubmitTransactionV2Res"
  "ponse\022\030\n\007success\030\001 \001(\010R\007success\"Z\n\026Prepa"
  "reWithdrawRequest\022@\n\010withdraw\030\001 \001(\0132$.ve"
  "ga.commands.v1.WithdrawSubmissionR\010withd"
  "raw\"-\n\027PrepareWithdrawResponse\022\022\n\004blob\030\001"
  " \001(\014R\004blob\"M\n\032PrepareSubmitOrderResponse"
  "\022\022\n\004blob\030\001 \001(\014R\004blob\022\033\n\tsubmit_id\030\002 \001(\tR"
  "\010submitId\"0\n\032PrepareCancelOrderResponse\022"
  "\022\n\004blob\030\001 \001(\014R\004blob\"/\n\031PrepareAmendOrder"
  "Response\022\022\n\004blob\030\001 \001(\014R\004blob\"^\n\031PrepareS"
  "ubmitOrderRequest\022A\n\nsubmission\030\001 \001(\0132!."
  "vega.commands.v1.OrderSubmissionR\nsubmis"
  "sion\"d\n\031PrepareCancelOrderRequest\022G\n\014can"
  "cellation\030\001 \001(\0132#.vega.commands.v1.Order"
  "CancellationR\014cancellation\"Z\n\030PrepareAme"
  "ndOrderRequest\022>\n\tamendment\030\001 \001(\0132 .vega"
  ".commands.v1.OrderAmendmentR\tamendment\"\017"
  "\n\rAssetsRequest\"5\n\016AssetsResponse\022#\n\006ass"
  "ets\030\001 \003(\0132\013.vega.AssetR\006assets\"*\n\020AssetB"
  "yIDRequest\022\026\n\002id\030\001 \001(\tB\006\342\337\037\002X\001R\002id\"6\n\021As"
  "setByIDResponse\022!\n\005asset\030\001 \001(\0132\013.vega.As"
  "setR\005asset\";\n!GetNodeSignaturesAggregate"
  "Request\022\026\n\002id\030\001 \001(\tB\006\342\337\037\002X\001R\002id\"e\n\"GetNo"
  "deSignaturesAggregateResponse\022\?\n\nsignatu"
  "res\030\001 \003(\0132\037.vega.commands.v1.NodeSignatu"
  "reR\nsignatures\"C\n\025OptionalProposalState\022"
  "*\n\005value\030\001 \001(\0162\024.vega.Proposal.StateR\005va"
  "lue\"\\\n\023GetProposalsRequest\022E\n\017select_in_"
  "state\030\001 \001(\0132\035.api.v1.OptionalProposalSta"
  "teR\rselectInState\"@\n\024GetProposalsRespons"
  "e\022(\n\004data\030\001 \003(\0132\024.vega.GovernanceDataR\004d"
  "ata\"\206\001\n\032GetProposalsByPartyRequest\022!\n\010pa"
  "rty_id\030\001 \001(\tB\006\342\337\037\002X\001R\007partyId\022E\n\017select_"
  "in_state\030\002 \001(\0132\035.api.v1.OptionalProposal"
  "StateR\rselectInState\"G\n\033GetProposalsByPa"
  "rtyResponse\022(\n\004data\030\001 \003(\0132\024.vega.Governa"
  "nceDataR\004data\";\n\026GetVotesByPartyRequest\022"
  "!\n\010party_id\030\001 \001(\tB\006\342\337\037\002X\001R\007partyId\";\n\027Ge"
  "tVotesByPartyResponse\022 \n\005votes\030\001 \003(\0132\n.v"
  "ega.VoteR\005votes\"e\n\034GetNewMarketProposals"
  "Request\022E\n\017select_in_state\030\001 \001(\0132\035.api.v"
  "1.OptionalProposalStateR\rselectInState\"I"
  "\n\035GetNewMarketProposalsResponse\022(\n\004data\030"
  "\001 \003(\0132\024.vega.GovernanceDataR\004data\"\215\001\n\037Ge"
  "tUpdateMarketProposalsRequest\022#\n\tmarket_"
  "id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketId\022E\n\017select_in_"
  "state\030\002 \001(\0132\035.api.v1.OptionalProposalSta"
  "teR\rselectInState\"L\n GetUpdateMarketProp"
  "osalsResponse\022(\n\004data\030\001 \003(\0132\024.vega.Gover"
  "nanceDataR\004data\"m\n$GetNetworkParametersP"
  "roposalsRequest\022E\n\017select_in_state\030\001 \001(\013"
  "2\035.api.v1.OptionalProposalStateR\rselectI"
  "nState\"Q\n%GetNetworkParametersProposalsR"
  "esponse\022(\n\004data\030\001 \003(\0132\024.vega.GovernanceD"
  "ataR\004data\"d\n\033GetNewAssetProposalsRequest"
  "\022E\n\017select_in_state\030\001 \001(\0132\035.api.v1.Optio"
  "nalProposalStateR\rselectInState\"H\n\034GetNe"
  "wAssetProposalsResponse\022(\n\004data\030\001 \003(\0132\024."
  "vega.GovernanceDataR\004data\"A\n\026GetProposal"
  "ByIDRequest\022\'\n\013proposal_id\030\001 \001(\tB\006\342\337\037\002X\001"
  "R\nproposalId\"C\n\027GetProposalByIDResponse\022"
  "(\n\004data\030\001 \001(\0132\024.vega.GovernanceDataR\004dat"
  "a\"E\n\035GetProposalByReferenceRequest\022$\n\tre"
  "ference\030\001 \001(\tB\006\342\337\037\002X\001R\treference\"J\n\036GetP"
  "roposalByReferenceResponse\022(\n\004data\030\001 \001(\013"
  "2\024.vega.GovernanceDataR\004data\"\032\n\030ObserveG"
  "overnanceRequest\"E\n\031ObserveGovernanceRes"
  "ponse\022(\n\004data\030\001 \001(\0132\024.vega.GovernanceDat"
  "aR\004data\"A\n\034ObservePartyProposalsRequest\022"
  "!\n\010party_id\030\001 \001(\tB\006\342\337\037\002X\001R\007partyId\"I\n\035Ob"
  "servePartyProposalsResponse\022(\n\004data\030\001 \001("
  "\0132\024.vega.GovernanceDataR\004data\"F\n\033Observe"
  "ProposalVotesRequest\022\'\n\013proposal_id\030\001 \001("
  "\tB\006\342\337\037\002X\001R\nproposalId\">\n\034ObserveProposal"
  "VotesResponse\022\036\n\004vote\030\001 \001(\0132\n.vega.VoteR"
  "\004vote\"=\n\030ObservePartyVotesRequest\022!\n\010par"
  "ty_id\030\001 \001(\tB\006\342\337\037\002X\001R\007partyId\";\n\031ObserveP"
  "artyVotesResponse\022\036\n\004vote\030\001 \001(\0132\n.vega.V"
  "oteR\004vote\"^\n\034MarginLevelsSubscribeReques"
  "t\022!\n\010party_id\030\001 \001(\tB\006\342\337\037\002X\001R\007partyId\022\033\n\t"
  "market_id\030\002 \001(\tR\010marketId\"X\n\035MarginLevel"
  "sSubscribeResponse\0227\n\rmargin_levels\030\001 \001("
  "\0132\022.vega.MarginLevelsR\014marginLevels\"U\n\023M"
  "arginLevelsRequest\022!\n\010party_id\030\001 \001(\tB\006\342\337"
  "\037\002X\001R\007partyId\022\033\n\tmarket_id\030\002 \001(\tR\010market"
  "Id\"O\n\024MarginLevelsResponse\0227\n\rmargin_lev"
  "els\030\001 \003(\0132\022.vega.MarginLevelsR\014marginLev"
  "els\":\n\033MarketsDataSubscribeRequest\022\033\n\tma"
  "rket_id\030\001 \001(\tR\010marketId\"Q\n\034MarketsDataSu"
  "bscribeResponse\0221\n\013market_data\030\001 \001(\0132\020.v"
  "ega.MarketDataR\nmarketData\"<\n\025MarketData"
  "ByIDRequest\022#\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010"
  "marketId\"K\n\026MarketDataByIDResponse\0221\n\013ma"
  "rket_data\030\001 \001(\0132\020.vega.MarketDataR\nmarke"
  "tData\"\024\n\022MarketsDataRequest\"J\n\023MarketsDa"
  "taResponse\0223\n\014markets_data\030\001 \003(\0132\020.vega."
  "MarketDataR\013marketsData\"7\n\020LastTradeRequ"
  "est\022#\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketId"
  "\"6\n\021LastTradeResponse\022!\n\005trade\030\001 \001(\0132\013.v"
  "ega.TradeR\005trade\"8\n\021MarketByIDRequest\022#\n"
  "\tmarket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketId\":\n\022Ma"
  "rketByIDResponse\022$\n\006market\030\001 \001(\0132\014.vega."
  "MarketR\006market\"5\n\020PartyByIDRequest\022!\n\010pa"
  "rty_id\030\001 \001(\tB\006\342\337\037\002X\001R\007partyId\"6\n\021PartyBy"
  "IDResponse\022!\n\005party\030\001 \001(\0132\013.vega.PartyR\005"
  "party\"\020\n\016PartiesRequest\"8\n\017PartiesRespon"
  "se\022%\n\007parties\030\001 \003(\0132\013.vega.PartyR\007partie"
  "s\"\202\001\n\024TradesByPartyRequest\022\031\n\010party_id\030\001"
  " \001(\tR\007partyId\022\033\n\tmarket_id\030\002 \001(\tR\010market"
  "Id\0222\n\npagination\030\003 \001(\0132\022.api.v1.Paginati"
  "onR\npagination\"<\n\025TradesByPartyResponse\022"
  "#\n\006trades\030\001 \003(\0132\013.vega.TradeR\006trades\"1\n\024"
  "TradesByOrderRequest\022\031\n\010order_id\030\001 \001(\tR\007"
  "orderId\"<\n\025TradesByOrderResponse\022#\n\006trad"
  "es\030\001 \003(\0132\013.vega.TradeR\006trades\"\217\001\n\030Accoun"
  "tsSubscribeRequest\022\033\n\tmarket_id\030\001 \001(\tR\010m"
  "arketId\022\031\n\010party_id\030\002 \001(\tR\007partyId\022\024\n\005as"
  "set\030\003 \001(\tR\005asset\022%\n\004type\030\004 \001(\0162\021.vega.Ac"
  "countTypeR\004type\"D\n\031AccountsSubscribeResp"
  "onse\022\'\n\007account\030\001 \001(\0132\r.vega.AccountR\007ac"
  "count\"P\n\026OrdersSubscribeRequest\022\033\n\tmarke"
  "t_id\030\001 \001(\tR\010marketId\022\031\n\010party_id\030\002 \001(\tR\007"
  "partyId\"P\n\026TradesSubscribeRequest\022\033\n\tmar"
  "ket_id\030\001 \001(\tR\010marketId\022\031\n\010party_id\030\002 \001(\t"
  "R\007partyId\"j\n\027CandlesSubscribeRequest\022#\n\t"
  "market_id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketId\022*\n\010int"
  "erval\030\002 \001(\0162\016.vega.IntervalR\010interval\"@\n"
  "\030CandlesSubscribeResponse\022$\n\006candle\030\001 \001("
  "\0132\014.vega.CandleR\006candle\"B\n\033MarketDepthSu"
  "bscribeRequest\022#\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002X"
  "\001R\010marketId\"T\n\034MarketDepthSubscribeRespo"
  "nse\0224\n\014market_depth\030\001 \001(\0132\021.vega.MarketD"
  "epthR\013marketDepth\"I\n\"MarketDepthUpdatesS"
  "ubscribeRequest\022#\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002"
  "X\001R\010marketId\"V\n#MarketDepthUpdatesSubscr"
  "ibeResponse\022/\n\006update\030\001 \001(\0132\027.vega.Marke"
  "tDepthUpdateR\006update\"S\n\031PositionsSubscri"
  "beRequest\022\031\n\010party_id\030\001 \001(\tR\007partyId\022\033\n\t"
  "market_id\030\002 \001(\tR\010marketId\"H\n\032PositionsSu"
  "bscribeResponse\022*\n\010position\030\001 \001(\0132\016.vega"
  ".PositionR\010position\"p\n\025OrdersByMarketReq"
  "uest\022#\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketI"
  "d\0222\n\npagination\030\002 \001(\0132\022.api.v1.Paginatio"
  "nR\npagination\"=\n\026OrdersByMarketResponse\022"
  "#\n\006orders\030\001 \003(\0132\013.vega.OrderR\006orders\"m\n\024"
  "OrdersByPartyRequest\022!\n\010party_id\030\001 \001(\tB\006"
  "\342\337\037\002X\001R\007partyId\0222\n\npagination\030\002 \001(\0132\022.ap"
  "i.v1.PaginationR\npagination\"<\n\025OrdersByP"
  "artyResponse\022#\n\006orders\030\001 \003(\0132\013.vega.Orde"
  "rR\006orders\"c\n\031OrderByMarketAndIDRequest\022#"
  "\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketId\022!\n\010o"
  "rder_id\030\002 \001(\tB\006\342\337\037\002X\001R\007orderId\"\?\n\032OrderB"
  "yMarketAndIDResponse\022!\n\005order\030\001 \001(\0132\013.ve"
  "ga.OrderR\005order\"\?\n\027OrderByReferenceReque"
  "st\022$\n\treference\030\001 \001(\tB\006\342\337\037\002X\001R\treference"
  "\"=\n\030OrderByReferenceResponse\022!\n\005order\030\001 "
  "\001(\0132\013.vega.OrderR\005order\"\020\n\016MarketsReques"
  "t\"9\n\017MarketsResponse\022&\n\007markets\030\001 \003(\0132\014."
  "vega.MarketR\007markets\"\222\001\n\016CandlesRequest\022"
  "#\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketId\022/\n\017"
  "since_timestamp\030\002 \001(\003B\006\342\337\037\002\020\000R\016sinceTime"
  "stamp\022*\n\010interval\030\003 \001(\0162\016.vega.IntervalR"
  "\010interval\"9\n\017CandlesResponse\022&\n\007candles\030"
  "\001 \003(\0132\014.vega.CandleR\007candles\"V\n\022MarketDe"
  "pthRequest\022#\n\tmarket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010m"
  "arketId\022\033\n\tmax_depth\030\002 \001(\004R\010maxDepth\"\321\001\n"
  "\023MarketDepthResponse\022\033\n\tmarket_id\030\001 \001(\tR"
  "\010marketId\022\"\n\003buy\030\002 \003(\0132\020.vega.PriceLevel"
  "R\003buy\022$\n\004sell\030\003 \003(\0132\020.vega.PriceLevelR\004s"
  "ell\022*\n\nlast_trade\030\004 \001(\0132\013.vega.TradeR\tla"
  "stTrade\022\'\n\017sequence_number\030\005 \001(\004R\016sequen"
  "ceNumber\"p\n\025TradesByMarketRequest\022#\n\tmar"
  "ket_id\030\001 \001(\tB\006\342\337\037\002X\001R\010marketId\0222\n\npagina"
  "tion\030\002 \001(\0132\022.api.v1.PaginationR\npaginati"
  "on\"=\n\026TradesByMarketResponse\022#\n\006trades\030\001"
  " \003(\0132\013.vega.TradeR\006trades\"Y\n\027PositionsBy"
  "PartyRequest\022!\n\010party_id\030\001 \001(\tB\006\342\337\037\002X\001R\007"
  "partyId\022\033\n\tmarket_id\030\002 \001(\tR\010marketId\"H\n\030"
  "PositionsByPartyResponse\022,\n\tpositions\030\001 "
  "\003(\0132\016.vega.PositionR\tpositions\"\024\n\022GetVeg"
  "aTimeRequest\"3\n\023GetVegaTimeResponse\022\034\n\tt"
  "imestamp\030\001 \001(\003R\ttimestamp\"V\n\nPagination\022"
  "\022\n\004skip\030\001 \001(\004R\004skip\022\024\n\005limit\030\002 \001(\004R\005limi"
  "t\022\036\n\ndescending\030\003 \001(\010R\ndescending\">\n\027Ord"
  "ersSubscribeResponse\022#\n\006orders\030\001 \003(\0132\013.v"
  "ega.OrderR\006orders\">\n\027TradesSubscribeResp"
  "onse\022#\n\006trades\030\001 \003(\0132\013.vega.TradeR\006trade"
  "s\"#\n!TransferResponsesSubscribeRequest\"X"
  "\n\"TransferResponsesSubscribeResponse\0222\n\010"
  "response\030\001 \001(\0132\026.vega.TransferResponseR\010"
  "response\"\213\001\n\024PartyAccountsRequest\022\031\n\010par"
  "ty_id\030\001 \001(\tR\007partyId\022\033\n\tmarket_id\030\002 \001(\tR"
  "\010marketId\022%\n\004type\030\003 \001(\0162\021.vega.AccountTy"
  "peR\004type\022\024\n\005asset\030\004 \001(\tR\005asset\"B\n\025PartyA"
  "ccountsResponse\022)\n\010accounts\030\001 \003(\0132\r.vega"
  ".AccountR\010accounts\"J\n\025MarketAccountsRequ"
  "est\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022\024\n\005asse"
  "t\030\002 \001(\tR\005asset\"C\n\026MarketAccountsResponse"
  "\022)\n\010accounts\030\001 \003(\0132\r.vega.AccountR\010accou"
  "nts\"8\n FeeInfrastructureAccountsRequest\022"
  "\024\n\005asset\030\001 \001(\tR\005asset\"N\n!FeeInfrastructu"
  "reAccountsResponse\022)\n\010accounts\030\001 \003(\0132\r.v"
  "ega.AccountR\010accounts\"h\n PrepareProposal"
  "SubmissionRequest\022D\n\nsubmission\030\001 \001(\0132$."
  "vega.commands.v1.ProposalSubmissionR\nsub"
  "mission\"}\n!PrepareProposalSubmissionResp"
  "onse\022\022\n\004blob\030\001 \001(\014R\004blob\022D\n\nsubmission\030\002"
  " \001(\0132$.vega.commands.v1.ProposalSubmissi"
  "onR\nsubmission\"h\n\034PrepareVoteSubmissionR"
  "equest\022H\n\nsubmission\030\001 \001(\0132 .vega.comman"
  "ds.v1.VoteSubmissionB\006\342\337\037\002 \001R\nsubmission"
  "\"u\n\035PrepareVoteSubmissionResponse\022\022\n\004blo"
  "b\030\001 \001(\014R\004blob\022@\n\nsubmission\030\002 \001(\0132 .vega"
  ".commands.v1.VoteSubmissionR\nsubmission\""
  "z\n PrepareLiquidityProvisionRequest\022V\n\ns"
  "ubmission\030\001 \001(\0132..vega.commands.v1.Liqui"
  "dityProvisionSubmissionB\006\342\337\037\002 \001R\nsubmiss"
  "ion\"7\n!PrepareLiquidityProvisionResponse"
  "\022\022\n\004blob\030\001 \001(\014R\004blob\"O\n\020OrderByIDRequest"
  "\022!\n\010order_id\030\001 \001(\tB\006\342\337\037\002 \001R\007orderId\022\030\n\007v"
  "ersion\030\002 \001(\004R\007version\"6\n\021OrderByIDRespon"
  "se\022!\n\005order\030\001 \001(\0132\013.vega.OrderR\005order\"q\n"
  "\030OrderVersionsByIDRequest\022!\n\010order_id\030\001 "
  "\001(\tB\006\342\337\037\002 \001R\007orderId\0222\n\npagination\030\002 \001(\013"
  "2\022.api.v1.PaginationR\npagination\"@\n\031Orde"
  "rVersionsByIDResponse\022#\n\006orders\030\001 \003(\0132\013."
  "vega.OrderR\006orders\"7\n\022EstimateFeeRequest"
  "\022!\n\005order\030\001 \001(\0132\013.vega.OrderR\005order\"2\n\023E"
  "stimateFeeResponse\022\033\n\003fee\030\002 \001(\0132\t.vega.F"
  "eeR\003fee\":\n\025EstimateMarginRequest\022!\n\005orde"
  "r\030\001 \001(\0132\013.vega.OrderR\005order\"Q\n\026EstimateM"
  "arginResponse\0227\n\rmargin_levels\030\002 \001(\0132\022.v"
  "ega.MarginLevelsR\014marginLevels\"\241\001\n\026Obser"
  "veEventBusRequest\0220\n\004type\030\001 \003(\0162\034.vega.e"
  "vents.v1.BusEventTypeR\004type\022\033\n\tmarket_id"
  "\030\002 \001(\tR\010marketId\022\031\n\010party_id\030\003 \001(\tR\007part"
  "yId\022\035\n\nbatch_size\030\004 \001(\003R\tbatchSize\"K\n\027Ob"
  "serveEventBusResponse\0220\n\006events\030\001 \003(\0132\030."
  "vega.events.v1.BusEventR\006events\"\023\n\021Stati"
  "sticsRequest\"F\n\022StatisticsResponse\0220\n\nst"
  "atistics\030\001 \001(\0132\020.vega.StatisticsR\nstatis"
  "tics\"7\n\022WithdrawalsRequest\022!\n\010party_id\030\001"
  " \001(\tB\006\342\337\037\002X\001R\007partyId\"I\n\023WithdrawalsResp"
  "onse\0222\n\013withdrawals\030\001 \003(\0132\020.vega.Withdra"
  "walR\013withdrawals\"+\n\021WithdrawalRequest\022\026\n"
  "\002id\030\001 \001(\tB\006\342\337\037\002X\001R\002id\"F\n\022WithdrawalRespo"
  "nse\0220\n\nwithdrawal\030\001 \001(\0132\020.vega.Withdrawa"
  "lR\nwithdrawal\"M\n\036ERC20WithdrawalApproval"
  "Request\022+\n\rwithdrawal_id\030\001 \001(\tB\006\342\337\037\002X\001R\014"
  "withdrawalId\"\252\001\n\037ERC20WithdrawalApproval"
  "Response\022!\n\014asset_source\030\001 \001(\tR\013assetSou"
  "rce\022\026\n\006amount\030\002 \001(\tR\006amount\022\026\n\006expiry\030\003 "
  "\001(\003R\006expiry\022\024\n\005nonce\030\004 \001(\tR\005nonce\022\036\n\nsig"
  "natures\030\005 \001(\tR\nsignatures\"4\n\017DepositsReq"
  "uest\022!\n\010party_id\030\001 \001(\tB\006\342\337\037\002X\001R\007partyId\""
  "=\n\020DepositsResponse\022)\n\010deposits\030\001 \003(\0132\r."
  "vega.DepositR\010deposits\"(\n\016DepositRequest"
  "\022\026\n\002id\030\001 \001(\tB\006\342\337\037\002X\001R\002id\":\n\017DepositRespo"
  "nse\022\'\n\007deposit\030\001 \001(\0132\r.vega.DepositR\007dep"
  "osit\"\032\n\030NetworkParametersRequest\"b\n\031Netw"
  "orkParametersResponse\022E\n\022network_paramet"
  "ers\030\001 \003(\0132\026.vega.NetworkParameterR\021netwo"
  "rkParameters\"J\n\032LiquidityProvisionsReque"
  "st\022\026\n\006market\030\001 \001(\tR\006market\022\024\n\005party\030\002 \001("
  "\tR\005party\"j\n\033LiquidityProvisionsResponse\022"
  "K\n\024liquidity_provisions\030\001 \003(\0132\030.vega.Liq"
  "uidityProvisionR\023liquidityProvisions\"+\n\021"
  "OracleSpecRequest\022\026\n\002id\030\001 \001(\tB\006\342\337\037\002X\001R\002i"
  "d\"M\n\022OracleSpecResponse\0227\n\013oracle_spec\030\001"
  " \001(\0132\026.oracles.v1.OracleSpecR\noracleSpec"
  "\"\024\n\022OracleSpecsRequest\"P\n\023OracleSpecsRes"
  "ponse\0229\n\014oracle_specs\030\001 \003(\0132\026.oracles.v1"
  ".OracleSpecR\013oracleSpecs\"1\n\027OracleDataBy"
  "SpecRequest\022\026\n\002id\030\001 \001(\tB\006\342\337\037\002X\001R\002id\"S\n\030O"
  "racleDataBySpecResponse\0227\n\013oracle_data\030\001"
  " \003(\0132\026.oracles.v1.OracleDataR\noracleData"
  "\"\030\n\026LastBlockHeightRequest\"1\n\027LastBlockH"
  "eightResponse\022\026\n\006height\030\001 \001(\004R\006height2\334\007"
  "\n\016TradingService\022[\n\022PrepareSubmitOrder\022!"
  ".api.v1.PrepareSubmitOrderRequest\032\".api."
  "v1.PrepareSubmitOrderResponse\022[\n\022Prepare"
  "CancelOrder\022!.api.v1.PrepareCancelOrderR"
  "equest\032\".api.v1.PrepareCancelOrderRespon"
  "se\022X\n\021PrepareAmendOrder\022 .api.v1.Prepare"
  "AmendOrderRequest\032!.api.v1.PrepareAmendO"
  "rderResponse\022R\n\017PrepareWithdraw\022\036.api.v1"
  ".PrepareWithdrawRequest\032\037.api.v1.Prepare"
  "WithdrawResponse\022X\n\021SubmitTransaction\022 ."
  "api.v1.SubmitTransactionRequest\032!.api.v1"
  ".SubmitTransactionResponse\022^\n\023SubmitTran"
  "sactionV2\022\".api.v1.SubmitTransactionV2Re"
  "quest\032#.api.v1.SubmitTransactionV2Respon"
  "se\022p\n\031PrepareProposalSubmission\022(.api.v1"
  ".PrepareProposalSubmissionRequest\032).api."
  "v1.PrepareProposalSubmissionResponse\022d\n\025"
  "PrepareVoteSubmission\022$.api.v1.PrepareVo"
  "teSubmissionRequest\032%.api.v1.PrepareVote"
  "SubmissionResponse\022^\n\023PropagateChainEven"
  "t\022\".api.v1.PropagateChainEventRequest\032#."
  "api.v1.PropagateChainEventResponse\022p\n\031Pr"
  "epareLiquidityProvision\022(.api.v1.Prepare"
  "LiquidityProvisionRequest\032).api.v1.Prepa"
  "reLiquidityProvisionResponse2\257+\n\022Trading"
  "DataService\022O\n\016MarketAccounts\022\035.api.v1.M"
  "arketAccountsRequest\032\036.api.v1.MarketAcco"
  "untsResponse\022L\n\rPartyAccounts\022\034.api.v1.P"
  "artyAccountsRequest\032\035.api.v1.PartyAccoun"
  "tsResponse\022p\n\031FeeInfrastructureAccounts\022"
  "(.api.v1.FeeInfrastructureAccountsReques"
  "t\032).api.v1.FeeInfrastructureAccountsResp"
  "onse\022:\n\007Candles\022\026.api.v1.CandlesRequest\032"
  "\027.api.v1.CandlesResponse\022O\n\016MarketDataBy"
  "ID\022\035.api.v1.MarketDataByIDRequest\032\036.api."
  "v1.MarketDataByIDResponse\022F\n\013MarketsData"
  "\022\032.api.v1.MarketsDataRequest\032\033.api.v1.Ma"
  "rketsDataResponse\022C\n\nMarketByID\022\031.api.v1"
  ".MarketByIDRequest\032\032.api.v1.MarketByIDRe"
  "sponse\022F\n\013MarketDepth\022\032.api.v1.MarketDep"
  "thRequest\032\033.api.v1.MarketDepthResponse\022:"
  "\n\007Markets\022\026.api.v1.MarketsRequest\032\027.api."
  "v1.MarketsResponse\022[\n\022OrderByMarketAndID"
  "\022!.api.v1.OrderByMarketAndIDRequest\032\".ap"
  "i.v1.OrderByMarketAndIDResponse\022U\n\020Order"
  "ByReference\022\037.api.v1.OrderByReferenceReq"
  "uest\032 .api.v1.OrderByReferenceResponse\022O"
  "\n\016OrdersByMarket\022\035.api.v1.OrdersByMarket"
  "Request\032\036.api.v1.OrdersByMarketResponse\022"
  "L\n\rOrdersByParty\022\034.api.v1.OrdersByPartyR"
  "equest\032\035.api.v1.OrdersByPartyResponse\022@\n"
  "\tOrderByID\022\030.api.v1.OrderByIDRequest\032\031.a"
  "pi.v1.OrderByIDResponse\022X\n\021OrderVersions"
  "ByID\022 .api.v1.OrderVersionsByIDRequest\032!"
  ".api.v1.OrderVersionsByIDResponse\022I\n\014Mar"
  "ginLevels\022\033.api.v1.MarginLevelsRequest\032\034"
  ".api.v1.MarginLevelsResponse\022:\n\007Parties\022"
  "\026.api.v1.PartiesRequest\032\027.api.v1.Parties"
  "Response\022@\n\tPartyByID\022\030.api.v1.PartyByID"
  "Request\032\031.api.v1.PartyByIDResponse\022U\n\020Po"
  "sitionsByParty\022\037.api.v1.PositionsByParty"
  "Request\032 .api.v1.PositionsByPartyRespons"
  "e\022@\n\tLastTrade\022\030.api.v1.LastTradeRequest"
  "\032\031.api.v1.LastTradeResponse\022O\n\016TradesByM"
  "arket\022\035.api.v1.TradesByMarketRequest\032\036.a"
  "pi.v1.TradesByMarketResponse\022L\n\rTradesBy"
  "Order\022\034.api.v1.TradesByOrderRequest\032\035.ap"
  "i.v1.TradesByOrderResponse\022L\n\rTradesByPa"
  "rty\022\034.api.v1.TradesByPartyRequest\032\035.api."
  "v1.TradesByPartyResponse\022I\n\014GetProposals"
  "\022\033.api.v1.GetProposalsRequest\032\034.api.v1.G"
  "etProposalsResponse\022^\n\023GetProposalsByPar"
  "ty\022\".api.v1.GetProposalsByPartyRequest\032#"
  ".api.v1.GetProposalsByPartyResponse\022R\n\017G"
  "etVotesByParty\022\036.api.v1.GetVotesByPartyR"
  "equest\032\037.api.v1.GetVotesByPartyResponse\022"
  "d\n\025GetNewMarketProposals\022$.api.v1.GetNew"
  "MarketProposalsRequest\032%.api.v1.GetNewMa"
  "rketProposalsResponse\022m\n\030GetUpdateMarket"
  "Proposals\022\'.api.v1.GetUpdateMarketPropos"
  "alsRequest\032(.api.v1.GetUpdateMarketPropo"
  "salsResponse\022|\n\035GetNetworkParametersProp"
  "osals\022,.api.v1.GetNetworkParametersPropo"
  "salsRequest\032-.api.v1.GetNetworkParameter"
  "sProposalsResponse\022a\n\024GetNewAssetProposa"
  "ls\022#.api.v1.GetNewAssetProposalsRequest\032"
  "$.api.v1.GetNewAssetProposalsResponse\022R\n"
  "\017GetProposalByID\022\036.api.v1.GetProposalByI"
  "DRequest\032\037.api.v1.GetProposalByIDRespons"
  "e\022g\n\026GetProposalByReference\022%.api.v1.Get"
  "ProposalByReferenceRequest\032&.api.v1.GetP"
  "roposalByReferenceResponse\022Z\n\021ObserveGov"
  "ernance\022 .api.v1.ObserveGovernanceReques"
  "t\032!.api.v1.ObserveGovernanceResponse0\001\022f"
  "\n\025ObservePartyProposals\022$.api.v1.Observe"
  "PartyProposalsRequest\032%.api.v1.ObservePa"
  "rtyProposalsResponse0\001\022Z\n\021ObservePartyVo"
  "tes\022 .api.v1.ObservePartyVotesRequest\032!."
  "api.v1.ObservePartyVotesResponse0\001\022c\n\024Ob"
  "serveProposalVotes\022#.api.v1.ObservePropo"
  "salVotesRequest\032$.api.v1.ObserveProposal"
  "VotesResponse0\001\022V\n\017ObserveEventBus\022\036.api"
  ".v1.ObserveEventBusRequest\032\037.api.v1.Obse"
  "rveEventBusResponse(\0010\001\022C\n\nStatistics\022\031."
  "api.v1.StatisticsRequest\032\032.api.v1.Statis"
  "ticsResponse\022R\n\017LastBlockHeight\022\036.api.v1"
  ".LastBlockHeightRequest\032\037.api.v1.LastBlo"
  "ckHeightResponse\022F\n\013GetVegaTime\022\032.api.v1"
  ".GetVegaTimeRequest\032\033.api.v1.GetVegaTime"
  "Response\022Z\n\021AccountsSubscribe\022 .api.v1.A"
  "ccountsSubscribeRequest\032!.api.v1.Account"
  "sSubscribeResponse0\001\022W\n\020CandlesSubscribe"
  "\022\037.api.v1.CandlesSubscribeRequest\032 .api."
  "v1.CandlesSubscribeResponse0\001\022f\n\025MarginL"
  "evelsSubscribe\022$.api.v1.MarginLevelsSubs"
  "cribeRequest\032%.api.v1.MarginLevelsSubscr"
  "ibeResponse0\001\022c\n\024MarketDepthSubscribe\022#."
  "api.v1.MarketDepthSubscribeRequest\032$.api"
  ".v1.MarketDepthSubscribeResponse0\001\022x\n\033Ma"
  "rketDepthUpdatesSubscribe\022*.api.v1.Marke"
  "tDepthUpdatesSubscribeRequest\032+.api.v1.M"
  "arketDepthUpdatesSubscribeResponse0\001\022c\n\024"
  "MarketsDataSubscribe\022#.api.v1.MarketsDat"
  "aSubscribeRequest\032$.api.v1.MarketsDataSu"
  "bscribeResponse0\001\022T\n\017OrdersSubscribe\022\036.a"
  "pi.v1.OrdersSubscribeRequest\032\037.api.v1.Or"
  "dersSubscribeResponse0\001\022]\n\022PositionsSubs"
  "cribe\022!.api.v1.PositionsSubscribeRequest"
  "\032\".api.v1.PositionsSubscribeResponse0\001\022T"
  "\n\017TradesSubscribe\022\036.api.v1.TradesSubscri"
  "beRequest\032\037.api.v1.TradesSubscribeRespon"
  "se0\001\022u\n\032TransferResponsesSubscribe\022).api"
  ".v1.TransferResponsesSubscribeRequest\032*."
  "api.v1.TransferResponsesSubscribeRespons"
  "e0\001\022s\n\032GetNodeSignaturesAggregate\022).api."
  "v1.GetNodeSignaturesAggregateRequest\032*.a"
  "pi.v1.GetNodeSignaturesAggregateResponse"
  "\022@\n\tAssetByID\022\030.api.v1.AssetByIDRequest\032"
  "\031.api.v1.AssetByIDResponse\0227\n\006Assets\022\025.a"
  "pi.v1.AssetsRequest\032\026.api.v1.AssetsRespo"
  "nse\022F\n\013EstimateFee\022\032.api.v1.EstimateFeeR"
  "equest\032\033.api.v1.EstimateFeeResponse\022O\n\016E"
  "stimateMargin\022\035.api.v1.EstimateMarginReq"
  "uest\032\036.api.v1.EstimateMarginResponse\022j\n\027"
  "ERC20WithdrawalApproval\022&.api.v1.ERC20Wi"
  "thdrawalApprovalRequest\032\'.api.v1.ERC20Wi"
  "thdrawalApprovalResponse\022C\n\nWithdrawal\022\031"
  ".api.v1.WithdrawalRequest\032\032.api.v1.Withd"
  "rawalResponse\022F\n\013Withdrawals\022\032.api.v1.Wi"
  "thdrawalsRequest\032\033.api.v1.WithdrawalsRes"
  "ponse\022:\n\007Deposit\022\026.api.v1.DepositRequest"
  "\032\027.api.v1.DepositResponse\022=\n\010Deposits\022\027."
  "api.v1.DepositsRequest\032\030.api.v1.Deposits"
  "Response\022X\n\021NetworkParameters\022 .api.v1.N"
  "etworkParametersRequest\032!.api.v1.Network"
  "ParametersResponse\022^\n\023LiquidityProvision"
  "s\022\".api.v1.LiquidityProvisionsRequest\032#."
  "api.v1.LiquidityProvisionsResponse\022C\n\nOr"
  "acleSpec\022\031.api.v1.OracleSpecRequest\032\032.ap"
  "i.v1.OracleSpecResponse\022F\n\013OracleSpecs\022\032"
  ".api.v1.OracleSpecsRequest\032\033.api.v1.Orac"
  "leSpecsResponse\022U\n\020OracleDataBySpec\022\037.ap"
  "i.v1.OracleDataBySpecRequest\032 .api.v1.Or"
  "acleDataBySpecResponseB\?\n\030io.vegaprotoco"
  "l.vega.apiZ#code.vegaprotocol.io/vega/pr"
  "oto/apib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2ftrading_2eproto_deps[11] = {
  &::descriptor_table_assets_2eproto,
  &::descriptor_table_commands_2fv1_2fcommands_2eproto,
  &::descriptor_table_commands_2fv1_2ftransaction_2eproto,
  &::descriptor_table_commands_2fv1_2fvalidator_5fcommands_2eproto,
  &::descriptor_table_events_2fv1_2fevents_2eproto,
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  &::descriptor_table_governance_2eproto,
  &::descriptor_table_markets_2eproto,
  &::descriptor_table_oracles_2fv1_2fdata_2eproto,
  &::descriptor_table_oracles_2fv1_2fspec_2eproto,
  &::descriptor_table_vega_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2ftrading_2eproto_sccs[152] = {
  &scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_AccountsSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_AssetByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_AssetByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_AssetsRequest_api_2ftrading_2eproto.base,
  &scc_info_AssetsResponse_api_2ftrading_2eproto.base,
  &scc_info_CandlesRequest_api_2ftrading_2eproto.base,
  &scc_info_CandlesResponse_api_2ftrading_2eproto.base,
  &scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_CandlesSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_DepositRequest_api_2ftrading_2eproto.base,
  &scc_info_DepositResponse_api_2ftrading_2eproto.base,
  &scc_info_DepositsRequest_api_2ftrading_2eproto.base,
  &scc_info_DepositsResponse_api_2ftrading_2eproto.base,
  &scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto.base,
  &scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto.base,
  &scc_info_EstimateFeeRequest_api_2ftrading_2eproto.base,
  &scc_info_EstimateFeeResponse_api_2ftrading_2eproto.base,
  &scc_info_EstimateMarginRequest_api_2ftrading_2eproto.base,
  &scc_info_EstimateMarginResponse_api_2ftrading_2eproto.base,
  &scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto.base,
  &scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetVegaTimeRequest_api_2ftrading_2eproto.base,
  &scc_info_GetVegaTimeResponse_api_2ftrading_2eproto.base,
  &scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_LastBlockHeightRequest_api_2ftrading_2eproto.base,
  &scc_info_LastBlockHeightResponse_api_2ftrading_2eproto.base,
  &scc_info_LastTradeRequest_api_2ftrading_2eproto.base,
  &scc_info_LastTradeResponse_api_2ftrading_2eproto.base,
  &scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto.base,
  &scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto.base,
  &scc_info_MarginLevelsRequest_api_2ftrading_2eproto.base,
  &scc_info_MarginLevelsResponse_api_2ftrading_2eproto.base,
  &scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarginLevelsSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketAccountsRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketAccountsResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketDataByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketDataByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthUpdatesSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketsDataRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketsDataResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketsDataSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketsRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketsResponse_api_2ftrading_2eproto.base,
  &scc_info_NetworkParametersRequest_api_2ftrading_2eproto.base,
  &scc_info_NetworkParametersResponse_api_2ftrading_2eproto.base,
  &scc_info_ObserveEventBusRequest_api_2ftrading_2eproto.base,
  &scc_info_ObserveEventBusResponse_api_2ftrading_2eproto.base,
  &scc_info_ObserveGovernanceRequest_api_2ftrading_2eproto.base,
  &scc_info_ObserveGovernanceResponse_api_2ftrading_2eproto.base,
  &scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_ObservePartyProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto.base,
  &scc_info_ObservePartyVotesResponse_api_2ftrading_2eproto.base,
  &scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto.base,
  &scc_info_ObserveProposalVotesResponse_api_2ftrading_2eproto.base,
  &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,
  &scc_info_OracleDataBySpecRequest_api_2ftrading_2eproto.base,
  &scc_info_OracleDataBySpecResponse_api_2ftrading_2eproto.base,
  &scc_info_OracleSpecRequest_api_2ftrading_2eproto.base,
  &scc_info_OracleSpecResponse_api_2ftrading_2eproto.base,
  &scc_info_OracleSpecsRequest_api_2ftrading_2eproto.base,
  &scc_info_OracleSpecsResponse_api_2ftrading_2eproto.base,
  &scc_info_OrderByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_OrderByMarketAndIDRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderByMarketAndIDResponse_api_2ftrading_2eproto.base,
  &scc_info_OrderByReferenceRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderByReferenceResponse_api_2ftrading_2eproto.base,
  &scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderVersionsByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_OrdersByMarketRequest_api_2ftrading_2eproto.base,
  &scc_info_OrdersByMarketResponse_api_2ftrading_2eproto.base,
  &scc_info_OrdersByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_OrdersByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_OrdersSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_Pagination_api_2ftrading_2eproto.base,
  &scc_info_PartiesRequest_api_2ftrading_2eproto.base,
  &scc_info_PartiesResponse_api_2ftrading_2eproto.base,
  &scc_info_PartyAccountsRequest_api_2ftrading_2eproto.base,
  &scc_info_PartyAccountsResponse_api_2ftrading_2eproto.base,
  &scc_info_PartyByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_PartyByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_PositionsByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_PositionsByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_PositionsSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareAmendOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareCancelOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareProposalSubmissionRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareProposalSubmissionResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareSubmitOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareVoteSubmissionRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareVoteSubmissionResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto.base,
  &scc_info_PropagateChainEventRequest_api_2ftrading_2eproto.base,
  &scc_info_PropagateChainEventResponse_api_2ftrading_2eproto.base,
  &scc_info_StatisticsRequest_api_2ftrading_2eproto.base,
  &scc_info_StatisticsResponse_api_2ftrading_2eproto.base,
  &scc_info_SubmitTransactionRequest_api_2ftrading_2eproto.base,
  &scc_info_SubmitTransactionResponse_api_2ftrading_2eproto.base,
  &scc_info_SubmitTransactionV2Request_api_2ftrading_2eproto.base,
  &scc_info_SubmitTransactionV2Response_api_2ftrading_2eproto.base,
  &scc_info_TradesByMarketRequest_api_2ftrading_2eproto.base,
  &scc_info_TradesByMarketResponse_api_2ftrading_2eproto.base,
  &scc_info_TradesByOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_TradesByOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_TradesByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_TradesByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_TradesSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_TradesSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_TransferResponsesSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_TransferResponsesSubscribeResponse_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalRequest_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalResponse_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalsRequest_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalsResponse_api_2ftrading_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2ftrading_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2ftrading_2eproto = {
  false, false, descriptor_table_protodef_api_2ftrading_2eproto, "api/trading.proto", 18695,
  &descriptor_table_api_2ftrading_2eproto_once, descriptor_table_api_2ftrading_2eproto_sccs, descriptor_table_api_2ftrading_2eproto_deps, 152, 11,
  schemas, file_default_instances, TableStruct_api_2ftrading_2eproto::offsets,
  file_level_metadata_api_2ftrading_2eproto, 152, file_level_enum_descriptors_api_2ftrading_2eproto, file_level_service_descriptors_api_2ftrading_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2ftrading_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2ftrading_2eproto)), true);
namespace api {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitTransactionRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2ftrading_2eproto);
  return file_level_enum_descriptors_api_2ftrading_2eproto[0];
}
bool SubmitTransactionRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_UNSPECIFIED;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_ASYNC;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_SYNC;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_COMMIT;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::Type_MIN;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::Type_MAX;
constexpr int SubmitTransactionRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitTransactionV2Request_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2ftrading_2eproto);
  return file_level_enum_descriptors_api_2ftrading_2eproto[1];
}
bool SubmitTransactionV2Request_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request::TYPE_UNSPECIFIED;
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request::TYPE_ASYNC;
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request::TYPE_SYNC;
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request::TYPE_COMMIT;
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request::Type_MIN;
constexpr SubmitTransactionV2Request_Type SubmitTransactionV2Request::Type_MAX;
constexpr int SubmitTransactionV2Request::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PropagateChainEventRequest::_Internal {
 public:
  static const ::vega::commands::v1::ChainEvent& evt(const PropagateChainEventRequest* msg);
};

const ::vega::commands::v1::ChainEvent&
PropagateChainEventRequest::_Internal::evt(const PropagateChainEventRequest* msg) {
  return *msg->evt_;
}
void PropagateChainEventRequest::clear_evt() {
  if (GetArena() == nullptr && evt_ != nullptr) {
    delete evt_;
  }
  evt_ = nullptr;
}
PropagateChainEventRequest::PropagateChainEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PropagateChainEventRequest)
}
PropagateChainEventRequest::PropagateChainEventRequest(const PropagateChainEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(),
      GetArena());
  }
  if (from._internal_has_evt()) {
    evt_ = new ::vega::commands::v1::ChainEvent(*from.evt_);
  } else {
    evt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PropagateChainEventRequest)
}

void PropagateChainEventRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropagateChainEventRequest_api_2ftrading_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evt_ = nullptr;
}

PropagateChainEventRequest::~PropagateChainEventRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PropagateChainEventRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropagateChainEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete evt_;
}

void PropagateChainEventRequest::ArenaDtor(void* object) {
  PropagateChainEventRequest* _this = reinterpret_cast< PropagateChainEventRequest* >(object);
  (void)_this;
}
void PropagateChainEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropagateChainEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropagateChainEventRequest& PropagateChainEventRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropagateChainEventRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PropagateChainEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PropagateChainEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArena() == nullptr && evt_ != nullptr) {
    delete evt_;
  }
  evt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagateChainEventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.ChainEvent evt = 1 [json_name = "evt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_evt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pub_key = 2 [json_name = "pubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PropagateChainEventRequest.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3 [json_name = "signature"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropagateChainEventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PropagateChainEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.ChainEvent evt = 1 [json_name = "evt"];
  if (this->has_evt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::evt(this), target, stream);
  }

  // string pub_key = 2 [json_name = "pubKey"];
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PropagateChainEventRequest.pub_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pub_key(), target);
  }

  // bytes signature = 3 [json_name = "signature"];
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PropagateChainEventRequest)
  return target;
}

size_t PropagateChainEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PropagateChainEventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 2 [json_name = "pubKey"];
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // bytes signature = 3 [json_name = "signature"];
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .vega.commands.v1.ChainEvent evt = 1 [json_name = "evt"];
  if (this->has_evt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropagateChainEventRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PropagateChainEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PropagateChainEventRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropagateChainEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PropagateChainEventRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PropagateChainEventRequest)
    MergeFrom(*source);
  }
}

void PropagateChainEventRequest::MergeFrom(const PropagateChainEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PropagateChainEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.has_evt()) {
    _internal_mutable_evt()->::vega::commands::v1::ChainEvent::MergeFrom(from._internal_evt());
  }
}

void PropagateChainEventRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PropagateChainEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropagateChainEventRequest::CopyFrom(const PropagateChainEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PropagateChainEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagateChainEventRequest::IsInitialized() const {
  return true;
}

void PropagateChainEventRequest::InternalSwap(PropagateChainEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(evt_, other->evt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagateChainEventRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PropagateChainEventResponse::_Internal {
 public:
};

PropagateChainEventResponse::PropagateChainEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PropagateChainEventResponse)
}
PropagateChainEventResponse::PropagateChainEventResponse(const PropagateChainEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.v1.PropagateChainEventResponse)
}

void PropagateChainEventResponse::SharedCtor() {
  success_ = false;
}

PropagateChainEventResponse::~PropagateChainEventResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PropagateChainEventResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropagateChainEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PropagateChainEventResponse::ArenaDtor(void* object) {
  PropagateChainEventResponse* _this = reinterpret_cast< PropagateChainEventResponse* >(object);
  (void)_this;
}
void PropagateChainEventResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropagateChainEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropagateChainEventResponse& PropagateChainEventResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropagateChainEventResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PropagateChainEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PropagateChainEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagateChainEventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropagateChainEventResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PropagateChainEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PropagateChainEventResponse)
  return target;
}

size_t PropagateChainEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PropagateChainEventResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropagateChainEventResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PropagateChainEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PropagateChainEventResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropagateChainEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PropagateChainEventResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PropagateChainEventResponse)
    MergeFrom(*source);
  }
}

void PropagateChainEventResponse::MergeFrom(const PropagateChainEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PropagateChainEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void PropagateChainEventResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PropagateChainEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropagateChainEventResponse::CopyFrom(const PropagateChainEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PropagateChainEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagateChainEventResponse::IsInitialized() const {
  return true;
}

void PropagateChainEventResponse::InternalSwap(PropagateChainEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagateChainEventResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitTransactionRequest::_Internal {
 public:
  static const ::vega::SignedBundle& tx(const SubmitTransactionRequest* msg);
};

const ::vega::SignedBundle&
SubmitTransactionRequest::_Internal::tx(const SubmitTransactionRequest* msg) {
  return *msg->tx_;
}
void SubmitTransactionRequest::clear_tx() {
  if (GetArena() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
SubmitTransactionRequest::SubmitTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.SubmitTransactionRequest)
}
SubmitTransactionRequest::SubmitTransactionRequest(const SubmitTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tx()) {
    tx_ = new ::vega::SignedBundle(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.v1.SubmitTransactionRequest)
}

void SubmitTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitTransactionRequest_api_2ftrading_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&tx_)) + sizeof(type_));
}

SubmitTransactionRequest::~SubmitTransactionRequest() {
  // @@protoc_insertion_point(destructor:api.v1.SubmitTransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tx_;
}

void SubmitTransactionRequest::ArenaDtor(void* object) {
  SubmitTransactionRequest* _this = reinterpret_cast< SubmitTransactionRequest* >(object);
  (void)_this;
}
void SubmitTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionRequest& SubmitTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.SignedBundle tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::api::v1::SubmitTransactionRequest_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.SignedBundle tx = 1 [json_name = "tx"];
  if (this->has_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tx(this), target, stream);
  }

  // .api.v1.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.SubmitTransactionRequest)
  return target;
}

size_t SubmitTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.SubmitTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.SignedBundle tx = 1 [json_name = "tx"];
  if (this->has_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  // .api.v1.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.SubmitTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.SubmitTransactionRequest)
    MergeFrom(*source);
  }
}

void SubmitTransactionRequest::MergeFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx()) {
    _internal_mutable_tx()->::vega::SignedBundle::MergeFrom(from._internal_tx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SubmitTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionRequest::CopyFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionRequest::IsInitialized() const {
  return true;
}

void SubmitTransactionRequest::InternalSwap(SubmitTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitTransactionRequest, type_)
      + sizeof(SubmitTransactionRequest::type_)
      - PROTOBUF_FIELD_OFFSET(SubmitTransactionRequest, tx_)>(
          reinterpret_cast<char*>(&tx_),
          reinterpret_cast<char*>(&other->tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitTransactionResponse::_Internal {
 public:
};

SubmitTransactionResponse::SubmitTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.SubmitTransactionResponse)
}
SubmitTransactionResponse::SubmitTransactionResponse(const SubmitTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.v1.SubmitTransactionResponse)
}

void SubmitTransactionResponse::SharedCtor() {
  success_ = false;
}

SubmitTransactionResponse::~SubmitTransactionResponse() {
  // @@protoc_insertion_point(destructor:api.v1.SubmitTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubmitTransactionResponse::ArenaDtor(void* object) {
  SubmitTransactionResponse* _this = reinterpret_cast< SubmitTransactionResponse* >(object);
  (void)_this;
}
void SubmitTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionResponse& SubmitTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.SubmitTransactionResponse)
  return target;
}

size_t SubmitTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.SubmitTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.SubmitTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.SubmitTransactionResponse)
    MergeFrom(*source);
  }
}

void SubmitTransactionResponse::MergeFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SubmitTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionResponse::CopyFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionResponse::IsInitialized() const {
  return true;
}

void SubmitTransactionResponse::InternalSwap(SubmitTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitTransactionV2Request::_Internal {
 public:
  static const ::vega::commands::v1::Transaction& tx(const SubmitTransactionV2Request* msg);
};

const ::vega::commands::v1::Transaction&
SubmitTransactionV2Request::_Internal::tx(const SubmitTransactionV2Request* msg) {
  return *msg->tx_;
}
void SubmitTransactionV2Request::clear_tx() {
  if (GetArena() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
SubmitTransactionV2Request::SubmitTransactionV2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.SubmitTransactionV2Request)
}
SubmitTransactionV2Request::SubmitTransactionV2Request(const SubmitTransactionV2Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tx()) {
    tx_ = new ::vega::commands::v1::Transaction(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.v1.SubmitTransactionV2Request)
}

void SubmitTransactionV2Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitTransactionV2Request_api_2ftrading_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&tx_)) + sizeof(type_));
}

SubmitTransactionV2Request::~SubmitTransactionV2Request() {
  // @@protoc_insertion_point(destructor:api.v1.SubmitTransactionV2Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionV2Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tx_;
}

void SubmitTransactionV2Request::ArenaDtor(void* object) {
  SubmitTransactionV2Request* _this = reinterpret_cast< SubmitTransactionV2Request* >(object);
  (void)_this;
}
void SubmitTransactionV2Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionV2Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionV2Request& SubmitTransactionV2Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionV2Request_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionV2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.SubmitTransactionV2Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionV2Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.Transaction tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.SubmitTransactionV2Request.Type type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::api::v1::SubmitTransactionV2Request_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionV2Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.SubmitTransactionV2Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.Transaction tx = 1 [json_name = "tx"];
  if (this->has_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tx(this), target, stream);
  }

  // .api.v1.SubmitTransactionV2Request.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.SubmitTransactionV2Request)
  return target;
}

size_t SubmitTransactionV2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.SubmitTransactionV2Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.Transaction tx = 1 [json_name = "tx"];
  if (this->has_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  // .api.v1.SubmitTransactionV2Request.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionV2Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.SubmitTransactionV2Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionV2Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionV2Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.SubmitTransactionV2Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.SubmitTransactionV2Request)
    MergeFrom(*source);
  }
}

void SubmitTransactionV2Request::MergeFrom(const SubmitTransactionV2Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.SubmitTransactionV2Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx()) {
    _internal_mutable_tx()->::vega::commands::v1::Transaction::MergeFrom(from._internal_tx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SubmitTransactionV2Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.SubmitTransactionV2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionV2Request::CopyFrom(const SubmitTransactionV2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.SubmitTransactionV2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionV2Request::IsInitialized() const {
  return true;
}

void SubmitTransactionV2Request::InternalSwap(SubmitTransactionV2Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitTransactionV2Request, type_)
      + sizeof(SubmitTransactionV2Request::type_)
      - PROTOBUF_FIELD_OFFSET(SubmitTransactionV2Request, tx_)>(
          reinterpret_cast<char*>(&tx_),
          reinterpret_cast<char*>(&other->tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionV2Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitTransactionV2Response::_Internal {
 public:
};

SubmitTransactionV2Response::SubmitTransactionV2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.SubmitTransactionV2Response)
}
SubmitTransactionV2Response::SubmitTransactionV2Response(const SubmitTransactionV2Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.v1.SubmitTransactionV2Response)
}

void SubmitTransactionV2Response::SharedCtor() {
  success_ = false;
}

SubmitTransactionV2Response::~SubmitTransactionV2Response() {
  // @@protoc_insertion_point(destructor:api.v1.SubmitTransactionV2Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionV2Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubmitTransactionV2Response::ArenaDtor(void* object) {
  SubmitTransactionV2Response* _this = reinterpret_cast< SubmitTransactionV2Response* >(object);
  (void)_this;
}
void SubmitTransactionV2Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionV2Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionV2Response& SubmitTransactionV2Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionV2Response_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionV2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.SubmitTransactionV2Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionV2Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionV2Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.SubmitTransactionV2Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.SubmitTransactionV2Response)
  return target;
}

size_t SubmitTransactionV2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.SubmitTransactionV2Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionV2Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.SubmitTransactionV2Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionV2Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionV2Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.SubmitTransactionV2Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.SubmitTransactionV2Response)
    MergeFrom(*source);
  }
}

void SubmitTransactionV2Response::MergeFrom(const SubmitTransactionV2Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.SubmitTransactionV2Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SubmitTransactionV2Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.SubmitTransactionV2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionV2Response::CopyFrom(const SubmitTransactionV2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.SubmitTransactionV2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionV2Response::IsInitialized() const {
  return true;
}

void SubmitTransactionV2Response::InternalSwap(SubmitTransactionV2Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionV2Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareWithdrawRequest::_Internal {
 public:
  static const ::vega::commands::v1::WithdrawSubmission& withdraw(const PrepareWithdrawRequest* msg);
};

const ::vega::commands::v1::WithdrawSubmission&
PrepareWithdrawRequest::_Internal::withdraw(const PrepareWithdrawRequest* msg) {
  return *msg->withdraw_;
}
void PrepareWithdrawRequest::clear_withdraw() {
  if (GetArena() == nullptr && withdraw_ != nullptr) {
    delete withdraw_;
  }
  withdraw_ = nullptr;
}
PrepareWithdrawRequest::PrepareWithdrawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareWithdrawRequest)
}
PrepareWithdrawRequest::PrepareWithdrawRequest(const PrepareWithdrawRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_withdraw()) {
    withdraw_ = new ::vega::commands::v1::WithdrawSubmission(*from.withdraw_);
  } else {
    withdraw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareWithdrawRequest)
}

void PrepareWithdrawRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto.base);
  withdraw_ = nullptr;
}

PrepareWithdrawRequest::~PrepareWithdrawRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareWithdrawRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareWithdrawRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete withdraw_;
}

void PrepareWithdrawRequest::ArenaDtor(void* object) {
  PrepareWithdrawRequest* _this = reinterpret_cast< PrepareWithdrawRequest* >(object);
  (void)_this;
}
void PrepareWithdrawRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareWithdrawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareWithdrawRequest& PrepareWithdrawRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareWithdrawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareWithdrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && withdraw_ != nullptr) {
    delete withdraw_;
  }
  withdraw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareWithdrawRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareWithdrawRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareWithdrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
  if (this->has_withdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::withdraw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareWithdrawRequest)
  return target;
}

size_t PrepareWithdrawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareWithdrawRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
  if (this->has_withdraw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *withdraw_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareWithdrawRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareWithdrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareWithdrawRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareWithdrawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareWithdrawRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareWithdrawRequest)
    MergeFrom(*source);
  }
}

void PrepareWithdrawRequest::MergeFrom(const PrepareWithdrawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareWithdrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_withdraw()) {
    _internal_mutable_withdraw()->::vega::commands::v1::WithdrawSubmission::MergeFrom(from._internal_withdraw());
  }
}

void PrepareWithdrawRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareWithdrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareWithdrawRequest::CopyFrom(const PrepareWithdrawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareWithdrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareWithdrawRequest::IsInitialized() const {
  return true;
}

void PrepareWithdrawRequest::InternalSwap(PrepareWithdrawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(withdraw_, other->withdraw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareWithdrawRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareWithdrawResponse::_Internal {
 public:
};

PrepareWithdrawResponse::PrepareWithdrawResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareWithdrawResponse)
}
PrepareWithdrawResponse::PrepareWithdrawResponse(const PrepareWithdrawResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareWithdrawResponse)
}

void PrepareWithdrawResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareWithdrawResponse::~PrepareWithdrawResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareWithdrawResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareWithdrawResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareWithdrawResponse::ArenaDtor(void* object) {
  PrepareWithdrawResponse* _this = reinterpret_cast< PrepareWithdrawResponse* >(object);
  (void)_this;
}
void PrepareWithdrawResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareWithdrawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareWithdrawResponse& PrepareWithdrawResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareWithdrawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareWithdrawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareWithdrawResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareWithdrawResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareWithdrawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareWithdrawResponse)
  return target;
}

size_t PrepareWithdrawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareWithdrawResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareWithdrawResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareWithdrawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareWithdrawResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareWithdrawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareWithdrawResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareWithdrawResponse)
    MergeFrom(*source);
  }
}

void PrepareWithdrawResponse::MergeFrom(const PrepareWithdrawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareWithdrawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareWithdrawResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareWithdrawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareWithdrawResponse::CopyFrom(const PrepareWithdrawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareWithdrawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareWithdrawResponse::IsInitialized() const {
  return true;
}

void PrepareWithdrawResponse::InternalSwap(PrepareWithdrawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareWithdrawResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareSubmitOrderResponse::_Internal {
 public:
};

PrepareSubmitOrderResponse::PrepareSubmitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareSubmitOrderResponse)
}
PrepareSubmitOrderResponse::PrepareSubmitOrderResponse(const PrepareSubmitOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(),
      GetArena());
  }
  submit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_submit_id().empty()) {
    submit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_submit_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareSubmitOrderResponse)
}

void PrepareSubmitOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareSubmitOrderResponse::~PrepareSubmitOrderResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareSubmitOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareSubmitOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submit_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareSubmitOrderResponse::ArenaDtor(void* object) {
  PrepareSubmitOrderResponse* _this = reinterpret_cast< PrepareSubmitOrderResponse* >(object);
  (void)_this;
}
void PrepareSubmitOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareSubmitOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareSubmitOrderResponse& PrepareSubmitOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareSubmitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareSubmitOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  submit_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareSubmitOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string submit_id = 2 [json_name = "submitId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_submit_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PrepareSubmitOrderResponse.submit_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareSubmitOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareSubmitOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  // string submit_id = 2 [json_name = "submitId"];
  if (this->submit_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_submit_id().data(), static_cast<int>(this->_internal_submit_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PrepareSubmitOrderResponse.submit_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_submit_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareSubmitOrderResponse)
  return target;
}

size_t PrepareSubmitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareSubmitOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // string submit_id = 2 [json_name = "submitId"];
  if (this->submit_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submit_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareSubmitOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareSubmitOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareSubmitOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareSubmitOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareSubmitOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareSubmitOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareSubmitOrderResponse::MergeFrom(const PrepareSubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareSubmitOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
  if (from.submit_id().size() > 0) {
    _internal_set_submit_id(from._internal_submit_id());
  }
}

void PrepareSubmitOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareSubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareSubmitOrderResponse::CopyFrom(const PrepareSubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareSubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareSubmitOrderResponse::IsInitialized() const {
  return true;
}

void PrepareSubmitOrderResponse::InternalSwap(PrepareSubmitOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submit_id_.Swap(&other->submit_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareSubmitOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareCancelOrderResponse::_Internal {
 public:
};

PrepareCancelOrderResponse::PrepareCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareCancelOrderResponse)
}
PrepareCancelOrderResponse::PrepareCancelOrderResponse(const PrepareCancelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareCancelOrderResponse)
}

void PrepareCancelOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareCancelOrderResponse::~PrepareCancelOrderResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareCancelOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareCancelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareCancelOrderResponse::ArenaDtor(void* object) {
  PrepareCancelOrderResponse* _this = reinterpret_cast< PrepareCancelOrderResponse* >(object);
  (void)_this;
}
void PrepareCancelOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareCancelOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareCancelOrderResponse& PrepareCancelOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareCancelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareCancelOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareCancelOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareCancelOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareCancelOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareCancelOrderResponse)
  return target;
}

size_t PrepareCancelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareCancelOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareCancelOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareCancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareCancelOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareCancelOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareCancelOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareCancelOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareCancelOrderResponse::MergeFrom(const PrepareCancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareCancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareCancelOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareCancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareCancelOrderResponse::CopyFrom(const PrepareCancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareCancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareCancelOrderResponse::IsInitialized() const {
  return true;
}

void PrepareCancelOrderResponse::InternalSwap(PrepareCancelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareCancelOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareAmendOrderResponse::_Internal {
 public:
};

PrepareAmendOrderResponse::PrepareAmendOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareAmendOrderResponse)
}
PrepareAmendOrderResponse::PrepareAmendOrderResponse(const PrepareAmendOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareAmendOrderResponse)
}

void PrepareAmendOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareAmendOrderResponse::~PrepareAmendOrderResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareAmendOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareAmendOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareAmendOrderResponse::ArenaDtor(void* object) {
  PrepareAmendOrderResponse* _this = reinterpret_cast< PrepareAmendOrderResponse* >(object);
  (void)_this;
}
void PrepareAmendOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareAmendOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareAmendOrderResponse& PrepareAmendOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareAmendOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareAmendOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareAmendOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareAmendOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareAmendOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareAmendOrderResponse)
  return target;
}

size_t PrepareAmendOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareAmendOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareAmendOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareAmendOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareAmendOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareAmendOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareAmendOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareAmendOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareAmendOrderResponse::MergeFrom(const PrepareAmendOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareAmendOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareAmendOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareAmendOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareAmendOrderResponse::CopyFrom(const PrepareAmendOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareAmendOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareAmendOrderResponse::IsInitialized() const {
  return true;
}

void PrepareAmendOrderResponse::InternalSwap(PrepareAmendOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareAmendOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareSubmitOrderRequest::_Internal {
 public:
  static const ::vega::commands::v1::OrderSubmission& submission(const PrepareSubmitOrderRequest* msg);
};

const ::vega::commands::v1::OrderSubmission&
PrepareSubmitOrderRequest::_Internal::submission(const PrepareSubmitOrderRequest* msg) {
  return *msg->submission_;
}
void PrepareSubmitOrderRequest::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
PrepareSubmitOrderRequest::PrepareSubmitOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareSubmitOrderRequest)
}
PrepareSubmitOrderRequest::PrepareSubmitOrderRequest(const PrepareSubmitOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submission()) {
    submission_ = new ::vega::commands::v1::OrderSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareSubmitOrderRequest)
}

void PrepareSubmitOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareSubmitOrderRequest_api_2ftrading_2eproto.base);
  submission_ = nullptr;
}

PrepareSubmitOrderRequest::~PrepareSubmitOrderRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareSubmitOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareSubmitOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submission_;
}

void PrepareSubmitOrderRequest::ArenaDtor(void* object) {
  PrepareSubmitOrderRequest* _this = reinterpret_cast< PrepareSubmitOrderRequest* >(object);
  (void)_this;
}
void PrepareSubmitOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareSubmitOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareSubmitOrderRequest& PrepareSubmitOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareSubmitOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareSubmitOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareSubmitOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareSubmitOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.OrderSubmission submission = 1 [json_name = "submission"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareSubmitOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareSubmitOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.OrderSubmission submission = 1 [json_name = "submission"];
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareSubmitOrderRequest)
  return target;
}

size_t PrepareSubmitOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareSubmitOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.OrderSubmission submission = 1 [json_name = "submission"];
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareSubmitOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareSubmitOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareSubmitOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareSubmitOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareSubmitOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareSubmitOrderRequest)
    MergeFrom(*source);
  }
}

void PrepareSubmitOrderRequest::MergeFrom(const PrepareSubmitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareSubmitOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::commands::v1::OrderSubmission::MergeFrom(from._internal_submission());
  }
}

void PrepareSubmitOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareSubmitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareSubmitOrderRequest::CopyFrom(const PrepareSubmitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareSubmitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareSubmitOrderRequest::IsInitialized() const {
  return true;
}

void PrepareSubmitOrderRequest::InternalSwap(PrepareSubmitOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareSubmitOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareCancelOrderRequest::_Internal {
 public:
  static const ::vega::commands::v1::OrderCancellation& cancellation(const PrepareCancelOrderRequest* msg);
};

const ::vega::commands::v1::OrderCancellation&
PrepareCancelOrderRequest::_Internal::cancellation(const PrepareCancelOrderRequest* msg) {
  return *msg->cancellation_;
}
void PrepareCancelOrderRequest::clear_cancellation() {
  if (GetArena() == nullptr && cancellation_ != nullptr) {
    delete cancellation_;
  }
  cancellation_ = nullptr;
}
PrepareCancelOrderRequest::PrepareCancelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareCancelOrderRequest)
}
PrepareCancelOrderRequest::PrepareCancelOrderRequest(const PrepareCancelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cancellation()) {
    cancellation_ = new ::vega::commands::v1::OrderCancellation(*from.cancellation_);
  } else {
    cancellation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareCancelOrderRequest)
}

void PrepareCancelOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareCancelOrderRequest_api_2ftrading_2eproto.base);
  cancellation_ = nullptr;
}

PrepareCancelOrderRequest::~PrepareCancelOrderRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareCancelOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareCancelOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cancellation_;
}

void PrepareCancelOrderRequest::ArenaDtor(void* object) {
  PrepareCancelOrderRequest* _this = reinterpret_cast< PrepareCancelOrderRequest* >(object);
  (void)_this;
}
void PrepareCancelOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareCancelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareCancelOrderRequest& PrepareCancelOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareCancelOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareCancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareCancelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cancellation_ != nullptr) {
    delete cancellation_;
  }
  cancellation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareCancelOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.OrderCancellation cancellation = 1 [json_name = "cancellation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancellation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareCancelOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareCancelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.OrderCancellation cancellation = 1 [json_name = "cancellation"];
  if (this->has_cancellation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cancellation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareCancelOrderRequest)
  return target;
}

size_t PrepareCancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareCancelOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.OrderCancellation cancellation = 1 [json_name = "cancellation"];
  if (this->has_cancellation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cancellation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareCancelOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareCancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareCancelOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareCancelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareCancelOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareCancelOrderRequest)
    MergeFrom(*source);
  }
}

void PrepareCancelOrderRequest::MergeFrom(const PrepareCancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareCancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cancellation()) {
    _internal_mutable_cancellation()->::vega::commands::v1::OrderCancellation::MergeFrom(from._internal_cancellation());
  }
}

void PrepareCancelOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareCancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareCancelOrderRequest::CopyFrom(const PrepareCancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareCancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareCancelOrderRequest::IsInitialized() const {
  return true;
}

void PrepareCancelOrderRequest::InternalSwap(PrepareCancelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(cancellation_, other->cancellation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareCancelOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareAmendOrderRequest::_Internal {
 public:
  static const ::vega::commands::v1::OrderAmendment& amendment(const PrepareAmendOrderRequest* msg);
};

const ::vega::commands::v1::OrderAmendment&
PrepareAmendOrderRequest::_Internal::amendment(const PrepareAmendOrderRequest* msg) {
  return *msg->amendment_;
}
void PrepareAmendOrderRequest::clear_amendment() {
  if (GetArena() == nullptr && amendment_ != nullptr) {
    delete amendment_;
  }
  amendment_ = nullptr;
}
PrepareAmendOrderRequest::PrepareAmendOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareAmendOrderRequest)
}
PrepareAmendOrderRequest::PrepareAmendOrderRequest(const PrepareAmendOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_amendment()) {
    amendment_ = new ::vega::commands::v1::OrderAmendment(*from.amendment_);
  } else {
    amendment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareAmendOrderRequest)
}

void PrepareAmendOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareAmendOrderRequest_api_2ftrading_2eproto.base);
  amendment_ = nullptr;
}

PrepareAmendOrderRequest::~PrepareAmendOrderRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareAmendOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareAmendOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete amendment_;
}

void PrepareAmendOrderRequest::ArenaDtor(void* object) {
  PrepareAmendOrderRequest* _this = reinterpret_cast< PrepareAmendOrderRequest* >(object);
  (void)_this;
}
void PrepareAmendOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareAmendOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareAmendOrderRequest& PrepareAmendOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareAmendOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareAmendOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareAmendOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && amendment_ != nullptr) {
    delete amendment_;
  }
  amendment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareAmendOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.OrderAmendment amendment = 1 [json_name = "amendment"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amendment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareAmendOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareAmendOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.OrderAmendment amendment = 1 [json_name = "amendment"];
  if (this->has_amendment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::amendment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareAmendOrderRequest)
  return target;
}

size_t PrepareAmendOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareAmendOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.OrderAmendment amendment = 1 [json_name = "amendment"];
  if (this->has_amendment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amendment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareAmendOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareAmendOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareAmendOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareAmendOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareAmendOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareAmendOrderRequest)
    MergeFrom(*source);
  }
}

void PrepareAmendOrderRequest::MergeFrom(const PrepareAmendOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareAmendOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amendment()) {
    _internal_mutable_amendment()->::vega::commands::v1::OrderAmendment::MergeFrom(from._internal_amendment());
  }
}

void PrepareAmendOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareAmendOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareAmendOrderRequest::CopyFrom(const PrepareAmendOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareAmendOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareAmendOrderRequest::IsInitialized() const {
  return true;
}

void PrepareAmendOrderRequest::InternalSwap(PrepareAmendOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(amendment_, other->amendment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareAmendOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetsRequest::_Internal {
 public:
};

AssetsRequest::AssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.AssetsRequest)
}
AssetsRequest::AssetsRequest(const AssetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.AssetsRequest)
}

void AssetsRequest::SharedCtor() {
}

AssetsRequest::~AssetsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.AssetsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssetsRequest::ArenaDtor(void* object) {
  AssetsRequest* _this = reinterpret_cast< AssetsRequest* >(object);
  (void)_this;
}
void AssetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetsRequest& AssetsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.AssetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.AssetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.AssetsRequest)
  return target;
}

size_t AssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.AssetsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.AssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.AssetsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.AssetsRequest)
    MergeFrom(*source);
  }
}

void AssetsRequest::MergeFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.AssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AssetsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetsRequest::CopyFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsRequest::IsInitialized() const {
  return true;
}

void AssetsRequest::InternalSwap(AssetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetsResponse::_Internal {
 public:
};

void AssetsResponse::clear_assets() {
  assets_.Clear();
}
AssetsResponse::AssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  assets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.AssetsResponse)
}
AssetsResponse::AssetsResponse(const AssetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.AssetsResponse)
}

void AssetsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetsResponse_api_2ftrading_2eproto.base);
}

AssetsResponse::~AssetsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.AssetsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssetsResponse::ArenaDtor(void* object) {
  AssetsResponse* _this = reinterpret_cast< AssetsResponse* >(object);
  (void)_this;
}
void AssetsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetsResponse& AssetsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.AssetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Asset assets = 1 [json_name = "assets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.AssetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.AssetsResponse)
  return target;
}

size_t AssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.AssetsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.AssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.AssetsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.AssetsResponse)
    MergeFrom(*source);
  }
}

void AssetsResponse::MergeFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.AssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
}

void AssetsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetsResponse::CopyFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsResponse::IsInitialized() const {
  return true;
}

void AssetsResponse::InternalSwap(AssetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetByIDRequest::_Internal {
 public:
};

AssetByIDRequest::AssetByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.AssetByIDRequest)
}
AssetByIDRequest::AssetByIDRequest(const AssetByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.AssetByIDRequest)
}

void AssetByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetByIDRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssetByIDRequest::~AssetByIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.AssetByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssetByIDRequest::ArenaDtor(void* object) {
  AssetByIDRequest* _this = reinterpret_cast< AssetByIDRequest* >(object);
  (void)_this;
}
void AssetByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetByIDRequest& AssetByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.AssetByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.AssetByIDRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.AssetByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.AssetByIDRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.AssetByIDRequest)
  return target;
}

size_t AssetByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.AssetByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.AssetByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.AssetByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.AssetByIDRequest)
    MergeFrom(*source);
  }
}

void AssetByIDRequest::MergeFrom(const AssetByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.AssetByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void AssetByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.AssetByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetByIDRequest::CopyFrom(const AssetByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.AssetByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetByIDRequest::IsInitialized() const {
  return true;
}

void AssetByIDRequest::InternalSwap(AssetByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetByIDResponse::_Internal {
 public:
  static const ::vega::Asset& asset(const AssetByIDResponse* msg);
};

const ::vega::Asset&
AssetByIDResponse::_Internal::asset(const AssetByIDResponse* msg) {
  return *msg->asset_;
}
void AssetByIDResponse::clear_asset() {
  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
AssetByIDResponse::AssetByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.AssetByIDResponse)
}
AssetByIDResponse::AssetByIDResponse(const AssetByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::vega::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.AssetByIDResponse)
}

void AssetByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetByIDResponse_api_2ftrading_2eproto.base);
  asset_ = nullptr;
}

AssetByIDResponse::~AssetByIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.AssetByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete asset_;
}

void AssetByIDResponse::ArenaDtor(void* object) {
  AssetByIDResponse* _this = reinterpret_cast< AssetByIDResponse* >(object);
  (void)_this;
}
void AssetByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetByIDResponse& AssetByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.AssetByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Asset asset = 1 [json_name = "asset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.AssetByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Asset asset = 1 [json_name = "asset"];
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.AssetByIDResponse)
  return target;
}

size_t AssetByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.AssetByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Asset asset = 1 [json_name = "asset"];
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.AssetByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.AssetByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.AssetByIDResponse)
    MergeFrom(*source);
  }
}

void AssetByIDResponse::MergeFrom(const AssetByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.AssetByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    _internal_mutable_asset()->::vega::Asset::MergeFrom(from._internal_asset());
  }
}

void AssetByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.AssetByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetByIDResponse::CopyFrom(const AssetByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.AssetByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetByIDResponse::IsInitialized() const {
  return true;
}

void AssetByIDResponse::InternalSwap(AssetByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(asset_, other->asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNodeSignaturesAggregateRequest::_Internal {
 public:
};

GetNodeSignaturesAggregateRequest::GetNodeSignaturesAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNodeSignaturesAggregateRequest)
}
GetNodeSignaturesAggregateRequest::GetNodeSignaturesAggregateRequest(const GetNodeSignaturesAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNodeSignaturesAggregateRequest)
}

void GetNodeSignaturesAggregateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNodeSignaturesAggregateRequest::~GetNodeSignaturesAggregateRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetNodeSignaturesAggregateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeSignaturesAggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNodeSignaturesAggregateRequest::ArenaDtor(void* object) {
  GetNodeSignaturesAggregateRequest* _this = reinterpret_cast< GetNodeSignaturesAggregateRequest* >(object);
  (void)_this;
}
void GetNodeSignaturesAggregateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeSignaturesAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeSignaturesAggregateRequest& GetNodeSignaturesAggregateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNodeSignaturesAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNodeSignaturesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeSignaturesAggregateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.GetNodeSignaturesAggregateRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeSignaturesAggregateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNodeSignaturesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.GetNodeSignaturesAggregateRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNodeSignaturesAggregateRequest)
  return target;
}

size_t GetNodeSignaturesAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNodeSignaturesAggregateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeSignaturesAggregateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNodeSignaturesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeSignaturesAggregateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeSignaturesAggregateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNodeSignaturesAggregateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNodeSignaturesAggregateRequest)
    MergeFrom(*source);
  }
}

void GetNodeSignaturesAggregateRequest::MergeFrom(const GetNodeSignaturesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNodeSignaturesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetNodeSignaturesAggregateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNodeSignaturesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSignaturesAggregateRequest::CopyFrom(const GetNodeSignaturesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNodeSignaturesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSignaturesAggregateRequest::IsInitialized() const {
  return true;
}

void GetNodeSignaturesAggregateRequest::InternalSwap(GetNodeSignaturesAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeSignaturesAggregateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNodeSignaturesAggregateResponse::_Internal {
 public:
};

void GetNodeSignaturesAggregateResponse::clear_signatures() {
  signatures_.Clear();
}
GetNodeSignaturesAggregateResponse::GetNodeSignaturesAggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNodeSignaturesAggregateResponse)
}
GetNodeSignaturesAggregateResponse::GetNodeSignaturesAggregateResponse(const GetNodeSignaturesAggregateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNodeSignaturesAggregateResponse)
}

void GetNodeSignaturesAggregateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto.base);
}

GetNodeSignaturesAggregateResponse::~GetNodeSignaturesAggregateResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetNodeSignaturesAggregateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeSignaturesAggregateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNodeSignaturesAggregateResponse::ArenaDtor(void* object) {
  GetNodeSignaturesAggregateResponse* _this = reinterpret_cast< GetNodeSignaturesAggregateResponse* >(object);
  (void)_this;
}
void GetNodeSignaturesAggregateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeSignaturesAggregateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeSignaturesAggregateResponse& GetNodeSignaturesAggregateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNodeSignaturesAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNodeSignaturesAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeSignaturesAggregateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.commands.v1.NodeSignature signatures = 1 [json_name = "signatures"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeSignaturesAggregateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNodeSignaturesAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.commands.v1.NodeSignature signatures = 1 [json_name = "signatures"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNodeSignaturesAggregateResponse)
  return target;
}

size_t GetNodeSignaturesAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNodeSignaturesAggregateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.commands.v1.NodeSignature signatures = 1 [json_name = "signatures"];
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeSignaturesAggregateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNodeSignaturesAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeSignaturesAggregateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeSignaturesAggregateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNodeSignaturesAggregateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNodeSignaturesAggregateResponse)
    MergeFrom(*source);
  }
}

void GetNodeSignaturesAggregateResponse::MergeFrom(const GetNodeSignaturesAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNodeSignaturesAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
}

void GetNodeSignaturesAggregateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNodeSignaturesAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSignaturesAggregateResponse::CopyFrom(const GetNodeSignaturesAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNodeSignaturesAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSignaturesAggregateResponse::IsInitialized() const {
  return true;
}

void GetNodeSignaturesAggregateResponse::InternalSwap(GetNodeSignaturesAggregateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeSignaturesAggregateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OptionalProposalState::_Internal {
 public:
};

OptionalProposalState::OptionalProposalState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OptionalProposalState)
}
OptionalProposalState::OptionalProposalState(const OptionalProposalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:api.v1.OptionalProposalState)
}

void OptionalProposalState::SharedCtor() {
  value_ = 0;
}

OptionalProposalState::~OptionalProposalState() {
  // @@protoc_insertion_point(destructor:api.v1.OptionalProposalState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptionalProposalState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OptionalProposalState::ArenaDtor(void* object) {
  OptionalProposalState* _this = reinterpret_cast< OptionalProposalState* >(object);
  (void)_this;
}
void OptionalProposalState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionalProposalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionalProposalState& OptionalProposalState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionalProposalState_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OptionalProposalState::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OptionalProposalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalProposalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Proposal.State value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::vega::Proposal_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionalProposalState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OptionalProposalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal.State value = 1 [json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OptionalProposalState)
  return target;
}

size_t OptionalProposalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OptionalProposalState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Proposal.State value = 1 [json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionalProposalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OptionalProposalState)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionalProposalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionalProposalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OptionalProposalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OptionalProposalState)
    MergeFrom(*source);
  }
}

void OptionalProposalState::MergeFrom(const OptionalProposalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OptionalProposalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void OptionalProposalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OptionalProposalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalProposalState::CopyFrom(const OptionalProposalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OptionalProposalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalProposalState::IsInitialized() const {
  return true;
}

void OptionalProposalState::InternalSwap(OptionalProposalState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalProposalState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsRequest::_Internal {
 public:
  static const ::api::v1::OptionalProposalState& select_in_state(const GetProposalsRequest* msg);
};

const ::api::v1::OptionalProposalState&
GetProposalsRequest::_Internal::select_in_state(const GetProposalsRequest* msg) {
  return *msg->select_in_state_;
}
GetProposalsRequest::GetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalsRequest)
}
GetProposalsRequest::GetProposalsRequest(const GetProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select_in_state()) {
    select_in_state_ = new ::api::v1::OptionalProposalState(*from.select_in_state_);
  } else {
    select_in_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalsRequest)
}

void GetProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsRequest_api_2ftrading_2eproto.base);
  select_in_state_ = nullptr;
}

GetProposalsRequest::~GetProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete select_in_state_;
}

void GetProposalsRequest::ArenaDtor(void* object) {
  GetProposalsRequest* _this = reinterpret_cast< GetProposalsRequest* >(object);
  (void)_this;
}
void GetProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsRequest& GetProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select_in_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalsRequest)
  return target;
}

size_t GetProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_in_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalsRequest)
    MergeFrom(*source);
  }
}

void GetProposalsRequest::MergeFrom(const GetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_select_in_state()) {
    _internal_mutable_select_in_state()->::api::v1::OptionalProposalState::MergeFrom(from._internal_select_in_state());
  }
}

void GetProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsRequest::CopyFrom(const GetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsRequest::IsInitialized() const {
  return true;
}

void GetProposalsRequest::InternalSwap(GetProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(select_in_state_, other->select_in_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsResponse::_Internal {
 public:
};

void GetProposalsResponse::clear_data() {
  data_.Clear();
}
GetProposalsResponse::GetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalsResponse)
}
GetProposalsResponse::GetProposalsResponse(const GetProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalsResponse)
}

void GetProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsResponse_api_2ftrading_2eproto.base);
}

GetProposalsResponse::~GetProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetProposalsResponse::ArenaDtor(void* object) {
  GetProposalsResponse* _this = reinterpret_cast< GetProposalsResponse* >(object);
  (void)_this;
}
void GetProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsResponse& GetProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalsResponse)
  return target;
}

size_t GetProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalsResponse)
    MergeFrom(*source);
  }
}

void GetProposalsResponse::MergeFrom(const GetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsResponse::CopyFrom(const GetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsResponse::IsInitialized() const {
  return true;
}

void GetProposalsResponse::InternalSwap(GetProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsByPartyRequest::_Internal {
 public:
  static const ::api::v1::OptionalProposalState& select_in_state(const GetProposalsByPartyRequest* msg);
};

const ::api::v1::OptionalProposalState&
GetProposalsByPartyRequest::_Internal::select_in_state(const GetProposalsByPartyRequest* msg) {
  return *msg->select_in_state_;
}
GetProposalsByPartyRequest::GetProposalsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalsByPartyRequest)
}
GetProposalsByPartyRequest::GetProposalsByPartyRequest(const GetProposalsByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  if (from._internal_has_select_in_state()) {
    select_in_state_ = new ::api::v1::OptionalProposalState(*from.select_in_state_);
  } else {
    select_in_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalsByPartyRequest)
}

void GetProposalsByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  select_in_state_ = nullptr;
}

GetProposalsByPartyRequest::~GetProposalsByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalsByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete select_in_state_;
}

void GetProposalsByPartyRequest::ArenaDtor(void* object) {
  GetProposalsByPartyRequest* _this = reinterpret_cast< GetProposalsByPartyRequest* >(object);
  (void)_this;
}
void GetProposalsByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsByPartyRequest& GetProposalsByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.GetProposalsByPartyRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.GetProposalsByPartyRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::select_in_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalsByPartyRequest)
  return target;
}

size_t GetProposalsByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalsByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_in_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalsByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalsByPartyRequest)
    MergeFrom(*source);
  }
}

void GetProposalsByPartyRequest::MergeFrom(const GetProposalsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_select_in_state()) {
    _internal_mutable_select_in_state()->::api::v1::OptionalProposalState::MergeFrom(from._internal_select_in_state());
  }
}

void GetProposalsByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsByPartyRequest::CopyFrom(const GetProposalsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsByPartyRequest::IsInitialized() const {
  return true;
}

void GetProposalsByPartyRequest::InternalSwap(GetProposalsByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(select_in_state_, other->select_in_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsByPartyResponse::_Internal {
 public:
};

void GetProposalsByPartyResponse::clear_data() {
  data_.Clear();
}
GetProposalsByPartyResponse::GetProposalsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalsByPartyResponse)
}
GetProposalsByPartyResponse::GetProposalsByPartyResponse(const GetProposalsByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalsByPartyResponse)
}

void GetProposalsByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto.base);
}

GetProposalsByPartyResponse::~GetProposalsByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalsByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetProposalsByPartyResponse::ArenaDtor(void* object) {
  GetProposalsByPartyResponse* _this = reinterpret_cast< GetProposalsByPartyResponse* >(object);
  (void)_this;
}
void GetProposalsByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsByPartyResponse& GetProposalsByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalsByPartyResponse)
  return target;
}

size_t GetProposalsByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalsByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalsByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalsByPartyResponse)
    MergeFrom(*source);
  }
}

void GetProposalsByPartyResponse::MergeFrom(const GetProposalsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetProposalsByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsByPartyResponse::CopyFrom(const GetProposalsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsByPartyResponse::IsInitialized() const {
  return true;
}

void GetProposalsByPartyResponse::InternalSwap(GetProposalsByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVotesByPartyRequest::_Internal {
 public:
};

GetVotesByPartyRequest::GetVotesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetVotesByPartyRequest)
}
GetVotesByPartyRequest::GetVotesByPartyRequest(const GetVotesByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetVotesByPartyRequest)
}

void GetVotesByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetVotesByPartyRequest::~GetVotesByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetVotesByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVotesByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVotesByPartyRequest::ArenaDtor(void* object) {
  GetVotesByPartyRequest* _this = reinterpret_cast< GetVotesByPartyRequest* >(object);
  (void)_this;
}
void GetVotesByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVotesByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVotesByPartyRequest& GetVotesByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVotesByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetVotesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVotesByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.GetVotesByPartyRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVotesByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetVotesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.GetVotesByPartyRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetVotesByPartyRequest)
  return target;
}

size_t GetVotesByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetVotesByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVotesByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetVotesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVotesByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVotesByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetVotesByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetVotesByPartyRequest)
    MergeFrom(*source);
  }
}

void GetVotesByPartyRequest::MergeFrom(const GetVotesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetVotesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void GetVotesByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetVotesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVotesByPartyRequest::CopyFrom(const GetVotesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetVotesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVotesByPartyRequest::IsInitialized() const {
  return true;
}

void GetVotesByPartyRequest::InternalSwap(GetVotesByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVotesByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVotesByPartyResponse::_Internal {
 public:
};

void GetVotesByPartyResponse::clear_votes() {
  votes_.Clear();
}
GetVotesByPartyResponse::GetVotesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetVotesByPartyResponse)
}
GetVotesByPartyResponse::GetVotesByPartyResponse(const GetVotesByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetVotesByPartyResponse)
}

void GetVotesByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto.base);
}

GetVotesByPartyResponse::~GetVotesByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetVotesByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVotesByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetVotesByPartyResponse::ArenaDtor(void* object) {
  GetVotesByPartyResponse* _this = reinterpret_cast< GetVotesByPartyResponse* >(object);
  (void)_this;
}
void GetVotesByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVotesByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVotesByPartyResponse& GetVotesByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVotesByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetVotesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVotesByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Vote votes = 1 [json_name = "votes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVotesByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetVotesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetVotesByPartyResponse)
  return target;
}

size_t GetVotesByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetVotesByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVotesByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetVotesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVotesByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVotesByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetVotesByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetVotesByPartyResponse)
    MergeFrom(*source);
  }
}

void GetVotesByPartyResponse::MergeFrom(const GetVotesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetVotesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
}

void GetVotesByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetVotesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVotesByPartyResponse::CopyFrom(const GetVotesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetVotesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVotesByPartyResponse::IsInitialized() const {
  return true;
}

void GetVotesByPartyResponse::InternalSwap(GetVotesByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVotesByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewMarketProposalsRequest::_Internal {
 public:
  static const ::api::v1::OptionalProposalState& select_in_state(const GetNewMarketProposalsRequest* msg);
};

const ::api::v1::OptionalProposalState&
GetNewMarketProposalsRequest::_Internal::select_in_state(const GetNewMarketProposalsRequest* msg) {
  return *msg->select_in_state_;
}
GetNewMarketProposalsRequest::GetNewMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNewMarketProposalsRequest)
}
GetNewMarketProposalsRequest::GetNewMarketProposalsRequest(const GetNewMarketProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select_in_state()) {
    select_in_state_ = new ::api::v1::OptionalProposalState(*from.select_in_state_);
  } else {
    select_in_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNewMarketProposalsRequest)
}

void GetNewMarketProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto.base);
  select_in_state_ = nullptr;
}

GetNewMarketProposalsRequest::~GetNewMarketProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetNewMarketProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewMarketProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete select_in_state_;
}

void GetNewMarketProposalsRequest::ArenaDtor(void* object) {
  GetNewMarketProposalsRequest* _this = reinterpret_cast< GetNewMarketProposalsRequest* >(object);
  (void)_this;
}
void GetNewMarketProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewMarketProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewMarketProposalsRequest& GetNewMarketProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewMarketProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNewMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewMarketProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewMarketProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNewMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select_in_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNewMarketProposalsRequest)
  return target;
}

size_t GetNewMarketProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNewMarketProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_in_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewMarketProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNewMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewMarketProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewMarketProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNewMarketProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNewMarketProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNewMarketProposalsRequest::MergeFrom(const GetNewMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNewMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_select_in_state()) {
    _internal_mutable_select_in_state()->::api::v1::OptionalProposalState::MergeFrom(from._internal_select_in_state());
  }
}

void GetNewMarketProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNewMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewMarketProposalsRequest::CopyFrom(const GetNewMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNewMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewMarketProposalsRequest::IsInitialized() const {
  return true;
}

void GetNewMarketProposalsRequest::InternalSwap(GetNewMarketProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(select_in_state_, other->select_in_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewMarketProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewMarketProposalsResponse::_Internal {
 public:
};

void GetNewMarketProposalsResponse::clear_data() {
  data_.Clear();
}
GetNewMarketProposalsResponse::GetNewMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNewMarketProposalsResponse)
}
GetNewMarketProposalsResponse::GetNewMarketProposalsResponse(const GetNewMarketProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNewMarketProposalsResponse)
}

void GetNewMarketProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto.base);
}

GetNewMarketProposalsResponse::~GetNewMarketProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetNewMarketProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewMarketProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNewMarketProposalsResponse::ArenaDtor(void* object) {
  GetNewMarketProposalsResponse* _this = reinterpret_cast< GetNewMarketProposalsResponse* >(object);
  (void)_this;
}
void GetNewMarketProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewMarketProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewMarketProposalsResponse& GetNewMarketProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewMarketProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNewMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewMarketProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewMarketProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNewMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNewMarketProposalsResponse)
  return target;
}

size_t GetNewMarketProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNewMarketProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewMarketProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNewMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewMarketProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewMarketProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNewMarketProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNewMarketProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNewMarketProposalsResponse::MergeFrom(const GetNewMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNewMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNewMarketProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNewMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewMarketProposalsResponse::CopyFrom(const GetNewMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNewMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewMarketProposalsResponse::IsInitialized() const {
  return true;
}

void GetNewMarketProposalsResponse::InternalSwap(GetNewMarketProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewMarketProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetUpdateMarketProposalsRequest::_Internal {
 public:
  static const ::api::v1::OptionalProposalState& select_in_state(const GetUpdateMarketProposalsRequest* msg);
};

const ::api::v1::OptionalProposalState&
GetUpdateMarketProposalsRequest::_Internal::select_in_state(const GetUpdateMarketProposalsRequest* msg) {
  return *msg->select_in_state_;
}
GetUpdateMarketProposalsRequest::GetUpdateMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetUpdateMarketProposalsRequest)
}
GetUpdateMarketProposalsRequest::GetUpdateMarketProposalsRequest(const GetUpdateMarketProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  if (from._internal_has_select_in_state()) {
    select_in_state_ = new ::api::v1::OptionalProposalState(*from.select_in_state_);
  } else {
    select_in_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetUpdateMarketProposalsRequest)
}

void GetUpdateMarketProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  select_in_state_ = nullptr;
}

GetUpdateMarketProposalsRequest::~GetUpdateMarketProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetUpdateMarketProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUpdateMarketProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete select_in_state_;
}

void GetUpdateMarketProposalsRequest::ArenaDtor(void* object) {
  GetUpdateMarketProposalsRequest* _this = reinterpret_cast< GetUpdateMarketProposalsRequest* >(object);
  (void)_this;
}
void GetUpdateMarketProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUpdateMarketProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdateMarketProposalsRequest& GetUpdateMarketProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetUpdateMarketProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetUpdateMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUpdateMarketProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.GetUpdateMarketProposalsRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUpdateMarketProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetUpdateMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.GetUpdateMarketProposalsRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::select_in_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetUpdateMarketProposalsRequest)
  return target;
}

size_t GetUpdateMarketProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetUpdateMarketProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // .api.v1.OptionalProposalState select_in_state = 2 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_in_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateMarketProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetUpdateMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateMarketProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUpdateMarketProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetUpdateMarketProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetUpdateMarketProposalsRequest)
    MergeFrom(*source);
  }
}

void GetUpdateMarketProposalsRequest::MergeFrom(const GetUpdateMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetUpdateMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.has_select_in_state()) {
    _internal_mutable_select_in_state()->::api::v1::OptionalProposalState::MergeFrom(from._internal_select_in_state());
  }
}

void GetUpdateMarketProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetUpdateMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateMarketProposalsRequest::CopyFrom(const GetUpdateMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetUpdateMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateMarketProposalsRequest::IsInitialized() const {
  return true;
}

void GetUpdateMarketProposalsRequest::InternalSwap(GetUpdateMarketProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(select_in_state_, other->select_in_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUpdateMarketProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetUpdateMarketProposalsResponse::_Internal {
 public:
};

void GetUpdateMarketProposalsResponse::clear_data() {
  data_.Clear();
}
GetUpdateMarketProposalsResponse::GetUpdateMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetUpdateMarketProposalsResponse)
}
GetUpdateMarketProposalsResponse::GetUpdateMarketProposalsResponse(const GetUpdateMarketProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetUpdateMarketProposalsResponse)
}

void GetUpdateMarketProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto.base);
}

GetUpdateMarketProposalsResponse::~GetUpdateMarketProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetUpdateMarketProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUpdateMarketProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUpdateMarketProposalsResponse::ArenaDtor(void* object) {
  GetUpdateMarketProposalsResponse* _this = reinterpret_cast< GetUpdateMarketProposalsResponse* >(object);
  (void)_this;
}
void GetUpdateMarketProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUpdateMarketProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdateMarketProposalsResponse& GetUpdateMarketProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetUpdateMarketProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetUpdateMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUpdateMarketProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUpdateMarketProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetUpdateMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetUpdateMarketProposalsResponse)
  return target;
}

size_t GetUpdateMarketProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetUpdateMarketProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateMarketProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetUpdateMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateMarketProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUpdateMarketProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetUpdateMarketProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetUpdateMarketProposalsResponse)
    MergeFrom(*source);
  }
}

void GetUpdateMarketProposalsResponse::MergeFrom(const GetUpdateMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetUpdateMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetUpdateMarketProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetUpdateMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateMarketProposalsResponse::CopyFrom(const GetUpdateMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetUpdateMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateMarketProposalsResponse::IsInitialized() const {
  return true;
}

void GetUpdateMarketProposalsResponse::InternalSwap(GetUpdateMarketProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUpdateMarketProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNetworkParametersProposalsRequest::_Internal {
 public:
  static const ::api::v1::OptionalProposalState& select_in_state(const GetNetworkParametersProposalsRequest* msg);
};

const ::api::v1::OptionalProposalState&
GetNetworkParametersProposalsRequest::_Internal::select_in_state(const GetNetworkParametersProposalsRequest* msg) {
  return *msg->select_in_state_;
}
GetNetworkParametersProposalsRequest::GetNetworkParametersProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNetworkParametersProposalsRequest)
}
GetNetworkParametersProposalsRequest::GetNetworkParametersProposalsRequest(const GetNetworkParametersProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select_in_state()) {
    select_in_state_ = new ::api::v1::OptionalProposalState(*from.select_in_state_);
  } else {
    select_in_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNetworkParametersProposalsRequest)
}

void GetNetworkParametersProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto.base);
  select_in_state_ = nullptr;
}

GetNetworkParametersProposalsRequest::~GetNetworkParametersProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetNetworkParametersProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkParametersProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete select_in_state_;
}

void GetNetworkParametersProposalsRequest::ArenaDtor(void* object) {
  GetNetworkParametersProposalsRequest* _this = reinterpret_cast< GetNetworkParametersProposalsRequest* >(object);
  (void)_this;
}
void GetNetworkParametersProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkParametersProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkParametersProposalsRequest& GetNetworkParametersProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkParametersProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNetworkParametersProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkParametersProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkParametersProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNetworkParametersProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select_in_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNetworkParametersProposalsRequest)
  return target;
}

size_t GetNetworkParametersProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNetworkParametersProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_in_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNetworkParametersProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkParametersProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNetworkParametersProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNetworkParametersProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNetworkParametersProposalsRequest::MergeFrom(const GetNetworkParametersProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNetworkParametersProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_select_in_state()) {
    _internal_mutable_select_in_state()->::api::v1::OptionalProposalState::MergeFrom(from._internal_select_in_state());
  }
}

void GetNetworkParametersProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNetworkParametersProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersProposalsRequest::CopyFrom(const GetNetworkParametersProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNetworkParametersProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersProposalsRequest::IsInitialized() const {
  return true;
}

void GetNetworkParametersProposalsRequest::InternalSwap(GetNetworkParametersProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(select_in_state_, other->select_in_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNetworkParametersProposalsResponse::_Internal {
 public:
};

void GetNetworkParametersProposalsResponse::clear_data() {
  data_.Clear();
}
GetNetworkParametersProposalsResponse::GetNetworkParametersProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNetworkParametersProposalsResponse)
}
GetNetworkParametersProposalsResponse::GetNetworkParametersProposalsResponse(const GetNetworkParametersProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNetworkParametersProposalsResponse)
}

void GetNetworkParametersProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto.base);
}

GetNetworkParametersProposalsResponse::~GetNetworkParametersProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetNetworkParametersProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkParametersProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNetworkParametersProposalsResponse::ArenaDtor(void* object) {
  GetNetworkParametersProposalsResponse* _this = reinterpret_cast< GetNetworkParametersProposalsResponse* >(object);
  (void)_this;
}
void GetNetworkParametersProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkParametersProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkParametersProposalsResponse& GetNetworkParametersProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkParametersProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNetworkParametersProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkParametersProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkParametersProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNetworkParametersProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNetworkParametersProposalsResponse)
  return target;
}

size_t GetNetworkParametersProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNetworkParametersProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNetworkParametersProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkParametersProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNetworkParametersProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNetworkParametersProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNetworkParametersProposalsResponse::MergeFrom(const GetNetworkParametersProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNetworkParametersProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNetworkParametersProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNetworkParametersProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersProposalsResponse::CopyFrom(const GetNetworkParametersProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNetworkParametersProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersProposalsResponse::IsInitialized() const {
  return true;
}

void GetNetworkParametersProposalsResponse::InternalSwap(GetNetworkParametersProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewAssetProposalsRequest::_Internal {
 public:
  static const ::api::v1::OptionalProposalState& select_in_state(const GetNewAssetProposalsRequest* msg);
};

const ::api::v1::OptionalProposalState&
GetNewAssetProposalsRequest::_Internal::select_in_state(const GetNewAssetProposalsRequest* msg) {
  return *msg->select_in_state_;
}
GetNewAssetProposalsRequest::GetNewAssetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNewAssetProposalsRequest)
}
GetNewAssetProposalsRequest::GetNewAssetProposalsRequest(const GetNewAssetProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select_in_state()) {
    select_in_state_ = new ::api::v1::OptionalProposalState(*from.select_in_state_);
  } else {
    select_in_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNewAssetProposalsRequest)
}

void GetNewAssetProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto.base);
  select_in_state_ = nullptr;
}

GetNewAssetProposalsRequest::~GetNewAssetProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetNewAssetProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewAssetProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete select_in_state_;
}

void GetNewAssetProposalsRequest::ArenaDtor(void* object) {
  GetNewAssetProposalsRequest* _this = reinterpret_cast< GetNewAssetProposalsRequest* >(object);
  (void)_this;
}
void GetNewAssetProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewAssetProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewAssetProposalsRequest& GetNewAssetProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewAssetProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNewAssetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && select_in_state_ != nullptr) {
    delete select_in_state_;
  }
  select_in_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewAssetProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewAssetProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNewAssetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select_in_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNewAssetProposalsRequest)
  return target;
}

size_t GetNewAssetProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNewAssetProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.v1.OptionalProposalState select_in_state = 1 [json_name = "selectInState"];
  if (this->has_select_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_in_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewAssetProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNewAssetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewAssetProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewAssetProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNewAssetProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNewAssetProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNewAssetProposalsRequest::MergeFrom(const GetNewAssetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNewAssetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_select_in_state()) {
    _internal_mutable_select_in_state()->::api::v1::OptionalProposalState::MergeFrom(from._internal_select_in_state());
  }
}

void GetNewAssetProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNewAssetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewAssetProposalsRequest::CopyFrom(const GetNewAssetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNewAssetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewAssetProposalsRequest::IsInitialized() const {
  return true;
}

void GetNewAssetProposalsRequest::InternalSwap(GetNewAssetProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(select_in_state_, other->select_in_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewAssetProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewAssetProposalsResponse::_Internal {
 public:
};

void GetNewAssetProposalsResponse::clear_data() {
  data_.Clear();
}
GetNewAssetProposalsResponse::GetNewAssetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetNewAssetProposalsResponse)
}
GetNewAssetProposalsResponse::GetNewAssetProposalsResponse(const GetNewAssetProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetNewAssetProposalsResponse)
}

void GetNewAssetProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto.base);
}

GetNewAssetProposalsResponse::~GetNewAssetProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetNewAssetProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewAssetProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNewAssetProposalsResponse::ArenaDtor(void* object) {
  GetNewAssetProposalsResponse* _this = reinterpret_cast< GetNewAssetProposalsResponse* >(object);
  (void)_this;
}
void GetNewAssetProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewAssetProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewAssetProposalsResponse& GetNewAssetProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewAssetProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetNewAssetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewAssetProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewAssetProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetNewAssetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetNewAssetProposalsResponse)
  return target;
}

size_t GetNewAssetProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetNewAssetProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewAssetProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetNewAssetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewAssetProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewAssetProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetNewAssetProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetNewAssetProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNewAssetProposalsResponse::MergeFrom(const GetNewAssetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetNewAssetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNewAssetProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetNewAssetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewAssetProposalsResponse::CopyFrom(const GetNewAssetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetNewAssetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewAssetProposalsResponse::IsInitialized() const {
  return true;
}

void GetNewAssetProposalsResponse::InternalSwap(GetNewAssetProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewAssetProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByIDRequest::_Internal {
 public:
};

GetProposalByIDRequest::GetProposalByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalByIDRequest)
}
GetProposalByIDRequest::GetProposalByIDRequest(const GetProposalByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalByIDRequest)
}

void GetProposalByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByIDRequest_api_2ftrading_2eproto.base);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProposalByIDRequest::~GetProposalByIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProposalByIDRequest::ArenaDtor(void* object) {
  GetProposalByIDRequest* _this = reinterpret_cast< GetProposalByIDRequest* >(object);
  (void)_this;
}
void GetProposalByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByIDRequest& GetProposalByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.GetProposalByIDRequest.proposal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposal_id().data(), static_cast<int>(this->_internal_proposal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.GetProposalByIDRequest.proposal_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalByIDRequest)
  return target;
}

size_t GetProposalByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalByIDRequest)
    MergeFrom(*source);
  }
}

void GetProposalByIDRequest::MergeFrom(const GetProposalByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
}

void GetProposalByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByIDRequest::CopyFrom(const GetProposalByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByIDRequest::IsInitialized() const {
  return true;
}

void GetProposalByIDRequest::InternalSwap(GetProposalByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByIDResponse::_Internal {
 public:
  static const ::vega::GovernanceData& data(const GetProposalByIDResponse* msg);
};

const ::vega::GovernanceData&
GetProposalByIDResponse::_Internal::data(const GetProposalByIDResponse* msg) {
  return *msg->data_;
}
void GetProposalByIDResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
GetProposalByIDResponse::GetProposalByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalByIDResponse)
}
GetProposalByIDResponse::GetProposalByIDResponse(const GetProposalByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalByIDResponse)
}

void GetProposalByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByIDResponse_api_2ftrading_2eproto.base);
  data_ = nullptr;
}

GetProposalByIDResponse::~GetProposalByIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void GetProposalByIDResponse::ArenaDtor(void* object) {
  GetProposalByIDResponse* _this = reinterpret_cast< GetProposalByIDResponse* >(object);
  (void)_this;
}
void GetProposalByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByIDResponse& GetProposalByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalByIDResponse)
  return target;
}

size_t GetProposalByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalByIDResponse)
    MergeFrom(*source);
  }
}

void GetProposalByIDResponse::MergeFrom(const GetProposalByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::vega::GovernanceData::MergeFrom(from._internal_data());
  }
}

void GetProposalByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByIDResponse::CopyFrom(const GetProposalByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByIDResponse::IsInitialized() const {
  return true;
}

void GetProposalByIDResponse::InternalSwap(GetProposalByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByReferenceRequest::_Internal {
 public:
};

GetProposalByReferenceRequest::GetProposalByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalByReferenceRequest)
}
GetProposalByReferenceRequest::GetProposalByReferenceRequest(const GetProposalByReferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalByReferenceRequest)
}

void GetProposalByReferenceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProposalByReferenceRequest::~GetProposalByReferenceRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalByReferenceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByReferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProposalByReferenceRequest::ArenaDtor(void* object) {
  GetProposalByReferenceRequest* _this = reinterpret_cast< GetProposalByReferenceRequest* >(object);
  (void)_this;
}
void GetProposalByReferenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByReferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByReferenceRequest& GetProposalByReferenceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByReferenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 1 [json_name = "reference", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.GetProposalByReferenceRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByReferenceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.GetProposalByReferenceRequest.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalByReferenceRequest)
  return target;
}

size_t GetProposalByReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalByReferenceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByReferenceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByReferenceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByReferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalByReferenceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalByReferenceRequest)
    MergeFrom(*source);
  }
}

void GetProposalByReferenceRequest::MergeFrom(const GetProposalByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void GetProposalByReferenceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByReferenceRequest::CopyFrom(const GetProposalByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByReferenceRequest::IsInitialized() const {
  return true;
}

void GetProposalByReferenceRequest::InternalSwap(GetProposalByReferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByReferenceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByReferenceResponse::_Internal {
 public:
  static const ::vega::GovernanceData& data(const GetProposalByReferenceResponse* msg);
};

const ::vega::GovernanceData&
GetProposalByReferenceResponse::_Internal::data(const GetProposalByReferenceResponse* msg) {
  return *msg->data_;
}
void GetProposalByReferenceResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
GetProposalByReferenceResponse::GetProposalByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetProposalByReferenceResponse)
}
GetProposalByReferenceResponse::GetProposalByReferenceResponse(const GetProposalByReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.GetProposalByReferenceResponse)
}

void GetProposalByReferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto.base);
  data_ = nullptr;
}

GetProposalByReferenceResponse::~GetProposalByReferenceResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetProposalByReferenceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByReferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void GetProposalByReferenceResponse::ArenaDtor(void* object) {
  GetProposalByReferenceResponse* _this = reinterpret_cast< GetProposalByReferenceResponse* >(object);
  (void)_this;
}
void GetProposalByReferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByReferenceResponse& GetProposalByReferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetProposalByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByReferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetProposalByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetProposalByReferenceResponse)
  return target;
}

size_t GetProposalByReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetProposalByReferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByReferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetProposalByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByReferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetProposalByReferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetProposalByReferenceResponse)
    MergeFrom(*source);
  }
}

void GetProposalByReferenceResponse::MergeFrom(const GetProposalByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetProposalByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::vega::GovernanceData::MergeFrom(from._internal_data());
  }
}

void GetProposalByReferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetProposalByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByReferenceResponse::CopyFrom(const GetProposalByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetProposalByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByReferenceResponse::IsInitialized() const {
  return true;
}

void GetProposalByReferenceResponse::InternalSwap(GetProposalByReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByReferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveGovernanceRequest::_Internal {
 public:
};

ObserveGovernanceRequest::ObserveGovernanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObserveGovernanceRequest)
}
ObserveGovernanceRequest::ObserveGovernanceRequest(const ObserveGovernanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.ObserveGovernanceRequest)
}

void ObserveGovernanceRequest::SharedCtor() {
}

ObserveGovernanceRequest::~ObserveGovernanceRequest() {
  // @@protoc_insertion_point(destructor:api.v1.ObserveGovernanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveGovernanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObserveGovernanceRequest::ArenaDtor(void* object) {
  ObserveGovernanceRequest* _this = reinterpret_cast< ObserveGovernanceRequest* >(object);
  (void)_this;
}
void ObserveGovernanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveGovernanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveGovernanceRequest& ObserveGovernanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveGovernanceRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveGovernanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObserveGovernanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveGovernanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveGovernanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObserveGovernanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObserveGovernanceRequest)
  return target;
}

size_t ObserveGovernanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObserveGovernanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveGovernanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObserveGovernanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveGovernanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveGovernanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObserveGovernanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObserveGovernanceRequest)
    MergeFrom(*source);
  }
}

void ObserveGovernanceRequest::MergeFrom(const ObserveGovernanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObserveGovernanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObserveGovernanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObserveGovernanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveGovernanceRequest::CopyFrom(const ObserveGovernanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObserveGovernanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveGovernanceRequest::IsInitialized() const {
  return true;
}

void ObserveGovernanceRequest::InternalSwap(ObserveGovernanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveGovernanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveGovernanceResponse::_Internal {
 public:
  static const ::vega::GovernanceData& data(const ObserveGovernanceResponse* msg);
};

const ::vega::GovernanceData&
ObserveGovernanceResponse::_Internal::data(const ObserveGovernanceResponse* msg) {
  return *msg->data_;
}
void ObserveGovernanceResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
ObserveGovernanceResponse::ObserveGovernanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObserveGovernanceResponse)
}
ObserveGovernanceResponse::ObserveGovernanceResponse(const ObserveGovernanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ObserveGovernanceResponse)
}

void ObserveGovernanceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveGovernanceResponse_api_2ftrading_2eproto.base);
  data_ = nullptr;
}

ObserveGovernanceResponse::~ObserveGovernanceResponse() {
  // @@protoc_insertion_point(destructor:api.v1.ObserveGovernanceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveGovernanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ObserveGovernanceResponse::ArenaDtor(void* object) {
  ObserveGovernanceResponse* _this = reinterpret_cast< ObserveGovernanceResponse* >(object);
  (void)_this;
}
void ObserveGovernanceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveGovernanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveGovernanceResponse& ObserveGovernanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveGovernanceResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveGovernanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObserveGovernanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveGovernanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveGovernanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObserveGovernanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObserveGovernanceResponse)
  return target;
}

size_t ObserveGovernanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObserveGovernanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveGovernanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObserveGovernanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveGovernanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveGovernanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObserveGovernanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObserveGovernanceResponse)
    MergeFrom(*source);
  }
}

void ObserveGovernanceResponse::MergeFrom(const ObserveGovernanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObserveGovernanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::vega::GovernanceData::MergeFrom(from._internal_data());
  }
}

void ObserveGovernanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObserveGovernanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveGovernanceResponse::CopyFrom(const ObserveGovernanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObserveGovernanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveGovernanceResponse::IsInitialized() const {
  return true;
}

void ObserveGovernanceResponse::InternalSwap(ObserveGovernanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveGovernanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObservePartyProposalsRequest::_Internal {
 public:
};

ObservePartyProposalsRequest::ObservePartyProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObservePartyProposalsRequest)
}
ObservePartyProposalsRequest::ObservePartyProposalsRequest(const ObservePartyProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ObservePartyProposalsRequest)
}

void ObservePartyProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObservePartyProposalsRequest::~ObservePartyProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.ObservePartyProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObservePartyProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObservePartyProposalsRequest::ArenaDtor(void* object) {
  ObservePartyProposalsRequest* _this = reinterpret_cast< ObservePartyProposalsRequest* >(object);
  (void)_this;
}
void ObservePartyProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservePartyProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyProposalsRequest& ObservePartyProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObservePartyProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservePartyProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ObservePartyProposalsRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservePartyProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObservePartyProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ObservePartyProposalsRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObservePartyProposalsRequest)
  return target;
}

size_t ObservePartyProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObservePartyProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObservePartyProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservePartyProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObservePartyProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObservePartyProposalsRequest)
    MergeFrom(*source);
  }
}

void ObservePartyProposalsRequest::MergeFrom(const ObservePartyProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObservePartyProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void ObservePartyProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObservePartyProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyProposalsRequest::CopyFrom(const ObservePartyProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObservePartyProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyProposalsRequest::IsInitialized() const {
  return true;
}

void ObservePartyProposalsRequest::InternalSwap(ObservePartyProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservePartyProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObservePartyProposalsResponse::_Internal {
 public:
  static const ::vega::GovernanceData& data(const ObservePartyProposalsResponse* msg);
};

const ::vega::GovernanceData&
ObservePartyProposalsResponse::_Internal::data(const ObservePartyProposalsResponse* msg) {
  return *msg->data_;
}
void ObservePartyProposalsResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
ObservePartyProposalsResponse::ObservePartyProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObservePartyProposalsResponse)
}
ObservePartyProposalsResponse::ObservePartyProposalsResponse(const ObservePartyProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ObservePartyProposalsResponse)
}

void ObservePartyProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservePartyProposalsResponse_api_2ftrading_2eproto.base);
  data_ = nullptr;
}

ObservePartyProposalsResponse::~ObservePartyProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.ObservePartyProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObservePartyProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ObservePartyProposalsResponse::ArenaDtor(void* object) {
  ObservePartyProposalsResponse* _this = reinterpret_cast< ObservePartyProposalsResponse* >(object);
  (void)_this;
}
void ObservePartyProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservePartyProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyProposalsResponse& ObservePartyProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservePartyProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObservePartyProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservePartyProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservePartyProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObservePartyProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObservePartyProposalsResponse)
  return target;
}

size_t ObservePartyProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObservePartyProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObservePartyProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservePartyProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObservePartyProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObservePartyProposalsResponse)
    MergeFrom(*source);
  }
}

void ObservePartyProposalsResponse::MergeFrom(const ObservePartyProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObservePartyProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::vega::GovernanceData::MergeFrom(from._internal_data());
  }
}

void ObservePartyProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObservePartyProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyProposalsResponse::CopyFrom(const ObservePartyProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObservePartyProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyProposalsResponse::IsInitialized() const {
  return true;
}

void ObservePartyProposalsResponse::InternalSwap(ObservePartyProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservePartyProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveProposalVotesRequest::_Internal {
 public:
};

ObserveProposalVotesRequest::ObserveProposalVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObserveProposalVotesRequest)
}
ObserveProposalVotesRequest::ObserveProposalVotesRequest(const ObserveProposalVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ObserveProposalVotesRequest)
}

void ObserveProposalVotesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto.base);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObserveProposalVotesRequest::~ObserveProposalVotesRequest() {
  // @@protoc_insertion_point(destructor:api.v1.ObserveProposalVotesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveProposalVotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObserveProposalVotesRequest::ArenaDtor(void* object) {
  ObserveProposalVotesRequest* _this = reinterpret_cast< ObserveProposalVotesRequest* >(object);
  (void)_this;
}
void ObserveProposalVotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveProposalVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveProposalVotesRequest& ObserveProposalVotesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveProposalVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObserveProposalVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveProposalVotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ObserveProposalVotesRequest.proposal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveProposalVotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObserveProposalVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposal_id().data(), static_cast<int>(this->_internal_proposal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ObserveProposalVotesRequest.proposal_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObserveProposalVotesRequest)
  return target;
}

size_t ObserveProposalVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObserveProposalVotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposal_id = 1 [json_name = "proposalId", (.validator.field) = {
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveProposalVotesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObserveProposalVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveProposalVotesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveProposalVotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObserveProposalVotesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObserveProposalVotesRequest)
    MergeFrom(*source);
  }
}

void ObserveProposalVotesRequest::MergeFrom(const ObserveProposalVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObserveProposalVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
}

void ObserveProposalVotesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObserveProposalVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveProposalVotesRequest::CopyFrom(const ObserveProposalVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObserveProposalVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveProposalVotesRequest::IsInitialized() const {
  return true;
}

void ObserveProposalVotesRequest::InternalSwap(ObserveProposalVotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveProposalVotesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveProposalVotesResponse::_Internal {
 public:
  static const ::vega::Vote& vote(const ObserveProposalVotesResponse* msg);
};

const ::vega::Vote&
ObserveProposalVotesResponse::_Internal::vote(const ObserveProposalVotesResponse* msg) {
  return *msg->vote_;
}
void ObserveProposalVotesResponse::clear_vote() {
  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
ObserveProposalVotesResponse::ObserveProposalVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObserveProposalVotesResponse)
}
ObserveProposalVotesResponse::ObserveProposalVotesResponse(const ObserveProposalVotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vote()) {
    vote_ = new ::vega::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ObserveProposalVotesResponse)
}

void ObserveProposalVotesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveProposalVotesResponse_api_2ftrading_2eproto.base);
  vote_ = nullptr;
}

ObserveProposalVotesResponse::~ObserveProposalVotesResponse() {
  // @@protoc_insertion_point(destructor:api.v1.ObserveProposalVotesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveProposalVotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vote_;
}

void ObserveProposalVotesResponse::ArenaDtor(void* object) {
  ObserveProposalVotesResponse* _this = reinterpret_cast< ObserveProposalVotesResponse* >(object);
  (void)_this;
}
void ObserveProposalVotesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveProposalVotesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveProposalVotesResponse& ObserveProposalVotesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveProposalVotesResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveProposalVotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObserveProposalVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveProposalVotesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Vote vote = 1 [json_name = "vote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveProposalVotesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObserveProposalVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [json_name = "vote"];
  if (this->has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vote(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObserveProposalVotesResponse)
  return target;
}

size_t ObserveProposalVotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObserveProposalVotesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [json_name = "vote"];
  if (this->has_vote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveProposalVotesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObserveProposalVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveProposalVotesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveProposalVotesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObserveProposalVotesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObserveProposalVotesResponse)
    MergeFrom(*source);
  }
}

void ObserveProposalVotesResponse::MergeFrom(const ObserveProposalVotesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObserveProposalVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vote()) {
    _internal_mutable_vote()->::vega::Vote::MergeFrom(from._internal_vote());
  }
}

void ObserveProposalVotesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObserveProposalVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveProposalVotesResponse::CopyFrom(const ObserveProposalVotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObserveProposalVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveProposalVotesResponse::IsInitialized() const {
  return true;
}

void ObserveProposalVotesResponse::InternalSwap(ObserveProposalVotesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(vote_, other->vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveProposalVotesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObservePartyVotesRequest::_Internal {
 public:
};

ObservePartyVotesRequest::ObservePartyVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObservePartyVotesRequest)
}
ObservePartyVotesRequest::ObservePartyVotesRequest(const ObservePartyVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ObservePartyVotesRequest)
}

void ObservePartyVotesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObservePartyVotesRequest::~ObservePartyVotesRequest() {
  // @@protoc_insertion_point(destructor:api.v1.ObservePartyVotesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObservePartyVotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObservePartyVotesRequest::ArenaDtor(void* object) {
  ObservePartyVotesRequest* _this = reinterpret_cast< ObservePartyVotesRequest* >(object);
  (void)_this;
}
void ObservePartyVotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservePartyVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyVotesRequest& ObservePartyVotesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObservePartyVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservePartyVotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ObservePartyVotesRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservePartyVotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObservePartyVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ObservePartyVotesRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObservePartyVotesRequest)
  return target;
}

size_t ObservePartyVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObservePartyVotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyVotesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObservePartyVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyVotesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservePartyVotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObservePartyVotesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObservePartyVotesRequest)
    MergeFrom(*source);
  }
}

void ObservePartyVotesRequest::MergeFrom(const ObservePartyVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObservePartyVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void ObservePartyVotesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObservePartyVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyVotesRequest::CopyFrom(const ObservePartyVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObservePartyVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyVotesRequest::IsInitialized() const {
  return true;
}

void ObservePartyVotesRequest::InternalSwap(ObservePartyVotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservePartyVotesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObservePartyVotesResponse::_Internal {
 public:
  static const ::vega::Vote& vote(const ObservePartyVotesResponse* msg);
};

const ::vega::Vote&
ObservePartyVotesResponse::_Internal::vote(const ObservePartyVotesResponse* msg) {
  return *msg->vote_;
}
void ObservePartyVotesResponse::clear_vote() {
  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
ObservePartyVotesResponse::ObservePartyVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObservePartyVotesResponse)
}
ObservePartyVotesResponse::ObservePartyVotesResponse(const ObservePartyVotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vote()) {
    vote_ = new ::vega::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ObservePartyVotesResponse)
}

void ObservePartyVotesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservePartyVotesResponse_api_2ftrading_2eproto.base);
  vote_ = nullptr;
}

ObservePartyVotesResponse::~ObservePartyVotesResponse() {
  // @@protoc_insertion_point(destructor:api.v1.ObservePartyVotesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObservePartyVotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vote_;
}

void ObservePartyVotesResponse::ArenaDtor(void* object) {
  ObservePartyVotesResponse* _this = reinterpret_cast< ObservePartyVotesResponse* >(object);
  (void)_this;
}
void ObservePartyVotesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservePartyVotesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyVotesResponse& ObservePartyVotesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservePartyVotesResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyVotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObservePartyVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservePartyVotesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Vote vote = 1 [json_name = "vote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservePartyVotesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObservePartyVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [json_name = "vote"];
  if (this->has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vote(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObservePartyVotesResponse)
  return target;
}

size_t ObservePartyVotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObservePartyVotesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [json_name = "vote"];
  if (this->has_vote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyVotesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObservePartyVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyVotesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservePartyVotesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObservePartyVotesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObservePartyVotesResponse)
    MergeFrom(*source);
  }
}

void ObservePartyVotesResponse::MergeFrom(const ObservePartyVotesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObservePartyVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vote()) {
    _internal_mutable_vote()->::vega::Vote::MergeFrom(from._internal_vote());
  }
}

void ObservePartyVotesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObservePartyVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyVotesResponse::CopyFrom(const ObservePartyVotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObservePartyVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyVotesResponse::IsInitialized() const {
  return true;
}

void ObservePartyVotesResponse::InternalSwap(ObservePartyVotesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(vote_, other->vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservePartyVotesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevelsSubscribeRequest::_Internal {
 public:
};

MarginLevelsSubscribeRequest::MarginLevelsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarginLevelsSubscribeRequest)
}
MarginLevelsSubscribeRequest::MarginLevelsSubscribeRequest(const MarginLevelsSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarginLevelsSubscribeRequest)
}

void MarginLevelsSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarginLevelsSubscribeRequest::~MarginLevelsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarginLevelsSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevelsSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarginLevelsSubscribeRequest::ArenaDtor(void* object) {
  MarginLevelsSubscribeRequest* _this = reinterpret_cast< MarginLevelsSubscribeRequest* >(object);
  (void)_this;
}
void MarginLevelsSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevelsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsSubscribeRequest& MarginLevelsSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarginLevelsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevelsSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarginLevelsSubscribeRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarginLevelsSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevelsSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarginLevelsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarginLevelsSubscribeRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarginLevelsSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarginLevelsSubscribeRequest)
  return target;
}

size_t MarginLevelsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarginLevelsSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarginLevelsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevelsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarginLevelsSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarginLevelsSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarginLevelsSubscribeRequest::MergeFrom(const MarginLevelsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarginLevelsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void MarginLevelsSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarginLevelsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsSubscribeRequest::CopyFrom(const MarginLevelsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarginLevelsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsSubscribeRequest::IsInitialized() const {
  return true;
}

void MarginLevelsSubscribeRequest::InternalSwap(MarginLevelsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevelsSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevelsSubscribeResponse::_Internal {
 public:
  static const ::vega::MarginLevels& margin_levels(const MarginLevelsSubscribeResponse* msg);
};

const ::vega::MarginLevels&
MarginLevelsSubscribeResponse::_Internal::margin_levels(const MarginLevelsSubscribeResponse* msg) {
  return *msg->margin_levels_;
}
void MarginLevelsSubscribeResponse::clear_margin_levels() {
  if (GetArena() == nullptr && margin_levels_ != nullptr) {
    delete margin_levels_;
  }
  margin_levels_ = nullptr;
}
MarginLevelsSubscribeResponse::MarginLevelsSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarginLevelsSubscribeResponse)
}
MarginLevelsSubscribeResponse::MarginLevelsSubscribeResponse(const MarginLevelsSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_margin_levels()) {
    margin_levels_ = new ::vega::MarginLevels(*from.margin_levels_);
  } else {
    margin_levels_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarginLevelsSubscribeResponse)
}

void MarginLevelsSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevelsSubscribeResponse_api_2ftrading_2eproto.base);
  margin_levels_ = nullptr;
}

MarginLevelsSubscribeResponse::~MarginLevelsSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarginLevelsSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevelsSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete margin_levels_;
}

void MarginLevelsSubscribeResponse::ArenaDtor(void* object) {
  MarginLevelsSubscribeResponse* _this = reinterpret_cast< MarginLevelsSubscribeResponse* >(object);
  (void)_this;
}
void MarginLevelsSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevelsSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsSubscribeResponse& MarginLevelsSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevelsSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarginLevelsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && margin_levels_ != nullptr) {
    delete margin_levels_;
  }
  margin_levels_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevelsSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin_levels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevelsSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarginLevelsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
  if (this->has_margin_levels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::margin_levels(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarginLevelsSubscribeResponse)
  return target;
}

size_t MarginLevelsSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarginLevelsSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
  if (this->has_margin_levels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *margin_levels_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarginLevelsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevelsSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarginLevelsSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarginLevelsSubscribeResponse)
    MergeFrom(*source);
  }
}

void MarginLevelsSubscribeResponse::MergeFrom(const MarginLevelsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarginLevelsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_margin_levels()) {
    _internal_mutable_margin_levels()->::vega::MarginLevels::MergeFrom(from._internal_margin_levels());
  }
}

void MarginLevelsSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarginLevelsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsSubscribeResponse::CopyFrom(const MarginLevelsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarginLevelsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsSubscribeResponse::IsInitialized() const {
  return true;
}

void MarginLevelsSubscribeResponse::InternalSwap(MarginLevelsSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(margin_levels_, other->margin_levels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevelsSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevelsRequest::_Internal {
 public:
};

MarginLevelsRequest::MarginLevelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarginLevelsRequest)
}
MarginLevelsRequest::MarginLevelsRequest(const MarginLevelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarginLevelsRequest)
}

void MarginLevelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevelsRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarginLevelsRequest::~MarginLevelsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarginLevelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarginLevelsRequest::ArenaDtor(void* object) {
  MarginLevelsRequest* _this = reinterpret_cast< MarginLevelsRequest* >(object);
  (void)_this;
}
void MarginLevelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsRequest& MarginLevelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevelsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarginLevelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarginLevelsRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarginLevelsRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarginLevelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarginLevelsRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarginLevelsRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarginLevelsRequest)
  return target;
}

size_t MarginLevelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarginLevelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarginLevelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarginLevelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarginLevelsRequest)
    MergeFrom(*source);
  }
}

void MarginLevelsRequest::MergeFrom(const MarginLevelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarginLevelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void MarginLevelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarginLevelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsRequest::CopyFrom(const MarginLevelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarginLevelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsRequest::IsInitialized() const {
  return true;
}

void MarginLevelsRequest::InternalSwap(MarginLevelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevelsResponse::_Internal {
 public:
};

void MarginLevelsResponse::clear_margin_levels() {
  margin_levels_.Clear();
}
MarginLevelsResponse::MarginLevelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  margin_levels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarginLevelsResponse)
}
MarginLevelsResponse::MarginLevelsResponse(const MarginLevelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      margin_levels_(from.margin_levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.MarginLevelsResponse)
}

void MarginLevelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevelsResponse_api_2ftrading_2eproto.base);
}

MarginLevelsResponse::~MarginLevelsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarginLevelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarginLevelsResponse::ArenaDtor(void* object) {
  MarginLevelsResponse* _this = reinterpret_cast< MarginLevelsResponse* >(object);
  (void)_this;
}
void MarginLevelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsResponse& MarginLevelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevelsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarginLevelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  margin_levels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_margin_levels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarginLevelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_margin_levels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_margin_levels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarginLevelsResponse)
  return target;
}

size_t MarginLevelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarginLevelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.MarginLevels margin_levels = 1 [json_name = "marginLevels"];
  total_size += 1UL * this->_internal_margin_levels_size();
  for (const auto& msg : this->margin_levels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarginLevelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarginLevelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarginLevelsResponse)
    MergeFrom(*source);
  }
}

void MarginLevelsResponse::MergeFrom(const MarginLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarginLevelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  margin_levels_.MergeFrom(from.margin_levels_);
}

void MarginLevelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarginLevelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsResponse::CopyFrom(const MarginLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarginLevelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsResponse::IsInitialized() const {
  return true;
}

void MarginLevelsResponse::InternalSwap(MarginLevelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  margin_levels_.InternalSwap(&other->margin_levels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsDataSubscribeRequest::_Internal {
 public:
};

MarketsDataSubscribeRequest::MarketsDataSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketsDataSubscribeRequest)
}
MarketsDataSubscribeRequest::MarketsDataSubscribeRequest(const MarketsDataSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketsDataSubscribeRequest)
}

void MarketsDataSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketsDataSubscribeRequest::~MarketsDataSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketsDataSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsDataSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketsDataSubscribeRequest::ArenaDtor(void* object) {
  MarketsDataSubscribeRequest* _this = reinterpret_cast< MarketsDataSubscribeRequest* >(object);
  (void)_this;
}
void MarketsDataSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsDataSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataSubscribeRequest& MarketsDataSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketsDataSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsDataSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketsDataSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsDataSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketsDataSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketsDataSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketsDataSubscribeRequest)
  return target;
}

size_t MarketsDataSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketsDataSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketsDataSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsDataSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketsDataSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketsDataSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketsDataSubscribeRequest::MergeFrom(const MarketsDataSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketsDataSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void MarketsDataSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketsDataSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataSubscribeRequest::CopyFrom(const MarketsDataSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketsDataSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketsDataSubscribeRequest::InternalSwap(MarketsDataSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsDataSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsDataSubscribeResponse::_Internal {
 public:
  static const ::vega::MarketData& market_data(const MarketsDataSubscribeResponse* msg);
};

const ::vega::MarketData&
MarketsDataSubscribeResponse::_Internal::market_data(const MarketsDataSubscribeResponse* msg) {
  return *msg->market_data_;
}
void MarketsDataSubscribeResponse::clear_market_data() {
  if (GetArena() == nullptr && market_data_ != nullptr) {
    delete market_data_;
  }
  market_data_ = nullptr;
}
MarketsDataSubscribeResponse::MarketsDataSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketsDataSubscribeResponse)
}
MarketsDataSubscribeResponse::MarketsDataSubscribeResponse(const MarketsDataSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_market_data()) {
    market_data_ = new ::vega::MarketData(*from.market_data_);
  } else {
    market_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketsDataSubscribeResponse)
}

void MarketsDataSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketsDataSubscribeResponse_api_2ftrading_2eproto.base);
  market_data_ = nullptr;
}

MarketsDataSubscribeResponse::~MarketsDataSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketsDataSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsDataSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete market_data_;
}

void MarketsDataSubscribeResponse::ArenaDtor(void* object) {
  MarketsDataSubscribeResponse* _this = reinterpret_cast< MarketsDataSubscribeResponse* >(object);
  (void)_this;
}
void MarketsDataSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsDataSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataSubscribeResponse& MarketsDataSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsDataSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketsDataSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && market_data_ != nullptr) {
    delete market_data_;
  }
  market_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsDataSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarketData market_data = 1 [json_name = "marketData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsDataSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketsDataSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarketData market_data = 1 [json_name = "marketData"];
  if (this->has_market_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::market_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketsDataSubscribeResponse)
  return target;
}

size_t MarketsDataSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketsDataSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarketData market_data = 1 [json_name = "marketData"];
  if (this->has_market_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *market_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketsDataSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsDataSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketsDataSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketsDataSubscribeResponse)
    MergeFrom(*source);
  }
}

void MarketsDataSubscribeResponse::MergeFrom(const MarketsDataSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketsDataSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_market_data()) {
    _internal_mutable_market_data()->::vega::MarketData::MergeFrom(from._internal_market_data());
  }
}

void MarketsDataSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketsDataSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataSubscribeResponse::CopyFrom(const MarketsDataSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketsDataSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataSubscribeResponse::IsInitialized() const {
  return true;
}

void MarketsDataSubscribeResponse::InternalSwap(MarketsDataSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(market_data_, other->market_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsDataSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDataByIDRequest::_Internal {
 public:
};

MarketDataByIDRequest::MarketDataByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDataByIDRequest)
}
MarketDataByIDRequest::MarketDataByIDRequest(const MarketDataByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDataByIDRequest)
}

void MarketDataByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataByIDRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketDataByIDRequest::~MarketDataByIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDataByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDataByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDataByIDRequest::ArenaDtor(void* object) {
  MarketDataByIDRequest* _this = reinterpret_cast< MarketDataByIDRequest* >(object);
  (void)_this;
}
void MarketDataByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDataByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataByIDRequest& MarketDataByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDataByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDataByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketDataByIDRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDataByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketDataByIDRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDataByIDRequest)
  return target;
}

size_t MarketDataByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDataByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDataByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDataByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDataByIDRequest)
    MergeFrom(*source);
  }
}

void MarketDataByIDRequest::MergeFrom(const MarketDataByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDataByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void MarketDataByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDataByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataByIDRequest::CopyFrom(const MarketDataByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDataByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataByIDRequest::IsInitialized() const {
  return true;
}

void MarketDataByIDRequest::InternalSwap(MarketDataByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDataByIDResponse::_Internal {
 public:
  static const ::vega::MarketData& market_data(const MarketDataByIDResponse* msg);
};

const ::vega::MarketData&
MarketDataByIDResponse::_Internal::market_data(const MarketDataByIDResponse* msg) {
  return *msg->market_data_;
}
void MarketDataByIDResponse::clear_market_data() {
  if (GetArena() == nullptr && market_data_ != nullptr) {
    delete market_data_;
  }
  market_data_ = nullptr;
}
MarketDataByIDResponse::MarketDataByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDataByIDResponse)
}
MarketDataByIDResponse::MarketDataByIDResponse(const MarketDataByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_market_data()) {
    market_data_ = new ::vega::MarketData(*from.market_data_);
  } else {
    market_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDataByIDResponse)
}

void MarketDataByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataByIDResponse_api_2ftrading_2eproto.base);
  market_data_ = nullptr;
}

MarketDataByIDResponse::~MarketDataByIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDataByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDataByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete market_data_;
}

void MarketDataByIDResponse::ArenaDtor(void* object) {
  MarketDataByIDResponse* _this = reinterpret_cast< MarketDataByIDResponse* >(object);
  (void)_this;
}
void MarketDataByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDataByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataByIDResponse& MarketDataByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDataByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDataByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && market_data_ != nullptr) {
    delete market_data_;
  }
  market_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarketData market_data = 1 [json_name = "marketData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDataByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarketData market_data = 1 [json_name = "marketData"];
  if (this->has_market_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::market_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDataByIDResponse)
  return target;
}

size_t MarketDataByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDataByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarketData market_data = 1 [json_name = "marketData"];
  if (this->has_market_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *market_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDataByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDataByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDataByIDResponse)
    MergeFrom(*source);
  }
}

void MarketDataByIDResponse::MergeFrom(const MarketDataByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDataByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_market_data()) {
    _internal_mutable_market_data()->::vega::MarketData::MergeFrom(from._internal_market_data());
  }
}

void MarketDataByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDataByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataByIDResponse::CopyFrom(const MarketDataByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDataByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataByIDResponse::IsInitialized() const {
  return true;
}

void MarketDataByIDResponse::InternalSwap(MarketDataByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(market_data_, other->market_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsDataRequest::_Internal {
 public:
};

MarketsDataRequest::MarketsDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketsDataRequest)
}
MarketsDataRequest::MarketsDataRequest(const MarketsDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketsDataRequest)
}

void MarketsDataRequest::SharedCtor() {
}

MarketsDataRequest::~MarketsDataRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketsDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketsDataRequest::ArenaDtor(void* object) {
  MarketsDataRequest* _this = reinterpret_cast< MarketsDataRequest* >(object);
  (void)_this;
}
void MarketsDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataRequest& MarketsDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsDataRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketsDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketsDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketsDataRequest)
  return target;
}

size_t MarketsDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketsDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketsDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketsDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketsDataRequest)
    MergeFrom(*source);
  }
}

void MarketsDataRequest::MergeFrom(const MarketsDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketsDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MarketsDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketsDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataRequest::CopyFrom(const MarketsDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketsDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataRequest::IsInitialized() const {
  return true;
}

void MarketsDataRequest::InternalSwap(MarketsDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsDataResponse::_Internal {
 public:
};

void MarketsDataResponse::clear_markets_data() {
  markets_data_.Clear();
}
MarketsDataResponse::MarketsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markets_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketsDataResponse)
}
MarketsDataResponse::MarketsDataResponse(const MarketsDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markets_data_(from.markets_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketsDataResponse)
}

void MarketsDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketsDataResponse_api_2ftrading_2eproto.base);
}

MarketsDataResponse::~MarketsDataResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketsDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketsDataResponse::ArenaDtor(void* object) {
  MarketsDataResponse* _this = reinterpret_cast< MarketsDataResponse* >(object);
  (void)_this;
}
void MarketsDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataResponse& MarketsDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsDataResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markets_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markets_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketsDataResponse)
  return target;
}

size_t MarketsDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketsDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.MarketData markets_data = 1 [json_name = "marketsData"];
  total_size += 1UL * this->_internal_markets_data_size();
  for (const auto& msg : this->markets_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketsDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketsDataResponse)
    MergeFrom(*source);
  }
}

void MarketsDataResponse::MergeFrom(const MarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_data_.MergeFrom(from.markets_data_);
}

void MarketsDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataResponse::CopyFrom(const MarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataResponse::IsInitialized() const {
  return true;
}

void MarketsDataResponse::InternalSwap(MarketsDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markets_data_.InternalSwap(&other->markets_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastTradeRequest::_Internal {
 public:
};

LastTradeRequest::LastTradeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.LastTradeRequest)
}
LastTradeRequest::LastTradeRequest(const LastTradeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.LastTradeRequest)
}

void LastTradeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LastTradeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LastTradeRequest::~LastTradeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.LastTradeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastTradeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LastTradeRequest::ArenaDtor(void* object) {
  LastTradeRequest* _this = reinterpret_cast< LastTradeRequest* >(object);
  (void)_this;
}
void LastTradeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastTradeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastTradeRequest& LastTradeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastTradeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastTradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.LastTradeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastTradeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.LastTradeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastTradeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.LastTradeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.LastTradeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.LastTradeRequest)
  return target;
}

size_t LastTradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.LastTradeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastTradeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.LastTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LastTradeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastTradeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.LastTradeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.LastTradeRequest)
    MergeFrom(*source);
  }
}

void LastTradeRequest::MergeFrom(const LastTradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.LastTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void LastTradeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.LastTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastTradeRequest::CopyFrom(const LastTradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.LastTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastTradeRequest::IsInitialized() const {
  return true;
}

void LastTradeRequest::InternalSwap(LastTradeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LastTradeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastTradeResponse::_Internal {
 public:
  static const ::vega::Trade& trade(const LastTradeResponse* msg);
};

const ::vega::Trade&
LastTradeResponse::_Internal::trade(const LastTradeResponse* msg) {
  return *msg->trade_;
}
void LastTradeResponse::clear_trade() {
  if (GetArena() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
LastTradeResponse::LastTradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.LastTradeResponse)
}
LastTradeResponse::LastTradeResponse(const LastTradeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trade()) {
    trade_ = new ::vega::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.LastTradeResponse)
}

void LastTradeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LastTradeResponse_api_2ftrading_2eproto.base);
  trade_ = nullptr;
}

LastTradeResponse::~LastTradeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.LastTradeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastTradeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trade_;
}

void LastTradeResponse::ArenaDtor(void* object) {
  LastTradeResponse* _this = reinterpret_cast< LastTradeResponse* >(object);
  (void)_this;
}
void LastTradeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastTradeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastTradeResponse& LastTradeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastTradeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastTradeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.LastTradeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastTradeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Trade trade = 1 [json_name = "trade"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastTradeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.LastTradeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Trade trade = 1 [json_name = "trade"];
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.LastTradeResponse)
  return target;
}

size_t LastTradeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.LastTradeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Trade trade = 1 [json_name = "trade"];
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastTradeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.LastTradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LastTradeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastTradeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.LastTradeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.LastTradeResponse)
    MergeFrom(*source);
  }
}

void LastTradeResponse::MergeFrom(const LastTradeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.LastTradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    _internal_mutable_trade()->::vega::Trade::MergeFrom(from._internal_trade());
  }
}

void LastTradeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.LastTradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastTradeResponse::CopyFrom(const LastTradeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.LastTradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastTradeResponse::IsInitialized() const {
  return true;
}

void LastTradeResponse::InternalSwap(LastTradeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastTradeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByIDRequest::_Internal {
 public:
};

MarketByIDRequest::MarketByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketByIDRequest)
}
MarketByIDRequest::MarketByIDRequest(const MarketByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketByIDRequest)
}

void MarketByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketByIDRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketByIDRequest::~MarketByIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketByIDRequest::ArenaDtor(void* object) {
  MarketByIDRequest* _this = reinterpret_cast< MarketByIDRequest* >(object);
  (void)_this;
}
void MarketByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketByIDRequest& MarketByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketByIDRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketByIDRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketByIDRequest)
  return target;
}

size_t MarketByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketByIDRequest)
    MergeFrom(*source);
  }
}

void MarketByIDRequest::MergeFrom(const MarketByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void MarketByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByIDRequest::CopyFrom(const MarketByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByIDRequest::IsInitialized() const {
  return true;
}

void MarketByIDRequest::InternalSwap(MarketByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByIDResponse::_Internal {
 public:
  static const ::vega::Market& market(const MarketByIDResponse* msg);
};

const ::vega::Market&
MarketByIDResponse::_Internal::market(const MarketByIDResponse* msg) {
  return *msg->market_;
}
void MarketByIDResponse::clear_market() {
  if (GetArena() == nullptr && market_ != nullptr) {
    delete market_;
  }
  market_ = nullptr;
}
MarketByIDResponse::MarketByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketByIDResponse)
}
MarketByIDResponse::MarketByIDResponse(const MarketByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_market()) {
    market_ = new ::vega::Market(*from.market_);
  } else {
    market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketByIDResponse)
}

void MarketByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketByIDResponse_api_2ftrading_2eproto.base);
  market_ = nullptr;
}

MarketByIDResponse::~MarketByIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete market_;
}

void MarketByIDResponse::ArenaDtor(void* object) {
  MarketByIDResponse* _this = reinterpret_cast< MarketByIDResponse* >(object);
  (void)_this;
}
void MarketByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketByIDResponse& MarketByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && market_ != nullptr) {
    delete market_;
  }
  market_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Market market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Market market = 1 [json_name = "market"];
  if (this->has_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::market(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketByIDResponse)
  return target;
}

size_t MarketByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Market market = 1 [json_name = "market"];
  if (this->has_market()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *market_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketByIDResponse)
    MergeFrom(*source);
  }
}

void MarketByIDResponse::MergeFrom(const MarketByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_market()) {
    _internal_mutable_market()->::vega::Market::MergeFrom(from._internal_market());
  }
}

void MarketByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByIDResponse::CopyFrom(const MarketByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByIDResponse::IsInitialized() const {
  return true;
}

void MarketByIDResponse::InternalSwap(MarketByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(market_, other->market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyByIDRequest::_Internal {
 public:
};

PartyByIDRequest::PartyByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PartyByIDRequest)
}
PartyByIDRequest::PartyByIDRequest(const PartyByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PartyByIDRequest)
}

void PartyByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyByIDRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyByIDRequest::~PartyByIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PartyByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyByIDRequest::ArenaDtor(void* object) {
  PartyByIDRequest* _this = reinterpret_cast< PartyByIDRequest* >(object);
  (void)_this;
}
void PartyByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyByIDRequest& PartyByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PartyByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PartyByIDRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PartyByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PartyByIDRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PartyByIDRequest)
  return target;
}

size_t PartyByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PartyByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PartyByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PartyByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PartyByIDRequest)
    MergeFrom(*source);
  }
}

void PartyByIDRequest::MergeFrom(const PartyByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PartyByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void PartyByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PartyByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyByIDRequest::CopyFrom(const PartyByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PartyByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyByIDRequest::IsInitialized() const {
  return true;
}

void PartyByIDRequest::InternalSwap(PartyByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyByIDResponse::_Internal {
 public:
  static const ::vega::Party& party(const PartyByIDResponse* msg);
};

const ::vega::Party&
PartyByIDResponse::_Internal::party(const PartyByIDResponse* msg) {
  return *msg->party_;
}
void PartyByIDResponse::clear_party() {
  if (GetArena() == nullptr && party_ != nullptr) {
    delete party_;
  }
  party_ = nullptr;
}
PartyByIDResponse::PartyByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PartyByIDResponse)
}
PartyByIDResponse::PartyByIDResponse(const PartyByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_party()) {
    party_ = new ::vega::Party(*from.party_);
  } else {
    party_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PartyByIDResponse)
}

void PartyByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyByIDResponse_api_2ftrading_2eproto.base);
  party_ = nullptr;
}

PartyByIDResponse::~PartyByIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PartyByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete party_;
}

void PartyByIDResponse::ArenaDtor(void* object) {
  PartyByIDResponse* _this = reinterpret_cast< PartyByIDResponse* >(object);
  (void)_this;
}
void PartyByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyByIDResponse& PartyByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PartyByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && party_ != nullptr) {
    delete party_;
  }
  party_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Party party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PartyByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Party party = 1 [json_name = "party"];
  if (this->has_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::party(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PartyByIDResponse)
  return target;
}

size_t PartyByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PartyByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Party party = 1 [json_name = "party"];
  if (this->has_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *party_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PartyByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PartyByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PartyByIDResponse)
    MergeFrom(*source);
  }
}

void PartyByIDResponse::MergeFrom(const PartyByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PartyByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_party()) {
    _internal_mutable_party()->::vega::Party::MergeFrom(from._internal_party());
  }
}

void PartyByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PartyByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyByIDResponse::CopyFrom(const PartyByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PartyByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyByIDResponse::IsInitialized() const {
  return true;
}

void PartyByIDResponse::InternalSwap(PartyByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(party_, other->party_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartiesRequest::_Internal {
 public:
};

PartiesRequest::PartiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PartiesRequest)
}
PartiesRequest::PartiesRequest(const PartiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.PartiesRequest)
}

void PartiesRequest::SharedCtor() {
}

PartiesRequest::~PartiesRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PartiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartiesRequest::ArenaDtor(void* object) {
  PartiesRequest* _this = reinterpret_cast< PartiesRequest* >(object);
  (void)_this;
}
void PartiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartiesRequest& PartiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartiesRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PartiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PartiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PartiesRequest)
  return target;
}

size_t PartiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PartiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PartiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PartiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PartiesRequest)
    MergeFrom(*source);
  }
}

void PartiesRequest::MergeFrom(const PartiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PartiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PartiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PartiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartiesRequest::CopyFrom(const PartiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PartiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartiesRequest::IsInitialized() const {
  return true;
}

void PartiesRequest::InternalSwap(PartiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartiesResponse::_Internal {
 public:
};

void PartiesResponse::clear_parties() {
  parties_.Clear();
}
PartiesResponse::PartiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PartiesResponse)
}
PartiesResponse::PartiesResponse(const PartiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parties_(from.parties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.PartiesResponse)
}

void PartiesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartiesResponse_api_2ftrading_2eproto.base);
}

PartiesResponse::~PartiesResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PartiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartiesResponse::ArenaDtor(void* object) {
  PartiesResponse* _this = reinterpret_cast< PartiesResponse* >(object);
  (void)_this;
}
void PartiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartiesResponse& PartiesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartiesResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PartiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Party parties = 1 [json_name = "parties"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PartiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1 [json_name = "parties"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_parties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PartiesResponse)
  return target;
}

size_t PartiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PartiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1 [json_name = "parties"];
  total_size += 1UL * this->_internal_parties_size();
  for (const auto& msg : this->parties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PartiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PartiesResponse)
    MergeFrom(*source);
  }
}

void PartiesResponse::MergeFrom(const PartiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parties_.MergeFrom(from.parties_);
}

void PartiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartiesResponse::CopyFrom(const PartiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartiesResponse::IsInitialized() const {
  return true;
}

void PartiesResponse::InternalSwap(PartiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parties_.InternalSwap(&other->parties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByPartyRequest::_Internal {
 public:
  static const ::api::v1::Pagination& pagination(const TradesByPartyRequest* msg);
};

const ::api::v1::Pagination&
TradesByPartyRequest::_Internal::pagination(const TradesByPartyRequest* msg) {
  return *msg->pagination_;
}
TradesByPartyRequest::TradesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesByPartyRequest)
}
TradesByPartyRequest::TradesByPartyRequest(const TradesByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesByPartyRequest)
}

void TradesByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByPartyRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

TradesByPartyRequest::~TradesByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.v1.TradesByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void TradesByPartyRequest::ArenaDtor(void* object) {
  TradesByPartyRequest* _this = reinterpret_cast< TradesByPartyRequest* >(object);
  (void)_this;
}
void TradesByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByPartyRequest& TradesByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.TradesByPartyRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.TradesByPartyRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.Pagination pagination = 3 [json_name = "pagination"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.TradesByPartyRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.TradesByPartyRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  // .api.v1.Pagination pagination = 3 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesByPartyRequest)
  return target;
}

size_t TradesByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // .api.v1.Pagination pagination = 3 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesByPartyRequest)
    MergeFrom(*source);
  }
}

void TradesByPartyRequest::MergeFrom(const TradesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::v1::Pagination::MergeFrom(from._internal_pagination());
  }
}

void TradesByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByPartyRequest::CopyFrom(const TradesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByPartyRequest::IsInitialized() const {
  return true;
}

void TradesByPartyRequest::InternalSwap(TradesByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByPartyResponse::_Internal {
 public:
};

void TradesByPartyResponse::clear_trades() {
  trades_.Clear();
}
TradesByPartyResponse::TradesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesByPartyResponse)
}
TradesByPartyResponse::TradesByPartyResponse(const TradesByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesByPartyResponse)
}

void TradesByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByPartyResponse_api_2ftrading_2eproto.base);
}

TradesByPartyResponse::~TradesByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.v1.TradesByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesByPartyResponse::ArenaDtor(void* object) {
  TradesByPartyResponse* _this = reinterpret_cast< TradesByPartyResponse* >(object);
  (void)_this;
}
void TradesByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByPartyResponse& TradesByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesByPartyResponse)
  return target;
}

size_t TradesByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesByPartyResponse)
    MergeFrom(*source);
  }
}

void TradesByPartyResponse::MergeFrom(const TradesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByPartyResponse::CopyFrom(const TradesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByPartyResponse::IsInitialized() const {
  return true;
}

void TradesByPartyResponse::InternalSwap(TradesByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByOrderRequest::_Internal {
 public:
};

TradesByOrderRequest::TradesByOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesByOrderRequest)
}
TradesByOrderRequest::TradesByOrderRequest(const TradesByOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesByOrderRequest)
}

void TradesByOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByOrderRequest_api_2ftrading_2eproto.base);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TradesByOrderRequest::~TradesByOrderRequest() {
  // @@protoc_insertion_point(destructor:api.v1.TradesByOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradesByOrderRequest::ArenaDtor(void* object) {
  TradesByOrderRequest* _this = reinterpret_cast< TradesByOrderRequest* >(object);
  (void)_this;
}
void TradesByOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByOrderRequest& TradesByOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesByOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string order_id = 1 [json_name = "orderId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.TradesByOrderRequest.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesByOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId"];
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.TradesByOrderRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesByOrderRequest)
  return target;
}

size_t TradesByOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesByOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId"];
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesByOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesByOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesByOrderRequest)
    MergeFrom(*source);
  }
}

void TradesByOrderRequest::MergeFrom(const TradesByOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesByOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
}

void TradesByOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesByOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByOrderRequest::CopyFrom(const TradesByOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesByOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByOrderRequest::IsInitialized() const {
  return true;
}

void TradesByOrderRequest::InternalSwap(TradesByOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByOrderResponse::_Internal {
 public:
};

void TradesByOrderResponse::clear_trades() {
  trades_.Clear();
}
TradesByOrderResponse::TradesByOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesByOrderResponse)
}
TradesByOrderResponse::TradesByOrderResponse(const TradesByOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesByOrderResponse)
}

void TradesByOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByOrderResponse_api_2ftrading_2eproto.base);
}

TradesByOrderResponse::~TradesByOrderResponse() {
  // @@protoc_insertion_point(destructor:api.v1.TradesByOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesByOrderResponse::ArenaDtor(void* object) {
  TradesByOrderResponse* _this = reinterpret_cast< TradesByOrderResponse* >(object);
  (void)_this;
}
void TradesByOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByOrderResponse& TradesByOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesByOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesByOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesByOrderResponse)
  return target;
}

size_t TradesByOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesByOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesByOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesByOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesByOrderResponse)
    MergeFrom(*source);
  }
}

void TradesByOrderResponse::MergeFrom(const TradesByOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesByOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesByOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByOrderResponse::CopyFrom(const TradesByOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesByOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByOrderResponse::IsInitialized() const {
  return true;
}

void TradesByOrderResponse::InternalSwap(TradesByOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountsSubscribeRequest::_Internal {
 public:
};

AccountsSubscribeRequest::AccountsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.AccountsSubscribeRequest)
}
AccountsSubscribeRequest::AccountsSubscribeRequest(const AccountsSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.v1.AccountsSubscribeRequest)
}

void AccountsSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AccountsSubscribeRequest::~AccountsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.AccountsSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountsSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountsSubscribeRequest::ArenaDtor(void* object) {
  AccountsSubscribeRequest* _this = reinterpret_cast< AccountsSubscribeRequest* >(object);
  (void)_this;
}
void AccountsSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountsSubscribeRequest& AccountsSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AccountsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.AccountsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  asset_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountsSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.AccountsSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.AccountsSubscribeRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 3 [json_name = "asset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.AccountsSubscribeRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AccountType type = 4 [json_name = "type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::AccountType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountsSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.AccountsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.AccountsSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.AccountsSubscribeRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.AccountsSubscribeRequest.asset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset(), target);
  }

  // .vega.AccountType type = 4 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.AccountsSubscribeRequest)
  return target;
}

size_t AccountsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.AccountsSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // .vega.AccountType type = 4 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountsSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.AccountsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountsSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.AccountsSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.AccountsSubscribeRequest)
    MergeFrom(*source);
  }
}

void AccountsSubscribeRequest::MergeFrom(const AccountsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.AccountsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AccountsSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.AccountsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountsSubscribeRequest::CopyFrom(const AccountsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.AccountsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsSubscribeRequest::IsInitialized() const {
  return true;
}

void AccountsSubscribeRequest::InternalSwap(AccountsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountsSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountsSubscribeResponse::_Internal {
 public:
  static const ::vega::Account& account(const AccountsSubscribeResponse* msg);
};

const ::vega::Account&
AccountsSubscribeResponse::_Internal::account(const AccountsSubscribeResponse* msg) {
  return *msg->account_;
}
void AccountsSubscribeResponse::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
AccountsSubscribeResponse::AccountsSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.AccountsSubscribeResponse)
}
AccountsSubscribeResponse::AccountsSubscribeResponse(const AccountsSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::vega::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.AccountsSubscribeResponse)
}

void AccountsSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountsSubscribeResponse_api_2ftrading_2eproto.base);
  account_ = nullptr;
}

AccountsSubscribeResponse::~AccountsSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.AccountsSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountsSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void AccountsSubscribeResponse::ArenaDtor(void* object) {
  AccountsSubscribeResponse* _this = reinterpret_cast< AccountsSubscribeResponse* >(object);
  (void)_this;
}
void AccountsSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountsSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountsSubscribeResponse& AccountsSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountsSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AccountsSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.AccountsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountsSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Account account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountsSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.AccountsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Account account = 1 [json_name = "account"];
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.AccountsSubscribeResponse)
  return target;
}

size_t AccountsSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.AccountsSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Account account = 1 [json_name = "account"];
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountsSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.AccountsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountsSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountsSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.AccountsSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.AccountsSubscribeResponse)
    MergeFrom(*source);
  }
}

void AccountsSubscribeResponse::MergeFrom(const AccountsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.AccountsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::vega::Account::MergeFrom(from._internal_account());
  }
}

void AccountsSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.AccountsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountsSubscribeResponse::CopyFrom(const AccountsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.AccountsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsSubscribeResponse::IsInitialized() const {
  return true;
}

void AccountsSubscribeResponse::InternalSwap(AccountsSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountsSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersSubscribeRequest::_Internal {
 public:
};

OrdersSubscribeRequest::OrdersSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrdersSubscribeRequest)
}
OrdersSubscribeRequest::OrdersSubscribeRequest(const OrdersSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrdersSubscribeRequest)
}

void OrdersSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrdersSubscribeRequest::~OrdersSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OrdersSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrdersSubscribeRequest::ArenaDtor(void* object) {
  OrdersSubscribeRequest* _this = reinterpret_cast< OrdersSubscribeRequest* >(object);
  (void)_this;
}
void OrdersSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersSubscribeRequest& OrdersSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrdersSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrdersSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrdersSubscribeRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrdersSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrdersSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrdersSubscribeRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrdersSubscribeRequest)
  return target;
}

size_t OrdersSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrdersSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrdersSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrdersSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrdersSubscribeRequest)
    MergeFrom(*source);
  }
}

void OrdersSubscribeRequest::MergeFrom(const OrdersSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrdersSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void OrdersSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrdersSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersSubscribeRequest::CopyFrom(const OrdersSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrdersSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersSubscribeRequest::IsInitialized() const {
  return true;
}

void OrdersSubscribeRequest::InternalSwap(OrdersSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesSubscribeRequest::_Internal {
 public:
};

TradesSubscribeRequest::TradesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesSubscribeRequest)
}
TradesSubscribeRequest::TradesSubscribeRequest(const TradesSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesSubscribeRequest)
}

void TradesSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesSubscribeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TradesSubscribeRequest::~TradesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.TradesSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradesSubscribeRequest::ArenaDtor(void* object) {
  TradesSubscribeRequest* _this = reinterpret_cast< TradesSubscribeRequest* >(object);
  (void)_this;
}
void TradesSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesSubscribeRequest& TradesSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.TradesSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2 [json_name = "partyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.TradesSubscribeRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.TradesSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.TradesSubscribeRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesSubscribeRequest)
  return target;
}

size_t TradesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 2 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesSubscribeRequest)
    MergeFrom(*source);
  }
}

void TradesSubscribeRequest::MergeFrom(const TradesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void TradesSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesSubscribeRequest::CopyFrom(const TradesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesSubscribeRequest::IsInitialized() const {
  return true;
}

void TradesSubscribeRequest::InternalSwap(TradesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CandlesSubscribeRequest::_Internal {
 public:
};

CandlesSubscribeRequest::CandlesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.CandlesSubscribeRequest)
}
CandlesSubscribeRequest::CandlesSubscribeRequest(const CandlesSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  interval_ = from.interval_;
  // @@protoc_insertion_point(copy_constructor:api.v1.CandlesSubscribeRequest)
}

void CandlesSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interval_ = 0;
}

CandlesSubscribeRequest::~CandlesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.CandlesSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandlesSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CandlesSubscribeRequest::ArenaDtor(void* object) {
  CandlesSubscribeRequest* _this = reinterpret_cast< CandlesSubscribeRequest* >(object);
  (void)_this;
}
void CandlesSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandlesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesSubscribeRequest& CandlesSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.CandlesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandlesSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.CandlesSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Interval interval = 2 [json_name = "interval"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::vega::Interval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandlesSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.CandlesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.CandlesSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // .vega.Interval interval = 2 [json_name = "interval"];
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.CandlesSubscribeRequest)
  return target;
}

size_t CandlesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.CandlesSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // .vega.Interval interval = 2 [json_name = "interval"];
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.CandlesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandlesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.CandlesSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.CandlesSubscribeRequest)
    MergeFrom(*source);
  }
}

void CandlesSubscribeRequest::MergeFrom(const CandlesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.CandlesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void CandlesSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.CandlesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesSubscribeRequest::CopyFrom(const CandlesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.CandlesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesSubscribeRequest::IsInitialized() const {
  return true;
}

void CandlesSubscribeRequest::InternalSwap(CandlesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(interval_, other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandlesSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CandlesSubscribeResponse::_Internal {
 public:
  static const ::vega::Candle& candle(const CandlesSubscribeResponse* msg);
};

const ::vega::Candle&
CandlesSubscribeResponse::_Internal::candle(const CandlesSubscribeResponse* msg) {
  return *msg->candle_;
}
void CandlesSubscribeResponse::clear_candle() {
  if (GetArena() == nullptr && candle_ != nullptr) {
    delete candle_;
  }
  candle_ = nullptr;
}
CandlesSubscribeResponse::CandlesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.CandlesSubscribeResponse)
}
CandlesSubscribeResponse::CandlesSubscribeResponse(const CandlesSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candle()) {
    candle_ = new ::vega::Candle(*from.candle_);
  } else {
    candle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.CandlesSubscribeResponse)
}

void CandlesSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandlesSubscribeResponse_api_2ftrading_2eproto.base);
  candle_ = nullptr;
}

CandlesSubscribeResponse::~CandlesSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.CandlesSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandlesSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete candle_;
}

void CandlesSubscribeResponse::ArenaDtor(void* object) {
  CandlesSubscribeResponse* _this = reinterpret_cast< CandlesSubscribeResponse* >(object);
  (void)_this;
}
void CandlesSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandlesSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesSubscribeResponse& CandlesSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandlesSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.CandlesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && candle_ != nullptr) {
    delete candle_;
  }
  candle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandlesSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Candle candle = 1 [json_name = "candle"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandlesSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.CandlesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Candle candle = 1 [json_name = "candle"];
  if (this->has_candle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::candle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.CandlesSubscribeResponse)
  return target;
}

size_t CandlesSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.CandlesSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Candle candle = 1 [json_name = "candle"];
  if (this->has_candle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candle_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.CandlesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandlesSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.CandlesSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.CandlesSubscribeResponse)
    MergeFrom(*source);
  }
}

void CandlesSubscribeResponse::MergeFrom(const CandlesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.CandlesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_candle()) {
    _internal_mutable_candle()->::vega::Candle::MergeFrom(from._internal_candle());
  }
}

void CandlesSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.CandlesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesSubscribeResponse::CopyFrom(const CandlesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.CandlesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesSubscribeResponse::IsInitialized() const {
  return true;
}

void CandlesSubscribeResponse::InternalSwap(CandlesSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(candle_, other->candle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandlesSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthSubscribeRequest::_Internal {
 public:
};

MarketDepthSubscribeRequest::MarketDepthSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDepthSubscribeRequest)
}
MarketDepthSubscribeRequest::MarketDepthSubscribeRequest(const MarketDepthSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDepthSubscribeRequest)
}

void MarketDepthSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketDepthSubscribeRequest::~MarketDepthSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDepthSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthSubscribeRequest::ArenaDtor(void* object) {
  MarketDepthSubscribeRequest* _this = reinterpret_cast< MarketDepthSubscribeRequest* >(object);
  (void)_this;
}
void MarketDepthSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthSubscribeRequest& MarketDepthSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDepthSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketDepthSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDepthSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketDepthSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDepthSubscribeRequest)
  return target;
}

size_t MarketDepthSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDepthSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDepthSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDepthSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDepthSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketDepthSubscribeRequest::MergeFrom(const MarketDepthSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDepthSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void MarketDepthSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDepthSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSubscribeRequest::CopyFrom(const MarketDepthSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDepthSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketDepthSubscribeRequest::InternalSwap(MarketDepthSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthSubscribeResponse::_Internal {
 public:
  static const ::vega::MarketDepth& market_depth(const MarketDepthSubscribeResponse* msg);
};

const ::vega::MarketDepth&
MarketDepthSubscribeResponse::_Internal::market_depth(const MarketDepthSubscribeResponse* msg) {
  return *msg->market_depth_;
}
void MarketDepthSubscribeResponse::clear_market_depth() {
  if (GetArena() == nullptr && market_depth_ != nullptr) {
    delete market_depth_;
  }
  market_depth_ = nullptr;
}
MarketDepthSubscribeResponse::MarketDepthSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDepthSubscribeResponse)
}
MarketDepthSubscribeResponse::MarketDepthSubscribeResponse(const MarketDepthSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_market_depth()) {
    market_depth_ = new ::vega::MarketDepth(*from.market_depth_);
  } else {
    market_depth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDepthSubscribeResponse)
}

void MarketDepthSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthSubscribeResponse_api_2ftrading_2eproto.base);
  market_depth_ = nullptr;
}

MarketDepthSubscribeResponse::~MarketDepthSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDepthSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete market_depth_;
}

void MarketDepthSubscribeResponse::ArenaDtor(void* object) {
  MarketDepthSubscribeResponse* _this = reinterpret_cast< MarketDepthSubscribeResponse* >(object);
  (void)_this;
}
void MarketDepthSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthSubscribeResponse& MarketDepthSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDepthSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && market_depth_ != nullptr) {
    delete market_depth_;
  }
  market_depth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarketDepth market_depth = 1 [json_name = "marketDepth"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_depth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDepthSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarketDepth market_depth = 1 [json_name = "marketDepth"];
  if (this->has_market_depth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::market_depth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDepthSubscribeResponse)
  return target;
}

size_t MarketDepthSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDepthSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarketDepth market_depth = 1 [json_name = "marketDepth"];
  if (this->has_market_depth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *market_depth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDepthSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDepthSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDepthSubscribeResponse)
    MergeFrom(*source);
  }
}

void MarketDepthSubscribeResponse::MergeFrom(const MarketDepthSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDepthSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_market_depth()) {
    _internal_mutable_market_depth()->::vega::MarketDepth::MergeFrom(from._internal_market_depth());
  }
}

void MarketDepthSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDepthSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSubscribeResponse::CopyFrom(const MarketDepthSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDepthSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSubscribeResponse::IsInitialized() const {
  return true;
}

void MarketDepthSubscribeResponse::InternalSwap(MarketDepthSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(market_depth_, other->market_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthUpdatesSubscribeRequest::_Internal {
 public:
};

MarketDepthUpdatesSubscribeRequest::MarketDepthUpdatesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDepthUpdatesSubscribeRequest)
}
MarketDepthUpdatesSubscribeRequest::MarketDepthUpdatesSubscribeRequest(const MarketDepthUpdatesSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDepthUpdatesSubscribeRequest)
}

void MarketDepthUpdatesSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketDepthUpdatesSubscribeRequest::~MarketDepthUpdatesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDepthUpdatesSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthUpdatesSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthUpdatesSubscribeRequest::ArenaDtor(void* object) {
  MarketDepthUpdatesSubscribeRequest* _this = reinterpret_cast< MarketDepthUpdatesSubscribeRequest* >(object);
  (void)_this;
}
void MarketDepthUpdatesSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthUpdatesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthUpdatesSubscribeRequest& MarketDepthUpdatesSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthUpdatesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDepthUpdatesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthUpdatesSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketDepthUpdatesSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthUpdatesSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDepthUpdatesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketDepthUpdatesSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDepthUpdatesSubscribeRequest)
  return target;
}

size_t MarketDepthUpdatesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDepthUpdatesSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdatesSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDepthUpdatesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdatesSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthUpdatesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDepthUpdatesSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDepthUpdatesSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketDepthUpdatesSubscribeRequest::MergeFrom(const MarketDepthUpdatesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDepthUpdatesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void MarketDepthUpdatesSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDepthUpdatesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdatesSubscribeRequest::CopyFrom(const MarketDepthUpdatesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDepthUpdatesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdatesSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketDepthUpdatesSubscribeRequest::InternalSwap(MarketDepthUpdatesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthUpdatesSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthUpdatesSubscribeResponse::_Internal {
 public:
  static const ::vega::MarketDepthUpdate& update(const MarketDepthUpdatesSubscribeResponse* msg);
};

const ::vega::MarketDepthUpdate&
MarketDepthUpdatesSubscribeResponse::_Internal::update(const MarketDepthUpdatesSubscribeResponse* msg) {
  return *msg->update_;
}
void MarketDepthUpdatesSubscribeResponse::clear_update() {
  if (GetArena() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
}
MarketDepthUpdatesSubscribeResponse::MarketDepthUpdatesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDepthUpdatesSubscribeResponse)
}
MarketDepthUpdatesSubscribeResponse::MarketDepthUpdatesSubscribeResponse(const MarketDepthUpdatesSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_update()) {
    update_ = new ::vega::MarketDepthUpdate(*from.update_);
  } else {
    update_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDepthUpdatesSubscribeResponse)
}

void MarketDepthUpdatesSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthUpdatesSubscribeResponse_api_2ftrading_2eproto.base);
  update_ = nullptr;
}

MarketDepthUpdatesSubscribeResponse::~MarketDepthUpdatesSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDepthUpdatesSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthUpdatesSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete update_;
}

void MarketDepthUpdatesSubscribeResponse::ArenaDtor(void* object) {
  MarketDepthUpdatesSubscribeResponse* _this = reinterpret_cast< MarketDepthUpdatesSubscribeResponse* >(object);
  (void)_this;
}
void MarketDepthUpdatesSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthUpdatesSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthUpdatesSubscribeResponse& MarketDepthUpdatesSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthUpdatesSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthUpdatesSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDepthUpdatesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthUpdatesSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarketDepthUpdate update = 1 [json_name = "update"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthUpdatesSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDepthUpdatesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarketDepthUpdate update = 1 [json_name = "update"];
  if (this->has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDepthUpdatesSubscribeResponse)
  return target;
}

size_t MarketDepthUpdatesSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDepthUpdatesSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarketDepthUpdate update = 1 [json_name = "update"];
  if (this->has_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdatesSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDepthUpdatesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdatesSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthUpdatesSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDepthUpdatesSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDepthUpdatesSubscribeResponse)
    MergeFrom(*source);
  }
}

void MarketDepthUpdatesSubscribeResponse::MergeFrom(const MarketDepthUpdatesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDepthUpdatesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_update()) {
    _internal_mutable_update()->::vega::MarketDepthUpdate::MergeFrom(from._internal_update());
  }
}

void MarketDepthUpdatesSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDepthUpdatesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdatesSubscribeResponse::CopyFrom(const MarketDepthUpdatesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDepthUpdatesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdatesSubscribeResponse::IsInitialized() const {
  return true;
}

void MarketDepthUpdatesSubscribeResponse::InternalSwap(MarketDepthUpdatesSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(update_, other->update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthUpdatesSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionsSubscribeRequest::_Internal {
 public:
};

PositionsSubscribeRequest::PositionsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PositionsSubscribeRequest)
}
PositionsSubscribeRequest::PositionsSubscribeRequest(const PositionsSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PositionsSubscribeRequest)
}

void PositionsSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PositionsSubscribeRequest::~PositionsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PositionsSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionsSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionsSubscribeRequest::ArenaDtor(void* object) {
  PositionsSubscribeRequest* _this = reinterpret_cast< PositionsSubscribeRequest* >(object);
  (void)_this;
}
void PositionsSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsSubscribeRequest& PositionsSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PositionsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PositionsSubscribeRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PositionsSubscribeRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionsSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PositionsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PositionsSubscribeRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PositionsSubscribeRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PositionsSubscribeRequest)
  return target;
}

size_t PositionsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PositionsSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PositionsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PositionsSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PositionsSubscribeRequest)
    MergeFrom(*source);
  }
}

void PositionsSubscribeRequest::MergeFrom(const PositionsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PositionsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void PositionsSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PositionsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsSubscribeRequest::CopyFrom(const PositionsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PositionsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsSubscribeRequest::IsInitialized() const {
  return true;
}

void PositionsSubscribeRequest::InternalSwap(PositionsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionsSubscribeResponse::_Internal {
 public:
  static const ::vega::Position& position(const PositionsSubscribeResponse* msg);
};

const ::vega::Position&
PositionsSubscribeResponse::_Internal::position(const PositionsSubscribeResponse* msg) {
  return *msg->position_;
}
void PositionsSubscribeResponse::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
PositionsSubscribeResponse::PositionsSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PositionsSubscribeResponse)
}
PositionsSubscribeResponse::PositionsSubscribeResponse(const PositionsSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vega::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PositionsSubscribeResponse)
}

void PositionsSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionsSubscribeResponse_api_2ftrading_2eproto.base);
  position_ = nullptr;
}

PositionsSubscribeResponse::~PositionsSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PositionsSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionsSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void PositionsSubscribeResponse::ArenaDtor(void* object) {
  PositionsSubscribeResponse* _this = reinterpret_cast< PositionsSubscribeResponse* >(object);
  (void)_this;
}
void PositionsSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionsSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsSubscribeResponse& PositionsSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionsSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PositionsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Position position = 1 [json_name = "position"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionsSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PositionsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Position position = 1 [json_name = "position"];
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PositionsSubscribeResponse)
  return target;
}

size_t PositionsSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PositionsSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Position position = 1 [json_name = "position"];
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PositionsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionsSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PositionsSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PositionsSubscribeResponse)
    MergeFrom(*source);
  }
}

void PositionsSubscribeResponse::MergeFrom(const PositionsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PositionsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::vega::Position::MergeFrom(from._internal_position());
  }
}

void PositionsSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PositionsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsSubscribeResponse::CopyFrom(const PositionsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PositionsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsSubscribeResponse::IsInitialized() const {
  return true;
}

void PositionsSubscribeResponse::InternalSwap(PositionsSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByMarketRequest::_Internal {
 public:
  static const ::api::v1::Pagination& pagination(const OrdersByMarketRequest* msg);
};

const ::api::v1::Pagination&
OrdersByMarketRequest::_Internal::pagination(const OrdersByMarketRequest* msg) {
  return *msg->pagination_;
}
OrdersByMarketRequest::OrdersByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrdersByMarketRequest)
}
OrdersByMarketRequest::OrdersByMarketRequest(const OrdersByMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrdersByMarketRequest)
}

void OrdersByMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByMarketRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrdersByMarketRequest::~OrdersByMarketRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OrdersByMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrdersByMarketRequest::ArenaDtor(void* object) {
  OrdersByMarketRequest* _this = reinterpret_cast< OrdersByMarketRequest* >(object);
  (void)_this;
}
void OrdersByMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByMarketRequest& OrdersByMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByMarketRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrdersByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrdersByMarketRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrdersByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrdersByMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrdersByMarketRequest)
  return target;
}

size_t OrdersByMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrdersByMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrdersByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrdersByMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrdersByMarketRequest)
    MergeFrom(*source);
  }
}

void OrdersByMarketRequest::MergeFrom(const OrdersByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrdersByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::v1::Pagination::MergeFrom(from._internal_pagination());
  }
}

void OrdersByMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrdersByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByMarketRequest::CopyFrom(const OrdersByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrdersByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByMarketRequest::IsInitialized() const {
  return true;
}

void OrdersByMarketRequest::InternalSwap(OrdersByMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByMarketResponse::_Internal {
 public:
};

void OrdersByMarketResponse::clear_orders() {
  orders_.Clear();
}
OrdersByMarketResponse::OrdersByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrdersByMarketResponse)
}
OrdersByMarketResponse::OrdersByMarketResponse(const OrdersByMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.OrdersByMarketResponse)
}

void OrdersByMarketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByMarketResponse_api_2ftrading_2eproto.base);
}

OrdersByMarketResponse::~OrdersByMarketResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OrdersByMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrdersByMarketResponse::ArenaDtor(void* object) {
  OrdersByMarketResponse* _this = reinterpret_cast< OrdersByMarketResponse* >(object);
  (void)_this;
}
void OrdersByMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByMarketResponse& OrdersByMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByMarketResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrdersByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrdersByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrdersByMarketResponse)
  return target;
}

size_t OrdersByMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrdersByMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrdersByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrdersByMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrdersByMarketResponse)
    MergeFrom(*source);
  }
}

void OrdersByMarketResponse::MergeFrom(const OrdersByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrdersByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersByMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrdersByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByMarketResponse::CopyFrom(const OrdersByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrdersByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByMarketResponse::IsInitialized() const {
  return true;
}

void OrdersByMarketResponse::InternalSwap(OrdersByMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByPartyRequest::_Internal {
 public:
  static const ::api::v1::Pagination& pagination(const OrdersByPartyRequest* msg);
};

const ::api::v1::Pagination&
OrdersByPartyRequest::_Internal::pagination(const OrdersByPartyRequest* msg) {
  return *msg->pagination_;
}
OrdersByPartyRequest::OrdersByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrdersByPartyRequest)
}
OrdersByPartyRequest::OrdersByPartyRequest(const OrdersByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrdersByPartyRequest)
}

void OrdersByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByPartyRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrdersByPartyRequest::~OrdersByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OrdersByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrdersByPartyRequest::ArenaDtor(void* object) {
  OrdersByPartyRequest* _this = reinterpret_cast< OrdersByPartyRequest* >(object);
  (void)_this;
}
void OrdersByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByPartyRequest& OrdersByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrdersByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrdersByPartyRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrdersByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrdersByPartyRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrdersByPartyRequest)
  return target;
}

size_t OrdersByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrdersByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrdersByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrdersByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrdersByPartyRequest)
    MergeFrom(*source);
  }
}

void OrdersByPartyRequest::MergeFrom(const OrdersByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrdersByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::v1::Pagination::MergeFrom(from._internal_pagination());
  }
}

void OrdersByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrdersByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByPartyRequest::CopyFrom(const OrdersByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrdersByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByPartyRequest::IsInitialized() const {
  return true;
}

void OrdersByPartyRequest::InternalSwap(OrdersByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByPartyResponse::_Internal {
 public:
};

void OrdersByPartyResponse::clear_orders() {
  orders_.Clear();
}
OrdersByPartyResponse::OrdersByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrdersByPartyResponse)
}
OrdersByPartyResponse::OrdersByPartyResponse(const OrdersByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.OrdersByPartyResponse)
}

void OrdersByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByPartyResponse_api_2ftrading_2eproto.base);
}

OrdersByPartyResponse::~OrdersByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OrdersByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrdersByPartyResponse::ArenaDtor(void* object) {
  OrdersByPartyResponse* _this = reinterpret_cast< OrdersByPartyResponse* >(object);
  (void)_this;
}
void OrdersByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByPartyResponse& OrdersByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrdersByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrdersByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrdersByPartyResponse)
  return target;
}

size_t OrdersByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrdersByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrdersByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrdersByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrdersByPartyResponse)
    MergeFrom(*source);
  }
}

void OrdersByPartyResponse::MergeFrom(const OrdersByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrdersByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrdersByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByPartyResponse::CopyFrom(const OrdersByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrdersByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByPartyResponse::IsInitialized() const {
  return true;
}

void OrdersByPartyResponse::InternalSwap(OrdersByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByMarketAndIDRequest::_Internal {
 public:
};

OrderByMarketAndIDRequest::OrderByMarketAndIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderByMarketAndIDRequest)
}
OrderByMarketAndIDRequest::OrderByMarketAndIDRequest(const OrderByMarketAndIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderByMarketAndIDRequest)
}

void OrderByMarketAndIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByMarketAndIDRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrderByMarketAndIDRequest::~OrderByMarketAndIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OrderByMarketAndIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByMarketAndIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderByMarketAndIDRequest::ArenaDtor(void* object) {
  OrderByMarketAndIDRequest* _this = reinterpret_cast< OrderByMarketAndIDRequest* >(object);
  (void)_this;
}
void OrderByMarketAndIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByMarketAndIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByMarketAndIDRequest& OrderByMarketAndIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByMarketAndIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByMarketAndIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderByMarketAndIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  order_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByMarketAndIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrderByMarketAndIDRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_id = 2 [json_name = "orderId", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrderByMarketAndIDRequest.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByMarketAndIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderByMarketAndIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrderByMarketAndIDRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string order_id = 2 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrderByMarketAndIDRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderByMarketAndIDRequest)
  return target;
}

size_t OrderByMarketAndIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderByMarketAndIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string order_id = 2 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByMarketAndIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderByMarketAndIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByMarketAndIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByMarketAndIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderByMarketAndIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderByMarketAndIDRequest)
    MergeFrom(*source);
  }
}

void OrderByMarketAndIDRequest::MergeFrom(const OrderByMarketAndIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderByMarketAndIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
}

void OrderByMarketAndIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderByMarketAndIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByMarketAndIDRequest::CopyFrom(const OrderByMarketAndIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderByMarketAndIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByMarketAndIDRequest::IsInitialized() const {
  return true;
}

void OrderByMarketAndIDRequest::InternalSwap(OrderByMarketAndIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByMarketAndIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByMarketAndIDResponse::_Internal {
 public:
  static const ::vega::Order& order(const OrderByMarketAndIDResponse* msg);
};

const ::vega::Order&
OrderByMarketAndIDResponse::_Internal::order(const OrderByMarketAndIDResponse* msg) {
  return *msg->order_;
}
void OrderByMarketAndIDResponse::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
OrderByMarketAndIDResponse::OrderByMarketAndIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderByMarketAndIDResponse)
}
OrderByMarketAndIDResponse::OrderByMarketAndIDResponse(const OrderByMarketAndIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderByMarketAndIDResponse)
}

void OrderByMarketAndIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByMarketAndIDResponse_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

OrderByMarketAndIDResponse::~OrderByMarketAndIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OrderByMarketAndIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByMarketAndIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderByMarketAndIDResponse::ArenaDtor(void* object) {
  OrderByMarketAndIDResponse* _this = reinterpret_cast< OrderByMarketAndIDResponse* >(object);
  (void)_this;
}
void OrderByMarketAndIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByMarketAndIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByMarketAndIDResponse& OrderByMarketAndIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByMarketAndIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByMarketAndIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderByMarketAndIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByMarketAndIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByMarketAndIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderByMarketAndIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderByMarketAndIDResponse)
  return target;
}

size_t OrderByMarketAndIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderByMarketAndIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByMarketAndIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderByMarketAndIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByMarketAndIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByMarketAndIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderByMarketAndIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderByMarketAndIDResponse)
    MergeFrom(*source);
  }
}

void OrderByMarketAndIDResponse::MergeFrom(const OrderByMarketAndIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderByMarketAndIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderByMarketAndIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderByMarketAndIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByMarketAndIDResponse::CopyFrom(const OrderByMarketAndIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderByMarketAndIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByMarketAndIDResponse::IsInitialized() const {
  return true;
}

void OrderByMarketAndIDResponse::InternalSwap(OrderByMarketAndIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByMarketAndIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByReferenceRequest::_Internal {
 public:
};

OrderByReferenceRequest::OrderByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderByReferenceRequest)
}
OrderByReferenceRequest::OrderByReferenceRequest(const OrderByReferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderByReferenceRequest)
}

void OrderByReferenceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByReferenceRequest_api_2ftrading_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrderByReferenceRequest::~OrderByReferenceRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OrderByReferenceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByReferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderByReferenceRequest::ArenaDtor(void* object) {
  OrderByReferenceRequest* _this = reinterpret_cast< OrderByReferenceRequest* >(object);
  (void)_this;
}
void OrderByReferenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByReferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByReferenceRequest& OrderByReferenceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByReferenceRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByReferenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 1 [json_name = "reference", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrderByReferenceRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByReferenceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrderByReferenceRequest.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderByReferenceRequest)
  return target;
}

size_t OrderByReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderByReferenceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByReferenceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByReferenceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByReferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderByReferenceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderByReferenceRequest)
    MergeFrom(*source);
  }
}

void OrderByReferenceRequest::MergeFrom(const OrderByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void OrderByReferenceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByReferenceRequest::CopyFrom(const OrderByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByReferenceRequest::IsInitialized() const {
  return true;
}

void OrderByReferenceRequest::InternalSwap(OrderByReferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByReferenceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByReferenceResponse::_Internal {
 public:
  static const ::vega::Order& order(const OrderByReferenceResponse* msg);
};

const ::vega::Order&
OrderByReferenceResponse::_Internal::order(const OrderByReferenceResponse* msg) {
  return *msg->order_;
}
void OrderByReferenceResponse::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
OrderByReferenceResponse::OrderByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderByReferenceResponse)
}
OrderByReferenceResponse::OrderByReferenceResponse(const OrderByReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderByReferenceResponse)
}

void OrderByReferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByReferenceResponse_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

OrderByReferenceResponse::~OrderByReferenceResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OrderByReferenceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByReferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderByReferenceResponse::ArenaDtor(void* object) {
  OrderByReferenceResponse* _this = reinterpret_cast< OrderByReferenceResponse* >(object);
  (void)_this;
}
void OrderByReferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByReferenceResponse& OrderByReferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByReferenceResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByReferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderByReferenceResponse)
  return target;
}

size_t OrderByReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderByReferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByReferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByReferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderByReferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderByReferenceResponse)
    MergeFrom(*source);
  }
}

void OrderByReferenceResponse::MergeFrom(const OrderByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderByReferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByReferenceResponse::CopyFrom(const OrderByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByReferenceResponse::IsInitialized() const {
  return true;
}

void OrderByReferenceResponse::InternalSwap(OrderByReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByReferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsRequest::_Internal {
 public:
};

MarketsRequest::MarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketsRequest)
}
MarketsRequest::MarketsRequest(const MarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketsRequest)
}

void MarketsRequest::SharedCtor() {
}

MarketsRequest::~MarketsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketsRequest::ArenaDtor(void* object) {
  MarketsRequest* _this = reinterpret_cast< MarketsRequest* >(object);
  (void)_this;
}
void MarketsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsRequest& MarketsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketsRequest)
  return target;
}

size_t MarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketsRequest)
    MergeFrom(*source);
  }
}

void MarketsRequest::MergeFrom(const MarketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MarketsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsRequest::CopyFrom(const MarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsRequest::IsInitialized() const {
  return true;
}

void MarketsRequest::InternalSwap(MarketsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsResponse::_Internal {
 public:
};

void MarketsResponse::clear_markets() {
  markets_.Clear();
}
MarketsResponse::MarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketsResponse)
}
MarketsResponse::MarketsResponse(const MarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markets_(from.markets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketsResponse)
}

void MarketsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketsResponse_api_2ftrading_2eproto.base);
}

MarketsResponse::~MarketsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketsResponse::ArenaDtor(void* object) {
  MarketsResponse* _this = reinterpret_cast< MarketsResponse* >(object);
  (void)_this;
}
void MarketsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsResponse& MarketsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Market markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1 [json_name = "markets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketsResponse)
  return target;
}

size_t MarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->markets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketsResponse)
    MergeFrom(*source);
  }
}

void MarketsResponse::MergeFrom(const MarketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_.MergeFrom(from.markets_);
}

void MarketsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsResponse::CopyFrom(const MarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsResponse::IsInitialized() const {
  return true;
}

void MarketsResponse::InternalSwap(MarketsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markets_.InternalSwap(&other->markets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CandlesRequest::_Internal {
 public:
};

CandlesRequest::CandlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.CandlesRequest)
}
CandlesRequest::CandlesRequest(const CandlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  ::memcpy(&since_timestamp_, &from.since_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&since_timestamp_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:api.v1.CandlesRequest)
}

void CandlesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandlesRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&since_timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&since_timestamp_)) + sizeof(interval_));
}

CandlesRequest::~CandlesRequest() {
  // @@protoc_insertion_point(destructor:api.v1.CandlesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandlesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CandlesRequest::ArenaDtor(void* object) {
  CandlesRequest* _this = reinterpret_cast< CandlesRequest* >(object);
  (void)_this;
}
void CandlesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandlesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesRequest& CandlesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandlesRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.CandlesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  ::memset(&since_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&since_timestamp_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandlesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.CandlesRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 since_timestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          since_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Interval interval = 3 [json_name = "interval"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::vega::Interval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandlesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.CandlesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.CandlesRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // int64 since_timestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
  if (this->since_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_since_timestamp(), target);
  }

  // .vega.Interval interval = 3 [json_name = "interval"];
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.CandlesRequest)
  return target;
}

size_t CandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.CandlesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // int64 since_timestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
  if (this->since_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_since_timestamp());
  }

  // .vega.Interval interval = 3 [json_name = "interval"];
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.CandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandlesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.CandlesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.CandlesRequest)
    MergeFrom(*source);
  }
}

void CandlesRequest::MergeFrom(const CandlesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.CandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.since_timestamp() != 0) {
    _internal_set_since_timestamp(from._internal_since_timestamp());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void CandlesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.CandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesRequest::CopyFrom(const CandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.CandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesRequest::IsInitialized() const {
  return true;
}

void CandlesRequest::InternalSwap(CandlesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandlesRequest, interval_)
      + sizeof(CandlesRequest::interval_)
      - PROTOBUF_FIELD_OFFSET(CandlesRequest, since_timestamp_)>(
          reinterpret_cast<char*>(&since_timestamp_),
          reinterpret_cast<char*>(&other->since_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandlesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CandlesResponse::_Internal {
 public:
};

void CandlesResponse::clear_candles() {
  candles_.Clear();
}
CandlesResponse::CandlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  candles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.CandlesResponse)
}
CandlesResponse::CandlesResponse(const CandlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      candles_(from.candles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.CandlesResponse)
}

void CandlesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandlesResponse_api_2ftrading_2eproto.base);
}

CandlesResponse::~CandlesResponse() {
  // @@protoc_insertion_point(destructor:api.v1.CandlesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CandlesResponse::ArenaDtor(void* object) {
  CandlesResponse* _this = reinterpret_cast< CandlesResponse* >(object);
  (void)_this;
}
void CandlesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandlesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesResponse& CandlesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandlesResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.CandlesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandlesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Candle candles = 1 [json_name = "candles"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandlesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.CandlesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Candle candles = 1 [json_name = "candles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_candles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.CandlesResponse)
  return target;
}

size_t CandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.CandlesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Candle candles = 1 [json_name = "candles"];
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.CandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandlesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.CandlesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.CandlesResponse)
    MergeFrom(*source);
  }
}

void CandlesResponse::MergeFrom(const CandlesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.CandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candles_.MergeFrom(from.candles_);
}

void CandlesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.CandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesResponse::CopyFrom(const CandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.CandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesResponse::IsInitialized() const {
  return true;
}

void CandlesResponse::InternalSwap(CandlesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  candles_.InternalSwap(&other->candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandlesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthRequest::_Internal {
 public:
};

MarketDepthRequest::MarketDepthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDepthRequest)
}
MarketDepthRequest::MarketDepthRequest(const MarketDepthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  max_depth_ = from.max_depth_;
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDepthRequest)
}

void MarketDepthRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_depth_ = PROTOBUF_ULONGLONG(0);
}

MarketDepthRequest::~MarketDepthRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDepthRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthRequest::ArenaDtor(void* object) {
  MarketDepthRequest* _this = reinterpret_cast< MarketDepthRequest* >(object);
  (void)_this;
}
void MarketDepthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthRequest& MarketDepthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDepthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  max_depth_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketDepthRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_depth = 2 [json_name = "maxDepth"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDepthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketDepthRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // uint64 max_depth = 2 [json_name = "maxDepth"];
  if (this->max_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDepthRequest)
  return target;
}

size_t MarketDepthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDepthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // uint64 max_depth = 2 [json_name = "maxDepth"];
  if (this->max_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDepthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDepthRequest)
    MergeFrom(*source);
  }
}

void MarketDepthRequest::MergeFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.max_depth() != 0) {
    _internal_set_max_depth(from._internal_max_depth());
  }
}

void MarketDepthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthRequest::CopyFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthRequest::IsInitialized() const {
  return true;
}

void MarketDepthRequest::InternalSwap(MarketDepthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(max_depth_, other->max_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthResponse::_Internal {
 public:
  static const ::vega::Trade& last_trade(const MarketDepthResponse* msg);
};

const ::vega::Trade&
MarketDepthResponse::_Internal::last_trade(const MarketDepthResponse* msg) {
  return *msg->last_trade_;
}
void MarketDepthResponse::clear_buy() {
  buy_.Clear();
}
void MarketDepthResponse::clear_sell() {
  sell_.Clear();
}
void MarketDepthResponse::clear_last_trade() {
  if (GetArena() == nullptr && last_trade_ != nullptr) {
    delete last_trade_;
  }
  last_trade_ = nullptr;
}
MarketDepthResponse::MarketDepthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buy_(arena),
  sell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketDepthResponse)
}
MarketDepthResponse::MarketDepthResponse(const MarketDepthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  if (from._internal_has_last_trade()) {
    last_trade_ = new ::vega::Trade(*from.last_trade_);
  } else {
    last_trade_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketDepthResponse)
}

void MarketDepthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthResponse_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&last_trade_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&last_trade_)) + sizeof(sequence_number_));
}

MarketDepthResponse::~MarketDepthResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketDepthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_trade_;
}

void MarketDepthResponse::ArenaDtor(void* object) {
  MarketDepthResponse* _this = reinterpret_cast< MarketDepthResponse* >(object);
  (void)_this;
}
void MarketDepthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthResponse& MarketDepthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketDepthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  market_id_.ClearToEmpty();
  if (GetArena() == nullptr && last_trade_ != nullptr) {
    delete last_trade_;
  }
  last_trade_ = nullptr;
  sequence_number_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketDepthResponse.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .vega.Trade last_trade = 4 [json_name = "lastTrade"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 5 [json_name = "sequenceNumber"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketDepthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketDepthResponse.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buy(i), target, stream);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sell(i), target, stream);
  }

  // .vega.Trade last_trade = 4 [json_name = "lastTrade"];
  if (this->has_last_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_trade(this), target, stream);
  }

  // uint64 sequence_number = 5 [json_name = "sequenceNumber"];
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketDepthResponse)
  return target;
}

size_t MarketDepthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketDepthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // .vega.Trade last_trade = 4 [json_name = "lastTrade"];
  if (this->has_last_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_trade_);
  }

  // uint64 sequence_number = 5 [json_name = "sequenceNumber"];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketDepthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketDepthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketDepthResponse)
    MergeFrom(*source);
  }
}

void MarketDepthResponse::MergeFrom(const MarketDepthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketDepthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.has_last_trade()) {
    _internal_mutable_last_trade()->::vega::Trade::MergeFrom(from._internal_last_trade());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void MarketDepthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketDepthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthResponse::CopyFrom(const MarketDepthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketDepthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthResponse::IsInitialized() const {
  return true;
}

void MarketDepthResponse::InternalSwap(MarketDepthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthResponse, sequence_number_)
      + sizeof(MarketDepthResponse::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthResponse, last_trade_)>(
          reinterpret_cast<char*>(&last_trade_),
          reinterpret_cast<char*>(&other->last_trade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByMarketRequest::_Internal {
 public:
  static const ::api::v1::Pagination& pagination(const TradesByMarketRequest* msg);
};

const ::api::v1::Pagination&
TradesByMarketRequest::_Internal::pagination(const TradesByMarketRequest* msg) {
  return *msg->pagination_;
}
TradesByMarketRequest::TradesByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesByMarketRequest)
}
TradesByMarketRequest::TradesByMarketRequest(const TradesByMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesByMarketRequest)
}

void TradesByMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByMarketRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

TradesByMarketRequest::~TradesByMarketRequest() {
  // @@protoc_insertion_point(destructor:api.v1.TradesByMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void TradesByMarketRequest::ArenaDtor(void* object) {
  TradesByMarketRequest* _this = reinterpret_cast< TradesByMarketRequest* >(object);
  (void)_this;
}
void TradesByMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByMarketRequest& TradesByMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByMarketRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.TradesByMarketRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.TradesByMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesByMarketRequest)
  return target;
}

size_t TradesByMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesByMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId", (.validator.field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesByMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesByMarketRequest)
    MergeFrom(*source);
  }
}

void TradesByMarketRequest::MergeFrom(const TradesByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::v1::Pagination::MergeFrom(from._internal_pagination());
  }
}

void TradesByMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByMarketRequest::CopyFrom(const TradesByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByMarketRequest::IsInitialized() const {
  return true;
}

void TradesByMarketRequest::InternalSwap(TradesByMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByMarketResponse::_Internal {
 public:
};

void TradesByMarketResponse::clear_trades() {
  trades_.Clear();
}
TradesByMarketResponse::TradesByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesByMarketResponse)
}
TradesByMarketResponse::TradesByMarketResponse(const TradesByMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesByMarketResponse)
}

void TradesByMarketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByMarketResponse_api_2ftrading_2eproto.base);
}

TradesByMarketResponse::~TradesByMarketResponse() {
  // @@protoc_insertion_point(destructor:api.v1.TradesByMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesByMarketResponse::ArenaDtor(void* object) {
  TradesByMarketResponse* _this = reinterpret_cast< TradesByMarketResponse* >(object);
  (void)_this;
}
void TradesByMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByMarketResponse& TradesByMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByMarketResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesByMarketResponse)
  return target;
}

size_t TradesByMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesByMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesByMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesByMarketResponse)
    MergeFrom(*source);
  }
}

void TradesByMarketResponse::MergeFrom(const TradesByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByMarketResponse::CopyFrom(const TradesByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByMarketResponse::IsInitialized() const {
  return true;
}

void TradesByMarketResponse::InternalSwap(TradesByMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionsByPartyRequest::_Internal {
 public:
};

PositionsByPartyRequest::PositionsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PositionsByPartyRequest)
}
PositionsByPartyRequest::PositionsByPartyRequest(const PositionsByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PositionsByPartyRequest)
}

void PositionsByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionsByPartyRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PositionsByPartyRequest::~PositionsByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PositionsByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionsByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionsByPartyRequest::ArenaDtor(void* object) {
  PositionsByPartyRequest* _this = reinterpret_cast< PositionsByPartyRequest* >(object);
  (void)_this;
}
void PositionsByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionsByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsByPartyRequest& PositionsByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionsByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PositionsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PositionsByPartyRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PositionsByPartyRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionsByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PositionsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PositionsByPartyRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PositionsByPartyRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PositionsByPartyRequest)
  return target;
}

size_t PositionsByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PositionsByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PositionsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionsByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PositionsByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PositionsByPartyRequest)
    MergeFrom(*source);
  }
}

void PositionsByPartyRequest::MergeFrom(const PositionsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PositionsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
}

void PositionsByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PositionsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsByPartyRequest::CopyFrom(const PositionsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PositionsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsByPartyRequest::IsInitialized() const {
  return true;
}

void PositionsByPartyRequest::InternalSwap(PositionsByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionsByPartyResponse::_Internal {
 public:
};

void PositionsByPartyResponse::clear_positions() {
  positions_.Clear();
}
PositionsByPartyResponse::PositionsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PositionsByPartyResponse)
}
PositionsByPartyResponse::PositionsByPartyResponse(const PositionsByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.PositionsByPartyResponse)
}

void PositionsByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionsByPartyResponse_api_2ftrading_2eproto.base);
}

PositionsByPartyResponse::~PositionsByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PositionsByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionsByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionsByPartyResponse::ArenaDtor(void* object) {
  PositionsByPartyResponse* _this = reinterpret_cast< PositionsByPartyResponse* >(object);
  (void)_this;
}
void PositionsByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionsByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsByPartyResponse& PositionsByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionsByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PositionsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Position positions = 1 [json_name = "positions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionsByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PositionsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Position positions = 1 [json_name = "positions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PositionsByPartyResponse)
  return target;
}

size_t PositionsByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PositionsByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Position positions = 1 [json_name = "positions"];
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PositionsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionsByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PositionsByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PositionsByPartyResponse)
    MergeFrom(*source);
  }
}

void PositionsByPartyResponse::MergeFrom(const PositionsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PositionsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void PositionsByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PositionsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsByPartyResponse::CopyFrom(const PositionsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PositionsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsByPartyResponse::IsInitialized() const {
  return true;
}

void PositionsByPartyResponse::InternalSwap(PositionsByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVegaTimeRequest::_Internal {
 public:
};

GetVegaTimeRequest::GetVegaTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetVegaTimeRequest)
}
GetVegaTimeRequest::GetVegaTimeRequest(const GetVegaTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.GetVegaTimeRequest)
}

void GetVegaTimeRequest::SharedCtor() {
}

GetVegaTimeRequest::~GetVegaTimeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.GetVegaTimeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVegaTimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetVegaTimeRequest::ArenaDtor(void* object) {
  GetVegaTimeRequest* _this = reinterpret_cast< GetVegaTimeRequest* >(object);
  (void)_this;
}
void GetVegaTimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVegaTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVegaTimeRequest& GetVegaTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVegaTimeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVegaTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetVegaTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVegaTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVegaTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetVegaTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetVegaTimeRequest)
  return target;
}

size_t GetVegaTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetVegaTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVegaTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetVegaTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVegaTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVegaTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetVegaTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetVegaTimeRequest)
    MergeFrom(*source);
  }
}

void GetVegaTimeRequest::MergeFrom(const GetVegaTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetVegaTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetVegaTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetVegaTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVegaTimeRequest::CopyFrom(const GetVegaTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetVegaTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVegaTimeRequest::IsInitialized() const {
  return true;
}

void GetVegaTimeRequest::InternalSwap(GetVegaTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVegaTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVegaTimeResponse::_Internal {
 public:
};

GetVegaTimeResponse::GetVegaTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.GetVegaTimeResponse)
}
GetVegaTimeResponse::GetVegaTimeResponse(const GetVegaTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:api.v1.GetVegaTimeResponse)
}

void GetVegaTimeResponse::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

GetVegaTimeResponse::~GetVegaTimeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.GetVegaTimeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVegaTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetVegaTimeResponse::ArenaDtor(void* object) {
  GetVegaTimeResponse* _this = reinterpret_cast< GetVegaTimeResponse* >(object);
  (void)_this;
}
void GetVegaTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVegaTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVegaTimeResponse& GetVegaTimeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVegaTimeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVegaTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.GetVegaTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVegaTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1 [json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVegaTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.GetVegaTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.GetVegaTimeResponse)
  return target;
}

size_t GetVegaTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.GetVegaTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVegaTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.GetVegaTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVegaTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVegaTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.GetVegaTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.GetVegaTimeResponse)
    MergeFrom(*source);
  }
}

void GetVegaTimeResponse::MergeFrom(const GetVegaTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.GetVegaTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void GetVegaTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.GetVegaTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVegaTimeResponse::CopyFrom(const GetVegaTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.GetVegaTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVegaTimeResponse::IsInitialized() const {
  return true;
}

void GetVegaTimeResponse::InternalSwap(GetVegaTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVegaTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skip_, &from.skip_,
    static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
  // @@protoc_insertion_point(copy_constructor:api.v1.Pagination)
}

void Pagination::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&skip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:api.v1.Pagination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pagination::ArenaDtor(void* object) {
  Pagination* _this = reinterpret_cast< Pagination* >(object);
  (void)_this;
}
void Pagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pagination& Pagination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pagination_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 skip = 1 [json_name = "skip"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool descending = 3 [json_name = "descending"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 skip = 1 [json_name = "skip"];
  if (this->skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_skip(), target);
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_limit(), target);
  }

  // bool descending = 3 [json_name = "descending"];
  if (this->descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_descending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.Pagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 skip = 1 [json_name = "skip"];
  if (this->skip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_skip());
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  // bool descending = 3 [json_name = "descending"];
  if (this->descending() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  const Pagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.Pagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.Pagination)
    MergeFrom(*source);
  }
}

void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skip() != 0) {
    _internal_set_skip(from._internal_skip());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.descending() != 0) {
    _internal_set_descending(from._internal_descending());
  }
}

void Pagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, descending_)
      + sizeof(Pagination::descending_)
      - PROTOBUF_FIELD_OFFSET(Pagination, skip_)>(
          reinterpret_cast<char*>(&skip_),
          reinterpret_cast<char*>(&other->skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersSubscribeResponse::_Internal {
 public:
};

void OrdersSubscribeResponse::clear_orders() {
  orders_.Clear();
}
OrdersSubscribeResponse::OrdersSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrdersSubscribeResponse)
}
OrdersSubscribeResponse::OrdersSubscribeResponse(const OrdersSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.OrdersSubscribeResponse)
}

void OrdersSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersSubscribeResponse_api_2ftrading_2eproto.base);
}

OrdersSubscribeResponse::~OrdersSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OrdersSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrdersSubscribeResponse::ArenaDtor(void* object) {
  OrdersSubscribeResponse* _this = reinterpret_cast< OrdersSubscribeResponse* >(object);
  (void)_this;
}
void OrdersSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersSubscribeResponse& OrdersSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrdersSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrdersSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrdersSubscribeResponse)
  return target;
}

size_t OrdersSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrdersSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrdersSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrdersSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrdersSubscribeResponse)
    MergeFrom(*source);
  }
}

void OrdersSubscribeResponse::MergeFrom(const OrdersSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrdersSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrdersSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersSubscribeResponse::CopyFrom(const OrdersSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrdersSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersSubscribeResponse::IsInitialized() const {
  return true;
}

void OrdersSubscribeResponse::InternalSwap(OrdersSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesSubscribeResponse::_Internal {
 public:
};

void TradesSubscribeResponse::clear_trades() {
  trades_.Clear();
}
TradesSubscribeResponse::TradesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TradesSubscribeResponse)
}
TradesSubscribeResponse::TradesSubscribeResponse(const TradesSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.TradesSubscribeResponse)
}

void TradesSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesSubscribeResponse_api_2ftrading_2eproto.base);
}

TradesSubscribeResponse::~TradesSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.TradesSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesSubscribeResponse::ArenaDtor(void* object) {
  TradesSubscribeResponse* _this = reinterpret_cast< TradesSubscribeResponse* >(object);
  (void)_this;
}
void TradesSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesSubscribeResponse& TradesSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TradesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TradesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TradesSubscribeResponse)
  return target;
}

size_t TradesSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TradesSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TradesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TradesSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TradesSubscribeResponse)
    MergeFrom(*source);
  }
}

void TradesSubscribeResponse::MergeFrom(const TradesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TradesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TradesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesSubscribeResponse::CopyFrom(const TradesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TradesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesSubscribeResponse::IsInitialized() const {
  return true;
}

void TradesSubscribeResponse::InternalSwap(TradesSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferResponsesSubscribeRequest::_Internal {
 public:
};

TransferResponsesSubscribeRequest::TransferResponsesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TransferResponsesSubscribeRequest)
}
TransferResponsesSubscribeRequest::TransferResponsesSubscribeRequest(const TransferResponsesSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.TransferResponsesSubscribeRequest)
}

void TransferResponsesSubscribeRequest::SharedCtor() {
}

TransferResponsesSubscribeRequest::~TransferResponsesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.TransferResponsesSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferResponsesSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferResponsesSubscribeRequest::ArenaDtor(void* object) {
  TransferResponsesSubscribeRequest* _this = reinterpret_cast< TransferResponsesSubscribeRequest* >(object);
  (void)_this;
}
void TransferResponsesSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferResponsesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponsesSubscribeRequest& TransferResponsesSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferResponsesSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TransferResponsesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TransferResponsesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferResponsesSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferResponsesSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TransferResponsesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TransferResponsesSubscribeRequest)
  return target;
}

size_t TransferResponsesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TransferResponsesSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponsesSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TransferResponsesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponsesSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferResponsesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TransferResponsesSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TransferResponsesSubscribeRequest)
    MergeFrom(*source);
  }
}

void TransferResponsesSubscribeRequest::MergeFrom(const TransferResponsesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TransferResponsesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransferResponsesSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TransferResponsesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponsesSubscribeRequest::CopyFrom(const TransferResponsesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TransferResponsesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponsesSubscribeRequest::IsInitialized() const {
  return true;
}

void TransferResponsesSubscribeRequest::InternalSwap(TransferResponsesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferResponsesSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferResponsesSubscribeResponse::_Internal {
 public:
  static const ::vega::TransferResponse& response(const TransferResponsesSubscribeResponse* msg);
};

const ::vega::TransferResponse&
TransferResponsesSubscribeResponse::_Internal::response(const TransferResponsesSubscribeResponse* msg) {
  return *msg->response_;
}
void TransferResponsesSubscribeResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
TransferResponsesSubscribeResponse::TransferResponsesSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.TransferResponsesSubscribeResponse)
}
TransferResponsesSubscribeResponse::TransferResponsesSubscribeResponse(const TransferResponsesSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    response_ = new ::vega::TransferResponse(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.TransferResponsesSubscribeResponse)
}

void TransferResponsesSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferResponsesSubscribeResponse_api_2ftrading_2eproto.base);
  response_ = nullptr;
}

TransferResponsesSubscribeResponse::~TransferResponsesSubscribeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.TransferResponsesSubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferResponsesSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete response_;
}

void TransferResponsesSubscribeResponse::ArenaDtor(void* object) {
  TransferResponsesSubscribeResponse* _this = reinterpret_cast< TransferResponsesSubscribeResponse* >(object);
  (void)_this;
}
void TransferResponsesSubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferResponsesSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponsesSubscribeResponse& TransferResponsesSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferResponsesSubscribeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TransferResponsesSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.TransferResponsesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferResponsesSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.TransferResponse response = 1 [json_name = "response"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferResponsesSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.TransferResponsesSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.TransferResponse response = 1 [json_name = "response"];
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.TransferResponsesSubscribeResponse)
  return target;
}

size_t TransferResponsesSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.TransferResponsesSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.TransferResponse response = 1 [json_name = "response"];
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponsesSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.TransferResponsesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponsesSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferResponsesSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.TransferResponsesSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.TransferResponsesSubscribeResponse)
    MergeFrom(*source);
  }
}

void TransferResponsesSubscribeResponse::MergeFrom(const TransferResponsesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.TransferResponsesSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    _internal_mutable_response()->::vega::TransferResponse::MergeFrom(from._internal_response());
  }
}

void TransferResponsesSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.TransferResponsesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponsesSubscribeResponse::CopyFrom(const TransferResponsesSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.TransferResponsesSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponsesSubscribeResponse::IsInitialized() const {
  return true;
}

void TransferResponsesSubscribeResponse::InternalSwap(TransferResponsesSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferResponsesSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyAccountsRequest::_Internal {
 public:
};

PartyAccountsRequest::PartyAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PartyAccountsRequest)
}
PartyAccountsRequest::PartyAccountsRequest(const PartyAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.v1.PartyAccountsRequest)
}

void PartyAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyAccountsRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PartyAccountsRequest::~PartyAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PartyAccountsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyAccountsRequest::ArenaDtor(void* object) {
  PartyAccountsRequest* _this = reinterpret_cast< PartyAccountsRequest* >(object);
  (void)_this;
}
void PartyAccountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyAccountsRequest& PartyAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyAccountsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PartyAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  market_id_.ClearToEmpty();
  asset_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PartyAccountsRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PartyAccountsRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AccountType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::AccountType>(val));
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.PartyAccountsRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PartyAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PartyAccountsRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PartyAccountsRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  // .vega.AccountType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.PartyAccountsRequest.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PartyAccountsRequest)
  return target;
}

size_t PartyAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PartyAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // .vega.AccountType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PartyAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PartyAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PartyAccountsRequest)
    MergeFrom(*source);
  }
}

void PartyAccountsRequest::MergeFrom(const PartyAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PartyAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PartyAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PartyAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyAccountsRequest::CopyFrom(const PartyAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PartyAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyAccountsRequest::IsInitialized() const {
  return true;
}

void PartyAccountsRequest::InternalSwap(PartyAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyAccountsResponse::_Internal {
 public:
};

void PartyAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
PartyAccountsResponse::PartyAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PartyAccountsResponse)
}
PartyAccountsResponse::PartyAccountsResponse(const PartyAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.PartyAccountsResponse)
}

void PartyAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyAccountsResponse_api_2ftrading_2eproto.base);
}

PartyAccountsResponse::~PartyAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PartyAccountsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartyAccountsResponse::ArenaDtor(void* object) {
  PartyAccountsResponse* _this = reinterpret_cast< PartyAccountsResponse* >(object);
  (void)_this;
}
void PartyAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyAccountsResponse& PartyAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyAccountsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PartyAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PartyAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PartyAccountsResponse)
  return target;
}

size_t PartyAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PartyAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PartyAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PartyAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PartyAccountsResponse)
    MergeFrom(*source);
  }
}

void PartyAccountsResponse::MergeFrom(const PartyAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PartyAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void PartyAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PartyAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyAccountsResponse::CopyFrom(const PartyAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PartyAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyAccountsResponse::IsInitialized() const {
  return true;
}

void PartyAccountsResponse::InternalSwap(PartyAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketAccountsRequest::_Internal {
 public:
};

MarketAccountsRequest::MarketAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketAccountsRequest)
}
MarketAccountsRequest::MarketAccountsRequest(const MarketAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketAccountsRequest)
}

void MarketAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketAccountsRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketAccountsRequest::~MarketAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.MarketAccountsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketAccountsRequest::ArenaDtor(void* object) {
  MarketAccountsRequest* _this = reinterpret_cast< MarketAccountsRequest* >(object);
  (void)_this;
}
void MarketAccountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketAccountsRequest& MarketAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketAccountsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty();
  asset_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketAccountsRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 2 [json_name = "asset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.MarketAccountsRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketAccountsRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.MarketAccountsRequest.asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketAccountsRequest)
  return target;
}

size_t MarketAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketAccountsRequest)
    MergeFrom(*source);
  }
}

void MarketAccountsRequest::MergeFrom(const MarketAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
}

void MarketAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketAccountsRequest::CopyFrom(const MarketAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketAccountsRequest::IsInitialized() const {
  return true;
}

void MarketAccountsRequest::InternalSwap(MarketAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketAccountsResponse::_Internal {
 public:
};

void MarketAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
MarketAccountsResponse::MarketAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.MarketAccountsResponse)
}
MarketAccountsResponse::MarketAccountsResponse(const MarketAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.MarketAccountsResponse)
}

void MarketAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketAccountsResponse_api_2ftrading_2eproto.base);
}

MarketAccountsResponse::~MarketAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.MarketAccountsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketAccountsResponse::ArenaDtor(void* object) {
  MarketAccountsResponse* _this = reinterpret_cast< MarketAccountsResponse* >(object);
  (void)_this;
}
void MarketAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketAccountsResponse& MarketAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketAccountsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.MarketAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.MarketAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.MarketAccountsResponse)
  return target;
}

size_t MarketAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.MarketAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.MarketAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.MarketAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.MarketAccountsResponse)
    MergeFrom(*source);
  }
}

void MarketAccountsResponse::MergeFrom(const MarketAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.MarketAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void MarketAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.MarketAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketAccountsResponse::CopyFrom(const MarketAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.MarketAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketAccountsResponse::IsInitialized() const {
  return true;
}

void MarketAccountsResponse::InternalSwap(MarketAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeeInfrastructureAccountsRequest::_Internal {
 public:
};

FeeInfrastructureAccountsRequest::FeeInfrastructureAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FeeInfrastructureAccountsRequest)
}
FeeInfrastructureAccountsRequest::FeeInfrastructureAccountsRequest(const FeeInfrastructureAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.FeeInfrastructureAccountsRequest)
}

void FeeInfrastructureAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FeeInfrastructureAccountsRequest::~FeeInfrastructureAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.FeeInfrastructureAccountsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeeInfrastructureAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeeInfrastructureAccountsRequest::ArenaDtor(void* object) {
  FeeInfrastructureAccountsRequest* _this = reinterpret_cast< FeeInfrastructureAccountsRequest* >(object);
  (void)_this;
}
void FeeInfrastructureAccountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeeInfrastructureAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeInfrastructureAccountsRequest& FeeInfrastructureAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void FeeInfrastructureAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FeeInfrastructureAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeInfrastructureAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset = 1 [json_name = "asset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.FeeInfrastructureAccountsRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeInfrastructureAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FeeInfrastructureAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.FeeInfrastructureAccountsRequest.asset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FeeInfrastructureAccountsRequest)
  return target;
}

size_t FeeInfrastructureAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FeeInfrastructureAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeInfrastructureAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.FeeInfrastructureAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeInfrastructureAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeInfrastructureAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.FeeInfrastructureAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.FeeInfrastructureAccountsRequest)
    MergeFrom(*source);
  }
}

void FeeInfrastructureAccountsRequest::MergeFrom(const FeeInfrastructureAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FeeInfrastructureAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
}

void FeeInfrastructureAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.FeeInfrastructureAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeInfrastructureAccountsRequest::CopyFrom(const FeeInfrastructureAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FeeInfrastructureAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeInfrastructureAccountsRequest::IsInitialized() const {
  return true;
}

void FeeInfrastructureAccountsRequest::InternalSwap(FeeInfrastructureAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeInfrastructureAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeeInfrastructureAccountsResponse::_Internal {
 public:
};

void FeeInfrastructureAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
FeeInfrastructureAccountsResponse::FeeInfrastructureAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FeeInfrastructureAccountsResponse)
}
FeeInfrastructureAccountsResponse::FeeInfrastructureAccountsResponse(const FeeInfrastructureAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.FeeInfrastructureAccountsResponse)
}

void FeeInfrastructureAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto.base);
}

FeeInfrastructureAccountsResponse::~FeeInfrastructureAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.FeeInfrastructureAccountsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeeInfrastructureAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeeInfrastructureAccountsResponse::ArenaDtor(void* object) {
  FeeInfrastructureAccountsResponse* _this = reinterpret_cast< FeeInfrastructureAccountsResponse* >(object);
  (void)_this;
}
void FeeInfrastructureAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeeInfrastructureAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeInfrastructureAccountsResponse& FeeInfrastructureAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void FeeInfrastructureAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FeeInfrastructureAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeInfrastructureAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeInfrastructureAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FeeInfrastructureAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FeeInfrastructureAccountsResponse)
  return target;
}

size_t FeeInfrastructureAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FeeInfrastructureAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeInfrastructureAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.FeeInfrastructureAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeInfrastructureAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeInfrastructureAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.FeeInfrastructureAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.FeeInfrastructureAccountsResponse)
    MergeFrom(*source);
  }
}

void FeeInfrastructureAccountsResponse::MergeFrom(const FeeInfrastructureAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FeeInfrastructureAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void FeeInfrastructureAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.FeeInfrastructureAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeInfrastructureAccountsResponse::CopyFrom(const FeeInfrastructureAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FeeInfrastructureAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeInfrastructureAccountsResponse::IsInitialized() const {
  return true;
}

void FeeInfrastructureAccountsResponse::InternalSwap(FeeInfrastructureAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeInfrastructureAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareProposalSubmissionRequest::_Internal {
 public:
  static const ::vega::commands::v1::ProposalSubmission& submission(const PrepareProposalSubmissionRequest* msg);
};

const ::vega::commands::v1::ProposalSubmission&
PrepareProposalSubmissionRequest::_Internal::submission(const PrepareProposalSubmissionRequest* msg) {
  return *msg->submission_;
}
void PrepareProposalSubmissionRequest::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
PrepareProposalSubmissionRequest::PrepareProposalSubmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareProposalSubmissionRequest)
}
PrepareProposalSubmissionRequest::PrepareProposalSubmissionRequest(const PrepareProposalSubmissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submission()) {
    submission_ = new ::vega::commands::v1::ProposalSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareProposalSubmissionRequest)
}

void PrepareProposalSubmissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareProposalSubmissionRequest_api_2ftrading_2eproto.base);
  submission_ = nullptr;
}

PrepareProposalSubmissionRequest::~PrepareProposalSubmissionRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareProposalSubmissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareProposalSubmissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submission_;
}

void PrepareProposalSubmissionRequest::ArenaDtor(void* object) {
  PrepareProposalSubmissionRequest* _this = reinterpret_cast< PrepareProposalSubmissionRequest* >(object);
  (void)_this;
}
void PrepareProposalSubmissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareProposalSubmissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareProposalSubmissionRequest& PrepareProposalSubmissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareProposalSubmissionRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareProposalSubmissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareProposalSubmissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareProposalSubmissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.ProposalSubmission submission = 1 [json_name = "submission"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareProposalSubmissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareProposalSubmissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.ProposalSubmission submission = 1 [json_name = "submission"];
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareProposalSubmissionRequest)
  return target;
}

size_t PrepareProposalSubmissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareProposalSubmissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.ProposalSubmission submission = 1 [json_name = "submission"];
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareProposalSubmissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareProposalSubmissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareProposalSubmissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareProposalSubmissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareProposalSubmissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareProposalSubmissionRequest)
    MergeFrom(*source);
  }
}

void PrepareProposalSubmissionRequest::MergeFrom(const PrepareProposalSubmissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareProposalSubmissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::commands::v1::ProposalSubmission::MergeFrom(from._internal_submission());
  }
}

void PrepareProposalSubmissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareProposalSubmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareProposalSubmissionRequest::CopyFrom(const PrepareProposalSubmissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareProposalSubmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareProposalSubmissionRequest::IsInitialized() const {
  return true;
}

void PrepareProposalSubmissionRequest::InternalSwap(PrepareProposalSubmissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareProposalSubmissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareProposalSubmissionResponse::_Internal {
 public:
  static const ::vega::commands::v1::ProposalSubmission& submission(const PrepareProposalSubmissionResponse* msg);
};

const ::vega::commands::v1::ProposalSubmission&
PrepareProposalSubmissionResponse::_Internal::submission(const PrepareProposalSubmissionResponse* msg) {
  return *msg->submission_;
}
void PrepareProposalSubmissionResponse::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
PrepareProposalSubmissionResponse::PrepareProposalSubmissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareProposalSubmissionResponse)
}
PrepareProposalSubmissionResponse::PrepareProposalSubmissionResponse(const PrepareProposalSubmissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(),
      GetArena());
  }
  if (from._internal_has_submission()) {
    submission_ = new ::vega::commands::v1::ProposalSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareProposalSubmissionResponse)
}

void PrepareProposalSubmissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareProposalSubmissionResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submission_ = nullptr;
}

PrepareProposalSubmissionResponse::~PrepareProposalSubmissionResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareProposalSubmissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareProposalSubmissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete submission_;
}

void PrepareProposalSubmissionResponse::ArenaDtor(void* object) {
  PrepareProposalSubmissionResponse* _this = reinterpret_cast< PrepareProposalSubmissionResponse* >(object);
  (void)_this;
}
void PrepareProposalSubmissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareProposalSubmissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareProposalSubmissionResponse& PrepareProposalSubmissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareProposalSubmissionResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareProposalSubmissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareProposalSubmissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareProposalSubmissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.ProposalSubmission submission = 2 [json_name = "submission"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareProposalSubmissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareProposalSubmissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  // .vega.commands.v1.ProposalSubmission submission = 2 [json_name = "submission"];
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareProposalSubmissionResponse)
  return target;
}

size_t PrepareProposalSubmissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareProposalSubmissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // .vega.commands.v1.ProposalSubmission submission = 2 [json_name = "submission"];
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareProposalSubmissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareProposalSubmissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareProposalSubmissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareProposalSubmissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareProposalSubmissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareProposalSubmissionResponse)
    MergeFrom(*source);
  }
}

void PrepareProposalSubmissionResponse::MergeFrom(const PrepareProposalSubmissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareProposalSubmissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::commands::v1::ProposalSubmission::MergeFrom(from._internal_submission());
  }
}

void PrepareProposalSubmissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareProposalSubmissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareProposalSubmissionResponse::CopyFrom(const PrepareProposalSubmissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareProposalSubmissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareProposalSubmissionResponse::IsInitialized() const {
  return true;
}

void PrepareProposalSubmissionResponse::InternalSwap(PrepareProposalSubmissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareProposalSubmissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareVoteSubmissionRequest::_Internal {
 public:
  static const ::vega::commands::v1::VoteSubmission& submission(const PrepareVoteSubmissionRequest* msg);
};

const ::vega::commands::v1::VoteSubmission&
PrepareVoteSubmissionRequest::_Internal::submission(const PrepareVoteSubmissionRequest* msg) {
  return *msg->submission_;
}
void PrepareVoteSubmissionRequest::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
PrepareVoteSubmissionRequest::PrepareVoteSubmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareVoteSubmissionRequest)
}
PrepareVoteSubmissionRequest::PrepareVoteSubmissionRequest(const PrepareVoteSubmissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submission()) {
    submission_ = new ::vega::commands::v1::VoteSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareVoteSubmissionRequest)
}

void PrepareVoteSubmissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareVoteSubmissionRequest_api_2ftrading_2eproto.base);
  submission_ = nullptr;
}

PrepareVoteSubmissionRequest::~PrepareVoteSubmissionRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareVoteSubmissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareVoteSubmissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submission_;
}

void PrepareVoteSubmissionRequest::ArenaDtor(void* object) {
  PrepareVoteSubmissionRequest* _this = reinterpret_cast< PrepareVoteSubmissionRequest* >(object);
  (void)_this;
}
void PrepareVoteSubmissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareVoteSubmissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareVoteSubmissionRequest& PrepareVoteSubmissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareVoteSubmissionRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareVoteSubmissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareVoteSubmissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareVoteSubmissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.VoteSubmission submission = 1 [json_name = "submission", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareVoteSubmissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareVoteSubmissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.VoteSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareVoteSubmissionRequest)
  return target;
}

size_t PrepareVoteSubmissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareVoteSubmissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.VoteSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareVoteSubmissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareVoteSubmissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareVoteSubmissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareVoteSubmissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareVoteSubmissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareVoteSubmissionRequest)
    MergeFrom(*source);
  }
}

void PrepareVoteSubmissionRequest::MergeFrom(const PrepareVoteSubmissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareVoteSubmissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::commands::v1::VoteSubmission::MergeFrom(from._internal_submission());
  }
}

void PrepareVoteSubmissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareVoteSubmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareVoteSubmissionRequest::CopyFrom(const PrepareVoteSubmissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareVoteSubmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareVoteSubmissionRequest::IsInitialized() const {
  return true;
}

void PrepareVoteSubmissionRequest::InternalSwap(PrepareVoteSubmissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareVoteSubmissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareVoteSubmissionResponse::_Internal {
 public:
  static const ::vega::commands::v1::VoteSubmission& submission(const PrepareVoteSubmissionResponse* msg);
};

const ::vega::commands::v1::VoteSubmission&
PrepareVoteSubmissionResponse::_Internal::submission(const PrepareVoteSubmissionResponse* msg) {
  return *msg->submission_;
}
void PrepareVoteSubmissionResponse::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
PrepareVoteSubmissionResponse::PrepareVoteSubmissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareVoteSubmissionResponse)
}
PrepareVoteSubmissionResponse::PrepareVoteSubmissionResponse(const PrepareVoteSubmissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(),
      GetArena());
  }
  if (from._internal_has_submission()) {
    submission_ = new ::vega::commands::v1::VoteSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareVoteSubmissionResponse)
}

void PrepareVoteSubmissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareVoteSubmissionResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submission_ = nullptr;
}

PrepareVoteSubmissionResponse::~PrepareVoteSubmissionResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareVoteSubmissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareVoteSubmissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete submission_;
}

void PrepareVoteSubmissionResponse::ArenaDtor(void* object) {
  PrepareVoteSubmissionResponse* _this = reinterpret_cast< PrepareVoteSubmissionResponse* >(object);
  (void)_this;
}
void PrepareVoteSubmissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareVoteSubmissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareVoteSubmissionResponse& PrepareVoteSubmissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareVoteSubmissionResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareVoteSubmissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareVoteSubmissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareVoteSubmissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.commands.v1.VoteSubmission submission = 2 [json_name = "submission"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareVoteSubmissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareVoteSubmissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  // .vega.commands.v1.VoteSubmission submission = 2 [json_name = "submission"];
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareVoteSubmissionResponse)
  return target;
}

size_t PrepareVoteSubmissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareVoteSubmissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // .vega.commands.v1.VoteSubmission submission = 2 [json_name = "submission"];
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareVoteSubmissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareVoteSubmissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareVoteSubmissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareVoteSubmissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareVoteSubmissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareVoteSubmissionResponse)
    MergeFrom(*source);
  }
}

void PrepareVoteSubmissionResponse::MergeFrom(const PrepareVoteSubmissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareVoteSubmissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::commands::v1::VoteSubmission::MergeFrom(from._internal_submission());
  }
}

void PrepareVoteSubmissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareVoteSubmissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareVoteSubmissionResponse::CopyFrom(const PrepareVoteSubmissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareVoteSubmissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareVoteSubmissionResponse::IsInitialized() const {
  return true;
}

void PrepareVoteSubmissionResponse::InternalSwap(PrepareVoteSubmissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareVoteSubmissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareLiquidityProvisionRequest::_Internal {
 public:
  static const ::vega::commands::v1::LiquidityProvisionSubmission& submission(const PrepareLiquidityProvisionRequest* msg);
};

const ::vega::commands::v1::LiquidityProvisionSubmission&
PrepareLiquidityProvisionRequest::_Internal::submission(const PrepareLiquidityProvisionRequest* msg) {
  return *msg->submission_;
}
void PrepareLiquidityProvisionRequest::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
PrepareLiquidityProvisionRequest::PrepareLiquidityProvisionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareLiquidityProvisionRequest)
}
PrepareLiquidityProvisionRequest::PrepareLiquidityProvisionRequest(const PrepareLiquidityProvisionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submission()) {
    submission_ = new ::vega::commands::v1::LiquidityProvisionSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareLiquidityProvisionRequest)
}

void PrepareLiquidityProvisionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto.base);
  submission_ = nullptr;
}

PrepareLiquidityProvisionRequest::~PrepareLiquidityProvisionRequest() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareLiquidityProvisionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareLiquidityProvisionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submission_;
}

void PrepareLiquidityProvisionRequest::ArenaDtor(void* object) {
  PrepareLiquidityProvisionRequest* _this = reinterpret_cast< PrepareLiquidityProvisionRequest* >(object);
  (void)_this;
}
void PrepareLiquidityProvisionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareLiquidityProvisionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareLiquidityProvisionRequest& PrepareLiquidityProvisionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareLiquidityProvisionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareLiquidityProvisionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareLiquidityProvisionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.commands.v1.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareLiquidityProvisionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareLiquidityProvisionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.commands.v1.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareLiquidityProvisionRequest)
  return target;
}

size_t PrepareLiquidityProvisionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareLiquidityProvisionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.commands.v1.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareLiquidityProvisionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareLiquidityProvisionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareLiquidityProvisionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareLiquidityProvisionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareLiquidityProvisionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareLiquidityProvisionRequest)
    MergeFrom(*source);
  }
}

void PrepareLiquidityProvisionRequest::MergeFrom(const PrepareLiquidityProvisionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareLiquidityProvisionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::commands::v1::LiquidityProvisionSubmission::MergeFrom(from._internal_submission());
  }
}

void PrepareLiquidityProvisionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareLiquidityProvisionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareLiquidityProvisionRequest::CopyFrom(const PrepareLiquidityProvisionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareLiquidityProvisionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareLiquidityProvisionRequest::IsInitialized() const {
  return true;
}

void PrepareLiquidityProvisionRequest::InternalSwap(PrepareLiquidityProvisionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareLiquidityProvisionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareLiquidityProvisionResponse::_Internal {
 public:
};

PrepareLiquidityProvisionResponse::PrepareLiquidityProvisionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.PrepareLiquidityProvisionResponse)
}
PrepareLiquidityProvisionResponse::PrepareLiquidityProvisionResponse(const PrepareLiquidityProvisionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.PrepareLiquidityProvisionResponse)
}

void PrepareLiquidityProvisionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareLiquidityProvisionResponse::~PrepareLiquidityProvisionResponse() {
  // @@protoc_insertion_point(destructor:api.v1.PrepareLiquidityProvisionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareLiquidityProvisionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareLiquidityProvisionResponse::ArenaDtor(void* object) {
  PrepareLiquidityProvisionResponse* _this = reinterpret_cast< PrepareLiquidityProvisionResponse* >(object);
  (void)_this;
}
void PrepareLiquidityProvisionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareLiquidityProvisionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareLiquidityProvisionResponse& PrepareLiquidityProvisionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareLiquidityProvisionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.PrepareLiquidityProvisionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareLiquidityProvisionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareLiquidityProvisionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.PrepareLiquidityProvisionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.PrepareLiquidityProvisionResponse)
  return target;
}

size_t PrepareLiquidityProvisionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.PrepareLiquidityProvisionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareLiquidityProvisionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.PrepareLiquidityProvisionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareLiquidityProvisionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareLiquidityProvisionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.PrepareLiquidityProvisionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.PrepareLiquidityProvisionResponse)
    MergeFrom(*source);
  }
}

void PrepareLiquidityProvisionResponse::MergeFrom(const PrepareLiquidityProvisionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.PrepareLiquidityProvisionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareLiquidityProvisionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.PrepareLiquidityProvisionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareLiquidityProvisionResponse::CopyFrom(const PrepareLiquidityProvisionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.PrepareLiquidityProvisionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareLiquidityProvisionResponse::IsInitialized() const {
  return true;
}

void PrepareLiquidityProvisionResponse::InternalSwap(PrepareLiquidityProvisionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareLiquidityProvisionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByIDRequest::_Internal {
 public:
};

OrderByIDRequest::OrderByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderByIDRequest)
}
OrderByIDRequest::OrderByIDRequest(const OrderByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(),
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderByIDRequest)
}

void OrderByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByIDRequest_api_2ftrading_2eproto.base);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_ULONGLONG(0);
}

OrderByIDRequest::~OrderByIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OrderByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderByIDRequest::ArenaDtor(void* object) {
  OrderByIDRequest* _this = reinterpret_cast< OrderByIDRequest* >(object);
  (void)_this;
}
void OrderByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByIDRequest& OrderByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string order_id = 1 [json_name = "orderId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrderByIDRequest.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrderByIDRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // uint64 version = 2 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderByIDRequest)
  return target;
}

size_t OrderByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // uint64 version = 2 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderByIDRequest)
    MergeFrom(*source);
  }
}

void OrderByIDRequest::MergeFrom(const OrderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void OrderByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByIDRequest::CopyFrom(const OrderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByIDRequest::IsInitialized() const {
  return true;
}

void OrderByIDRequest::InternalSwap(OrderByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByIDResponse::_Internal {
 public:
  static const ::vega::Order& order(const OrderByIDResponse* msg);
};

const ::vega::Order&
OrderByIDResponse::_Internal::order(const OrderByIDResponse* msg) {
  return *msg->order_;
}
void OrderByIDResponse::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
OrderByIDResponse::OrderByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderByIDResponse)
}
OrderByIDResponse::OrderByIDResponse(const OrderByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderByIDResponse)
}

void OrderByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByIDResponse_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

OrderByIDResponse::~OrderByIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OrderByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderByIDResponse::ArenaDtor(void* object) {
  OrderByIDResponse* _this = reinterpret_cast< OrderByIDResponse* >(object);
  (void)_this;
}
void OrderByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByIDResponse& OrderByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderByIDResponse)
  return target;
}

size_t OrderByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderByIDResponse)
    MergeFrom(*source);
  }
}

void OrderByIDResponse::MergeFrom(const OrderByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByIDResponse::CopyFrom(const OrderByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByIDResponse::IsInitialized() const {
  return true;
}

void OrderByIDResponse::InternalSwap(OrderByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderVersionsByIDRequest::_Internal {
 public:
  static const ::api::v1::Pagination& pagination(const OrderVersionsByIDRequest* msg);
};

const ::api::v1::Pagination&
OrderVersionsByIDRequest::_Internal::pagination(const OrderVersionsByIDRequest* msg) {
  return *msg->pagination_;
}
OrderVersionsByIDRequest::OrderVersionsByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderVersionsByIDRequest)
}
OrderVersionsByIDRequest::OrderVersionsByIDRequest(const OrderVersionsByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(),
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderVersionsByIDRequest)
}

void OrderVersionsByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto.base);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrderVersionsByIDRequest::~OrderVersionsByIDRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OrderVersionsByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderVersionsByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrderVersionsByIDRequest::ArenaDtor(void* object) {
  OrderVersionsByIDRequest* _this = reinterpret_cast< OrderVersionsByIDRequest* >(object);
  (void)_this;
}
void OrderVersionsByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderVersionsByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderVersionsByIDRequest& OrderVersionsByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderVersionsByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderVersionsByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderVersionsByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string order_id = 1 [json_name = "orderId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OrderVersionsByIDRequest.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderVersionsByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderVersionsByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OrderVersionsByIDRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderVersionsByIDRequest)
  return target;
}

size_t OrderVersionsByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderVersionsByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1 [json_name = "orderId", (.validator.field) = {
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // .api.v1.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderVersionsByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderVersionsByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderVersionsByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderVersionsByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderVersionsByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderVersionsByIDRequest)
    MergeFrom(*source);
  }
}

void OrderVersionsByIDRequest::MergeFrom(const OrderVersionsByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderVersionsByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::v1::Pagination::MergeFrom(from._internal_pagination());
  }
}

void OrderVersionsByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderVersionsByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderVersionsByIDRequest::CopyFrom(const OrderVersionsByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderVersionsByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderVersionsByIDRequest::IsInitialized() const {
  return true;
}

void OrderVersionsByIDRequest::InternalSwap(OrderVersionsByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderVersionsByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderVersionsByIDResponse::_Internal {
 public:
};

void OrderVersionsByIDResponse::clear_orders() {
  orders_.Clear();
}
OrderVersionsByIDResponse::OrderVersionsByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OrderVersionsByIDResponse)
}
OrderVersionsByIDResponse::OrderVersionsByIDResponse(const OrderVersionsByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.OrderVersionsByIDResponse)
}

void OrderVersionsByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderVersionsByIDResponse_api_2ftrading_2eproto.base);
}

OrderVersionsByIDResponse::~OrderVersionsByIDResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OrderVersionsByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderVersionsByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderVersionsByIDResponse::ArenaDtor(void* object) {
  OrderVersionsByIDResponse* _this = reinterpret_cast< OrderVersionsByIDResponse* >(object);
  (void)_this;
}
void OrderVersionsByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderVersionsByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderVersionsByIDResponse& OrderVersionsByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderVersionsByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderVersionsByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OrderVersionsByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderVersionsByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderVersionsByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OrderVersionsByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OrderVersionsByIDResponse)
  return target;
}

size_t OrderVersionsByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OrderVersionsByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderVersionsByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OrderVersionsByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderVersionsByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderVersionsByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OrderVersionsByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OrderVersionsByIDResponse)
    MergeFrom(*source);
  }
}

void OrderVersionsByIDResponse::MergeFrom(const OrderVersionsByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OrderVersionsByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrderVersionsByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OrderVersionsByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderVersionsByIDResponse::CopyFrom(const OrderVersionsByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OrderVersionsByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderVersionsByIDResponse::IsInitialized() const {
  return true;
}

void OrderVersionsByIDResponse::InternalSwap(OrderVersionsByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderVersionsByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateFeeRequest::_Internal {
 public:
  static const ::vega::Order& order(const EstimateFeeRequest* msg);
};

const ::vega::Order&
EstimateFeeRequest::_Internal::order(const EstimateFeeRequest* msg) {
  return *msg->order_;
}
void EstimateFeeRequest::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
EstimateFeeRequest::EstimateFeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.EstimateFeeRequest)
}
EstimateFeeRequest::EstimateFeeRequest(const EstimateFeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.EstimateFeeRequest)
}

void EstimateFeeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateFeeRequest_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

EstimateFeeRequest::~EstimateFeeRequest() {
  // @@protoc_insertion_point(destructor:api.v1.EstimateFeeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateFeeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void EstimateFeeRequest::ArenaDtor(void* object) {
  EstimateFeeRequest* _this = reinterpret_cast< EstimateFeeRequest* >(object);
  (void)_this;
}
void EstimateFeeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateFeeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateFeeRequest& EstimateFeeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateFeeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateFeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.EstimateFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateFeeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateFeeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.EstimateFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.EstimateFeeRequest)
  return target;
}

size_t EstimateFeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.EstimateFeeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateFeeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.EstimateFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateFeeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateFeeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.EstimateFeeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.EstimateFeeRequest)
    MergeFrom(*source);
  }
}

void EstimateFeeRequest::MergeFrom(const EstimateFeeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.EstimateFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void EstimateFeeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.EstimateFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateFeeRequest::CopyFrom(const EstimateFeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.EstimateFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateFeeRequest::IsInitialized() const {
  return true;
}

void EstimateFeeRequest::InternalSwap(EstimateFeeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateFeeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateFeeResponse::_Internal {
 public:
  static const ::vega::Fee& fee(const EstimateFeeResponse* msg);
};

const ::vega::Fee&
EstimateFeeResponse::_Internal::fee(const EstimateFeeResponse* msg) {
  return *msg->fee_;
}
void EstimateFeeResponse::clear_fee() {
  if (GetArena() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
EstimateFeeResponse::EstimateFeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.EstimateFeeResponse)
}
EstimateFeeResponse::EstimateFeeResponse(const EstimateFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fee()) {
    fee_ = new ::vega::Fee(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.EstimateFeeResponse)
}

void EstimateFeeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateFeeResponse_api_2ftrading_2eproto.base);
  fee_ = nullptr;
}

EstimateFeeResponse::~EstimateFeeResponse() {
  // @@protoc_insertion_point(destructor:api.v1.EstimateFeeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateFeeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fee_;
}

void EstimateFeeResponse::ArenaDtor(void* object) {
  EstimateFeeResponse* _this = reinterpret_cast< EstimateFeeResponse* >(object);
  (void)_this;
}
void EstimateFeeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateFeeResponse& EstimateFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateFeeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.EstimateFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Fee fee = 2 [json_name = "fee"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.EstimateFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Fee fee = 2 [json_name = "fee"];
  if (this->has_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fee(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.EstimateFeeResponse)
  return target;
}

size_t EstimateFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.EstimateFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Fee fee = 2 [json_name = "fee"];
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.EstimateFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.EstimateFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.EstimateFeeResponse)
    MergeFrom(*source);
  }
}

void EstimateFeeResponse::MergeFrom(const EstimateFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.EstimateFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fee()) {
    _internal_mutable_fee()->::vega::Fee::MergeFrom(from._internal_fee());
  }
}

void EstimateFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.EstimateFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateFeeResponse::CopyFrom(const EstimateFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.EstimateFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateFeeResponse::IsInitialized() const {
  return true;
}

void EstimateFeeResponse::InternalSwap(EstimateFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fee_, other->fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateMarginRequest::_Internal {
 public:
  static const ::vega::Order& order(const EstimateMarginRequest* msg);
};

const ::vega::Order&
EstimateMarginRequest::_Internal::order(const EstimateMarginRequest* msg) {
  return *msg->order_;
}
void EstimateMarginRequest::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
EstimateMarginRequest::EstimateMarginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.EstimateMarginRequest)
}
EstimateMarginRequest::EstimateMarginRequest(const EstimateMarginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.EstimateMarginRequest)
}

void EstimateMarginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateMarginRequest_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

EstimateMarginRequest::~EstimateMarginRequest() {
  // @@protoc_insertion_point(destructor:api.v1.EstimateMarginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateMarginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void EstimateMarginRequest::ArenaDtor(void* object) {
  EstimateMarginRequest* _this = reinterpret_cast< EstimateMarginRequest* >(object);
  (void)_this;
}
void EstimateMarginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateMarginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateMarginRequest& EstimateMarginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateMarginRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateMarginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.EstimateMarginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateMarginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateMarginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.EstimateMarginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.EstimateMarginRequest)
  return target;
}

size_t EstimateMarginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.EstimateMarginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateMarginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.EstimateMarginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateMarginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateMarginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.EstimateMarginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.EstimateMarginRequest)
    MergeFrom(*source);
  }
}

void EstimateMarginRequest::MergeFrom(const EstimateMarginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.EstimateMarginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void EstimateMarginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.EstimateMarginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateMarginRequest::CopyFrom(const EstimateMarginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.EstimateMarginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateMarginRequest::IsInitialized() const {
  return true;
}

void EstimateMarginRequest::InternalSwap(EstimateMarginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateMarginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateMarginResponse::_Internal {
 public:
  static const ::vega::MarginLevels& margin_levels(const EstimateMarginResponse* msg);
};

const ::vega::MarginLevels&
EstimateMarginResponse::_Internal::margin_levels(const EstimateMarginResponse* msg) {
  return *msg->margin_levels_;
}
void EstimateMarginResponse::clear_margin_levels() {
  if (GetArena() == nullptr && margin_levels_ != nullptr) {
    delete margin_levels_;
  }
  margin_levels_ = nullptr;
}
EstimateMarginResponse::EstimateMarginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.EstimateMarginResponse)
}
EstimateMarginResponse::EstimateMarginResponse(const EstimateMarginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_margin_levels()) {
    margin_levels_ = new ::vega::MarginLevels(*from.margin_levels_);
  } else {
    margin_levels_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.EstimateMarginResponse)
}

void EstimateMarginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateMarginResponse_api_2ftrading_2eproto.base);
  margin_levels_ = nullptr;
}

EstimateMarginResponse::~EstimateMarginResponse() {
  // @@protoc_insertion_point(destructor:api.v1.EstimateMarginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateMarginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete margin_levels_;
}

void EstimateMarginResponse::ArenaDtor(void* object) {
  EstimateMarginResponse* _this = reinterpret_cast< EstimateMarginResponse* >(object);
  (void)_this;
}
void EstimateMarginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateMarginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateMarginResponse& EstimateMarginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateMarginResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateMarginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.EstimateMarginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && margin_levels_ != nullptr) {
    delete margin_levels_;
  }
  margin_levels_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateMarginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarginLevels margin_levels = 2 [json_name = "marginLevels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin_levels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateMarginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.EstimateMarginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarginLevels margin_levels = 2 [json_name = "marginLevels"];
  if (this->has_margin_levels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::margin_levels(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.EstimateMarginResponse)
  return target;
}

size_t EstimateMarginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.EstimateMarginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarginLevels margin_levels = 2 [json_name = "marginLevels"];
  if (this->has_margin_levels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *margin_levels_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateMarginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.EstimateMarginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateMarginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateMarginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.EstimateMarginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.EstimateMarginResponse)
    MergeFrom(*source);
  }
}

void EstimateMarginResponse::MergeFrom(const EstimateMarginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.EstimateMarginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_margin_levels()) {
    _internal_mutable_margin_levels()->::vega::MarginLevels::MergeFrom(from._internal_margin_levels());
  }
}

void EstimateMarginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.EstimateMarginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateMarginResponse::CopyFrom(const EstimateMarginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.EstimateMarginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateMarginResponse::IsInitialized() const {
  return true;
}

void EstimateMarginResponse::InternalSwap(EstimateMarginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(margin_levels_, other->margin_levels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateMarginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveEventBusRequest::_Internal {
 public:
};

ObserveEventBusRequest::ObserveEventBusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObserveEventBusRequest)
}
ObserveEventBusRequest::ObserveEventBusRequest(const ObserveEventBusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_(from.type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_id(),
      GetArena());
  }
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:api.v1.ObserveEventBusRequest)
}

void ObserveEventBusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveEventBusRequest_api_2ftrading_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_size_ = PROTOBUF_LONGLONG(0);
}

ObserveEventBusRequest::~ObserveEventBusRequest() {
  // @@protoc_insertion_point(destructor:api.v1.ObserveEventBusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveEventBusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObserveEventBusRequest::ArenaDtor(void* object) {
  ObserveEventBusRequest* _this = reinterpret_cast< ObserveEventBusRequest* >(object);
  (void)_this;
}
void ObserveEventBusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveEventBusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveEventBusRequest& ObserveEventBusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveEventBusRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveEventBusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObserveEventBusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  market_id_.ClearToEmpty();
  party_id_.ClearToEmpty();
  batch_size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveEventBusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.events.v1.BusEventType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_type(static_cast<::vega::events::v1::BusEventType>(val));
        } else goto handle_unusual;
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ObserveEventBusRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 3 [json_name = "partyId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ObserveEventBusRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 batch_size = 4 [json_name = "batchSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveEventBusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObserveEventBusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.events.v1.BusEventType type = 1 [json_name = "type"];
  {
    int byte_size = _type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, type_, byte_size, target);
    }
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ObserveEventBusRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market_id(), target);
  }

  // string party_id = 3 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ObserveEventBusRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_party_id(), target);
  }

  // int64 batch_size = 4 [json_name = "batchSize"];
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObserveEventBusRequest)
  return target;
}

size_t ObserveEventBusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObserveEventBusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.events.v1.BusEventType type = 1 [json_name = "type"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string market_id = 2 [json_name = "marketId"];
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string party_id = 3 [json_name = "partyId"];
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // int64 batch_size = 4 [json_name = "batchSize"];
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveEventBusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObserveEventBusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveEventBusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveEventBusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObserveEventBusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObserveEventBusRequest)
    MergeFrom(*source);
  }
}

void ObserveEventBusRequest::MergeFrom(const ObserveEventBusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObserveEventBusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void ObserveEventBusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObserveEventBusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveEventBusRequest::CopyFrom(const ObserveEventBusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObserveEventBusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveEventBusRequest::IsInitialized() const {
  return true;
}

void ObserveEventBusRequest::InternalSwap(ObserveEventBusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveEventBusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveEventBusResponse::_Internal {
 public:
};

void ObserveEventBusResponse::clear_events() {
  events_.Clear();
}
ObserveEventBusResponse::ObserveEventBusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ObserveEventBusResponse)
}
ObserveEventBusResponse::ObserveEventBusResponse(const ObserveEventBusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.ObserveEventBusResponse)
}

void ObserveEventBusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveEventBusResponse_api_2ftrading_2eproto.base);
}

ObserveEventBusResponse::~ObserveEventBusResponse() {
  // @@protoc_insertion_point(destructor:api.v1.ObserveEventBusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveEventBusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObserveEventBusResponse::ArenaDtor(void* object) {
  ObserveEventBusResponse* _this = reinterpret_cast< ObserveEventBusResponse* >(object);
  (void)_this;
}
void ObserveEventBusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveEventBusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveEventBusResponse& ObserveEventBusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveEventBusResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveEventBusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ObserveEventBusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveEventBusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.events.v1.BusEvent events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveEventBusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ObserveEventBusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.events.v1.BusEvent events = 1 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ObserveEventBusResponse)
  return target;
}

size_t ObserveEventBusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ObserveEventBusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.events.v1.BusEvent events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveEventBusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ObserveEventBusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveEventBusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveEventBusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ObserveEventBusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ObserveEventBusResponse)
    MergeFrom(*source);
  }
}

void ObserveEventBusResponse::MergeFrom(const ObserveEventBusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ObserveEventBusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void ObserveEventBusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ObserveEventBusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveEventBusResponse::CopyFrom(const ObserveEventBusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ObserveEventBusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveEventBusResponse::IsInitialized() const {
  return true;
}

void ObserveEventBusResponse::InternalSwap(ObserveEventBusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveEventBusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatisticsRequest::_Internal {
 public:
};

StatisticsRequest::StatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.StatisticsRequest)
}
StatisticsRequest::StatisticsRequest(const StatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.StatisticsRequest)
}

void StatisticsRequest::SharedCtor() {
}

StatisticsRequest::~StatisticsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.StatisticsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatisticsRequest::ArenaDtor(void* object) {
  StatisticsRequest* _this = reinterpret_cast< StatisticsRequest* >(object);
  (void)_this;
}
void StatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticsRequest& StatisticsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatisticsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void StatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.StatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.StatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.StatisticsRequest)
  return target;
}

size_t StatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.StatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.StatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatisticsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.StatisticsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.StatisticsRequest)
    MergeFrom(*source);
  }
}

void StatisticsRequest::MergeFrom(const StatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.StatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StatisticsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.StatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticsRequest::CopyFrom(const StatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.StatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsRequest::IsInitialized() const {
  return true;
}

void StatisticsRequest::InternalSwap(StatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatisticsResponse::_Internal {
 public:
  static const ::vega::Statistics& statistics(const StatisticsResponse* msg);
};

const ::vega::Statistics&
StatisticsResponse::_Internal::statistics(const StatisticsResponse* msg) {
  return *msg->statistics_;
}
void StatisticsResponse::clear_statistics() {
  if (GetArena() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
}
StatisticsResponse::StatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.StatisticsResponse)
}
StatisticsResponse::StatisticsResponse(const StatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statistics()) {
    statistics_ = new ::vega::Statistics(*from.statistics_);
  } else {
    statistics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.StatisticsResponse)
}

void StatisticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatisticsResponse_api_2ftrading_2eproto.base);
  statistics_ = nullptr;
}

StatisticsResponse::~StatisticsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.StatisticsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statistics_;
}

void StatisticsResponse::ArenaDtor(void* object) {
  StatisticsResponse* _this = reinterpret_cast< StatisticsResponse* >(object);
  (void)_this;
}
void StatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticsResponse& StatisticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatisticsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void StatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.StatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Statistics statistics = 1 [json_name = "statistics"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.StatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Statistics statistics = 1 [json_name = "statistics"];
  if (this->has_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statistics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.StatisticsResponse)
  return target;
}

size_t StatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.StatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Statistics statistics = 1 [json_name = "statistics"];
  if (this->has_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statistics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.StatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatisticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.StatisticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.StatisticsResponse)
    MergeFrom(*source);
  }
}

void StatisticsResponse::MergeFrom(const StatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.StatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statistics()) {
    _internal_mutable_statistics()->::vega::Statistics::MergeFrom(from._internal_statistics());
  }
}

void StatisticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.StatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticsResponse::CopyFrom(const StatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.StatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsResponse::IsInitialized() const {
  return true;
}

void StatisticsResponse::InternalSwap(StatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(statistics_, other->statistics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalsRequest::_Internal {
 public:
};

WithdrawalsRequest::WithdrawalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.WithdrawalsRequest)
}
WithdrawalsRequest::WithdrawalsRequest(const WithdrawalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.WithdrawalsRequest)
}

void WithdrawalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalsRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawalsRequest::~WithdrawalsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.WithdrawalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawalsRequest::ArenaDtor(void* object) {
  WithdrawalsRequest* _this = reinterpret_cast< WithdrawalsRequest* >(object);
  (void)_this;
}
void WithdrawalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalsRequest& WithdrawalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.WithdrawalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.WithdrawalsRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.WithdrawalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.WithdrawalsRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.WithdrawalsRequest)
  return target;
}

size_t WithdrawalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.WithdrawalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.WithdrawalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.WithdrawalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.WithdrawalsRequest)
    MergeFrom(*source);
  }
}

void WithdrawalsRequest::MergeFrom(const WithdrawalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.WithdrawalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void WithdrawalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.WithdrawalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalsRequest::CopyFrom(const WithdrawalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.WithdrawalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalsRequest::IsInitialized() const {
  return true;
}

void WithdrawalsRequest::InternalSwap(WithdrawalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalsResponse::_Internal {
 public:
};

void WithdrawalsResponse::clear_withdrawals() {
  withdrawals_.Clear();
}
WithdrawalsResponse::WithdrawalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  withdrawals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.WithdrawalsResponse)
}
WithdrawalsResponse::WithdrawalsResponse(const WithdrawalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      withdrawals_(from.withdrawals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.WithdrawalsResponse)
}

void WithdrawalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalsResponse_api_2ftrading_2eproto.base);
}

WithdrawalsResponse::~WithdrawalsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.WithdrawalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WithdrawalsResponse::ArenaDtor(void* object) {
  WithdrawalsResponse* _this = reinterpret_cast< WithdrawalsResponse* >(object);
  (void)_this;
}
void WithdrawalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalsResponse& WithdrawalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.WithdrawalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  withdrawals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.WithdrawalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_withdrawals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_withdrawals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.WithdrawalsResponse)
  return target;
}

size_t WithdrawalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.WithdrawalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.WithdrawalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.WithdrawalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.WithdrawalsResponse)
    MergeFrom(*source);
  }
}

void WithdrawalsResponse::MergeFrom(const WithdrawalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.WithdrawalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  withdrawals_.MergeFrom(from.withdrawals_);
}

void WithdrawalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.WithdrawalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalsResponse::CopyFrom(const WithdrawalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.WithdrawalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalsResponse::IsInitialized() const {
  return true;
}

void WithdrawalsResponse::InternalSwap(WithdrawalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  withdrawals_.InternalSwap(&other->withdrawals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalRequest::_Internal {
 public:
};

WithdrawalRequest::WithdrawalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.WithdrawalRequest)
}
WithdrawalRequest::WithdrawalRequest(const WithdrawalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.WithdrawalRequest)
}

void WithdrawalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawalRequest::~WithdrawalRequest() {
  // @@protoc_insertion_point(destructor:api.v1.WithdrawalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawalRequest::ArenaDtor(void* object) {
  WithdrawalRequest* _this = reinterpret_cast< WithdrawalRequest* >(object);
  (void)_this;
}
void WithdrawalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalRequest& WithdrawalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.WithdrawalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.WithdrawalRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.WithdrawalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.WithdrawalRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.WithdrawalRequest)
  return target;
}

size_t WithdrawalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.WithdrawalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.WithdrawalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.WithdrawalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.WithdrawalRequest)
    MergeFrom(*source);
  }
}

void WithdrawalRequest::MergeFrom(const WithdrawalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.WithdrawalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void WithdrawalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.WithdrawalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalRequest::CopyFrom(const WithdrawalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.WithdrawalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalRequest::IsInitialized() const {
  return true;
}

void WithdrawalRequest::InternalSwap(WithdrawalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalResponse::_Internal {
 public:
  static const ::vega::Withdrawal& withdrawal(const WithdrawalResponse* msg);
};

const ::vega::Withdrawal&
WithdrawalResponse::_Internal::withdrawal(const WithdrawalResponse* msg) {
  return *msg->withdrawal_;
}
void WithdrawalResponse::clear_withdrawal() {
  if (GetArena() == nullptr && withdrawal_ != nullptr) {
    delete withdrawal_;
  }
  withdrawal_ = nullptr;
}
WithdrawalResponse::WithdrawalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.WithdrawalResponse)
}
WithdrawalResponse::WithdrawalResponse(const WithdrawalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_withdrawal()) {
    withdrawal_ = new ::vega::Withdrawal(*from.withdrawal_);
  } else {
    withdrawal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.WithdrawalResponse)
}

void WithdrawalResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalResponse_api_2ftrading_2eproto.base);
  withdrawal_ = nullptr;
}

WithdrawalResponse::~WithdrawalResponse() {
  // @@protoc_insertion_point(destructor:api.v1.WithdrawalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete withdrawal_;
}

void WithdrawalResponse::ArenaDtor(void* object) {
  WithdrawalResponse* _this = reinterpret_cast< WithdrawalResponse* >(object);
  (void)_this;
}
void WithdrawalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalResponse& WithdrawalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.WithdrawalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && withdrawal_ != nullptr) {
    delete withdrawal_;
  }
  withdrawal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.WithdrawalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
  if (this->has_withdrawal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::withdrawal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.WithdrawalResponse)
  return target;
}

size_t WithdrawalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.WithdrawalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
  if (this->has_withdrawal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *withdrawal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.WithdrawalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.WithdrawalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.WithdrawalResponse)
    MergeFrom(*source);
  }
}

void WithdrawalResponse::MergeFrom(const WithdrawalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.WithdrawalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_withdrawal()) {
    _internal_mutable_withdrawal()->::vega::Withdrawal::MergeFrom(from._internal_withdrawal());
  }
}

void WithdrawalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.WithdrawalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalResponse::CopyFrom(const WithdrawalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.WithdrawalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalResponse::IsInitialized() const {
  return true;
}

void WithdrawalResponse::InternalSwap(WithdrawalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(withdrawal_, other->withdrawal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20WithdrawalApprovalRequest::_Internal {
 public:
};

ERC20WithdrawalApprovalRequest::ERC20WithdrawalApprovalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ERC20WithdrawalApprovalRequest)
}
ERC20WithdrawalApprovalRequest::ERC20WithdrawalApprovalRequest(const ERC20WithdrawalApprovalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  withdrawal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_withdrawal_id().empty()) {
    withdrawal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_withdrawal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.ERC20WithdrawalApprovalRequest)
}

void ERC20WithdrawalApprovalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto.base);
  withdrawal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ERC20WithdrawalApprovalRequest::~ERC20WithdrawalApprovalRequest() {
  // @@protoc_insertion_point(destructor:api.v1.ERC20WithdrawalApprovalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20WithdrawalApprovalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  withdrawal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20WithdrawalApprovalRequest::ArenaDtor(void* object) {
  ERC20WithdrawalApprovalRequest* _this = reinterpret_cast< ERC20WithdrawalApprovalRequest* >(object);
  (void)_this;
}
void ERC20WithdrawalApprovalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20WithdrawalApprovalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20WithdrawalApprovalRequest& ERC20WithdrawalApprovalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ERC20WithdrawalApprovalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ERC20WithdrawalApprovalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  withdrawal_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20WithdrawalApprovalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string withdrawal_id = 1 [json_name = "withdrawalId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_withdrawal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20WithdrawalApprovalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ERC20WithdrawalApprovalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string withdrawal_id = 1 [json_name = "withdrawalId", (.validator.field) = {
  if (this->withdrawal_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_withdrawal_id().data(), static_cast<int>(this->_internal_withdrawal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ERC20WithdrawalApprovalRequest.withdrawal_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_withdrawal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ERC20WithdrawalApprovalRequest)
  return target;
}

size_t ERC20WithdrawalApprovalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ERC20WithdrawalApprovalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string withdrawal_id = 1 [json_name = "withdrawalId", (.validator.field) = {
  if (this->withdrawal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_withdrawal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20WithdrawalApprovalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ERC20WithdrawalApprovalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20WithdrawalApprovalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20WithdrawalApprovalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ERC20WithdrawalApprovalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ERC20WithdrawalApprovalRequest)
    MergeFrom(*source);
  }
}

void ERC20WithdrawalApprovalRequest::MergeFrom(const ERC20WithdrawalApprovalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ERC20WithdrawalApprovalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.withdrawal_id().size() > 0) {
    _internal_set_withdrawal_id(from._internal_withdrawal_id());
  }
}

void ERC20WithdrawalApprovalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ERC20WithdrawalApprovalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20WithdrawalApprovalRequest::CopyFrom(const ERC20WithdrawalApprovalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ERC20WithdrawalApprovalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20WithdrawalApprovalRequest::IsInitialized() const {
  return true;
}

void ERC20WithdrawalApprovalRequest::InternalSwap(ERC20WithdrawalApprovalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  withdrawal_id_.Swap(&other->withdrawal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20WithdrawalApprovalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20WithdrawalApprovalResponse::_Internal {
 public:
};

ERC20WithdrawalApprovalResponse::ERC20WithdrawalApprovalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.ERC20WithdrawalApprovalResponse)
}
ERC20WithdrawalApprovalResponse::ERC20WithdrawalApprovalResponse(const ERC20WithdrawalApprovalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_source().empty()) {
    asset_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_source(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(),
      GetArena());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(),
      GetArena());
  }
  signatures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signatures().empty()) {
    signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signatures(),
      GetArena());
  }
  expiry_ = from.expiry_;
  // @@protoc_insertion_point(copy_constructor:api.v1.ERC20WithdrawalApprovalResponse)
}

void ERC20WithdrawalApprovalResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto.base);
  asset_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signatures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiry_ = PROTOBUF_LONGLONG(0);
}

ERC20WithdrawalApprovalResponse::~ERC20WithdrawalApprovalResponse() {
  // @@protoc_insertion_point(destructor:api.v1.ERC20WithdrawalApprovalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20WithdrawalApprovalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signatures_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20WithdrawalApprovalResponse::ArenaDtor(void* object) {
  ERC20WithdrawalApprovalResponse* _this = reinterpret_cast< ERC20WithdrawalApprovalResponse* >(object);
  (void)_this;
}
void ERC20WithdrawalApprovalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20WithdrawalApprovalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20WithdrawalApprovalResponse& ERC20WithdrawalApprovalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ERC20WithdrawalApprovalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.ERC20WithdrawalApprovalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_source_.ClearToEmpty();
  amount_.ClearToEmpty();
  nonce_.ClearToEmpty();
  signatures_.ClearToEmpty();
  expiry_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20WithdrawalApprovalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_source = 1 [json_name = "assetSource"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ERC20WithdrawalApprovalResponse.asset_source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ERC20WithdrawalApprovalResponse.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 3 [json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nonce = 4 [json_name = "nonce"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ERC20WithdrawalApprovalResponse.nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signatures = 5 [json_name = "signatures"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signatures();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.ERC20WithdrawalApprovalResponse.signatures"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20WithdrawalApprovalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.ERC20WithdrawalApprovalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_source = 1 [json_name = "assetSource"];
  if (this->asset_source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_source().data(), static_cast<int>(this->_internal_asset_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ERC20WithdrawalApprovalResponse.asset_source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_source(), target);
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ERC20WithdrawalApprovalResponse.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // int64 expiry = 3 [json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expiry(), target);
  }

  // string nonce = 4 [json_name = "nonce"];
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ERC20WithdrawalApprovalResponse.nonce");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nonce(), target);
  }

  // string signatures = 5 [json_name = "signatures"];
  if (this->signatures().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signatures().data(), static_cast<int>(this->_internal_signatures().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.ERC20WithdrawalApprovalResponse.signatures");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signatures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.ERC20WithdrawalApprovalResponse)
  return target;
}

size_t ERC20WithdrawalApprovalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.ERC20WithdrawalApprovalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_source = 1 [json_name = "assetSource"];
  if (this->asset_source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_source());
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string nonce = 4 [json_name = "nonce"];
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // string signatures = 5 [json_name = "signatures"];
  if (this->signatures().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signatures());
  }

  // int64 expiry = 3 [json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20WithdrawalApprovalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.ERC20WithdrawalApprovalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20WithdrawalApprovalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20WithdrawalApprovalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.ERC20WithdrawalApprovalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.ERC20WithdrawalApprovalResponse)
    MergeFrom(*source);
  }
}

void ERC20WithdrawalApprovalResponse::MergeFrom(const ERC20WithdrawalApprovalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.ERC20WithdrawalApprovalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_source().size() > 0) {
    _internal_set_asset_source(from._internal_asset_source());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.signatures().size() > 0) {
    _internal_set_signatures(from._internal_signatures());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
}

void ERC20WithdrawalApprovalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.ERC20WithdrawalApprovalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20WithdrawalApprovalResponse::CopyFrom(const ERC20WithdrawalApprovalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.ERC20WithdrawalApprovalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20WithdrawalApprovalResponse::IsInitialized() const {
  return true;
}

void ERC20WithdrawalApprovalResponse::InternalSwap(ERC20WithdrawalApprovalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_source_.Swap(&other->asset_source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signatures_.Swap(&other->signatures_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expiry_, other->expiry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20WithdrawalApprovalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositsRequest::_Internal {
 public:
};

DepositsRequest::DepositsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.DepositsRequest)
}
DepositsRequest::DepositsRequest(const DepositsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.DepositsRequest)
}

void DepositsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositsRequest_api_2ftrading_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DepositsRequest::~DepositsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.DepositsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepositsRequest::ArenaDtor(void* object) {
  DepositsRequest* _this = reinterpret_cast< DepositsRequest* >(object);
  (void)_this;
}
void DepositsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositsRequest& DepositsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.DepositsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1 [json_name = "partyId", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.DepositsRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.DepositsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.DepositsRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.DepositsRequest)
  return target;
}

size_t DepositsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.DepositsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1 [json_name = "partyId", (.validator.field) = {
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.DepositsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.DepositsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.DepositsRequest)
    MergeFrom(*source);
  }
}

void DepositsRequest::MergeFrom(const DepositsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.DepositsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void DepositsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.DepositsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositsRequest::CopyFrom(const DepositsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.DepositsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositsRequest::IsInitialized() const {
  return true;
}

void DepositsRequest::InternalSwap(DepositsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositsResponse::_Internal {
 public:
};

void DepositsResponse::clear_deposits() {
  deposits_.Clear();
}
DepositsResponse::DepositsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deposits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.DepositsResponse)
}
DepositsResponse::DepositsResponse(const DepositsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deposits_(from.deposits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.DepositsResponse)
}

void DepositsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositsResponse_api_2ftrading_2eproto.base);
}

DepositsResponse::~DepositsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.DepositsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DepositsResponse::ArenaDtor(void* object) {
  DepositsResponse* _this = reinterpret_cast< DepositsResponse* >(object);
  (void)_this;
}
void DepositsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositsResponse& DepositsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.DepositsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deposits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deposits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.DepositsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deposits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_deposits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.DepositsResponse)
  return target;
}

size_t DepositsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.DepositsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
  total_size += 1UL * this->_internal_deposits_size();
  for (const auto& msg : this->deposits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.DepositsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.DepositsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.DepositsResponse)
    MergeFrom(*source);
  }
}

void DepositsResponse::MergeFrom(const DepositsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.DepositsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deposits_.MergeFrom(from.deposits_);
}

void DepositsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.DepositsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositsResponse::CopyFrom(const DepositsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.DepositsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositsResponse::IsInitialized() const {
  return true;
}

void DepositsResponse::InternalSwap(DepositsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deposits_.InternalSwap(&other->deposits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositRequest::_Internal {
 public:
};

DepositRequest::DepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.DepositRequest)
}
DepositRequest::DepositRequest(const DepositRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.DepositRequest)
}

void DepositRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DepositRequest::~DepositRequest() {
  // @@protoc_insertion_point(destructor:api.v1.DepositRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepositRequest::ArenaDtor(void* object) {
  DepositRequest* _this = reinterpret_cast< DepositRequest* >(object);
  (void)_this;
}
void DepositRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositRequest& DepositRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.DepositRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.DepositRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.DepositRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.DepositRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.DepositRequest)
  return target;
}

size_t DepositRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.DepositRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.DepositRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.DepositRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.DepositRequest)
    MergeFrom(*source);
  }
}

void DepositRequest::MergeFrom(const DepositRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.DepositRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DepositRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.DepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositRequest::CopyFrom(const DepositRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.DepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositRequest::IsInitialized() const {
  return true;
}

void DepositRequest::InternalSwap(DepositRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositResponse::_Internal {
 public:
  static const ::vega::Deposit& deposit(const DepositResponse* msg);
};

const ::vega::Deposit&
DepositResponse::_Internal::deposit(const DepositResponse* msg) {
  return *msg->deposit_;
}
void DepositResponse::clear_deposit() {
  if (GetArena() == nullptr && deposit_ != nullptr) {
    delete deposit_;
  }
  deposit_ = nullptr;
}
DepositResponse::DepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.DepositResponse)
}
DepositResponse::DepositResponse(const DepositResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deposit()) {
    deposit_ = new ::vega::Deposit(*from.deposit_);
  } else {
    deposit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.DepositResponse)
}

void DepositResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositResponse_api_2ftrading_2eproto.base);
  deposit_ = nullptr;
}

DepositResponse::~DepositResponse() {
  // @@protoc_insertion_point(destructor:api.v1.DepositResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete deposit_;
}

void DepositResponse::ArenaDtor(void* object) {
  DepositResponse* _this = reinterpret_cast< DepositResponse* >(object);
  (void)_this;
}
void DepositResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositResponse& DepositResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.DepositResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && deposit_ != nullptr) {
    delete deposit_;
  }
  deposit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Deposit deposit = 1 [json_name = "deposit"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.DepositResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Deposit deposit = 1 [json_name = "deposit"];
  if (this->has_deposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::deposit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.DepositResponse)
  return target;
}

size_t DepositResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.DepositResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Deposit deposit = 1 [json_name = "deposit"];
  if (this->has_deposit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deposit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.DepositResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.DepositResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.DepositResponse)
    MergeFrom(*source);
  }
}

void DepositResponse::MergeFrom(const DepositResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.DepositResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_deposit()) {
    _internal_mutable_deposit()->::vega::Deposit::MergeFrom(from._internal_deposit());
  }
}

void DepositResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.DepositResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositResponse::CopyFrom(const DepositResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.DepositResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositResponse::IsInitialized() const {
  return true;
}

void DepositResponse::InternalSwap(DepositResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(deposit_, other->deposit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkParametersRequest::_Internal {
 public:
};

NetworkParametersRequest::NetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.NetworkParametersRequest)
}
NetworkParametersRequest::NetworkParametersRequest(const NetworkParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.NetworkParametersRequest)
}

void NetworkParametersRequest::SharedCtor() {
}

NetworkParametersRequest::~NetworkParametersRequest() {
  // @@protoc_insertion_point(destructor:api.v1.NetworkParametersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkParametersRequest::ArenaDtor(void* object) {
  NetworkParametersRequest* _this = reinterpret_cast< NetworkParametersRequest* >(object);
  (void)_this;
}
void NetworkParametersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkParametersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParametersRequest& NetworkParametersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParametersRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void NetworkParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.NetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParametersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParametersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.NetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.NetworkParametersRequest)
  return target;
}

size_t NetworkParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.NetworkParametersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParametersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.NetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParametersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParametersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.NetworkParametersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.NetworkParametersRequest)
    MergeFrom(*source);
  }
}

void NetworkParametersRequest::MergeFrom(const NetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.NetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetworkParametersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.NetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParametersRequest::CopyFrom(const NetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.NetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParametersRequest::IsInitialized() const {
  return true;
}

void NetworkParametersRequest::InternalSwap(NetworkParametersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParametersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkParametersResponse::_Internal {
 public:
};

void NetworkParametersResponse::clear_network_parameters() {
  network_parameters_.Clear();
}
NetworkParametersResponse::NetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  network_parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.NetworkParametersResponse)
}
NetworkParametersResponse::NetworkParametersResponse(const NetworkParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      network_parameters_(from.network_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.NetworkParametersResponse)
}

void NetworkParametersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkParametersResponse_api_2ftrading_2eproto.base);
}

NetworkParametersResponse::~NetworkParametersResponse() {
  // @@protoc_insertion_point(destructor:api.v1.NetworkParametersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkParametersResponse::ArenaDtor(void* object) {
  NetworkParametersResponse* _this = reinterpret_cast< NetworkParametersResponse* >(object);
  (void)_this;
}
void NetworkParametersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkParametersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParametersResponse& NetworkParametersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParametersResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void NetworkParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.NetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_parameters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParametersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_network_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParametersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.NetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_network_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_network_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.NetworkParametersResponse)
  return target;
}

size_t NetworkParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.NetworkParametersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter network_parameters = 1 [json_name = "networkParameters"];
  total_size += 1UL * this->_internal_network_parameters_size();
  for (const auto& msg : this->network_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParametersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.NetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParametersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParametersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.NetworkParametersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.NetworkParametersResponse)
    MergeFrom(*source);
  }
}

void NetworkParametersResponse::MergeFrom(const NetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.NetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  network_parameters_.MergeFrom(from.network_parameters_);
}

void NetworkParametersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.NetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParametersResponse::CopyFrom(const NetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.NetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParametersResponse::IsInitialized() const {
  return true;
}

void NetworkParametersResponse::InternalSwap(NetworkParametersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  network_parameters_.InternalSwap(&other->network_parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParametersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvisionsRequest::_Internal {
 public:
};

LiquidityProvisionsRequest::LiquidityProvisionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.LiquidityProvisionsRequest)
}
LiquidityProvisionsRequest::LiquidityProvisionsRequest(const LiquidityProvisionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(),
      GetArena());
  }
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.LiquidityProvisionsRequest)
}

void LiquidityProvisionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LiquidityProvisionsRequest::~LiquidityProvisionsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.LiquidityProvisionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvisionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvisionsRequest::ArenaDtor(void* object) {
  LiquidityProvisionsRequest* _this = reinterpret_cast< LiquidityProvisionsRequest* >(object);
  (void)_this;
}
void LiquidityProvisionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvisionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvisionsRequest& LiquidityProvisionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvisionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.LiquidityProvisionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  party_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvisionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.LiquidityProvisionsRequest.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party = 2 [json_name = "party"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.LiquidityProvisionsRequest.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvisionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.LiquidityProvisionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.LiquidityProvisionsRequest.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string party = 2 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.LiquidityProvisionsRequest.party");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.LiquidityProvisionsRequest)
  return target;
}

size_t LiquidityProvisionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.LiquidityProvisionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string party = 2 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvisionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.LiquidityProvisionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvisionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvisionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.LiquidityProvisionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.LiquidityProvisionsRequest)
    MergeFrom(*source);
  }
}

void LiquidityProvisionsRequest::MergeFrom(const LiquidityProvisionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.LiquidityProvisionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
}

void LiquidityProvisionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.LiquidityProvisionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvisionsRequest::CopyFrom(const LiquidityProvisionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.LiquidityProvisionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvisionsRequest::IsInitialized() const {
  return true;
}

void LiquidityProvisionsRequest::InternalSwap(LiquidityProvisionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvisionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvisionsResponse::_Internal {
 public:
};

void LiquidityProvisionsResponse::clear_liquidity_provisions() {
  liquidity_provisions_.Clear();
}
LiquidityProvisionsResponse::LiquidityProvisionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  liquidity_provisions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.LiquidityProvisionsResponse)
}
LiquidityProvisionsResponse::LiquidityProvisionsResponse(const LiquidityProvisionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      liquidity_provisions_(from.liquidity_provisions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.LiquidityProvisionsResponse)
}

void LiquidityProvisionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto.base);
}

LiquidityProvisionsResponse::~LiquidityProvisionsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.LiquidityProvisionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvisionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LiquidityProvisionsResponse::ArenaDtor(void* object) {
  LiquidityProvisionsResponse* _this = reinterpret_cast< LiquidityProvisionsResponse* >(object);
  (void)_this;
}
void LiquidityProvisionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvisionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvisionsResponse& LiquidityProvisionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvisionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.LiquidityProvisionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  liquidity_provisions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvisionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.LiquidityProvision liquidity_provisions = 1 [json_name = "liquidityProvisions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liquidity_provisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvisionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.LiquidityProvisionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.LiquidityProvision liquidity_provisions = 1 [json_name = "liquidityProvisions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liquidity_provisions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_liquidity_provisions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.LiquidityProvisionsResponse)
  return target;
}

size_t LiquidityProvisionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.LiquidityProvisionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityProvision liquidity_provisions = 1 [json_name = "liquidityProvisions"];
  total_size += 1UL * this->_internal_liquidity_provisions_size();
  for (const auto& msg : this->liquidity_provisions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvisionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.LiquidityProvisionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvisionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvisionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.LiquidityProvisionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.LiquidityProvisionsResponse)
    MergeFrom(*source);
  }
}

void LiquidityProvisionsResponse::MergeFrom(const LiquidityProvisionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.LiquidityProvisionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  liquidity_provisions_.MergeFrom(from.liquidity_provisions_);
}

void LiquidityProvisionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.LiquidityProvisionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvisionsResponse::CopyFrom(const LiquidityProvisionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.LiquidityProvisionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvisionsResponse::IsInitialized() const {
  return true;
}

void LiquidityProvisionsResponse::InternalSwap(LiquidityProvisionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  liquidity_provisions_.InternalSwap(&other->liquidity_provisions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvisionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OracleSpecRequest::_Internal {
 public:
};

OracleSpecRequest::OracleSpecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OracleSpecRequest)
}
OracleSpecRequest::OracleSpecRequest(const OracleSpecRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OracleSpecRequest)
}

void OracleSpecRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OracleSpecRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OracleSpecRequest::~OracleSpecRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OracleSpecRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleSpecRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OracleSpecRequest::ArenaDtor(void* object) {
  OracleSpecRequest* _this = reinterpret_cast< OracleSpecRequest* >(object);
  (void)_this;
}
void OracleSpecRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleSpecRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleSpecRequest& OracleSpecRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleSpecRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OracleSpecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OracleSpecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleSpecRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OracleSpecRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleSpecRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OracleSpecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OracleSpecRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OracleSpecRequest)
  return target;
}

size_t OracleSpecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OracleSpecRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleSpecRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OracleSpecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleSpecRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleSpecRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OracleSpecRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OracleSpecRequest)
    MergeFrom(*source);
  }
}

void OracleSpecRequest::MergeFrom(const OracleSpecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OracleSpecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void OracleSpecRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OracleSpecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleSpecRequest::CopyFrom(const OracleSpecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OracleSpecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleSpecRequest::IsInitialized() const {
  return true;
}

void OracleSpecRequest::InternalSwap(OracleSpecRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleSpecRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OracleSpecResponse::_Internal {
 public:
  static const ::oracles::v1::OracleSpec& oracle_spec(const OracleSpecResponse* msg);
};

const ::oracles::v1::OracleSpec&
OracleSpecResponse::_Internal::oracle_spec(const OracleSpecResponse* msg) {
  return *msg->oracle_spec_;
}
void OracleSpecResponse::clear_oracle_spec() {
  if (GetArena() == nullptr && oracle_spec_ != nullptr) {
    delete oracle_spec_;
  }
  oracle_spec_ = nullptr;
}
OracleSpecResponse::OracleSpecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OracleSpecResponse)
}
OracleSpecResponse::OracleSpecResponse(const OracleSpecResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oracle_spec()) {
    oracle_spec_ = new ::oracles::v1::OracleSpec(*from.oracle_spec_);
  } else {
    oracle_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OracleSpecResponse)
}

void OracleSpecResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OracleSpecResponse_api_2ftrading_2eproto.base);
  oracle_spec_ = nullptr;
}

OracleSpecResponse::~OracleSpecResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OracleSpecResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleSpecResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete oracle_spec_;
}

void OracleSpecResponse::ArenaDtor(void* object) {
  OracleSpecResponse* _this = reinterpret_cast< OracleSpecResponse* >(object);
  (void)_this;
}
void OracleSpecResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleSpecResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleSpecResponse& OracleSpecResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleSpecResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OracleSpecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OracleSpecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && oracle_spec_ != nullptr) {
    delete oracle_spec_;
  }
  oracle_spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleSpecResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .oracles.v1.OracleSpec oracle_spec = 1 [json_name = "oracleSpec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleSpecResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OracleSpecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .oracles.v1.OracleSpec oracle_spec = 1 [json_name = "oracleSpec"];
  if (this->has_oracle_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::oracle_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OracleSpecResponse)
  return target;
}

size_t OracleSpecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OracleSpecResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .oracles.v1.OracleSpec oracle_spec = 1 [json_name = "oracleSpec"];
  if (this->has_oracle_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oracle_spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleSpecResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OracleSpecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleSpecResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleSpecResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OracleSpecResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OracleSpecResponse)
    MergeFrom(*source);
  }
}

void OracleSpecResponse::MergeFrom(const OracleSpecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OracleSpecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_oracle_spec()) {
    _internal_mutable_oracle_spec()->::oracles::v1::OracleSpec::MergeFrom(from._internal_oracle_spec());
  }
}

void OracleSpecResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OracleSpecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleSpecResponse::CopyFrom(const OracleSpecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OracleSpecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleSpecResponse::IsInitialized() const {
  return true;
}

void OracleSpecResponse::InternalSwap(OracleSpecResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(oracle_spec_, other->oracle_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleSpecResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OracleSpecsRequest::_Internal {
 public:
};

OracleSpecsRequest::OracleSpecsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OracleSpecsRequest)
}
OracleSpecsRequest::OracleSpecsRequest(const OracleSpecsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.OracleSpecsRequest)
}

void OracleSpecsRequest::SharedCtor() {
}

OracleSpecsRequest::~OracleSpecsRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OracleSpecsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleSpecsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OracleSpecsRequest::ArenaDtor(void* object) {
  OracleSpecsRequest* _this = reinterpret_cast< OracleSpecsRequest* >(object);
  (void)_this;
}
void OracleSpecsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleSpecsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleSpecsRequest& OracleSpecsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleSpecsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OracleSpecsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OracleSpecsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleSpecsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleSpecsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OracleSpecsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OracleSpecsRequest)
  return target;
}

size_t OracleSpecsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OracleSpecsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleSpecsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OracleSpecsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleSpecsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleSpecsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OracleSpecsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OracleSpecsRequest)
    MergeFrom(*source);
  }
}

void OracleSpecsRequest::MergeFrom(const OracleSpecsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OracleSpecsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OracleSpecsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OracleSpecsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleSpecsRequest::CopyFrom(const OracleSpecsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OracleSpecsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleSpecsRequest::IsInitialized() const {
  return true;
}

void OracleSpecsRequest::InternalSwap(OracleSpecsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleSpecsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OracleSpecsResponse::_Internal {
 public:
};

void OracleSpecsResponse::clear_oracle_specs() {
  oracle_specs_.Clear();
}
OracleSpecsResponse::OracleSpecsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  oracle_specs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OracleSpecsResponse)
}
OracleSpecsResponse::OracleSpecsResponse(const OracleSpecsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      oracle_specs_(from.oracle_specs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.OracleSpecsResponse)
}

void OracleSpecsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OracleSpecsResponse_api_2ftrading_2eproto.base);
}

OracleSpecsResponse::~OracleSpecsResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OracleSpecsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleSpecsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OracleSpecsResponse::ArenaDtor(void* object) {
  OracleSpecsResponse* _this = reinterpret_cast< OracleSpecsResponse* >(object);
  (void)_this;
}
void OracleSpecsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleSpecsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleSpecsResponse& OracleSpecsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleSpecsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OracleSpecsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OracleSpecsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oracle_specs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleSpecsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .oracles.v1.OracleSpec oracle_specs = 1 [json_name = "oracleSpecs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oracle_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleSpecsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OracleSpecsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .oracles.v1.OracleSpec oracle_specs = 1 [json_name = "oracleSpecs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oracle_specs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_oracle_specs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OracleSpecsResponse)
  return target;
}

size_t OracleSpecsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OracleSpecsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oracles.v1.OracleSpec oracle_specs = 1 [json_name = "oracleSpecs"];
  total_size += 1UL * this->_internal_oracle_specs_size();
  for (const auto& msg : this->oracle_specs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleSpecsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OracleSpecsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleSpecsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleSpecsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OracleSpecsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OracleSpecsResponse)
    MergeFrom(*source);
  }
}

void OracleSpecsResponse::MergeFrom(const OracleSpecsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OracleSpecsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oracle_specs_.MergeFrom(from.oracle_specs_);
}

void OracleSpecsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OracleSpecsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleSpecsResponse::CopyFrom(const OracleSpecsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OracleSpecsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleSpecsResponse::IsInitialized() const {
  return true;
}

void OracleSpecsResponse::InternalSwap(OracleSpecsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  oracle_specs_.InternalSwap(&other->oracle_specs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleSpecsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OracleDataBySpecRequest::_Internal {
 public:
};

OracleDataBySpecRequest::OracleDataBySpecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OracleDataBySpecRequest)
}
OracleDataBySpecRequest::OracleDataBySpecRequest(const OracleDataBySpecRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.v1.OracleDataBySpecRequest)
}

void OracleDataBySpecRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OracleDataBySpecRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OracleDataBySpecRequest::~OracleDataBySpecRequest() {
  // @@protoc_insertion_point(destructor:api.v1.OracleDataBySpecRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleDataBySpecRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OracleDataBySpecRequest::ArenaDtor(void* object) {
  OracleDataBySpecRequest* _this = reinterpret_cast< OracleDataBySpecRequest* >(object);
  (void)_this;
}
void OracleDataBySpecRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleDataBySpecRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleDataBySpecRequest& OracleDataBySpecRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleDataBySpecRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OracleDataBySpecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OracleDataBySpecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleDataBySpecRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.v1.OracleDataBySpecRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleDataBySpecRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OracleDataBySpecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.v1.OracleDataBySpecRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OracleDataBySpecRequest)
  return target;
}

size_t OracleDataBySpecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OracleDataBySpecRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleDataBySpecRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OracleDataBySpecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleDataBySpecRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleDataBySpecRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OracleDataBySpecRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OracleDataBySpecRequest)
    MergeFrom(*source);
  }
}

void OracleDataBySpecRequest::MergeFrom(const OracleDataBySpecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OracleDataBySpecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void OracleDataBySpecRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OracleDataBySpecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleDataBySpecRequest::CopyFrom(const OracleDataBySpecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OracleDataBySpecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleDataBySpecRequest::IsInitialized() const {
  return true;
}

void OracleDataBySpecRequest::InternalSwap(OracleDataBySpecRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleDataBySpecRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OracleDataBySpecResponse::_Internal {
 public:
};

void OracleDataBySpecResponse::clear_oracle_data() {
  oracle_data_.Clear();
}
OracleDataBySpecResponse::OracleDataBySpecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  oracle_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.OracleDataBySpecResponse)
}
OracleDataBySpecResponse::OracleDataBySpecResponse(const OracleDataBySpecResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      oracle_data_(from.oracle_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.OracleDataBySpecResponse)
}

void OracleDataBySpecResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OracleDataBySpecResponse_api_2ftrading_2eproto.base);
}

OracleDataBySpecResponse::~OracleDataBySpecResponse() {
  // @@protoc_insertion_point(destructor:api.v1.OracleDataBySpecResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleDataBySpecResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OracleDataBySpecResponse::ArenaDtor(void* object) {
  OracleDataBySpecResponse* _this = reinterpret_cast< OracleDataBySpecResponse* >(object);
  (void)_this;
}
void OracleDataBySpecResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleDataBySpecResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleDataBySpecResponse& OracleDataBySpecResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleDataBySpecResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OracleDataBySpecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.OracleDataBySpecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oracle_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleDataBySpecResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .oracles.v1.OracleData oracle_data = 1 [json_name = "oracleData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oracle_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleDataBySpecResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.OracleDataBySpecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .oracles.v1.OracleData oracle_data = 1 [json_name = "oracleData"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oracle_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_oracle_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.OracleDataBySpecResponse)
  return target;
}

size_t OracleDataBySpecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.OracleDataBySpecResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oracles.v1.OracleData oracle_data = 1 [json_name = "oracleData"];
  total_size += 1UL * this->_internal_oracle_data_size();
  for (const auto& msg : this->oracle_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleDataBySpecResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.OracleDataBySpecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleDataBySpecResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleDataBySpecResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.OracleDataBySpecResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.OracleDataBySpecResponse)
    MergeFrom(*source);
  }
}

void OracleDataBySpecResponse::MergeFrom(const OracleDataBySpecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.OracleDataBySpecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oracle_data_.MergeFrom(from.oracle_data_);
}

void OracleDataBySpecResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.OracleDataBySpecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleDataBySpecResponse::CopyFrom(const OracleDataBySpecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.OracleDataBySpecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleDataBySpecResponse::IsInitialized() const {
  return true;
}

void OracleDataBySpecResponse::InternalSwap(OracleDataBySpecResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  oracle_data_.InternalSwap(&other->oracle_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleDataBySpecResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastBlockHeightRequest::_Internal {
 public:
};

LastBlockHeightRequest::LastBlockHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.LastBlockHeightRequest)
}
LastBlockHeightRequest::LastBlockHeightRequest(const LastBlockHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.v1.LastBlockHeightRequest)
}

void LastBlockHeightRequest::SharedCtor() {
}

LastBlockHeightRequest::~LastBlockHeightRequest() {
  // @@protoc_insertion_point(destructor:api.v1.LastBlockHeightRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastBlockHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LastBlockHeightRequest::ArenaDtor(void* object) {
  LastBlockHeightRequest* _this = reinterpret_cast< LastBlockHeightRequest* >(object);
  (void)_this;
}
void LastBlockHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastBlockHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastBlockHeightRequest& LastBlockHeightRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastBlockHeightRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastBlockHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.LastBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastBlockHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastBlockHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.LastBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.LastBlockHeightRequest)
  return target;
}

size_t LastBlockHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.LastBlockHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastBlockHeightRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.LastBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LastBlockHeightRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastBlockHeightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.LastBlockHeightRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.LastBlockHeightRequest)
    MergeFrom(*source);
  }
}

void LastBlockHeightRequest::MergeFrom(const LastBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.LastBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LastBlockHeightRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.LastBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastBlockHeightRequest::CopyFrom(const LastBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.LastBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastBlockHeightRequest::IsInitialized() const {
  return true;
}

void LastBlockHeightRequest::InternalSwap(LastBlockHeightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastBlockHeightRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastBlockHeightResponse::_Internal {
 public:
};

LastBlockHeightResponse::LastBlockHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.LastBlockHeightResponse)
}
LastBlockHeightResponse::LastBlockHeightResponse(const LastBlockHeightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api.v1.LastBlockHeightResponse)
}

void LastBlockHeightResponse::SharedCtor() {
  height_ = PROTOBUF_ULONGLONG(0);
}

LastBlockHeightResponse::~LastBlockHeightResponse() {
  // @@protoc_insertion_point(destructor:api.v1.LastBlockHeightResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastBlockHeightResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LastBlockHeightResponse::ArenaDtor(void* object) {
  LastBlockHeightResponse* _this = reinterpret_cast< LastBlockHeightResponse* >(object);
  (void)_this;
}
void LastBlockHeightResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastBlockHeightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastBlockHeightResponse& LastBlockHeightResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastBlockHeightResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastBlockHeightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.LastBlockHeightResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastBlockHeightResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastBlockHeightResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.LastBlockHeightResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.LastBlockHeightResponse)
  return target;
}

size_t LastBlockHeightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.LastBlockHeightResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastBlockHeightResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.v1.LastBlockHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LastBlockHeightResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastBlockHeightResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.v1.LastBlockHeightResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.v1.LastBlockHeightResponse)
    MergeFrom(*source);
  }
}

void LastBlockHeightResponse::MergeFrom(const LastBlockHeightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.v1.LastBlockHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void LastBlockHeightResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.v1.LastBlockHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastBlockHeightResponse::CopyFrom(const LastBlockHeightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.LastBlockHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastBlockHeightResponse::IsInitialized() const {
  return true;
}

void LastBlockHeightResponse::InternalSwap(LastBlockHeightResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastBlockHeightResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api::v1::PropagateChainEventRequest* Arena::CreateMaybeMessage< ::api::v1::PropagateChainEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PropagateChainEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PropagateChainEventResponse* Arena::CreateMaybeMessage< ::api::v1::PropagateChainEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PropagateChainEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::SubmitTransactionRequest* Arena::CreateMaybeMessage< ::api::v1::SubmitTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::SubmitTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::SubmitTransactionResponse* Arena::CreateMaybeMessage< ::api::v1::SubmitTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::SubmitTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::SubmitTransactionV2Request* Arena::CreateMaybeMessage< ::api::v1::SubmitTransactionV2Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::SubmitTransactionV2Request >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::SubmitTransactionV2Response* Arena::CreateMaybeMessage< ::api::v1::SubmitTransactionV2Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::SubmitTransactionV2Response >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareWithdrawRequest* Arena::CreateMaybeMessage< ::api::v1::PrepareWithdrawRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareWithdrawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareWithdrawResponse* Arena::CreateMaybeMessage< ::api::v1::PrepareWithdrawResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareWithdrawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareSubmitOrderResponse* Arena::CreateMaybeMessage< ::api::v1::PrepareSubmitOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareSubmitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareCancelOrderResponse* Arena::CreateMaybeMessage< ::api::v1::PrepareCancelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareCancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareAmendOrderResponse* Arena::CreateMaybeMessage< ::api::v1::PrepareAmendOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareAmendOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareSubmitOrderRequest* Arena::CreateMaybeMessage< ::api::v1::PrepareSubmitOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareSubmitOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareCancelOrderRequest* Arena::CreateMaybeMessage< ::api::v1::PrepareCancelOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareCancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareAmendOrderRequest* Arena::CreateMaybeMessage< ::api::v1::PrepareAmendOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareAmendOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::AssetsRequest* Arena::CreateMaybeMessage< ::api::v1::AssetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::AssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::AssetsResponse* Arena::CreateMaybeMessage< ::api::v1::AssetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::AssetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::AssetByIDRequest* Arena::CreateMaybeMessage< ::api::v1::AssetByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::AssetByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::AssetByIDResponse* Arena::CreateMaybeMessage< ::api::v1::AssetByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::AssetByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNodeSignaturesAggregateRequest* Arena::CreateMaybeMessage< ::api::v1::GetNodeSignaturesAggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNodeSignaturesAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNodeSignaturesAggregateResponse* Arena::CreateMaybeMessage< ::api::v1::GetNodeSignaturesAggregateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNodeSignaturesAggregateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OptionalProposalState* Arena::CreateMaybeMessage< ::api::v1::OptionalProposalState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OptionalProposalState >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalsRequest* Arena::CreateMaybeMessage< ::api::v1::GetProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalsResponse* Arena::CreateMaybeMessage< ::api::v1::GetProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalsByPartyRequest* Arena::CreateMaybeMessage< ::api::v1::GetProposalsByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalsByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalsByPartyResponse* Arena::CreateMaybeMessage< ::api::v1::GetProposalsByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalsByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetVotesByPartyRequest* Arena::CreateMaybeMessage< ::api::v1::GetVotesByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetVotesByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetVotesByPartyResponse* Arena::CreateMaybeMessage< ::api::v1::GetVotesByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetVotesByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNewMarketProposalsRequest* Arena::CreateMaybeMessage< ::api::v1::GetNewMarketProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNewMarketProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNewMarketProposalsResponse* Arena::CreateMaybeMessage< ::api::v1::GetNewMarketProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNewMarketProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetUpdateMarketProposalsRequest* Arena::CreateMaybeMessage< ::api::v1::GetUpdateMarketProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetUpdateMarketProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetUpdateMarketProposalsResponse* Arena::CreateMaybeMessage< ::api::v1::GetUpdateMarketProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetUpdateMarketProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNetworkParametersProposalsRequest* Arena::CreateMaybeMessage< ::api::v1::GetNetworkParametersProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNetworkParametersProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNetworkParametersProposalsResponse* Arena::CreateMaybeMessage< ::api::v1::GetNetworkParametersProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNetworkParametersProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNewAssetProposalsRequest* Arena::CreateMaybeMessage< ::api::v1::GetNewAssetProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNewAssetProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetNewAssetProposalsResponse* Arena::CreateMaybeMessage< ::api::v1::GetNewAssetProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetNewAssetProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalByIDRequest* Arena::CreateMaybeMessage< ::api::v1::GetProposalByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalByIDResponse* Arena::CreateMaybeMessage< ::api::v1::GetProposalByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalByReferenceRequest* Arena::CreateMaybeMessage< ::api::v1::GetProposalByReferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalByReferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetProposalByReferenceResponse* Arena::CreateMaybeMessage< ::api::v1::GetProposalByReferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetProposalByReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObserveGovernanceRequest* Arena::CreateMaybeMessage< ::api::v1::ObserveGovernanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObserveGovernanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObserveGovernanceResponse* Arena::CreateMaybeMessage< ::api::v1::ObserveGovernanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObserveGovernanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObservePartyProposalsRequest* Arena::CreateMaybeMessage< ::api::v1::ObservePartyProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObservePartyProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObservePartyProposalsResponse* Arena::CreateMaybeMessage< ::api::v1::ObservePartyProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObservePartyProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObserveProposalVotesRequest* Arena::CreateMaybeMessage< ::api::v1::ObserveProposalVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObserveProposalVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObserveProposalVotesResponse* Arena::CreateMaybeMessage< ::api::v1::ObserveProposalVotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObserveProposalVotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObservePartyVotesRequest* Arena::CreateMaybeMessage< ::api::v1::ObservePartyVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObservePartyVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObservePartyVotesResponse* Arena::CreateMaybeMessage< ::api::v1::ObservePartyVotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObservePartyVotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarginLevelsSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::MarginLevelsSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarginLevelsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarginLevelsSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::MarginLevelsSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarginLevelsSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarginLevelsRequest* Arena::CreateMaybeMessage< ::api::v1::MarginLevelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarginLevelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarginLevelsResponse* Arena::CreateMaybeMessage< ::api::v1::MarginLevelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarginLevelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketsDataSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::MarketsDataSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketsDataSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketsDataSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::MarketsDataSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketsDataSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDataByIDRequest* Arena::CreateMaybeMessage< ::api::v1::MarketDataByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDataByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDataByIDResponse* Arena::CreateMaybeMessage< ::api::v1::MarketDataByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDataByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketsDataRequest* Arena::CreateMaybeMessage< ::api::v1::MarketsDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketsDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketsDataResponse* Arena::CreateMaybeMessage< ::api::v1::MarketsDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketsDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::LastTradeRequest* Arena::CreateMaybeMessage< ::api::v1::LastTradeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::LastTradeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::LastTradeResponse* Arena::CreateMaybeMessage< ::api::v1::LastTradeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::LastTradeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketByIDRequest* Arena::CreateMaybeMessage< ::api::v1::MarketByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketByIDResponse* Arena::CreateMaybeMessage< ::api::v1::MarketByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PartyByIDRequest* Arena::CreateMaybeMessage< ::api::v1::PartyByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PartyByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PartyByIDResponse* Arena::CreateMaybeMessage< ::api::v1::PartyByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PartyByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PartiesRequest* Arena::CreateMaybeMessage< ::api::v1::PartiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PartiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PartiesResponse* Arena::CreateMaybeMessage< ::api::v1::PartiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PartiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesByPartyRequest* Arena::CreateMaybeMessage< ::api::v1::TradesByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesByPartyResponse* Arena::CreateMaybeMessage< ::api::v1::TradesByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesByOrderRequest* Arena::CreateMaybeMessage< ::api::v1::TradesByOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesByOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesByOrderResponse* Arena::CreateMaybeMessage< ::api::v1::TradesByOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesByOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::AccountsSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::AccountsSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::AccountsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::AccountsSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::AccountsSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::AccountsSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrdersSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::OrdersSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrdersSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::TradesSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::CandlesSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::CandlesSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::CandlesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::CandlesSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::CandlesSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::CandlesSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDepthSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::MarketDepthSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDepthSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDepthSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::MarketDepthSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDepthSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDepthUpdatesSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::MarketDepthUpdatesSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDepthUpdatesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDepthUpdatesSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::MarketDepthUpdatesSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDepthUpdatesSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PositionsSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::PositionsSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PositionsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PositionsSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::PositionsSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PositionsSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrdersByMarketRequest* Arena::CreateMaybeMessage< ::api::v1::OrdersByMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrdersByMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrdersByMarketResponse* Arena::CreateMaybeMessage< ::api::v1::OrdersByMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrdersByMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrdersByPartyRequest* Arena::CreateMaybeMessage< ::api::v1::OrdersByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrdersByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrdersByPartyResponse* Arena::CreateMaybeMessage< ::api::v1::OrdersByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrdersByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderByMarketAndIDRequest* Arena::CreateMaybeMessage< ::api::v1::OrderByMarketAndIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderByMarketAndIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderByMarketAndIDResponse* Arena::CreateMaybeMessage< ::api::v1::OrderByMarketAndIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderByMarketAndIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderByReferenceRequest* Arena::CreateMaybeMessage< ::api::v1::OrderByReferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderByReferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderByReferenceResponse* Arena::CreateMaybeMessage< ::api::v1::OrderByReferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderByReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketsRequest* Arena::CreateMaybeMessage< ::api::v1::MarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketsResponse* Arena::CreateMaybeMessage< ::api::v1::MarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::CandlesRequest* Arena::CreateMaybeMessage< ::api::v1::CandlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::CandlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::CandlesResponse* Arena::CreateMaybeMessage< ::api::v1::CandlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::CandlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDepthRequest* Arena::CreateMaybeMessage< ::api::v1::MarketDepthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDepthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketDepthResponse* Arena::CreateMaybeMessage< ::api::v1::MarketDepthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketDepthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesByMarketRequest* Arena::CreateMaybeMessage< ::api::v1::TradesByMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesByMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesByMarketResponse* Arena::CreateMaybeMessage< ::api::v1::TradesByMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesByMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PositionsByPartyRequest* Arena::CreateMaybeMessage< ::api::v1::PositionsByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PositionsByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PositionsByPartyResponse* Arena::CreateMaybeMessage< ::api::v1::PositionsByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PositionsByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetVegaTimeRequest* Arena::CreateMaybeMessage< ::api::v1::GetVegaTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetVegaTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::GetVegaTimeResponse* Arena::CreateMaybeMessage< ::api::v1::GetVegaTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::GetVegaTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::Pagination* Arena::CreateMaybeMessage< ::api::v1::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrdersSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::OrdersSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrdersSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TradesSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::TradesSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TradesSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TransferResponsesSubscribeRequest* Arena::CreateMaybeMessage< ::api::v1::TransferResponsesSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TransferResponsesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::TransferResponsesSubscribeResponse* Arena::CreateMaybeMessage< ::api::v1::TransferResponsesSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::TransferResponsesSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PartyAccountsRequest* Arena::CreateMaybeMessage< ::api::v1::PartyAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PartyAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PartyAccountsResponse* Arena::CreateMaybeMessage< ::api::v1::PartyAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PartyAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketAccountsRequest* Arena::CreateMaybeMessage< ::api::v1::MarketAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::MarketAccountsResponse* Arena::CreateMaybeMessage< ::api::v1::MarketAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::MarketAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::FeeInfrastructureAccountsRequest* Arena::CreateMaybeMessage< ::api::v1::FeeInfrastructureAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::FeeInfrastructureAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::FeeInfrastructureAccountsResponse* Arena::CreateMaybeMessage< ::api::v1::FeeInfrastructureAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::FeeInfrastructureAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareProposalSubmissionRequest* Arena::CreateMaybeMessage< ::api::v1::PrepareProposalSubmissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareProposalSubmissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareProposalSubmissionResponse* Arena::CreateMaybeMessage< ::api::v1::PrepareProposalSubmissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareProposalSubmissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareVoteSubmissionRequest* Arena::CreateMaybeMessage< ::api::v1::PrepareVoteSubmissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareVoteSubmissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareVoteSubmissionResponse* Arena::CreateMaybeMessage< ::api::v1::PrepareVoteSubmissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareVoteSubmissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareLiquidityProvisionRequest* Arena::CreateMaybeMessage< ::api::v1::PrepareLiquidityProvisionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareLiquidityProvisionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::PrepareLiquidityProvisionResponse* Arena::CreateMaybeMessage< ::api::v1::PrepareLiquidityProvisionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::PrepareLiquidityProvisionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderByIDRequest* Arena::CreateMaybeMessage< ::api::v1::OrderByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderByIDResponse* Arena::CreateMaybeMessage< ::api::v1::OrderByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderVersionsByIDRequest* Arena::CreateMaybeMessage< ::api::v1::OrderVersionsByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderVersionsByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OrderVersionsByIDResponse* Arena::CreateMaybeMessage< ::api::v1::OrderVersionsByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OrderVersionsByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::EstimateFeeRequest* Arena::CreateMaybeMessage< ::api::v1::EstimateFeeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::EstimateFeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::EstimateFeeResponse* Arena::CreateMaybeMessage< ::api::v1::EstimateFeeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::EstimateFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::EstimateMarginRequest* Arena::CreateMaybeMessage< ::api::v1::EstimateMarginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::EstimateMarginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::EstimateMarginResponse* Arena::CreateMaybeMessage< ::api::v1::EstimateMarginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::EstimateMarginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObserveEventBusRequest* Arena::CreateMaybeMessage< ::api::v1::ObserveEventBusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObserveEventBusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ObserveEventBusResponse* Arena::CreateMaybeMessage< ::api::v1::ObserveEventBusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ObserveEventBusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::StatisticsRequest* Arena::CreateMaybeMessage< ::api::v1::StatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::StatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::StatisticsResponse* Arena::CreateMaybeMessage< ::api::v1::StatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::StatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::WithdrawalsRequest* Arena::CreateMaybeMessage< ::api::v1::WithdrawalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::WithdrawalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::WithdrawalsResponse* Arena::CreateMaybeMessage< ::api::v1::WithdrawalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::WithdrawalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::WithdrawalRequest* Arena::CreateMaybeMessage< ::api::v1::WithdrawalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::WithdrawalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::WithdrawalResponse* Arena::CreateMaybeMessage< ::api::v1::WithdrawalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::WithdrawalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ERC20WithdrawalApprovalRequest* Arena::CreateMaybeMessage< ::api::v1::ERC20WithdrawalApprovalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ERC20WithdrawalApprovalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::ERC20WithdrawalApprovalResponse* Arena::CreateMaybeMessage< ::api::v1::ERC20WithdrawalApprovalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::ERC20WithdrawalApprovalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::DepositsRequest* Arena::CreateMaybeMessage< ::api::v1::DepositsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::DepositsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::DepositsResponse* Arena::CreateMaybeMessage< ::api::v1::DepositsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::DepositsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::DepositRequest* Arena::CreateMaybeMessage< ::api::v1::DepositRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::DepositRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::DepositResponse* Arena::CreateMaybeMessage< ::api::v1::DepositResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::DepositResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::NetworkParametersRequest* Arena::CreateMaybeMessage< ::api::v1::NetworkParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::NetworkParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::NetworkParametersResponse* Arena::CreateMaybeMessage< ::api::v1::NetworkParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::NetworkParametersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::LiquidityProvisionsRequest* Arena::CreateMaybeMessage< ::api::v1::LiquidityProvisionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::LiquidityProvisionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::LiquidityProvisionsResponse* Arena::CreateMaybeMessage< ::api::v1::LiquidityProvisionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::LiquidityProvisionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OracleSpecRequest* Arena::CreateMaybeMessage< ::api::v1::OracleSpecRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OracleSpecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OracleSpecResponse* Arena::CreateMaybeMessage< ::api::v1::OracleSpecResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OracleSpecResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OracleSpecsRequest* Arena::CreateMaybeMessage< ::api::v1::OracleSpecsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OracleSpecsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OracleSpecsResponse* Arena::CreateMaybeMessage< ::api::v1::OracleSpecsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OracleSpecsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OracleDataBySpecRequest* Arena::CreateMaybeMessage< ::api::v1::OracleDataBySpecRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OracleDataBySpecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::OracleDataBySpecResponse* Arena::CreateMaybeMessage< ::api::v1::OracleDataBySpecResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::OracleDataBySpecResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::LastBlockHeightRequest* Arena::CreateMaybeMessage< ::api::v1::LastBlockHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::LastBlockHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::v1::LastBlockHeightResponse* Arena::CreateMaybeMessage< ::api::v1::LastBlockHeightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::v1::LastBlockHeightResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
