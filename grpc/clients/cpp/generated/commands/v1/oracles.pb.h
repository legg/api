// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands/v1/oracles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands_2fv1_2foracles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands_2fv1_2foracles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands_2fv1_2foracles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands_2fv1_2foracles_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2fv1_2foracles_2eproto;
namespace vega {
namespace commands {
namespace v1 {
class OracleDataSubmission;
class OracleDataSubmissionDefaultTypeInternal;
extern OracleDataSubmissionDefaultTypeInternal _OracleDataSubmission_default_instance_;
}  // namespace v1
}  // namespace commands
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::commands::v1::OracleDataSubmission* Arena::CreateMaybeMessage<::vega::commands::v1::OracleDataSubmission>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {
namespace commands {
namespace v1 {

enum OracleDataSubmission_OracleSource : int {
  OracleDataSubmission_OracleSource_ORACLE_SOURCE_UNSPECIFIED = 0,
  OracleDataSubmission_OracleSource_ORACLE_SOURCE_OPEN_ORACLE = 1,
  OracleDataSubmission_OracleSource_OracleDataSubmission_OracleSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OracleDataSubmission_OracleSource_OracleDataSubmission_OracleSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OracleDataSubmission_OracleSource_IsValid(int value);
constexpr OracleDataSubmission_OracleSource OracleDataSubmission_OracleSource_OracleSource_MIN = OracleDataSubmission_OracleSource_ORACLE_SOURCE_UNSPECIFIED;
constexpr OracleDataSubmission_OracleSource OracleDataSubmission_OracleSource_OracleSource_MAX = OracleDataSubmission_OracleSource_ORACLE_SOURCE_OPEN_ORACLE;
constexpr int OracleDataSubmission_OracleSource_OracleSource_ARRAYSIZE = OracleDataSubmission_OracleSource_OracleSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OracleDataSubmission_OracleSource_descriptor();
template<typename T>
inline const std::string& OracleDataSubmission_OracleSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OracleDataSubmission_OracleSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OracleDataSubmission_OracleSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OracleDataSubmission_OracleSource_descriptor(), enum_t_value);
}
inline bool OracleDataSubmission_OracleSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OracleDataSubmission_OracleSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OracleDataSubmission_OracleSource>(
    OracleDataSubmission_OracleSource_descriptor(), name, value);
}
// ===================================================================

class OracleDataSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.commands.v1.OracleDataSubmission) */ {
 public:
  inline OracleDataSubmission() : OracleDataSubmission(nullptr) {}
  virtual ~OracleDataSubmission();

  OracleDataSubmission(const OracleDataSubmission& from);
  OracleDataSubmission(OracleDataSubmission&& from) noexcept
    : OracleDataSubmission() {
    *this = ::std::move(from);
  }

  inline OracleDataSubmission& operator=(const OracleDataSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleDataSubmission& operator=(OracleDataSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleDataSubmission& default_instance();

  static inline const OracleDataSubmission* internal_default_instance() {
    return reinterpret_cast<const OracleDataSubmission*>(
               &_OracleDataSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OracleDataSubmission& a, OracleDataSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleDataSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleDataSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleDataSubmission* New() const final {
    return CreateMaybeMessage<OracleDataSubmission>(nullptr);
  }

  OracleDataSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleDataSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleDataSubmission& from);
  void MergeFrom(const OracleDataSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleDataSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.commands.v1.OracleDataSubmission";
  }
  protected:
  explicit OracleDataSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2fv1_2foracles_2eproto);
    return ::descriptor_table_commands_2fv1_2foracles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OracleDataSubmission_OracleSource OracleSource;
  static constexpr OracleSource ORACLE_SOURCE_UNSPECIFIED =
    OracleDataSubmission_OracleSource_ORACLE_SOURCE_UNSPECIFIED;
  static constexpr OracleSource ORACLE_SOURCE_OPEN_ORACLE =
    OracleDataSubmission_OracleSource_ORACLE_SOURCE_OPEN_ORACLE;
  static inline bool OracleSource_IsValid(int value) {
    return OracleDataSubmission_OracleSource_IsValid(value);
  }
  static constexpr OracleSource OracleSource_MIN =
    OracleDataSubmission_OracleSource_OracleSource_MIN;
  static constexpr OracleSource OracleSource_MAX =
    OracleDataSubmission_OracleSource_OracleSource_MAX;
  static constexpr int OracleSource_ARRAYSIZE =
    OracleDataSubmission_OracleSource_OracleSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OracleSource_descriptor() {
    return OracleDataSubmission_OracleSource_descriptor();
  }
  template<typename T>
  static inline const std::string& OracleSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OracleSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OracleSource_Name.");
    return OracleDataSubmission_OracleSource_Name(enum_t_value);
  }
  static inline bool OracleSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OracleSource* value) {
    return OracleDataSubmission_OracleSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kSourceFieldNumber = 1,
  };
  // bytes payload = 2 [json_name = "payload"];
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .vega.commands.v1.OracleDataSubmission.OracleSource source = 1 [json_name = "source"];
  void clear_source();
  ::vega::commands::v1::OracleDataSubmission_OracleSource source() const;
  void set_source(::vega::commands::v1::OracleDataSubmission_OracleSource value);
  private:
  ::vega::commands::v1::OracleDataSubmission_OracleSource _internal_source() const;
  void _internal_set_source(::vega::commands::v1::OracleDataSubmission_OracleSource value);
  public:

  // @@protoc_insertion_point(class_scope:vega.commands.v1.OracleDataSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  int source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2fv1_2foracles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OracleDataSubmission

// .vega.commands.v1.OracleDataSubmission.OracleSource source = 1 [json_name = "source"];
inline void OracleDataSubmission::clear_source() {
  source_ = 0;
}
inline ::vega::commands::v1::OracleDataSubmission_OracleSource OracleDataSubmission::_internal_source() const {
  return static_cast< ::vega::commands::v1::OracleDataSubmission_OracleSource >(source_);
}
inline ::vega::commands::v1::OracleDataSubmission_OracleSource OracleDataSubmission::source() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OracleDataSubmission.source)
  return _internal_source();
}
inline void OracleDataSubmission::_internal_set_source(::vega::commands::v1::OracleDataSubmission_OracleSource value) {

  source_ = value;
}
inline void OracleDataSubmission::set_source(::vega::commands::v1::OracleDataSubmission_OracleSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OracleDataSubmission.source)
}

// bytes payload = 2 [json_name = "payload"];
inline void OracleDataSubmission::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& OracleDataSubmission::payload() const {
  // @@protoc_insertion_point(field_get:vega.commands.v1.OracleDataSubmission.payload)
  return _internal_payload();
}
inline void OracleDataSubmission::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:vega.commands.v1.OracleDataSubmission.payload)
}
inline std::string* OracleDataSubmission::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:vega.commands.v1.OracleDataSubmission.payload)
  return _internal_mutable_payload();
}
inline const std::string& OracleDataSubmission::_internal_payload() const {
  return payload_.Get();
}
inline void OracleDataSubmission::_internal_set_payload(const std::string& value) {

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OracleDataSubmission::set_payload(std::string&& value) {

  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.commands.v1.OracleDataSubmission.payload)
}
inline void OracleDataSubmission::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.commands.v1.OracleDataSubmission.payload)
}
inline void OracleDataSubmission::set_payload(const void* value,
    size_t size) {

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.commands.v1.OracleDataSubmission.payload)
}
inline std::string* OracleDataSubmission::_internal_mutable_payload() {

  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OracleDataSubmission::release_payload() {
  // @@protoc_insertion_point(field_release:vega.commands.v1.OracleDataSubmission.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OracleDataSubmission::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {

  } else {

  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.commands.v1.OracleDataSubmission.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace commands
}  // namespace vega

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vega::commands::v1::OracleDataSubmission_OracleSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::commands::v1::OracleDataSubmission_OracleSource>() {
  return ::vega::commands::v1::OracleDataSubmission_OracleSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands_2fv1_2foracles_2eproto
