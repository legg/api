// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: markets.proto

#include "markets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_oracles_2fv1_2fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OracleSpec_oracles_2fv1_2fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuctionDuration_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContinuousTrading_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscreteTrading_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeFactors_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fees_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Future_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Instrument_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentMetadata_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityMonitoringParameters_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogNormalModelParams_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogNormalRiskModel_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarginCalculator_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketTimestamps_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleSpecToFutureBinding_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringParameters_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringSettings_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceMonitoringTrigger_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalingFactors_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleModelParams_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleRiskModel_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetStakeParameters_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TradableInstrument_markets_2eproto;
namespace vega {
class AuctionDurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuctionDuration> _instance;
} _AuctionDuration_default_instance_;
class ContinuousTradingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContinuousTrading> _instance;
} _ContinuousTrading_default_instance_;
class DiscreteTradingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscreteTrading> _instance;
} _DiscreteTrading_default_instance_;
class FutureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Future> _instance;
} _Future_default_instance_;
class OracleSpecToFutureBindingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleSpecToFutureBinding> _instance;
} _OracleSpecToFutureBinding_default_instance_;
class InstrumentMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentMetadata> _instance;
} _InstrumentMetadata_default_instance_;
class InstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Instrument> _instance;
} _Instrument_default_instance_;
class LogNormalRiskModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogNormalRiskModel> _instance;
} _LogNormalRiskModel_default_instance_;
class LogNormalModelParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogNormalModelParams> _instance;
} _LogNormalModelParams_default_instance_;
class SimpleRiskModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleRiskModel> _instance;
} _SimpleRiskModel_default_instance_;
class SimpleModelParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleModelParams> _instance;
} _SimpleModelParams_default_instance_;
class ScalingFactorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalingFactors> _instance;
} _ScalingFactors_default_instance_;
class MarginCalculatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginCalculator> _instance;
} _MarginCalculator_default_instance_;
class TradableInstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradableInstrument> _instance;
} _TradableInstrument_default_instance_;
class FeeFactorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeFactors> _instance;
} _FeeFactors_default_instance_;
class FeesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fees> _instance;
} _Fees_default_instance_;
class PriceMonitoringTriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceMonitoringTrigger> _instance;
} _PriceMonitoringTrigger_default_instance_;
class PriceMonitoringParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceMonitoringParameters> _instance;
} _PriceMonitoringParameters_default_instance_;
class PriceMonitoringSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceMonitoringSettings> _instance;
} _PriceMonitoringSettings_default_instance_;
class LiquidityMonitoringParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityMonitoringParameters> _instance;
} _LiquidityMonitoringParameters_default_instance_;
class TargetStakeParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetStakeParameters> _instance;
} _TargetStakeParameters_default_instance_;
class MarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Market> _instance;
} _Market_default_instance_;
class MarketTimestampsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketTimestamps> _instance;
} _MarketTimestamps_default_instance_;
}  // namespace vega
static void InitDefaultsscc_info_AuctionDuration_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_AuctionDuration_default_instance_;
    new (ptr) ::vega::AuctionDuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuctionDuration_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuctionDuration_markets_2eproto}, {}};

static void InitDefaultsscc_info_ContinuousTrading_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ContinuousTrading_default_instance_;
    new (ptr) ::vega::ContinuousTrading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContinuousTrading_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContinuousTrading_markets_2eproto}, {}};

static void InitDefaultsscc_info_DiscreteTrading_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_DiscreteTrading_default_instance_;
    new (ptr) ::vega::DiscreteTrading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscreteTrading_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiscreteTrading_markets_2eproto}, {}};

static void InitDefaultsscc_info_FeeFactors_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_FeeFactors_default_instance_;
    new (ptr) ::vega::FeeFactors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeFactors_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeeFactors_markets_2eproto}, {}};

static void InitDefaultsscc_info_Fees_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Fees_default_instance_;
    new (ptr) ::vega::Fees();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fees_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Fees_markets_2eproto}, {
      &scc_info_FeeFactors_markets_2eproto.base,}};

static void InitDefaultsscc_info_Future_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Future_default_instance_;
    new (ptr) ::vega::Future();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Future_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Future_markets_2eproto}, {
      &scc_info_OracleSpec_oracles_2fv1_2fspec_2eproto.base,
      &scc_info_OracleSpecToFutureBinding_markets_2eproto.base,}};

static void InitDefaultsscc_info_Instrument_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Instrument_default_instance_;
    new (ptr) ::vega::Instrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Instrument_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Instrument_markets_2eproto}, {
      &scc_info_InstrumentMetadata_markets_2eproto.base,
      &scc_info_Future_markets_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentMetadata_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_InstrumentMetadata_default_instance_;
    new (ptr) ::vega::InstrumentMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentMetadata_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstrumentMetadata_markets_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityMonitoringParameters_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityMonitoringParameters_default_instance_;
    new (ptr) ::vega::LiquidityMonitoringParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityMonitoringParameters_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityMonitoringParameters_markets_2eproto}, {
      &scc_info_TargetStakeParameters_markets_2eproto.base,}};

static void InitDefaultsscc_info_LogNormalModelParams_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LogNormalModelParams_default_instance_;
    new (ptr) ::vega::LogNormalModelParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogNormalModelParams_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogNormalModelParams_markets_2eproto}, {}};

static void InitDefaultsscc_info_LogNormalRiskModel_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LogNormalRiskModel_default_instance_;
    new (ptr) ::vega::LogNormalRiskModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogNormalRiskModel_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogNormalRiskModel_markets_2eproto}, {
      &scc_info_LogNormalModelParams_markets_2eproto.base,}};

static void InitDefaultsscc_info_MarginCalculator_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarginCalculator_default_instance_;
    new (ptr) ::vega::MarginCalculator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarginCalculator_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarginCalculator_markets_2eproto}, {
      &scc_info_ScalingFactors_markets_2eproto.base,}};

static void InitDefaultsscc_info_Market_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Market_default_instance_;
    new (ptr) ::vega::Market();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Market_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Market_markets_2eproto}, {
      &scc_info_TradableInstrument_markets_2eproto.base,
      &scc_info_Fees_markets_2eproto.base,
      &scc_info_AuctionDuration_markets_2eproto.base,
      &scc_info_ContinuousTrading_markets_2eproto.base,
      &scc_info_DiscreteTrading_markets_2eproto.base,
      &scc_info_PriceMonitoringSettings_markets_2eproto.base,
      &scc_info_LiquidityMonitoringParameters_markets_2eproto.base,
      &scc_info_MarketTimestamps_markets_2eproto.base,}};

static void InitDefaultsscc_info_MarketTimestamps_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketTimestamps_default_instance_;
    new (ptr) ::vega::MarketTimestamps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketTimestamps_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketTimestamps_markets_2eproto}, {}};

static void InitDefaultsscc_info_OracleSpecToFutureBinding_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OracleSpecToFutureBinding_default_instance_;
    new (ptr) ::vega::OracleSpecToFutureBinding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleSpecToFutureBinding_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OracleSpecToFutureBinding_markets_2eproto}, {}};

static void InitDefaultsscc_info_PriceMonitoringParameters_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceMonitoringParameters_default_instance_;
    new (ptr) ::vega::PriceMonitoringParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringParameters_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PriceMonitoringParameters_markets_2eproto}, {
      &scc_info_PriceMonitoringTrigger_markets_2eproto.base,}};

static void InitDefaultsscc_info_PriceMonitoringSettings_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceMonitoringSettings_default_instance_;
    new (ptr) ::vega::PriceMonitoringSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringSettings_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PriceMonitoringSettings_markets_2eproto}, {
      &scc_info_PriceMonitoringParameters_markets_2eproto.base,}};

static void InitDefaultsscc_info_PriceMonitoringTrigger_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceMonitoringTrigger_default_instance_;
    new (ptr) ::vega::PriceMonitoringTrigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceMonitoringTrigger_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceMonitoringTrigger_markets_2eproto}, {}};

static void InitDefaultsscc_info_ScalingFactors_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ScalingFactors_default_instance_;
    new (ptr) ::vega::ScalingFactors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalingFactors_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScalingFactors_markets_2eproto}, {}};

static void InitDefaultsscc_info_SimpleModelParams_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_SimpleModelParams_default_instance_;
    new (ptr) ::vega::SimpleModelParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleModelParams_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleModelParams_markets_2eproto}, {}};

static void InitDefaultsscc_info_SimpleRiskModel_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_SimpleRiskModel_default_instance_;
    new (ptr) ::vega::SimpleRiskModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleRiskModel_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleRiskModel_markets_2eproto}, {
      &scc_info_SimpleModelParams_markets_2eproto.base,}};

static void InitDefaultsscc_info_TargetStakeParameters_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TargetStakeParameters_default_instance_;
    new (ptr) ::vega::TargetStakeParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetStakeParameters_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TargetStakeParameters_markets_2eproto}, {}};

static void InitDefaultsscc_info_TradableInstrument_markets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TradableInstrument_default_instance_;
    new (ptr) ::vega::TradableInstrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TradableInstrument_markets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TradableInstrument_markets_2eproto}, {
      &scc_info_Instrument_markets_2eproto.base,
      &scc_info_MarginCalculator_markets_2eproto.base,
      &scc_info_LogNormalRiskModel_markets_2eproto.base,
      &scc_info_SimpleRiskModel_markets_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_markets_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_markets_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_markets_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_markets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionDuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionDuration, duration_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionDuration, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ContinuousTrading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ContinuousTrading, tick_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::DiscreteTrading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::DiscreteTrading, duration_ns_),
  PROTOBUF_FIELD_OFFSET(::vega::DiscreteTrading, tick_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Future, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Future, maturity_),
  PROTOBUF_FIELD_OFFSET(::vega::Future, settlement_asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Future, quote_name_),
  PROTOBUF_FIELD_OFFSET(::vega::Future, oracle_spec_for_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::vega::Future, oracle_spec_for_trading_termination_),
  PROTOBUF_FIELD_OFFSET(::vega::Future, oracle_spec_binding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OracleSpecToFutureBinding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OracleSpecToFutureBinding, settlement_price_property_),
  PROTOBUF_FIELD_OFFSET(::vega::OracleSpecToFutureBinding, trading_termination_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentMetadata, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Instrument, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::Instrument, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Instrument, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Instrument, code_),
  PROTOBUF_FIELD_OFFSET(::vega::Instrument, name_),
  PROTOBUF_FIELD_OFFSET(::vega::Instrument, metadata_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::Instrument, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalRiskModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalRiskModel, risk_aversion_parameter_),
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalRiskModel, tau_),
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalRiskModel, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalModelParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalModelParams, mu_),
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalModelParams, r_),
  PROTOBUF_FIELD_OFFSET(::vega::LogNormalModelParams, sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::SimpleRiskModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::SimpleRiskModel, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::SimpleModelParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::SimpleModelParams, factor_long_),
  PROTOBUF_FIELD_OFFSET(::vega::SimpleModelParams, factor_short_),
  PROTOBUF_FIELD_OFFSET(::vega::SimpleModelParams, max_move_up_),
  PROTOBUF_FIELD_OFFSET(::vega::SimpleModelParams, min_move_down_),
  PROTOBUF_FIELD_OFFSET(::vega::SimpleModelParams, probability_of_trading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ScalingFactors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ScalingFactors, search_level_),
  PROTOBUF_FIELD_OFFSET(::vega::ScalingFactors, initial_margin_),
  PROTOBUF_FIELD_OFFSET(::vega::ScalingFactors, collateral_release_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarginCalculator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarginCalculator, scaling_factors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TradableInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::TradableInstrument, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TradableInstrument, instrument_),
  PROTOBUF_FIELD_OFFSET(::vega::TradableInstrument, margin_calculator_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::TradableInstrument, risk_model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactors, maker_fee_),
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactors, infrastructure_fee_),
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactors, liquidity_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Fees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Fees, factors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringTrigger, horizon_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringTrigger, probability_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringTrigger, auction_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringParameters, triggers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringSettings, parameters_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringSettings, update_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityMonitoringParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityMonitoringParameters, target_stake_parameters_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityMonitoringParameters, triggering_ratio_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityMonitoringParameters, auction_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TargetStakeParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TargetStakeParameters, time_window_),
  PROTOBUF_FIELD_OFFSET(::vega::TargetStakeParameters, scaling_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Market, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::Market, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Market, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, tradable_instrument_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, decimal_places_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, fees_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, opening_auction_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::Market, price_monitoring_settings_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, liquidity_monitoring_parameters_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, trading_mode_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, state_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, market_timestamps_),
  PROTOBUF_FIELD_OFFSET(::vega::Market, trading_mode_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketTimestamps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketTimestamps, proposed_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketTimestamps, pending_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketTimestamps, open_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketTimestamps, close_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::AuctionDuration)},
  { 7, -1, sizeof(::vega::ContinuousTrading)},
  { 13, -1, sizeof(::vega::DiscreteTrading)},
  { 20, -1, sizeof(::vega::Future)},
  { 31, -1, sizeof(::vega::OracleSpecToFutureBinding)},
  { 38, -1, sizeof(::vega::InstrumentMetadata)},
  { 44, -1, sizeof(::vega::Instrument)},
  { 55, -1, sizeof(::vega::LogNormalRiskModel)},
  { 63, -1, sizeof(::vega::LogNormalModelParams)},
  { 71, -1, sizeof(::vega::SimpleRiskModel)},
  { 77, -1, sizeof(::vega::SimpleModelParams)},
  { 87, -1, sizeof(::vega::ScalingFactors)},
  { 95, -1, sizeof(::vega::MarginCalculator)},
  { 101, -1, sizeof(::vega::TradableInstrument)},
  { 111, -1, sizeof(::vega::FeeFactors)},
  { 119, -1, sizeof(::vega::Fees)},
  { 125, -1, sizeof(::vega::PriceMonitoringTrigger)},
  { 133, -1, sizeof(::vega::PriceMonitoringParameters)},
  { 139, -1, sizeof(::vega::PriceMonitoringSettings)},
  { 146, -1, sizeof(::vega::LiquidityMonitoringParameters)},
  { 154, -1, sizeof(::vega::TargetStakeParameters)},
  { 161, -1, sizeof(::vega::Market)},
  { 179, -1, sizeof(::vega::MarketTimestamps)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_AuctionDuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ContinuousTrading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_DiscreteTrading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Future_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OracleSpecToFutureBinding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_InstrumentMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Instrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LogNormalRiskModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LogNormalModelParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_SimpleRiskModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_SimpleModelParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ScalingFactors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarginCalculator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TradableInstrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_FeeFactors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Fees_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PriceMonitoringTrigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PriceMonitoringParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PriceMonitoringSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityMonitoringParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TargetStakeParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Market_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarketTimestamps_default_instance_),
};

const char descriptor_table_protodef_markets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmarkets.proto\022\004vega\0326github.com/mwitko"
  "w/go-proto-validators/validator.proto\032\025o"
  "racles/v1/spec.proto\"E\n\017AuctionDuration\022"
  "\032\n\010duration\030\001 \001(\003R\010duration\022\026\n\006volume\030\002 "
  "\001(\004R\006volume\"0\n\021ContinuousTrading\022\033\n\ttick"
  "_size\030\001 \001(\tR\010tickSize\"`\n\017DiscreteTrading"
  "\0220\n\013duration_ns\030\001 \001(\003B\017\342\337\037\013\020\000\030\200\200\210\272\220\255\315\004R\n"
  "durationNs\022\033\n\ttick_size\030\002 \001(\tR\010tickSize\""
  "\205\003\n\006Future\022\032\n\010maturity\030\001 \001(\tR\010maturity\022)"
  "\n\020settlement_asset\030\002 \001(\tR\017settlementAsse"
  "t\022\035\n\nquote_name\030\004 \001(\tR\tquoteName\022^\n orac"
  "le_spec_for_settlement_price\030\005 \001(\0132\026.ora"
  "cles.v1.OracleSpecR\034oracleSpecForSettlem"
  "entPrice\022d\n#oracle_spec_for_trading_term"
  "ination\030\006 \001(\0132\026.oracles.v1.OracleSpecR\037o"
  "racleSpecForTradingTermination\022O\n\023oracle"
  "_spec_binding\030\007 \001(\0132\037.vega.OracleSpecToF"
  "utureBindingR\021oracleSpecBinding\"\231\001\n\031Orac"
  "leSpecToFutureBinding\022:\n\031settlement_pric"
  "e_property\030\001 \001(\tR\027settlementPricePropert"
  "y\022@\n\034trading_termination_property\030\002 \001(\tR"
  "\032tradingTerminationProperty\"(\n\022Instrumen"
  "tMetadata\022\022\n\004tags\030\001 \003(\tR\004tags\"\255\001\n\nInstru"
  "ment\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004code\030\002 \001(\tR\004code"
  "\022\022\n\004name\030\003 \001(\tR\004name\0224\n\010metadata\030\004 \001(\0132\030"
  ".vega.InstrumentMetadataR\010metadata\022&\n\006fu"
  "ture\030d \001(\0132\014.vega.FutureH\000R\006futureB\t\n\007pr"
  "oduct\"\222\001\n\022LogNormalRiskModel\0226\n\027risk_ave"
  "rsion_parameter\030\001 \001(\001R\025riskAversionParam"
  "eter\022\020\n\003tau\030\002 \001(\001R\003tau\0222\n\006params\030\003 \001(\0132\032"
  ".vega.LogNormalModelParamsR\006params\"J\n\024Lo"
  "gNormalModelParams\022\016\n\002mu\030\001 \001(\001R\002mu\022\014\n\001r\030"
  "\002 \001(\001R\001r\022\024\n\005sigma\030\003 \001(\001R\005sigma\"B\n\017Simple"
  "RiskModel\022/\n\006params\030\001 \001(\0132\027.vega.SimpleM"
  "odelParamsR\006params\"\207\002\n\021SimpleModelParams"
  "\022\037\n\013factor_long\030\001 \001(\001R\nfactorLong\022!\n\014fac"
  "tor_short\030\002 \001(\001R\013factorShort\022-\n\013max_move"
  "_up\030\003 \001(\001B\r\342\337\037\tI\000\000\000\000\000\000\000\000R\tmaxMoveUp\0221\n\rm"
  "in_move_down\030\004 \001(\001B\r\342\337\037\tQ\000\000\000\000\000\000\000\000R\013minMo"
  "veDown\022L\n\026probability_of_trading\030\005 \001(\001B\026"
  "\342\337\037\022I\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\360\?R\024probabilityOfTra"
  "ding\"\211\001\n\016ScalingFactors\022!\n\014search_level\030"
  "\001 \001(\001R\013searchLevel\022%\n\016initial_margin\030\002 \001"
  "(\001R\rinitialMargin\022-\n\022collateral_release\030"
  "\003 \001(\001R\021collateralRelease\"Q\n\020MarginCalcul"
  "ator\022=\n\017scaling_factors\030\001 \001(\0132\024.vega.Sca"
  "lingFactorsR\016scalingFactors\"\255\002\n\022Tradable"
  "Instrument\0220\n\ninstrument\030\001 \001(\0132\020.vega.In"
  "strumentR\ninstrument\022C\n\021margin_calculato"
  "r\030\002 \001(\0132\026.vega.MarginCalculatorR\020marginC"
  "alculator\022M\n\025log_normal_risk_model\030d \001(\013"
  "2\030.vega.LogNormalRiskModelH\000R\022logNormalR"
  "iskModel\022C\n\021simple_risk_model\030e \001(\0132\025.ve"
  "ga.SimpleRiskModelH\000R\017simpleRiskModelB\014\n"
  "\nrisk_model\"}\n\nFeeFactors\022\033\n\tmaker_fee\030\001"
  " \001(\tR\010makerFee\022-\n\022infrastructure_fee\030\002 \001"
  "(\tR\021infrastructureFee\022#\n\rliquidity_fee\030\003"
  " \001(\tR\014liquidityFee\"2\n\004Fees\022*\n\007factors\030\001 "
  "\001(\0132\020.vega.FeeFactorsR\007factors\"\251\001\n\026Price"
  "MonitoringTrigger\022 \n\007horizon\030\001 \001(\003B\006\342\337\037\002"
  "\020\000R\007horizon\0228\n\013probability\030\002 \001(\001B\026\342\337\037\0221\000"
  "\000\000\000\000\000\000\0009\000\000\000\000\000\000\360\?R\013probability\0223\n\021auction"
  "_extension\030\003 \001(\003B\006\342\337\037\002\020\000R\020auctionExtensi"
  "on\"U\n\031PriceMonitoringParameters\0228\n\010trigg"
  "ers\030\001 \003(\0132\034.vega.PriceMonitoringTriggerR"
  "\010triggers\"\205\001\n\027PriceMonitoringSettings\022\?\n"
  "\nparameters\030\001 \001(\0132\037.vega.PriceMonitoring"
  "ParametersR\nparameters\022)\n\020update_frequen"
  "cy\030\002 \001(\003R\017updateFrequency\"\344\001\n\035LiquidityM"
  "onitoringParameters\022S\n\027target_stake_para"
  "meters\030\001 \001(\0132\033.vega.TargetStakeParameter"
  "sR\025targetStakeParameters\022A\n\020triggering_r"
  "atio\030\002 \001(\001B\026\342\337\037\022I\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\360\?R\017trig"
  "geringRatio\022+\n\021auction_extension\030\003 \001(\003R\020"
  "auctionExtension\"v\n\025TargetStakeParameter"
  "s\022\'\n\013time_window\030\001 \001(\003B\006\342\337\037\002\020\000R\ntimeWind"
  "ow\0224\n\016scaling_factor\030\002 \001(\001B\r\342\337\037\t1\000\000\000\000\000\000\000"
  "\000R\rscalingFactor\"\362\010\n\006Market\022\016\n\002id\030\001 \001(\tR"
  "\002id\022I\n\023tradable_instrument\030\002 \001(\0132\030.vega."
  "TradableInstrumentR\022tradableInstrument\022%"
  "\n\016decimal_places\030\003 \001(\004R\rdecimalPlaces\022\036\n"
  "\004fees\030\004 \001(\0132\n.vega.FeesR\004fees\022>\n\017opening"
  "_auction\030\005 \001(\0132\025.vega.AuctionDurationR\016o"
  "peningAuction\0229\n\ncontinuous\030d \001(\0132\027.vega"
  ".ContinuousTradingH\000R\ncontinuous\0223\n\010disc"
  "rete\030e \001(\0132\025.vega.DiscreteTradingH\000R\010dis"
  "crete\022Y\n\031price_monitoring_settings\030\006 \001(\013"
  "2\035.vega.PriceMonitoringSettingsR\027priceMo"
  "nitoringSettings\022k\n\037liquidity_monitoring"
  "_parameters\030\007 \001(\0132#.vega.LiquidityMonito"
  "ringParametersR\035liquidityMonitoringParam"
  "eters\022;\n\014trading_mode\030\010 \001(\0162\030.vega.Marke"
  "t.TradingModeR\013tradingMode\022(\n\005state\030\t \001("
  "\0162\022.vega.Market.StateR\005state\022C\n\021market_t"
  "imestamps\030\n \001(\0132\026.vega.MarketTimestampsR"
  "\020marketTimestamps\"\330\001\n\005State\022\025\n\021STATE_UNS"
  "PECIFIED\020\000\022\022\n\016STATE_PROPOSED\020\001\022\022\n\016STATE_"
  "REJECTED\020\002\022\021\n\rSTATE_PENDING\020\003\022\023\n\017STATE_C"
  "ANCELLED\020\004\022\020\n\014STATE_ACTIVE\020\005\022\023\n\017STATE_SU"
  "SPENDED\020\006\022\020\n\014STATE_CLOSED\020\007\022\034\n\030STATE_TRA"
  "DING_TERMINATED\020\010\022\021\n\rSTATE_SETTLED\020\t\"\257\001\n"
  "\013TradingMode\022\034\n\030TRADING_MODE_UNSPECIFIED"
  "\020\000\022\033\n\027TRADING_MODE_CONTINUOUS\020\001\022\036\n\032TRADI"
  "NG_MODE_BATCH_AUCTION\020\002\022 \n\034TRADING_MODE_"
  "OPENING_AUCTION\020\003\022#\n\037TRADING_MODE_MONITO"
  "RING_AUCTION\020\004B\025\n\023trading_mode_config\"r\n"
  "\020MarketTimestamps\022\032\n\010proposed\030\001 \001(\003R\010pro"
  "posed\022\030\n\007pending\030\002 \001(\003R\007pending\022\022\n\004open\030"
  "\003 \001(\003R\004open\022\024\n\005close\030\004 \001(\003R\005closeB7\n\024io."
  "vegaprotocol.vegaZ\037code.vegaprotocol.io/"
  "vega/protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_markets_2eproto_deps[2] = {
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  &::descriptor_table_oracles_2fv1_2fspec_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_markets_2eproto_sccs[23] = {
  &scc_info_AuctionDuration_markets_2eproto.base,
  &scc_info_ContinuousTrading_markets_2eproto.base,
  &scc_info_DiscreteTrading_markets_2eproto.base,
  &scc_info_FeeFactors_markets_2eproto.base,
  &scc_info_Fees_markets_2eproto.base,
  &scc_info_Future_markets_2eproto.base,
  &scc_info_Instrument_markets_2eproto.base,
  &scc_info_InstrumentMetadata_markets_2eproto.base,
  &scc_info_LiquidityMonitoringParameters_markets_2eproto.base,
  &scc_info_LogNormalModelParams_markets_2eproto.base,
  &scc_info_LogNormalRiskModel_markets_2eproto.base,
  &scc_info_MarginCalculator_markets_2eproto.base,
  &scc_info_Market_markets_2eproto.base,
  &scc_info_MarketTimestamps_markets_2eproto.base,
  &scc_info_OracleSpecToFutureBinding_markets_2eproto.base,
  &scc_info_PriceMonitoringParameters_markets_2eproto.base,
  &scc_info_PriceMonitoringSettings_markets_2eproto.base,
  &scc_info_PriceMonitoringTrigger_markets_2eproto.base,
  &scc_info_ScalingFactors_markets_2eproto.base,
  &scc_info_SimpleModelParams_markets_2eproto.base,
  &scc_info_SimpleRiskModel_markets_2eproto.base,
  &scc_info_TargetStakeParameters_markets_2eproto.base,
  &scc_info_TradableInstrument_markets_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_markets_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_markets_2eproto = {
  false, false, descriptor_table_protodef_markets_2eproto, "markets.proto", 4418,
  &descriptor_table_markets_2eproto_once, descriptor_table_markets_2eproto_sccs, descriptor_table_markets_2eproto_deps, 23, 2,
  schemas, file_default_instances, TableStruct_markets_2eproto::offsets,
  file_level_metadata_markets_2eproto, 23, file_level_enum_descriptors_markets_2eproto, file_level_service_descriptors_markets_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_markets_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_markets_2eproto)), true);
namespace vega {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_markets_2eproto);
  return file_level_enum_descriptors_markets_2eproto[0];
}
bool Market_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Market_State Market::STATE_UNSPECIFIED;
constexpr Market_State Market::STATE_PROPOSED;
constexpr Market_State Market::STATE_REJECTED;
constexpr Market_State Market::STATE_PENDING;
constexpr Market_State Market::STATE_CANCELLED;
constexpr Market_State Market::STATE_ACTIVE;
constexpr Market_State Market::STATE_SUSPENDED;
constexpr Market_State Market::STATE_CLOSED;
constexpr Market_State Market::STATE_TRADING_TERMINATED;
constexpr Market_State Market::STATE_SETTLED;
constexpr Market_State Market::State_MIN;
constexpr Market_State Market::State_MAX;
constexpr int Market::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_TradingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_markets_2eproto);
  return file_level_enum_descriptors_markets_2eproto[1];
}
bool Market_TradingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Market_TradingMode Market::TRADING_MODE_UNSPECIFIED;
constexpr Market_TradingMode Market::TRADING_MODE_CONTINUOUS;
constexpr Market_TradingMode Market::TRADING_MODE_BATCH_AUCTION;
constexpr Market_TradingMode Market::TRADING_MODE_OPENING_AUCTION;
constexpr Market_TradingMode Market::TRADING_MODE_MONITORING_AUCTION;
constexpr Market_TradingMode Market::TradingMode_MIN;
constexpr Market_TradingMode Market::TradingMode_MAX;
constexpr int Market::TradingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AuctionDuration::_Internal {
 public:
};

AuctionDuration::AuctionDuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.AuctionDuration)
}
AuctionDuration::AuctionDuration(const AuctionDuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:vega.AuctionDuration)
}

void AuctionDuration::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(volume_));
}

AuctionDuration::~AuctionDuration() {
  // @@protoc_insertion_point(destructor:vega.AuctionDuration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuctionDuration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AuctionDuration::ArenaDtor(void* object) {
  AuctionDuration* _this = reinterpret_cast< AuctionDuration* >(object);
  (void)_this;
}
void AuctionDuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuctionDuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuctionDuration& AuctionDuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuctionDuration_markets_2eproto.base);
  return *internal_default_instance();
}


void AuctionDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.AuctionDuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionDuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 duration = 1 [json_name = "duration"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 2 [json_name = "volume"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuctionDuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.AuctionDuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 duration = 1 [json_name = "duration"];
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_duration(), target);
  }

  // uint64 volume = 2 [json_name = "volume"];
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.AuctionDuration)
  return target;
}

size_t AuctionDuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.AuctionDuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 duration = 1 [json_name = "duration"];
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  // uint64 volume = 2 [json_name = "volume"];
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionDuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.AuctionDuration)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionDuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuctionDuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.AuctionDuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.AuctionDuration)
    MergeFrom(*source);
  }
}

void AuctionDuration::MergeFrom(const AuctionDuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.AuctionDuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
}

void AuctionDuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.AuctionDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionDuration::CopyFrom(const AuctionDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.AuctionDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionDuration::IsInitialized() const {
  return true;
}

void AuctionDuration::InternalSwap(AuctionDuration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuctionDuration, volume_)
      + sizeof(AuctionDuration::volume_)
      - PROTOBUF_FIELD_OFFSET(AuctionDuration, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionDuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ContinuousTrading::_Internal {
 public:
};

ContinuousTrading::ContinuousTrading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ContinuousTrading)
}
ContinuousTrading::ContinuousTrading(const ContinuousTrading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tick_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tick_size().empty()) {
    tick_size_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tick_size(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.ContinuousTrading)
}

void ContinuousTrading::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContinuousTrading_markets_2eproto.base);
  tick_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContinuousTrading::~ContinuousTrading() {
  // @@protoc_insertion_point(destructor:vega.ContinuousTrading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContinuousTrading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tick_size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContinuousTrading::ArenaDtor(void* object) {
  ContinuousTrading* _this = reinterpret_cast< ContinuousTrading* >(object);
  (void)_this;
}
void ContinuousTrading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContinuousTrading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContinuousTrading& ContinuousTrading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContinuousTrading_markets_2eproto.base);
  return *internal_default_instance();
}


void ContinuousTrading::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ContinuousTrading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tick_size_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinuousTrading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tick_size = 1 [json_name = "tickSize"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tick_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ContinuousTrading.tick_size"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContinuousTrading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ContinuousTrading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tick_size = 1 [json_name = "tickSize"];
  if (this->tick_size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tick_size().data(), static_cast<int>(this->_internal_tick_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ContinuousTrading.tick_size");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tick_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ContinuousTrading)
  return target;
}

size_t ContinuousTrading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ContinuousTrading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tick_size = 1 [json_name = "tickSize"];
  if (this->tick_size().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tick_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContinuousTrading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ContinuousTrading)
  GOOGLE_DCHECK_NE(&from, this);
  const ContinuousTrading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContinuousTrading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ContinuousTrading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ContinuousTrading)
    MergeFrom(*source);
  }
}

void ContinuousTrading::MergeFrom(const ContinuousTrading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ContinuousTrading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tick_size().size() > 0) {
    _internal_set_tick_size(from._internal_tick_size());
  }
}

void ContinuousTrading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ContinuousTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinuousTrading::CopyFrom(const ContinuousTrading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ContinuousTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinuousTrading::IsInitialized() const {
  return true;
}

void ContinuousTrading::InternalSwap(ContinuousTrading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tick_size_.Swap(&other->tick_size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinuousTrading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiscreteTrading::_Internal {
 public:
};

DiscreteTrading::DiscreteTrading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.DiscreteTrading)
}
DiscreteTrading::DiscreteTrading(const DiscreteTrading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tick_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tick_size().empty()) {
    tick_size_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tick_size(),
      GetArena());
  }
  duration_ns_ = from.duration_ns_;
  // @@protoc_insertion_point(copy_constructor:vega.DiscreteTrading)
}

void DiscreteTrading::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscreteTrading_markets_2eproto.base);
  tick_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ns_ = PROTOBUF_LONGLONG(0);
}

DiscreteTrading::~DiscreteTrading() {
  // @@protoc_insertion_point(destructor:vega.DiscreteTrading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscreteTrading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tick_size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiscreteTrading::ArenaDtor(void* object) {
  DiscreteTrading* _this = reinterpret_cast< DiscreteTrading* >(object);
  (void)_this;
}
void DiscreteTrading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteTrading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscreteTrading& DiscreteTrading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscreteTrading_markets_2eproto.base);
  return *internal_default_instance();
}


void DiscreteTrading::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.DiscreteTrading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tick_size_.ClearToEmpty();
  duration_ns_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteTrading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 duration_ns = 1 [json_name = "durationNs", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tick_size = 2 [json_name = "tickSize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tick_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.DiscreteTrading.tick_size"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteTrading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.DiscreteTrading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 duration_ns = 1 [json_name = "durationNs", (.validator.field) = {
  if (this->duration_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_duration_ns(), target);
  }

  // string tick_size = 2 [json_name = "tickSize"];
  if (this->tick_size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tick_size().data(), static_cast<int>(this->_internal_tick_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.DiscreteTrading.tick_size");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tick_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.DiscreteTrading)
  return target;
}

size_t DiscreteTrading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.DiscreteTrading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tick_size = 2 [json_name = "tickSize"];
  if (this->tick_size().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tick_size());
  }

  // int64 duration_ns = 1 [json_name = "durationNs", (.validator.field) = {
  if (this->duration_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration_ns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscreteTrading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.DiscreteTrading)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscreteTrading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscreteTrading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.DiscreteTrading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.DiscreteTrading)
    MergeFrom(*source);
  }
}

void DiscreteTrading::MergeFrom(const DiscreteTrading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.DiscreteTrading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tick_size().size() > 0) {
    _internal_set_tick_size(from._internal_tick_size());
  }
  if (from.duration_ns() != 0) {
    _internal_set_duration_ns(from._internal_duration_ns());
  }
}

void DiscreteTrading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.DiscreteTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteTrading::CopyFrom(const DiscreteTrading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.DiscreteTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteTrading::IsInitialized() const {
  return true;
}

void DiscreteTrading::InternalSwap(DiscreteTrading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tick_size_.Swap(&other->tick_size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(duration_ns_, other->duration_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteTrading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Future::_Internal {
 public:
  static const ::oracles::v1::OracleSpec& oracle_spec_for_settlement_price(const Future* msg);
  static const ::oracles::v1::OracleSpec& oracle_spec_for_trading_termination(const Future* msg);
  static const ::vega::OracleSpecToFutureBinding& oracle_spec_binding(const Future* msg);
};

const ::oracles::v1::OracleSpec&
Future::_Internal::oracle_spec_for_settlement_price(const Future* msg) {
  return *msg->oracle_spec_for_settlement_price_;
}
const ::oracles::v1::OracleSpec&
Future::_Internal::oracle_spec_for_trading_termination(const Future* msg) {
  return *msg->oracle_spec_for_trading_termination_;
}
const ::vega::OracleSpecToFutureBinding&
Future::_Internal::oracle_spec_binding(const Future* msg) {
  return *msg->oracle_spec_binding_;
}
void Future::clear_oracle_spec_for_settlement_price() {
  if (GetArena() == nullptr && oracle_spec_for_settlement_price_ != nullptr) {
    delete oracle_spec_for_settlement_price_;
  }
  oracle_spec_for_settlement_price_ = nullptr;
}
void Future::clear_oracle_spec_for_trading_termination() {
  if (GetArena() == nullptr && oracle_spec_for_trading_termination_ != nullptr) {
    delete oracle_spec_for_trading_termination_;
  }
  oracle_spec_for_trading_termination_ = nullptr;
}
Future::Future(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Future)
}
Future::Future(const Future& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maturity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maturity().empty()) {
    maturity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maturity(),
      GetArena());
  }
  settlement_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settlement_asset().empty()) {
    settlement_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settlement_asset(),
      GetArena());
  }
  quote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quote_name().empty()) {
    quote_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quote_name(),
      GetArena());
  }
  if (from._internal_has_oracle_spec_for_settlement_price()) {
    oracle_spec_for_settlement_price_ = new ::oracles::v1::OracleSpec(*from.oracle_spec_for_settlement_price_);
  } else {
    oracle_spec_for_settlement_price_ = nullptr;
  }
  if (from._internal_has_oracle_spec_for_trading_termination()) {
    oracle_spec_for_trading_termination_ = new ::oracles::v1::OracleSpec(*from.oracle_spec_for_trading_termination_);
  } else {
    oracle_spec_for_trading_termination_ = nullptr;
  }
  if (from._internal_has_oracle_spec_binding()) {
    oracle_spec_binding_ = new ::vega::OracleSpecToFutureBinding(*from.oracle_spec_binding_);
  } else {
    oracle_spec_binding_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.Future)
}

void Future::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Future_markets_2eproto.base);
  maturity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settlement_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&oracle_spec_for_settlement_price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oracle_spec_binding_) -
      reinterpret_cast<char*>(&oracle_spec_for_settlement_price_)) + sizeof(oracle_spec_binding_));
}

Future::~Future() {
  // @@protoc_insertion_point(destructor:vega.Future)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Future::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  maturity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settlement_asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quote_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oracle_spec_for_settlement_price_;
  if (this != internal_default_instance()) delete oracle_spec_for_trading_termination_;
  if (this != internal_default_instance()) delete oracle_spec_binding_;
}

void Future::ArenaDtor(void* object) {
  Future* _this = reinterpret_cast< Future* >(object);
  (void)_this;
}
void Future::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Future::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Future& Future::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Future_markets_2eproto.base);
  return *internal_default_instance();
}


void Future::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Future)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maturity_.ClearToEmpty();
  settlement_asset_.ClearToEmpty();
  quote_name_.ClearToEmpty();
  if (GetArena() == nullptr && oracle_spec_for_settlement_price_ != nullptr) {
    delete oracle_spec_for_settlement_price_;
  }
  oracle_spec_for_settlement_price_ = nullptr;
  if (GetArena() == nullptr && oracle_spec_for_trading_termination_ != nullptr) {
    delete oracle_spec_for_trading_termination_;
  }
  oracle_spec_for_trading_termination_ = nullptr;
  if (GetArena() == nullptr && oracle_spec_binding_ != nullptr) {
    delete oracle_spec_binding_;
  }
  oracle_spec_binding_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Future::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string maturity = 1 [json_name = "maturity"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_maturity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Future.maturity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settlement_asset = 2 [json_name = "settlementAsset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_settlement_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Future.settlement_asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quote_name = 4 [json_name = "quoteName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_quote_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Future.quote_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .oracles.v1.OracleSpec oracle_spec_for_settlement_price = 5 [json_name = "oracleSpecForSettlementPrice"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec_for_settlement_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .oracles.v1.OracleSpec oracle_spec_for_trading_termination = 6 [json_name = "oracleSpecForTradingTermination"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec_for_trading_termination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.OracleSpecToFutureBinding oracle_spec_binding = 7 [json_name = "oracleSpecBinding"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_spec_binding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Future::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Future)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string maturity = 1 [json_name = "maturity"];
  if (this->maturity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maturity().data(), static_cast<int>(this->_internal_maturity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Future.maturity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_maturity(), target);
  }

  // string settlement_asset = 2 [json_name = "settlementAsset"];
  if (this->settlement_asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlement_asset().data(), static_cast<int>(this->_internal_settlement_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Future.settlement_asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_settlement_asset(), target);
  }

  // string quote_name = 4 [json_name = "quoteName"];
  if (this->quote_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_name().data(), static_cast<int>(this->_internal_quote_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Future.quote_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quote_name(), target);
  }

  // .oracles.v1.OracleSpec oracle_spec_for_settlement_price = 5 [json_name = "oracleSpecForSettlementPrice"];
  if (this->has_oracle_spec_for_settlement_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::oracle_spec_for_settlement_price(this), target, stream);
  }

  // .oracles.v1.OracleSpec oracle_spec_for_trading_termination = 6 [json_name = "oracleSpecForTradingTermination"];
  if (this->has_oracle_spec_for_trading_termination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::oracle_spec_for_trading_termination(this), target, stream);
  }

  // .vega.OracleSpecToFutureBinding oracle_spec_binding = 7 [json_name = "oracleSpecBinding"];
  if (this->has_oracle_spec_binding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::oracle_spec_binding(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Future)
  return target;
}

size_t Future::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Future)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string maturity = 1 [json_name = "maturity"];
  if (this->maturity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maturity());
  }

  // string settlement_asset = 2 [json_name = "settlementAsset"];
  if (this->settlement_asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlement_asset());
  }

  // string quote_name = 4 [json_name = "quoteName"];
  if (this->quote_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_name());
  }

  // .oracles.v1.OracleSpec oracle_spec_for_settlement_price = 5 [json_name = "oracleSpecForSettlementPrice"];
  if (this->has_oracle_spec_for_settlement_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oracle_spec_for_settlement_price_);
  }

  // .oracles.v1.OracleSpec oracle_spec_for_trading_termination = 6 [json_name = "oracleSpecForTradingTermination"];
  if (this->has_oracle_spec_for_trading_termination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oracle_spec_for_trading_termination_);
  }

  // .vega.OracleSpecToFutureBinding oracle_spec_binding = 7 [json_name = "oracleSpecBinding"];
  if (this->has_oracle_spec_binding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oracle_spec_binding_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Future::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Future)
  GOOGLE_DCHECK_NE(&from, this);
  const Future* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Future>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Future)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Future)
    MergeFrom(*source);
  }
}

void Future::MergeFrom(const Future& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Future)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maturity().size() > 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (from.settlement_asset().size() > 0) {
    _internal_set_settlement_asset(from._internal_settlement_asset());
  }
  if (from.quote_name().size() > 0) {
    _internal_set_quote_name(from._internal_quote_name());
  }
  if (from.has_oracle_spec_for_settlement_price()) {
    _internal_mutable_oracle_spec_for_settlement_price()->::oracles::v1::OracleSpec::MergeFrom(from._internal_oracle_spec_for_settlement_price());
  }
  if (from.has_oracle_spec_for_trading_termination()) {
    _internal_mutable_oracle_spec_for_trading_termination()->::oracles::v1::OracleSpec::MergeFrom(from._internal_oracle_spec_for_trading_termination());
  }
  if (from.has_oracle_spec_binding()) {
    _internal_mutable_oracle_spec_binding()->::vega::OracleSpecToFutureBinding::MergeFrom(from._internal_oracle_spec_binding());
  }
}

void Future::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Future)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Future::CopyFrom(const Future& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Future)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Future::IsInitialized() const {
  return true;
}

void Future::InternalSwap(Future* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  maturity_.Swap(&other->maturity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  settlement_asset_.Swap(&other->settlement_asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quote_name_.Swap(&other->quote_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Future, oracle_spec_binding_)
      + sizeof(Future::oracle_spec_binding_)
      - PROTOBUF_FIELD_OFFSET(Future, oracle_spec_for_settlement_price_)>(
          reinterpret_cast<char*>(&oracle_spec_for_settlement_price_),
          reinterpret_cast<char*>(&other->oracle_spec_for_settlement_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Future::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OracleSpecToFutureBinding::_Internal {
 public:
};

OracleSpecToFutureBinding::OracleSpecToFutureBinding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OracleSpecToFutureBinding)
}
OracleSpecToFutureBinding::OracleSpecToFutureBinding(const OracleSpecToFutureBinding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  settlement_price_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settlement_price_property().empty()) {
    settlement_price_property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settlement_price_property(),
      GetArena());
  }
  trading_termination_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trading_termination_property().empty()) {
    trading_termination_property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trading_termination_property(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.OracleSpecToFutureBinding)
}

void OracleSpecToFutureBinding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OracleSpecToFutureBinding_markets_2eproto.base);
  settlement_price_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_termination_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OracleSpecToFutureBinding::~OracleSpecToFutureBinding() {
  // @@protoc_insertion_point(destructor:vega.OracleSpecToFutureBinding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleSpecToFutureBinding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  settlement_price_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_termination_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OracleSpecToFutureBinding::ArenaDtor(void* object) {
  OracleSpecToFutureBinding* _this = reinterpret_cast< OracleSpecToFutureBinding* >(object);
  (void)_this;
}
void OracleSpecToFutureBinding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleSpecToFutureBinding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleSpecToFutureBinding& OracleSpecToFutureBinding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleSpecToFutureBinding_markets_2eproto.base);
  return *internal_default_instance();
}


void OracleSpecToFutureBinding::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OracleSpecToFutureBinding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settlement_price_property_.ClearToEmpty();
  trading_termination_property_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleSpecToFutureBinding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string settlement_price_property = 1 [json_name = "settlementPriceProperty"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_settlement_price_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OracleSpecToFutureBinding.settlement_price_property"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trading_termination_property = 2 [json_name = "tradingTerminationProperty"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_trading_termination_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OracleSpecToFutureBinding.trading_termination_property"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleSpecToFutureBinding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OracleSpecToFutureBinding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string settlement_price_property = 1 [json_name = "settlementPriceProperty"];
  if (this->settlement_price_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlement_price_property().data(), static_cast<int>(this->_internal_settlement_price_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OracleSpecToFutureBinding.settlement_price_property");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_settlement_price_property(), target);
  }

  // string trading_termination_property = 2 [json_name = "tradingTerminationProperty"];
  if (this->trading_termination_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_termination_property().data(), static_cast<int>(this->_internal_trading_termination_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OracleSpecToFutureBinding.trading_termination_property");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trading_termination_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OracleSpecToFutureBinding)
  return target;
}

size_t OracleSpecToFutureBinding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OracleSpecToFutureBinding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string settlement_price_property = 1 [json_name = "settlementPriceProperty"];
  if (this->settlement_price_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlement_price_property());
  }

  // string trading_termination_property = 2 [json_name = "tradingTerminationProperty"];
  if (this->trading_termination_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_termination_property());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleSpecToFutureBinding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OracleSpecToFutureBinding)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleSpecToFutureBinding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleSpecToFutureBinding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OracleSpecToFutureBinding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OracleSpecToFutureBinding)
    MergeFrom(*source);
  }
}

void OracleSpecToFutureBinding::MergeFrom(const OracleSpecToFutureBinding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OracleSpecToFutureBinding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.settlement_price_property().size() > 0) {
    _internal_set_settlement_price_property(from._internal_settlement_price_property());
  }
  if (from.trading_termination_property().size() > 0) {
    _internal_set_trading_termination_property(from._internal_trading_termination_property());
  }
}

void OracleSpecToFutureBinding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OracleSpecToFutureBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleSpecToFutureBinding::CopyFrom(const OracleSpecToFutureBinding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OracleSpecToFutureBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleSpecToFutureBinding::IsInitialized() const {
  return true;
}

void OracleSpecToFutureBinding::InternalSwap(OracleSpecToFutureBinding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settlement_price_property_.Swap(&other->settlement_price_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_termination_property_.Swap(&other->trading_termination_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleSpecToFutureBinding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstrumentMetadata::_Internal {
 public:
};

InstrumentMetadata::InstrumentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.InstrumentMetadata)
}
InstrumentMetadata::InstrumentMetadata(const InstrumentMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.InstrumentMetadata)
}

void InstrumentMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentMetadata_markets_2eproto.base);
}

InstrumentMetadata::~InstrumentMetadata() {
  // @@protoc_insertion_point(destructor:vega.InstrumentMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstrumentMetadata::ArenaDtor(void* object) {
  InstrumentMetadata* _this = reinterpret_cast< InstrumentMetadata* >(object);
  (void)_this;
}
void InstrumentMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentMetadata& InstrumentMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentMetadata_markets_2eproto.base);
  return *internal_default_instance();
}


void InstrumentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.InstrumentMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string tags = 1 [json_name = "tags"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.InstrumentMetadata.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.InstrumentMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tags = 1 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentMetadata.tags");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.InstrumentMetadata)
  return target;
}

size_t InstrumentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.InstrumentMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.InstrumentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.InstrumentMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.InstrumentMetadata)
    MergeFrom(*source);
  }
}

void InstrumentMetadata::MergeFrom(const InstrumentMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.InstrumentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void InstrumentMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.InstrumentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentMetadata::CopyFrom(const InstrumentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.InstrumentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentMetadata::IsInitialized() const {
  return true;
}

void InstrumentMetadata::InternalSwap(InstrumentMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Instrument::_Internal {
 public:
  static const ::vega::InstrumentMetadata& metadata(const Instrument* msg);
  static const ::vega::Future& future(const Instrument* msg);
};

const ::vega::InstrumentMetadata&
Instrument::_Internal::metadata(const Instrument* msg) {
  return *msg->metadata_;
}
const ::vega::Future&
Instrument::_Internal::future(const Instrument* msg) {
  return *msg->product_.future_;
}
void Instrument::set_allocated_future(::vega::Future* future) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_product();
  if (future) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(future);
    if (message_arena != submessage_arena) {
      future = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, future, submessage_arena);
    }
    set_has_future();
    product_.future_ = future;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Instrument.future)
}
Instrument::Instrument(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Instrument)
}
Instrument::Instrument(const Instrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::vega::InstrumentMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  clear_has_product();
  switch (from.product_case()) {
    case kFuture: {
      _internal_mutable_future()->::vega::Future::MergeFrom(from._internal_future());
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.Instrument)
}

void Instrument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Instrument_markets_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
  clear_has_product();
}

Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:vega.Instrument)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Instrument::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (has_product()) {
    clear_product();
  }
}

void Instrument::ArenaDtor(void* object) {
  Instrument* _this = reinterpret_cast< Instrument* >(object);
  (void)_this;
}
void Instrument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Instrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Instrument& Instrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Instrument_markets_2eproto.base);
  return *internal_default_instance();
}


void Instrument::clear_product() {
// @@protoc_insertion_point(one_of_clear_start:vega.Instrument)
  switch (product_case()) {
    case kFuture: {
      if (GetArena() == nullptr) {
        delete product_.future_;
      }
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PRODUCT_NOT_SET;
}


void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Instrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  code_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  clear_product();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Instrument.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2 [json_name = "code"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Instrument.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Instrument.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.InstrumentMetadata metadata = 4 [json_name = "metadata"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Future future = 100 [json_name = "future"];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_future(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Instrument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Instrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Instrument.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string code = 2 [json_name = "code"];
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Instrument.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string name = 3 [json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Instrument.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .vega.InstrumentMetadata metadata = 4 [json_name = "metadata"];
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata(this), target, stream);
  }

  // .vega.Future future = 100 [json_name = "future"];
  if (_internal_has_future()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::future(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Instrument)
  return target;
}

size_t Instrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Instrument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string code = 2 [json_name = "code"];
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string name = 3 [json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vega.InstrumentMetadata metadata = 4 [json_name = "metadata"];
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  switch (product_case()) {
    // .vega.Future future = 100 [json_name = "future"];
    case kFuture: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_.future_);
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Instrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  const Instrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Instrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Instrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Instrument)
    MergeFrom(*source);
  }
}

void Instrument::MergeFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::vega::InstrumentMetadata::MergeFrom(from._internal_metadata());
  }
  switch (from.product_case()) {
    case kFuture: {
      _internal_mutable_future()->::vega::Future::MergeFrom(from._internal_future());
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
}

void Instrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  return true;
}

void Instrument::InternalSwap(Instrument* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(metadata_, other->metadata_);
  swap(product_, other->product_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Instrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogNormalRiskModel::_Internal {
 public:
  static const ::vega::LogNormalModelParams& params(const LogNormalRiskModel* msg);
};

const ::vega::LogNormalModelParams&
LogNormalRiskModel::_Internal::params(const LogNormalRiskModel* msg) {
  return *msg->params_;
}
LogNormalRiskModel::LogNormalRiskModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LogNormalRiskModel)
}
LogNormalRiskModel::LogNormalRiskModel(const LogNormalRiskModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::vega::LogNormalModelParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  ::memcpy(&risk_aversion_parameter_, &from.risk_aversion_parameter_,
    static_cast<size_t>(reinterpret_cast<char*>(&tau_) -
    reinterpret_cast<char*>(&risk_aversion_parameter_)) + sizeof(tau_));
  // @@protoc_insertion_point(copy_constructor:vega.LogNormalRiskModel)
}

void LogNormalRiskModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogNormalRiskModel_markets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&params_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tau_) -
      reinterpret_cast<char*>(&params_)) + sizeof(tau_));
}

LogNormalRiskModel::~LogNormalRiskModel() {
  // @@protoc_insertion_point(destructor:vega.LogNormalRiskModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogNormalRiskModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void LogNormalRiskModel::ArenaDtor(void* object) {
  LogNormalRiskModel* _this = reinterpret_cast< LogNormalRiskModel* >(object);
  (void)_this;
}
void LogNormalRiskModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogNormalRiskModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogNormalRiskModel& LogNormalRiskModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogNormalRiskModel_markets_2eproto.base);
  return *internal_default_instance();
}


void LogNormalRiskModel::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LogNormalRiskModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  ::memset(&risk_aversion_parameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tau_) -
      reinterpret_cast<char*>(&risk_aversion_parameter_)) + sizeof(tau_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogNormalRiskModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double risk_aversion_parameter = 1 [json_name = "riskAversionParameter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          risk_aversion_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tau = 2 [json_name = "tau"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          tau_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .vega.LogNormalModelParams params = 3 [json_name = "params"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogNormalRiskModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LogNormalRiskModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double risk_aversion_parameter = 1 [json_name = "riskAversionParameter"];
  if (!(this->risk_aversion_parameter() <= 0 && this->risk_aversion_parameter() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_risk_aversion_parameter(), target);
  }

  // double tau = 2 [json_name = "tau"];
  if (!(this->tau() <= 0 && this->tau() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_tau(), target);
  }

  // .vega.LogNormalModelParams params = 3 [json_name = "params"];
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LogNormalRiskModel)
  return target;
}

size_t LogNormalRiskModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LogNormalRiskModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.LogNormalModelParams params = 3 [json_name = "params"];
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // double risk_aversion_parameter = 1 [json_name = "riskAversionParameter"];
  if (!(this->risk_aversion_parameter() <= 0 && this->risk_aversion_parameter() >= 0)) {
    total_size += 1 + 8;
  }

  // double tau = 2 [json_name = "tau"];
  if (!(this->tau() <= 0 && this->tau() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogNormalRiskModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LogNormalRiskModel)
  GOOGLE_DCHECK_NE(&from, this);
  const LogNormalRiskModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogNormalRiskModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LogNormalRiskModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LogNormalRiskModel)
    MergeFrom(*source);
  }
}

void LogNormalRiskModel::MergeFrom(const LogNormalRiskModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LogNormalRiskModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    _internal_mutable_params()->::vega::LogNormalModelParams::MergeFrom(from._internal_params());
  }
  if (!(from.risk_aversion_parameter() <= 0 && from.risk_aversion_parameter() >= 0)) {
    _internal_set_risk_aversion_parameter(from._internal_risk_aversion_parameter());
  }
  if (!(from.tau() <= 0 && from.tau() >= 0)) {
    _internal_set_tau(from._internal_tau());
  }
}

void LogNormalRiskModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LogNormalRiskModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogNormalRiskModel::CopyFrom(const LogNormalRiskModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LogNormalRiskModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogNormalRiskModel::IsInitialized() const {
  return true;
}

void LogNormalRiskModel::InternalSwap(LogNormalRiskModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogNormalRiskModel, tau_)
      + sizeof(LogNormalRiskModel::tau_)
      - PROTOBUF_FIELD_OFFSET(LogNormalRiskModel, params_)>(
          reinterpret_cast<char*>(&params_),
          reinterpret_cast<char*>(&other->params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogNormalRiskModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogNormalModelParams::_Internal {
 public:
};

LogNormalModelParams::LogNormalModelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LogNormalModelParams)
}
LogNormalModelParams::LogNormalModelParams(const LogNormalModelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:vega.LogNormalModelParams)
}

void LogNormalModelParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mu_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
}

LogNormalModelParams::~LogNormalModelParams() {
  // @@protoc_insertion_point(destructor:vega.LogNormalModelParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogNormalModelParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogNormalModelParams::ArenaDtor(void* object) {
  LogNormalModelParams* _this = reinterpret_cast< LogNormalModelParams* >(object);
  (void)_this;
}
void LogNormalModelParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogNormalModelParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogNormalModelParams& LogNormalModelParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogNormalModelParams_markets_2eproto.base);
  return *internal_default_instance();
}


void LogNormalModelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LogNormalModelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogNormalModelParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double mu = 1 [json_name = "mu"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double r = 2 [json_name = "r"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sigma = 3 [json_name = "sigma"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogNormalModelParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LogNormalModelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mu = 1 [json_name = "mu"];
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mu(), target);
  }

  // double r = 2 [json_name = "r"];
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_r(), target);
  }

  // double sigma = 3 [json_name = "sigma"];
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LogNormalModelParams)
  return target;
}

size_t LogNormalModelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LogNormalModelParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mu = 1 [json_name = "mu"];
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    total_size += 1 + 8;
  }

  // double r = 2 [json_name = "r"];
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 8;
  }

  // double sigma = 3 [json_name = "sigma"];
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogNormalModelParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LogNormalModelParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LogNormalModelParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogNormalModelParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LogNormalModelParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LogNormalModelParams)
    MergeFrom(*source);
  }
}

void LogNormalModelParams::MergeFrom(const LogNormalModelParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LogNormalModelParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mu() <= 0 && from.mu() >= 0)) {
    _internal_set_mu(from._internal_mu());
  }
  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    _internal_set_sigma(from._internal_sigma());
  }
}

void LogNormalModelParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LogNormalModelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogNormalModelParams::CopyFrom(const LogNormalModelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LogNormalModelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogNormalModelParams::IsInitialized() const {
  return true;
}

void LogNormalModelParams::InternalSwap(LogNormalModelParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogNormalModelParams, sigma_)
      + sizeof(LogNormalModelParams::sigma_)
      - PROTOBUF_FIELD_OFFSET(LogNormalModelParams, mu_)>(
          reinterpret_cast<char*>(&mu_),
          reinterpret_cast<char*>(&other->mu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogNormalModelParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimpleRiskModel::_Internal {
 public:
  static const ::vega::SimpleModelParams& params(const SimpleRiskModel* msg);
};

const ::vega::SimpleModelParams&
SimpleRiskModel::_Internal::params(const SimpleRiskModel* msg) {
  return *msg->params_;
}
SimpleRiskModel::SimpleRiskModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.SimpleRiskModel)
}
SimpleRiskModel::SimpleRiskModel(const SimpleRiskModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::vega::SimpleModelParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.SimpleRiskModel)
}

void SimpleRiskModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleRiskModel_markets_2eproto.base);
  params_ = nullptr;
}

SimpleRiskModel::~SimpleRiskModel() {
  // @@protoc_insertion_point(destructor:vega.SimpleRiskModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleRiskModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void SimpleRiskModel::ArenaDtor(void* object) {
  SimpleRiskModel* _this = reinterpret_cast< SimpleRiskModel* >(object);
  (void)_this;
}
void SimpleRiskModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleRiskModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleRiskModel& SimpleRiskModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleRiskModel_markets_2eproto.base);
  return *internal_default_instance();
}


void SimpleRiskModel::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.SimpleRiskModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleRiskModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.SimpleModelParams params = 1 [json_name = "params"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleRiskModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.SimpleRiskModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.SimpleModelParams params = 1 [json_name = "params"];
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.SimpleRiskModel)
  return target;
}

size_t SimpleRiskModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.SimpleRiskModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.SimpleModelParams params = 1 [json_name = "params"];
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleRiskModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.SimpleRiskModel)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleRiskModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleRiskModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.SimpleRiskModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.SimpleRiskModel)
    MergeFrom(*source);
  }
}

void SimpleRiskModel::MergeFrom(const SimpleRiskModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.SimpleRiskModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    _internal_mutable_params()->::vega::SimpleModelParams::MergeFrom(from._internal_params());
  }
}

void SimpleRiskModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.SimpleRiskModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleRiskModel::CopyFrom(const SimpleRiskModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.SimpleRiskModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRiskModel::IsInitialized() const {
  return true;
}

void SimpleRiskModel::InternalSwap(SimpleRiskModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleRiskModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimpleModelParams::_Internal {
 public:
};

SimpleModelParams::SimpleModelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.SimpleModelParams)
}
SimpleModelParams::SimpleModelParams(const SimpleModelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&factor_long_, &from.factor_long_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_of_trading_) -
    reinterpret_cast<char*>(&factor_long_)) + sizeof(probability_of_trading_));
  // @@protoc_insertion_point(copy_constructor:vega.SimpleModelParams)
}

void SimpleModelParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&factor_long_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&probability_of_trading_) -
      reinterpret_cast<char*>(&factor_long_)) + sizeof(probability_of_trading_));
}

SimpleModelParams::~SimpleModelParams() {
  // @@protoc_insertion_point(destructor:vega.SimpleModelParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleModelParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimpleModelParams::ArenaDtor(void* object) {
  SimpleModelParams* _this = reinterpret_cast< SimpleModelParams* >(object);
  (void)_this;
}
void SimpleModelParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleModelParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleModelParams& SimpleModelParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleModelParams_markets_2eproto.base);
  return *internal_default_instance();
}


void SimpleModelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.SimpleModelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&factor_long_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_of_trading_) -
      reinterpret_cast<char*>(&factor_long_)) + sizeof(probability_of_trading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleModelParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double factor_long = 1 [json_name = "factorLong"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          factor_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double factor_short = 2 [json_name = "factorShort"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          factor_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_move_up = 3 [json_name = "maxMoveUp", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_move_up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_move_down = 4 [json_name = "minMoveDown", (.validator.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          min_move_down_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double probability_of_trading = 5 [json_name = "probabilityOfTrading", (.validator.field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          probability_of_trading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleModelParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.SimpleModelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double factor_long = 1 [json_name = "factorLong"];
  if (!(this->factor_long() <= 0 && this->factor_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_factor_long(), target);
  }

  // double factor_short = 2 [json_name = "factorShort"];
  if (!(this->factor_short() <= 0 && this->factor_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_factor_short(), target);
  }

  // double max_move_up = 3 [json_name = "maxMoveUp", (.validator.field) = {
  if (!(this->max_move_up() <= 0 && this->max_move_up() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_move_up(), target);
  }

  // double min_move_down = 4 [json_name = "minMoveDown", (.validator.field) = {
  if (!(this->min_move_down() <= 0 && this->min_move_down() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_move_down(), target);
  }

  // double probability_of_trading = 5 [json_name = "probabilityOfTrading", (.validator.field) = {
  if (!(this->probability_of_trading() <= 0 && this->probability_of_trading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_probability_of_trading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.SimpleModelParams)
  return target;
}

size_t SimpleModelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.SimpleModelParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double factor_long = 1 [json_name = "factorLong"];
  if (!(this->factor_long() <= 0 && this->factor_long() >= 0)) {
    total_size += 1 + 8;
  }

  // double factor_short = 2 [json_name = "factorShort"];
  if (!(this->factor_short() <= 0 && this->factor_short() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_move_up = 3 [json_name = "maxMoveUp", (.validator.field) = {
  if (!(this->max_move_up() <= 0 && this->max_move_up() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_move_down = 4 [json_name = "minMoveDown", (.validator.field) = {
  if (!(this->min_move_down() <= 0 && this->min_move_down() >= 0)) {
    total_size += 1 + 8;
  }

  // double probability_of_trading = 5 [json_name = "probabilityOfTrading", (.validator.field) = {
  if (!(this->probability_of_trading() <= 0 && this->probability_of_trading() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleModelParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.SimpleModelParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleModelParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleModelParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.SimpleModelParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.SimpleModelParams)
    MergeFrom(*source);
  }
}

void SimpleModelParams::MergeFrom(const SimpleModelParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.SimpleModelParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.factor_long() <= 0 && from.factor_long() >= 0)) {
    _internal_set_factor_long(from._internal_factor_long());
  }
  if (!(from.factor_short() <= 0 && from.factor_short() >= 0)) {
    _internal_set_factor_short(from._internal_factor_short());
  }
  if (!(from.max_move_up() <= 0 && from.max_move_up() >= 0)) {
    _internal_set_max_move_up(from._internal_max_move_up());
  }
  if (!(from.min_move_down() <= 0 && from.min_move_down() >= 0)) {
    _internal_set_min_move_down(from._internal_min_move_down());
  }
  if (!(from.probability_of_trading() <= 0 && from.probability_of_trading() >= 0)) {
    _internal_set_probability_of_trading(from._internal_probability_of_trading());
  }
}

void SimpleModelParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.SimpleModelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleModelParams::CopyFrom(const SimpleModelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.SimpleModelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleModelParams::IsInitialized() const {
  return true;
}

void SimpleModelParams::InternalSwap(SimpleModelParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleModelParams, probability_of_trading_)
      + sizeof(SimpleModelParams::probability_of_trading_)
      - PROTOBUF_FIELD_OFFSET(SimpleModelParams, factor_long_)>(
          reinterpret_cast<char*>(&factor_long_),
          reinterpret_cast<char*>(&other->factor_long_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleModelParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalingFactors::_Internal {
 public:
};

ScalingFactors::ScalingFactors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ScalingFactors)
}
ScalingFactors::ScalingFactors(const ScalingFactors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&search_level_, &from.search_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&collateral_release_) -
    reinterpret_cast<char*>(&search_level_)) + sizeof(collateral_release_));
  // @@protoc_insertion_point(copy_constructor:vega.ScalingFactors)
}

void ScalingFactors::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&search_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&collateral_release_) -
      reinterpret_cast<char*>(&search_level_)) + sizeof(collateral_release_));
}

ScalingFactors::~ScalingFactors() {
  // @@protoc_insertion_point(destructor:vega.ScalingFactors)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalingFactors::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScalingFactors::ArenaDtor(void* object) {
  ScalingFactors* _this = reinterpret_cast< ScalingFactors* >(object);
  (void)_this;
}
void ScalingFactors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalingFactors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalingFactors& ScalingFactors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalingFactors_markets_2eproto.base);
  return *internal_default_instance();
}


void ScalingFactors::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ScalingFactors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&search_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collateral_release_) -
      reinterpret_cast<char*>(&search_level_)) + sizeof(collateral_release_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalingFactors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double search_level = 1 [json_name = "searchLevel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          search_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double initial_margin = 2 [json_name = "initialMargin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          initial_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double collateral_release = 3 [json_name = "collateralRelease"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          collateral_release_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalingFactors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ScalingFactors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double search_level = 1 [json_name = "searchLevel"];
  if (!(this->search_level() <= 0 && this->search_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_search_level(), target);
  }

  // double initial_margin = 2 [json_name = "initialMargin"];
  if (!(this->initial_margin() <= 0 && this->initial_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_initial_margin(), target);
  }

  // double collateral_release = 3 [json_name = "collateralRelease"];
  if (!(this->collateral_release() <= 0 && this->collateral_release() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_collateral_release(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ScalingFactors)
  return target;
}

size_t ScalingFactors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ScalingFactors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double search_level = 1 [json_name = "searchLevel"];
  if (!(this->search_level() <= 0 && this->search_level() >= 0)) {
    total_size += 1 + 8;
  }

  // double initial_margin = 2 [json_name = "initialMargin"];
  if (!(this->initial_margin() <= 0 && this->initial_margin() >= 0)) {
    total_size += 1 + 8;
  }

  // double collateral_release = 3 [json_name = "collateralRelease"];
  if (!(this->collateral_release() <= 0 && this->collateral_release() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalingFactors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ScalingFactors)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalingFactors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalingFactors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ScalingFactors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ScalingFactors)
    MergeFrom(*source);
  }
}

void ScalingFactors::MergeFrom(const ScalingFactors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ScalingFactors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.search_level() <= 0 && from.search_level() >= 0)) {
    _internal_set_search_level(from._internal_search_level());
  }
  if (!(from.initial_margin() <= 0 && from.initial_margin() >= 0)) {
    _internal_set_initial_margin(from._internal_initial_margin());
  }
  if (!(from.collateral_release() <= 0 && from.collateral_release() >= 0)) {
    _internal_set_collateral_release(from._internal_collateral_release());
  }
}

void ScalingFactors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ScalingFactors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalingFactors::CopyFrom(const ScalingFactors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ScalingFactors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalingFactors::IsInitialized() const {
  return true;
}

void ScalingFactors::InternalSwap(ScalingFactors* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalingFactors, collateral_release_)
      + sizeof(ScalingFactors::collateral_release_)
      - PROTOBUF_FIELD_OFFSET(ScalingFactors, search_level_)>(
          reinterpret_cast<char*>(&search_level_),
          reinterpret_cast<char*>(&other->search_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalingFactors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginCalculator::_Internal {
 public:
  static const ::vega::ScalingFactors& scaling_factors(const MarginCalculator* msg);
};

const ::vega::ScalingFactors&
MarginCalculator::_Internal::scaling_factors(const MarginCalculator* msg) {
  return *msg->scaling_factors_;
}
MarginCalculator::MarginCalculator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarginCalculator)
}
MarginCalculator::MarginCalculator(const MarginCalculator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scaling_factors()) {
    scaling_factors_ = new ::vega::ScalingFactors(*from.scaling_factors_);
  } else {
    scaling_factors_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.MarginCalculator)
}

void MarginCalculator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginCalculator_markets_2eproto.base);
  scaling_factors_ = nullptr;
}

MarginCalculator::~MarginCalculator() {
  // @@protoc_insertion_point(destructor:vega.MarginCalculator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginCalculator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scaling_factors_;
}

void MarginCalculator::ArenaDtor(void* object) {
  MarginCalculator* _this = reinterpret_cast< MarginCalculator* >(object);
  (void)_this;
}
void MarginCalculator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginCalculator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginCalculator& MarginCalculator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginCalculator_markets_2eproto.base);
  return *internal_default_instance();
}


void MarginCalculator::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarginCalculator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scaling_factors_ != nullptr) {
    delete scaling_factors_;
  }
  scaling_factors_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginCalculator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.ScalingFactors scaling_factors = 1 [json_name = "scalingFactors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling_factors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginCalculator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarginCalculator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.ScalingFactors scaling_factors = 1 [json_name = "scalingFactors"];
  if (this->has_scaling_factors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scaling_factors(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarginCalculator)
  return target;
}

size_t MarginCalculator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarginCalculator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.ScalingFactors scaling_factors = 1 [json_name = "scalingFactors"];
  if (this->has_scaling_factors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_factors_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginCalculator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarginCalculator)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginCalculator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginCalculator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarginCalculator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarginCalculator)
    MergeFrom(*source);
  }
}

void MarginCalculator::MergeFrom(const MarginCalculator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarginCalculator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scaling_factors()) {
    _internal_mutable_scaling_factors()->::vega::ScalingFactors::MergeFrom(from._internal_scaling_factors());
  }
}

void MarginCalculator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarginCalculator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginCalculator::CopyFrom(const MarginCalculator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarginCalculator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginCalculator::IsInitialized() const {
  return true;
}

void MarginCalculator::InternalSwap(MarginCalculator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scaling_factors_, other->scaling_factors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginCalculator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradableInstrument::_Internal {
 public:
  static const ::vega::Instrument& instrument(const TradableInstrument* msg);
  static const ::vega::MarginCalculator& margin_calculator(const TradableInstrument* msg);
  static const ::vega::LogNormalRiskModel& log_normal_risk_model(const TradableInstrument* msg);
  static const ::vega::SimpleRiskModel& simple_risk_model(const TradableInstrument* msg);
};

const ::vega::Instrument&
TradableInstrument::_Internal::instrument(const TradableInstrument* msg) {
  return *msg->instrument_;
}
const ::vega::MarginCalculator&
TradableInstrument::_Internal::margin_calculator(const TradableInstrument* msg) {
  return *msg->margin_calculator_;
}
const ::vega::LogNormalRiskModel&
TradableInstrument::_Internal::log_normal_risk_model(const TradableInstrument* msg) {
  return *msg->risk_model_.log_normal_risk_model_;
}
const ::vega::SimpleRiskModel&
TradableInstrument::_Internal::simple_risk_model(const TradableInstrument* msg) {
  return *msg->risk_model_.simple_risk_model_;
}
void TradableInstrument::set_allocated_log_normal_risk_model(::vega::LogNormalRiskModel* log_normal_risk_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_risk_model();
  if (log_normal_risk_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_normal_risk_model);
    if (message_arena != submessage_arena) {
      log_normal_risk_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_normal_risk_model, submessage_arena);
    }
    set_has_log_normal_risk_model();
    risk_model_.log_normal_risk_model_ = log_normal_risk_model;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TradableInstrument.log_normal_risk_model)
}
void TradableInstrument::set_allocated_simple_risk_model(::vega::SimpleRiskModel* simple_risk_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_risk_model();
  if (simple_risk_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(simple_risk_model);
    if (message_arena != submessage_arena) {
      simple_risk_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_risk_model, submessage_arena);
    }
    set_has_simple_risk_model();
    risk_model_.simple_risk_model_ = simple_risk_model;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TradableInstrument.simple_risk_model)
}
TradableInstrument::TradableInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TradableInstrument)
}
TradableInstrument::TradableInstrument(const TradableInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    instrument_ = new ::vega::Instrument(*from.instrument_);
  } else {
    instrument_ = nullptr;
  }
  if (from._internal_has_margin_calculator()) {
    margin_calculator_ = new ::vega::MarginCalculator(*from.margin_calculator_);
  } else {
    margin_calculator_ = nullptr;
  }
  clear_has_risk_model();
  switch (from.risk_model_case()) {
    case kLogNormalRiskModel: {
      _internal_mutable_log_normal_risk_model()->::vega::LogNormalRiskModel::MergeFrom(from._internal_log_normal_risk_model());
      break;
    }
    case kSimpleRiskModel: {
      _internal_mutable_simple_risk_model()->::vega::SimpleRiskModel::MergeFrom(from._internal_simple_risk_model());
      break;
    }
    case RISK_MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.TradableInstrument)
}

void TradableInstrument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradableInstrument_markets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&instrument_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&margin_calculator_) -
      reinterpret_cast<char*>(&instrument_)) + sizeof(margin_calculator_));
  clear_has_risk_model();
}

TradableInstrument::~TradableInstrument() {
  // @@protoc_insertion_point(destructor:vega.TradableInstrument)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradableInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete instrument_;
  if (this != internal_default_instance()) delete margin_calculator_;
  if (has_risk_model()) {
    clear_risk_model();
  }
}

void TradableInstrument::ArenaDtor(void* object) {
  TradableInstrument* _this = reinterpret_cast< TradableInstrument* >(object);
  (void)_this;
}
void TradableInstrument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradableInstrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradableInstrument& TradableInstrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradableInstrument_markets_2eproto.base);
  return *internal_default_instance();
}


void TradableInstrument::clear_risk_model() {
// @@protoc_insertion_point(one_of_clear_start:vega.TradableInstrument)
  switch (risk_model_case()) {
    case kLogNormalRiskModel: {
      if (GetArena() == nullptr) {
        delete risk_model_.log_normal_risk_model_;
      }
      break;
    }
    case kSimpleRiskModel: {
      if (GetArena() == nullptr) {
        delete risk_model_.simple_risk_model_;
      }
      break;
    }
    case RISK_MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RISK_MODEL_NOT_SET;
}


void TradableInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TradableInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && instrument_ != nullptr) {
    delete instrument_;
  }
  instrument_ = nullptr;
  if (GetArena() == nullptr && margin_calculator_ != nullptr) {
    delete margin_calculator_;
  }
  margin_calculator_ = nullptr;
  clear_risk_model();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradableInstrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Instrument instrument = 1 [json_name = "instrument"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.MarginCalculator margin_calculator = 2 [json_name = "marginCalculator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin_calculator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LogNormalRiskModel log_normal_risk_model = 100 [json_name = "logNormalRiskModel"];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_normal_risk_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.SimpleRiskModel simple_risk_model = 101 [json_name = "simpleRiskModel"];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_risk_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradableInstrument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TradableInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Instrument instrument = 1 [json_name = "instrument"];
  if (this->has_instrument()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instrument(this), target, stream);
  }

  // .vega.MarginCalculator margin_calculator = 2 [json_name = "marginCalculator"];
  if (this->has_margin_calculator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::margin_calculator(this), target, stream);
  }

  // .vega.LogNormalRiskModel log_normal_risk_model = 100 [json_name = "logNormalRiskModel"];
  if (_internal_has_log_normal_risk_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::log_normal_risk_model(this), target, stream);
  }

  // .vega.SimpleRiskModel simple_risk_model = 101 [json_name = "simpleRiskModel"];
  if (_internal_has_simple_risk_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::simple_risk_model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TradableInstrument)
  return target;
}

size_t TradableInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TradableInstrument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Instrument instrument = 1 [json_name = "instrument"];
  if (this->has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrument_);
  }

  // .vega.MarginCalculator margin_calculator = 2 [json_name = "marginCalculator"];
  if (this->has_margin_calculator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *margin_calculator_);
  }

  switch (risk_model_case()) {
    // .vega.LogNormalRiskModel log_normal_risk_model = 100 [json_name = "logNormalRiskModel"];
    case kLogNormalRiskModel: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *risk_model_.log_normal_risk_model_);
      break;
    }
    // .vega.SimpleRiskModel simple_risk_model = 101 [json_name = "simpleRiskModel"];
    case kSimpleRiskModel: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *risk_model_.simple_risk_model_);
      break;
    }
    case RISK_MODEL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradableInstrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TradableInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  const TradableInstrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradableInstrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TradableInstrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TradableInstrument)
    MergeFrom(*source);
  }
}

void TradableInstrument::MergeFrom(const TradableInstrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TradableInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instrument()) {
    _internal_mutable_instrument()->::vega::Instrument::MergeFrom(from._internal_instrument());
  }
  if (from.has_margin_calculator()) {
    _internal_mutable_margin_calculator()->::vega::MarginCalculator::MergeFrom(from._internal_margin_calculator());
  }
  switch (from.risk_model_case()) {
    case kLogNormalRiskModel: {
      _internal_mutable_log_normal_risk_model()->::vega::LogNormalRiskModel::MergeFrom(from._internal_log_normal_risk_model());
      break;
    }
    case kSimpleRiskModel: {
      _internal_mutable_simple_risk_model()->::vega::SimpleRiskModel::MergeFrom(from._internal_simple_risk_model());
      break;
    }
    case RISK_MODEL_NOT_SET: {
      break;
    }
  }
}

void TradableInstrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TradableInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradableInstrument::CopyFrom(const TradableInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TradableInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradableInstrument::IsInitialized() const {
  return true;
}

void TradableInstrument::InternalSwap(TradableInstrument* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradableInstrument, margin_calculator_)
      + sizeof(TradableInstrument::margin_calculator_)
      - PROTOBUF_FIELD_OFFSET(TradableInstrument, instrument_)>(
          reinterpret_cast<char*>(&instrument_),
          reinterpret_cast<char*>(&other->instrument_));
  swap(risk_model_, other->risk_model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradableInstrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeeFactors::_Internal {
 public:
};

FeeFactors::FeeFactors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.FeeFactors)
}
FeeFactors::FeeFactors(const FeeFactors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maker_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maker_fee().empty()) {
    maker_fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maker_fee(),
      GetArena());
  }
  infrastructure_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_infrastructure_fee().empty()) {
    infrastructure_fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_infrastructure_fee(),
      GetArena());
  }
  liquidity_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_liquidity_fee().empty()) {
    liquidity_fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_liquidity_fee(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.FeeFactors)
}

void FeeFactors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeFactors_markets_2eproto.base);
  maker_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  infrastructure_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidity_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FeeFactors::~FeeFactors() {
  // @@protoc_insertion_point(destructor:vega.FeeFactors)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeeFactors::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  maker_fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  infrastructure_fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidity_fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeeFactors::ArenaDtor(void* object) {
  FeeFactors* _this = reinterpret_cast< FeeFactors* >(object);
  (void)_this;
}
void FeeFactors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeeFactors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeFactors& FeeFactors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeFactors_markets_2eproto.base);
  return *internal_default_instance();
}


void FeeFactors::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.FeeFactors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maker_fee_.ClearToEmpty();
  infrastructure_fee_.ClearToEmpty();
  liquidity_fee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeFactors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string maker_fee = 1 [json_name = "makerFee"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_maker_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FeeFactors.maker_fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string infrastructure_fee = 2 [json_name = "infrastructureFee"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_infrastructure_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FeeFactors.infrastructure_fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string liquidity_fee = 3 [json_name = "liquidityFee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_liquidity_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FeeFactors.liquidity_fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeFactors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.FeeFactors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string maker_fee = 1 [json_name = "makerFee"];
  if (this->maker_fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maker_fee().data(), static_cast<int>(this->_internal_maker_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactors.maker_fee");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_maker_fee(), target);
  }

  // string infrastructure_fee = 2 [json_name = "infrastructureFee"];
  if (this->infrastructure_fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_infrastructure_fee().data(), static_cast<int>(this->_internal_infrastructure_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactors.infrastructure_fee");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_infrastructure_fee(), target);
  }

  // string liquidity_fee = 3 [json_name = "liquidityFee"];
  if (this->liquidity_fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liquidity_fee().data(), static_cast<int>(this->_internal_liquidity_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactors.liquidity_fee");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_liquidity_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.FeeFactors)
  return target;
}

size_t FeeFactors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.FeeFactors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string maker_fee = 1 [json_name = "makerFee"];
  if (this->maker_fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maker_fee());
  }

  // string infrastructure_fee = 2 [json_name = "infrastructureFee"];
  if (this->infrastructure_fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_infrastructure_fee());
  }

  // string liquidity_fee = 3 [json_name = "liquidityFee"];
  if (this->liquidity_fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_liquidity_fee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeFactors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.FeeFactors)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeFactors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeFactors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.FeeFactors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.FeeFactors)
    MergeFrom(*source);
  }
}

void FeeFactors::MergeFrom(const FeeFactors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.FeeFactors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maker_fee().size() > 0) {
    _internal_set_maker_fee(from._internal_maker_fee());
  }
  if (from.infrastructure_fee().size() > 0) {
    _internal_set_infrastructure_fee(from._internal_infrastructure_fee());
  }
  if (from.liquidity_fee().size() > 0) {
    _internal_set_liquidity_fee(from._internal_liquidity_fee());
  }
}

void FeeFactors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.FeeFactors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeFactors::CopyFrom(const FeeFactors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.FeeFactors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeFactors::IsInitialized() const {
  return true;
}

void FeeFactors::InternalSwap(FeeFactors* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  maker_fee_.Swap(&other->maker_fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  infrastructure_fee_.Swap(&other->infrastructure_fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  liquidity_fee_.Swap(&other->liquidity_fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeFactors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fees::_Internal {
 public:
  static const ::vega::FeeFactors& factors(const Fees* msg);
};

const ::vega::FeeFactors&
Fees::_Internal::factors(const Fees* msg) {
  return *msg->factors_;
}
Fees::Fees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Fees)
}
Fees::Fees(const Fees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_factors()) {
    factors_ = new ::vega::FeeFactors(*from.factors_);
  } else {
    factors_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.Fees)
}

void Fees::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fees_markets_2eproto.base);
  factors_ = nullptr;
}

Fees::~Fees() {
  // @@protoc_insertion_point(destructor:vega.Fees)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fees::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete factors_;
}

void Fees::ArenaDtor(void* object) {
  Fees* _this = reinterpret_cast< Fees* >(object);
  (void)_this;
}
void Fees::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fees& Fees::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fees_markets_2eproto.base);
  return *internal_default_instance();
}


void Fees::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Fees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && factors_ != nullptr) {
    delete factors_;
  }
  factors_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fees::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.FeeFactors factors = 1 [json_name = "factors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_factors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fees::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Fees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.FeeFactors factors = 1 [json_name = "factors"];
  if (this->has_factors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::factors(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Fees)
  return target;
}

size_t Fees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Fees)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.FeeFactors factors = 1 [json_name = "factors"];
  if (this->has_factors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *factors_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fees::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Fees)
  GOOGLE_DCHECK_NE(&from, this);
  const Fees* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fees>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Fees)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Fees)
    MergeFrom(*source);
  }
}

void Fees::MergeFrom(const Fees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Fees)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_factors()) {
    _internal_mutable_factors()->::vega::FeeFactors::MergeFrom(from._internal_factors());
  }
}

void Fees::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Fees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fees::CopyFrom(const Fees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Fees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fees::IsInitialized() const {
  return true;
}

void Fees::InternalSwap(Fees* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(factors_, other->factors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fees::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PriceMonitoringTrigger::_Internal {
 public:
};

PriceMonitoringTrigger::PriceMonitoringTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PriceMonitoringTrigger)
}
PriceMonitoringTrigger::PriceMonitoringTrigger(const PriceMonitoringTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&horizon_, &from.horizon_,
    static_cast<size_t>(reinterpret_cast<char*>(&auction_extension_) -
    reinterpret_cast<char*>(&horizon_)) + sizeof(auction_extension_));
  // @@protoc_insertion_point(copy_constructor:vega.PriceMonitoringTrigger)
}

void PriceMonitoringTrigger::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&horizon_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auction_extension_) -
      reinterpret_cast<char*>(&horizon_)) + sizeof(auction_extension_));
}

PriceMonitoringTrigger::~PriceMonitoringTrigger() {
  // @@protoc_insertion_point(destructor:vega.PriceMonitoringTrigger)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceMonitoringTrigger::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PriceMonitoringTrigger::ArenaDtor(void* object) {
  PriceMonitoringTrigger* _this = reinterpret_cast< PriceMonitoringTrigger* >(object);
  (void)_this;
}
void PriceMonitoringTrigger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceMonitoringTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceMonitoringTrigger& PriceMonitoringTrigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceMonitoringTrigger_markets_2eproto.base);
  return *internal_default_instance();
}


void PriceMonitoringTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceMonitoringTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&horizon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auction_extension_) -
      reinterpret_cast<char*>(&horizon_)) + sizeof(auction_extension_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceMonitoringTrigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 horizon = 1 [json_name = "horizon", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double probability = 2 [json_name = "probability", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 auction_extension = 3 [json_name = "auctionExtension", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          auction_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceMonitoringTrigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceMonitoringTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 horizon = 1 [json_name = "horizon", (.validator.field) = {
  if (this->horizon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_horizon(), target);
  }

  // double probability = 2 [json_name = "probability", (.validator.field) = {
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_probability(), target);
  }

  // int64 auction_extension = 3 [json_name = "auctionExtension", (.validator.field) = {
  if (this->auction_extension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_auction_extension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceMonitoringTrigger)
  return target;
}

size_t PriceMonitoringTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceMonitoringTrigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 horizon = 1 [json_name = "horizon", (.validator.field) = {
  if (this->horizon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_horizon());
  }

  // double probability = 2 [json_name = "probability", (.validator.field) = {
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 auction_extension = 3 [json_name = "auctionExtension", (.validator.field) = {
  if (this->auction_extension() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auction_extension());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceMonitoringTrigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceMonitoringTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceMonitoringTrigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceMonitoringTrigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceMonitoringTrigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceMonitoringTrigger)
    MergeFrom(*source);
  }
}

void PriceMonitoringTrigger::MergeFrom(const PriceMonitoringTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceMonitoringTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.horizon() != 0) {
    _internal_set_horizon(from._internal_horizon());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    _internal_set_probability(from._internal_probability());
  }
  if (from.auction_extension() != 0) {
    _internal_set_auction_extension(from._internal_auction_extension());
  }
}

void PriceMonitoringTrigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceMonitoringTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceMonitoringTrigger::CopyFrom(const PriceMonitoringTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceMonitoringTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceMonitoringTrigger::IsInitialized() const {
  return true;
}

void PriceMonitoringTrigger::InternalSwap(PriceMonitoringTrigger* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceMonitoringTrigger, auction_extension_)
      + sizeof(PriceMonitoringTrigger::auction_extension_)
      - PROTOBUF_FIELD_OFFSET(PriceMonitoringTrigger, horizon_)>(
          reinterpret_cast<char*>(&horizon_),
          reinterpret_cast<char*>(&other->horizon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceMonitoringTrigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PriceMonitoringParameters::_Internal {
 public:
};

PriceMonitoringParameters::PriceMonitoringParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  triggers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PriceMonitoringParameters)
}
PriceMonitoringParameters::PriceMonitoringParameters(const PriceMonitoringParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      triggers_(from.triggers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.PriceMonitoringParameters)
}

void PriceMonitoringParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceMonitoringParameters_markets_2eproto.base);
}

PriceMonitoringParameters::~PriceMonitoringParameters() {
  // @@protoc_insertion_point(destructor:vega.PriceMonitoringParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceMonitoringParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PriceMonitoringParameters::ArenaDtor(void* object) {
  PriceMonitoringParameters* _this = reinterpret_cast< PriceMonitoringParameters* >(object);
  (void)_this;
}
void PriceMonitoringParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceMonitoringParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceMonitoringParameters& PriceMonitoringParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceMonitoringParameters_markets_2eproto.base);
  return *internal_default_instance();
}


void PriceMonitoringParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceMonitoringParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triggers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceMonitoringParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.PriceMonitoringTrigger triggers = 1 [json_name = "triggers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceMonitoringParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceMonitoringParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.PriceMonitoringTrigger triggers = 1 [json_name = "triggers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_triggers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_triggers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceMonitoringParameters)
  return target;
}

size_t PriceMonitoringParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceMonitoringParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceMonitoringTrigger triggers = 1 [json_name = "triggers"];
  total_size += 1UL * this->_internal_triggers_size();
  for (const auto& msg : this->triggers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceMonitoringParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceMonitoringParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceMonitoringParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceMonitoringParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceMonitoringParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceMonitoringParameters)
    MergeFrom(*source);
  }
}

void PriceMonitoringParameters::MergeFrom(const PriceMonitoringParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceMonitoringParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triggers_.MergeFrom(from.triggers_);
}

void PriceMonitoringParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceMonitoringParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceMonitoringParameters::CopyFrom(const PriceMonitoringParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceMonitoringParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceMonitoringParameters::IsInitialized() const {
  return true;
}

void PriceMonitoringParameters::InternalSwap(PriceMonitoringParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  triggers_.InternalSwap(&other->triggers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceMonitoringParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PriceMonitoringSettings::_Internal {
 public:
  static const ::vega::PriceMonitoringParameters& parameters(const PriceMonitoringSettings* msg);
};

const ::vega::PriceMonitoringParameters&
PriceMonitoringSettings::_Internal::parameters(const PriceMonitoringSettings* msg) {
  return *msg->parameters_;
}
PriceMonitoringSettings::PriceMonitoringSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PriceMonitoringSettings)
}
PriceMonitoringSettings::PriceMonitoringSettings(const PriceMonitoringSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parameters()) {
    parameters_ = new ::vega::PriceMonitoringParameters(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  update_frequency_ = from.update_frequency_;
  // @@protoc_insertion_point(copy_constructor:vega.PriceMonitoringSettings)
}

void PriceMonitoringSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceMonitoringSettings_markets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parameters_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&update_frequency_) -
      reinterpret_cast<char*>(&parameters_)) + sizeof(update_frequency_));
}

PriceMonitoringSettings::~PriceMonitoringSettings() {
  // @@protoc_insertion_point(destructor:vega.PriceMonitoringSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceMonitoringSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete parameters_;
}

void PriceMonitoringSettings::ArenaDtor(void* object) {
  PriceMonitoringSettings* _this = reinterpret_cast< PriceMonitoringSettings* >(object);
  (void)_this;
}
void PriceMonitoringSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceMonitoringSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceMonitoringSettings& PriceMonitoringSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceMonitoringSettings_markets_2eproto.base);
  return *internal_default_instance();
}


void PriceMonitoringSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceMonitoringSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  update_frequency_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceMonitoringSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.PriceMonitoringParameters parameters = 1 [json_name = "parameters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 update_frequency = 2 [json_name = "updateFrequency"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceMonitoringSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceMonitoringSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PriceMonitoringParameters parameters = 1 [json_name = "parameters"];
  if (this->has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parameters(this), target, stream);
  }

  // int64 update_frequency = 2 [json_name = "updateFrequency"];
  if (this->update_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_update_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceMonitoringSettings)
  return target;
}

size_t PriceMonitoringSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceMonitoringSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PriceMonitoringParameters parameters = 1 [json_name = "parameters"];
  if (this->has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // int64 update_frequency = 2 [json_name = "updateFrequency"];
  if (this->update_frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_update_frequency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceMonitoringSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceMonitoringSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceMonitoringSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceMonitoringSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceMonitoringSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceMonitoringSettings)
    MergeFrom(*source);
  }
}

void PriceMonitoringSettings::MergeFrom(const PriceMonitoringSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceMonitoringSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_parameters()) {
    _internal_mutable_parameters()->::vega::PriceMonitoringParameters::MergeFrom(from._internal_parameters());
  }
  if (from.update_frequency() != 0) {
    _internal_set_update_frequency(from._internal_update_frequency());
  }
}

void PriceMonitoringSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceMonitoringSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceMonitoringSettings::CopyFrom(const PriceMonitoringSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceMonitoringSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceMonitoringSettings::IsInitialized() const {
  return true;
}

void PriceMonitoringSettings::InternalSwap(PriceMonitoringSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceMonitoringSettings, update_frequency_)
      + sizeof(PriceMonitoringSettings::update_frequency_)
      - PROTOBUF_FIELD_OFFSET(PriceMonitoringSettings, parameters_)>(
          reinterpret_cast<char*>(&parameters_),
          reinterpret_cast<char*>(&other->parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceMonitoringSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityMonitoringParameters::_Internal {
 public:
  static const ::vega::TargetStakeParameters& target_stake_parameters(const LiquidityMonitoringParameters* msg);
};

const ::vega::TargetStakeParameters&
LiquidityMonitoringParameters::_Internal::target_stake_parameters(const LiquidityMonitoringParameters* msg) {
  return *msg->target_stake_parameters_;
}
LiquidityMonitoringParameters::LiquidityMonitoringParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityMonitoringParameters)
}
LiquidityMonitoringParameters::LiquidityMonitoringParameters(const LiquidityMonitoringParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_stake_parameters()) {
    target_stake_parameters_ = new ::vega::TargetStakeParameters(*from.target_stake_parameters_);
  } else {
    target_stake_parameters_ = nullptr;
  }
  ::memcpy(&triggering_ratio_, &from.triggering_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&auction_extension_) -
    reinterpret_cast<char*>(&triggering_ratio_)) + sizeof(auction_extension_));
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityMonitoringParameters)
}

void LiquidityMonitoringParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityMonitoringParameters_markets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&target_stake_parameters_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auction_extension_) -
      reinterpret_cast<char*>(&target_stake_parameters_)) + sizeof(auction_extension_));
}

LiquidityMonitoringParameters::~LiquidityMonitoringParameters() {
  // @@protoc_insertion_point(destructor:vega.LiquidityMonitoringParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityMonitoringParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete target_stake_parameters_;
}

void LiquidityMonitoringParameters::ArenaDtor(void* object) {
  LiquidityMonitoringParameters* _this = reinterpret_cast< LiquidityMonitoringParameters* >(object);
  (void)_this;
}
void LiquidityMonitoringParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityMonitoringParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityMonitoringParameters& LiquidityMonitoringParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityMonitoringParameters_markets_2eproto.base);
  return *internal_default_instance();
}


void LiquidityMonitoringParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityMonitoringParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && target_stake_parameters_ != nullptr) {
    delete target_stake_parameters_;
  }
  target_stake_parameters_ = nullptr;
  ::memset(&triggering_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auction_extension_) -
      reinterpret_cast<char*>(&triggering_ratio_)) + sizeof(auction_extension_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityMonitoringParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.TargetStakeParameters target_stake_parameters = 1 [json_name = "targetStakeParameters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_stake_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double triggering_ratio = 2 [json_name = "triggeringRatio", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          triggering_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 auction_extension = 3 [json_name = "auctionExtension"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          auction_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityMonitoringParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityMonitoringParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.TargetStakeParameters target_stake_parameters = 1 [json_name = "targetStakeParameters"];
  if (this->has_target_stake_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_stake_parameters(this), target, stream);
  }

  // double triggering_ratio = 2 [json_name = "triggeringRatio", (.validator.field) = {
  if (!(this->triggering_ratio() <= 0 && this->triggering_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_triggering_ratio(), target);
  }

  // int64 auction_extension = 3 [json_name = "auctionExtension"];
  if (this->auction_extension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_auction_extension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityMonitoringParameters)
  return target;
}

size_t LiquidityMonitoringParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityMonitoringParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.TargetStakeParameters target_stake_parameters = 1 [json_name = "targetStakeParameters"];
  if (this->has_target_stake_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_stake_parameters_);
  }

  // double triggering_ratio = 2 [json_name = "triggeringRatio", (.validator.field) = {
  if (!(this->triggering_ratio() <= 0 && this->triggering_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 auction_extension = 3 [json_name = "auctionExtension"];
  if (this->auction_extension() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auction_extension());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityMonitoringParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityMonitoringParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityMonitoringParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityMonitoringParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityMonitoringParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityMonitoringParameters)
    MergeFrom(*source);
  }
}

void LiquidityMonitoringParameters::MergeFrom(const LiquidityMonitoringParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityMonitoringParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_stake_parameters()) {
    _internal_mutable_target_stake_parameters()->::vega::TargetStakeParameters::MergeFrom(from._internal_target_stake_parameters());
  }
  if (!(from.triggering_ratio() <= 0 && from.triggering_ratio() >= 0)) {
    _internal_set_triggering_ratio(from._internal_triggering_ratio());
  }
  if (from.auction_extension() != 0) {
    _internal_set_auction_extension(from._internal_auction_extension());
  }
}

void LiquidityMonitoringParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityMonitoringParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityMonitoringParameters::CopyFrom(const LiquidityMonitoringParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityMonitoringParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityMonitoringParameters::IsInitialized() const {
  return true;
}

void LiquidityMonitoringParameters::InternalSwap(LiquidityMonitoringParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidityMonitoringParameters, auction_extension_)
      + sizeof(LiquidityMonitoringParameters::auction_extension_)
      - PROTOBUF_FIELD_OFFSET(LiquidityMonitoringParameters, target_stake_parameters_)>(
          reinterpret_cast<char*>(&target_stake_parameters_),
          reinterpret_cast<char*>(&other->target_stake_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityMonitoringParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TargetStakeParameters::_Internal {
 public:
};

TargetStakeParameters::TargetStakeParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TargetStakeParameters)
}
TargetStakeParameters::TargetStakeParameters(const TargetStakeParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_window_, &from.time_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&scaling_factor_) -
    reinterpret_cast<char*>(&time_window_)) + sizeof(scaling_factor_));
  // @@protoc_insertion_point(copy_constructor:vega.TargetStakeParameters)
}

void TargetStakeParameters::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_window_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scaling_factor_) -
      reinterpret_cast<char*>(&time_window_)) + sizeof(scaling_factor_));
}

TargetStakeParameters::~TargetStakeParameters() {
  // @@protoc_insertion_point(destructor:vega.TargetStakeParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TargetStakeParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TargetStakeParameters::ArenaDtor(void* object) {
  TargetStakeParameters* _this = reinterpret_cast< TargetStakeParameters* >(object);
  (void)_this;
}
void TargetStakeParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetStakeParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetStakeParameters& TargetStakeParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetStakeParameters_markets_2eproto.base);
  return *internal_default_instance();
}


void TargetStakeParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TargetStakeParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_factor_) -
      reinterpret_cast<char*>(&time_window_)) + sizeof(scaling_factor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetStakeParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time_window = 1 [json_name = "timeWindow", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double scaling_factor = 2 [json_name = "scalingFactor", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          scaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetStakeParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TargetStakeParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time_window = 1 [json_name = "timeWindow", (.validator.field) = {
  if (this->time_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_window(), target);
  }

  // double scaling_factor = 2 [json_name = "scalingFactor", (.validator.field) = {
  if (!(this->scaling_factor() <= 0 && this->scaling_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_scaling_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TargetStakeParameters)
  return target;
}

size_t TargetStakeParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TargetStakeParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time_window = 1 [json_name = "timeWindow", (.validator.field) = {
  if (this->time_window() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_window());
  }

  // double scaling_factor = 2 [json_name = "scalingFactor", (.validator.field) = {
  if (!(this->scaling_factor() <= 0 && this->scaling_factor() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetStakeParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TargetStakeParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetStakeParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetStakeParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TargetStakeParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TargetStakeParameters)
    MergeFrom(*source);
  }
}

void TargetStakeParameters::MergeFrom(const TargetStakeParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TargetStakeParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_window() != 0) {
    _internal_set_time_window(from._internal_time_window());
  }
  if (!(from.scaling_factor() <= 0 && from.scaling_factor() >= 0)) {
    _internal_set_scaling_factor(from._internal_scaling_factor());
  }
}

void TargetStakeParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TargetStakeParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetStakeParameters::CopyFrom(const TargetStakeParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TargetStakeParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetStakeParameters::IsInitialized() const {
  return true;
}

void TargetStakeParameters::InternalSwap(TargetStakeParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetStakeParameters, scaling_factor_)
      + sizeof(TargetStakeParameters::scaling_factor_)
      - PROTOBUF_FIELD_OFFSET(TargetStakeParameters, time_window_)>(
          reinterpret_cast<char*>(&time_window_),
          reinterpret_cast<char*>(&other->time_window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetStakeParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Market::_Internal {
 public:
  static const ::vega::TradableInstrument& tradable_instrument(const Market* msg);
  static const ::vega::Fees& fees(const Market* msg);
  static const ::vega::AuctionDuration& opening_auction(const Market* msg);
  static const ::vega::ContinuousTrading& continuous(const Market* msg);
  static const ::vega::DiscreteTrading& discrete(const Market* msg);
  static const ::vega::PriceMonitoringSettings& price_monitoring_settings(const Market* msg);
  static const ::vega::LiquidityMonitoringParameters& liquidity_monitoring_parameters(const Market* msg);
  static const ::vega::MarketTimestamps& market_timestamps(const Market* msg);
};

const ::vega::TradableInstrument&
Market::_Internal::tradable_instrument(const Market* msg) {
  return *msg->tradable_instrument_;
}
const ::vega::Fees&
Market::_Internal::fees(const Market* msg) {
  return *msg->fees_;
}
const ::vega::AuctionDuration&
Market::_Internal::opening_auction(const Market* msg) {
  return *msg->opening_auction_;
}
const ::vega::ContinuousTrading&
Market::_Internal::continuous(const Market* msg) {
  return *msg->trading_mode_config_.continuous_;
}
const ::vega::DiscreteTrading&
Market::_Internal::discrete(const Market* msg) {
  return *msg->trading_mode_config_.discrete_;
}
const ::vega::PriceMonitoringSettings&
Market::_Internal::price_monitoring_settings(const Market* msg) {
  return *msg->price_monitoring_settings_;
}
const ::vega::LiquidityMonitoringParameters&
Market::_Internal::liquidity_monitoring_parameters(const Market* msg) {
  return *msg->liquidity_monitoring_parameters_;
}
const ::vega::MarketTimestamps&
Market::_Internal::market_timestamps(const Market* msg) {
  return *msg->market_timestamps_;
}
void Market::set_allocated_continuous(::vega::ContinuousTrading* continuous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_trading_mode_config();
  if (continuous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(continuous);
    if (message_arena != submessage_arena) {
      continuous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuous, submessage_arena);
    }
    set_has_continuous();
    trading_mode_config_.continuous_ = continuous;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Market.continuous)
}
void Market::set_allocated_discrete(::vega::DiscreteTrading* discrete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_trading_mode_config();
  if (discrete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discrete);
    if (message_arena != submessage_arena) {
      discrete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete, submessage_arena);
    }
    set_has_discrete();
    trading_mode_config_.discrete_ = discrete;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Market.discrete)
}
Market::Market(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Market)
}
Market::Market(const Market& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(),
      GetArena());
  }
  if (from._internal_has_tradable_instrument()) {
    tradable_instrument_ = new ::vega::TradableInstrument(*from.tradable_instrument_);
  } else {
    tradable_instrument_ = nullptr;
  }
  if (from._internal_has_fees()) {
    fees_ = new ::vega::Fees(*from.fees_);
  } else {
    fees_ = nullptr;
  }
  if (from._internal_has_opening_auction()) {
    opening_auction_ = new ::vega::AuctionDuration(*from.opening_auction_);
  } else {
    opening_auction_ = nullptr;
  }
  if (from._internal_has_price_monitoring_settings()) {
    price_monitoring_settings_ = new ::vega::PriceMonitoringSettings(*from.price_monitoring_settings_);
  } else {
    price_monitoring_settings_ = nullptr;
  }
  if (from._internal_has_liquidity_monitoring_parameters()) {
    liquidity_monitoring_parameters_ = new ::vega::LiquidityMonitoringParameters(*from.liquidity_monitoring_parameters_);
  } else {
    liquidity_monitoring_parameters_ = nullptr;
  }
  if (from._internal_has_market_timestamps()) {
    market_timestamps_ = new ::vega::MarketTimestamps(*from.market_timestamps_);
  } else {
    market_timestamps_ = nullptr;
  }
  ::memcpy(&decimal_places_, &from.decimal_places_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&decimal_places_)) + sizeof(state_));
  clear_has_trading_mode_config();
  switch (from.trading_mode_config_case()) {
    case kContinuous: {
      _internal_mutable_continuous()->::vega::ContinuousTrading::MergeFrom(from._internal_continuous());
      break;
    }
    case kDiscrete: {
      _internal_mutable_discrete()->::vega::DiscreteTrading::MergeFrom(from._internal_discrete());
      break;
    }
    case TRADING_MODE_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.Market)
}

void Market::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Market_markets_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tradable_instrument_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&tradable_instrument_)) + sizeof(state_));
  clear_has_trading_mode_config();
}

Market::~Market() {
  // @@protoc_insertion_point(destructor:vega.Market)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tradable_instrument_;
  if (this != internal_default_instance()) delete fees_;
  if (this != internal_default_instance()) delete opening_auction_;
  if (this != internal_default_instance()) delete price_monitoring_settings_;
  if (this != internal_default_instance()) delete liquidity_monitoring_parameters_;
  if (this != internal_default_instance()) delete market_timestamps_;
  if (has_trading_mode_config()) {
    clear_trading_mode_config();
  }
}

void Market::ArenaDtor(void* object) {
  Market* _this = reinterpret_cast< Market* >(object);
  (void)_this;
}
void Market::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Market& Market::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Market_markets_2eproto.base);
  return *internal_default_instance();
}


void Market::clear_trading_mode_config() {
// @@protoc_insertion_point(one_of_clear_start:vega.Market)
  switch (trading_mode_config_case()) {
    case kContinuous: {
      if (GetArena() == nullptr) {
        delete trading_mode_config_.continuous_;
      }
      break;
    }
    case kDiscrete: {
      if (GetArena() == nullptr) {
        delete trading_mode_config_.discrete_;
      }
      break;
    }
    case TRADING_MODE_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRADING_MODE_CONFIG_NOT_SET;
}


void Market::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArena() == nullptr && tradable_instrument_ != nullptr) {
    delete tradable_instrument_;
  }
  tradable_instrument_ = nullptr;
  if (GetArena() == nullptr && fees_ != nullptr) {
    delete fees_;
  }
  fees_ = nullptr;
  if (GetArena() == nullptr && opening_auction_ != nullptr) {
    delete opening_auction_;
  }
  opening_auction_ = nullptr;
  if (GetArena() == nullptr && price_monitoring_settings_ != nullptr) {
    delete price_monitoring_settings_;
  }
  price_monitoring_settings_ = nullptr;
  if (GetArena() == nullptr && liquidity_monitoring_parameters_ != nullptr) {
    delete liquidity_monitoring_parameters_;
  }
  liquidity_monitoring_parameters_ = nullptr;
  if (GetArena() == nullptr && market_timestamps_ != nullptr) {
    delete market_timestamps_;
  }
  market_timestamps_ = nullptr;
  ::memset(&decimal_places_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&decimal_places_)) + sizeof(state_));
  clear_trading_mode_config();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Market.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.TradableInstrument tradable_instrument = 2 [json_name = "tradableInstrument"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tradable_instrument(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 decimal_places = 3 [json_name = "decimalPlaces"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Fees fees = 4 [json_name = "fees"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fees(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AuctionDuration opening_auction = 5 [json_name = "openingAuction"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opening_auction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PriceMonitoringSettings price_monitoring_settings = 6 [json_name = "priceMonitoringSettings"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_monitoring_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LiquidityMonitoringParameters liquidity_monitoring_parameters = 7 [json_name = "liquidityMonitoringParameters"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidity_monitoring_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Market.TradingMode trading_mode = 8 [json_name = "tradingMode"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_mode(static_cast<::vega::Market_TradingMode>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Market.State state = 9 [json_name = "state"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::vega::Market_State>(val));
        } else goto handle_unusual;
        continue;
      // .vega.MarketTimestamps market_timestamps = 10 [json_name = "marketTimestamps"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_timestamps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ContinuousTrading continuous = 100 [json_name = "continuous"];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuous(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.DiscreteTrading discrete = 101 [json_name = "discrete"];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Market.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .vega.TradableInstrument tradable_instrument = 2 [json_name = "tradableInstrument"];
  if (this->has_tradable_instrument()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tradable_instrument(this), target, stream);
  }

  // uint64 decimal_places = 3 [json_name = "decimalPlaces"];
  if (this->decimal_places() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_decimal_places(), target);
  }

  // .vega.Fees fees = 4 [json_name = "fees"];
  if (this->has_fees()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fees(this), target, stream);
  }

  // .vega.AuctionDuration opening_auction = 5 [json_name = "openingAuction"];
  if (this->has_opening_auction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::opening_auction(this), target, stream);
  }

  // .vega.PriceMonitoringSettings price_monitoring_settings = 6 [json_name = "priceMonitoringSettings"];
  if (this->has_price_monitoring_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::price_monitoring_settings(this), target, stream);
  }

  // .vega.LiquidityMonitoringParameters liquidity_monitoring_parameters = 7 [json_name = "liquidityMonitoringParameters"];
  if (this->has_liquidity_monitoring_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::liquidity_monitoring_parameters(this), target, stream);
  }

  // .vega.Market.TradingMode trading_mode = 8 [json_name = "tradingMode"];
  if (this->trading_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_trading_mode(), target);
  }

  // .vega.Market.State state = 9 [json_name = "state"];
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // .vega.MarketTimestamps market_timestamps = 10 [json_name = "marketTimestamps"];
  if (this->has_market_timestamps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::market_timestamps(this), target, stream);
  }

  // .vega.ContinuousTrading continuous = 100 [json_name = "continuous"];
  if (_internal_has_continuous()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::continuous(this), target, stream);
  }

  // .vega.DiscreteTrading discrete = 101 [json_name = "discrete"];
  if (_internal_has_discrete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::discrete(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Market)
  return target;
}

size_t Market::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Market)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .vega.TradableInstrument tradable_instrument = 2 [json_name = "tradableInstrument"];
  if (this->has_tradable_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradable_instrument_);
  }

  // .vega.Fees fees = 4 [json_name = "fees"];
  if (this->has_fees()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fees_);
  }

  // .vega.AuctionDuration opening_auction = 5 [json_name = "openingAuction"];
  if (this->has_opening_auction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opening_auction_);
  }

  // .vega.PriceMonitoringSettings price_monitoring_settings = 6 [json_name = "priceMonitoringSettings"];
  if (this->has_price_monitoring_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_monitoring_settings_);
  }

  // .vega.LiquidityMonitoringParameters liquidity_monitoring_parameters = 7 [json_name = "liquidityMonitoringParameters"];
  if (this->has_liquidity_monitoring_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *liquidity_monitoring_parameters_);
  }

  // .vega.MarketTimestamps market_timestamps = 10 [json_name = "marketTimestamps"];
  if (this->has_market_timestamps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *market_timestamps_);
  }

  // uint64 decimal_places = 3 [json_name = "decimalPlaces"];
  if (this->decimal_places() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_decimal_places());
  }

  // .vega.Market.TradingMode trading_mode = 8 [json_name = "tradingMode"];
  if (this->trading_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trading_mode());
  }

  // .vega.Market.State state = 9 [json_name = "state"];
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  switch (trading_mode_config_case()) {
    // .vega.ContinuousTrading continuous = 100 [json_name = "continuous"];
    case kContinuous: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trading_mode_config_.continuous_);
      break;
    }
    // .vega.DiscreteTrading discrete = 101 [json_name = "discrete"];
    case kDiscrete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trading_mode_config_.discrete_);
      break;
    }
    case TRADING_MODE_CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Market)
  GOOGLE_DCHECK_NE(&from, this);
  const Market* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Market)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Market)
    MergeFrom(*source);
  }
}

void Market::MergeFrom(const Market& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Market)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_tradable_instrument()) {
    _internal_mutable_tradable_instrument()->::vega::TradableInstrument::MergeFrom(from._internal_tradable_instrument());
  }
  if (from.has_fees()) {
    _internal_mutable_fees()->::vega::Fees::MergeFrom(from._internal_fees());
  }
  if (from.has_opening_auction()) {
    _internal_mutable_opening_auction()->::vega::AuctionDuration::MergeFrom(from._internal_opening_auction());
  }
  if (from.has_price_monitoring_settings()) {
    _internal_mutable_price_monitoring_settings()->::vega::PriceMonitoringSettings::MergeFrom(from._internal_price_monitoring_settings());
  }
  if (from.has_liquidity_monitoring_parameters()) {
    _internal_mutable_liquidity_monitoring_parameters()->::vega::LiquidityMonitoringParameters::MergeFrom(from._internal_liquidity_monitoring_parameters());
  }
  if (from.has_market_timestamps()) {
    _internal_mutable_market_timestamps()->::vega::MarketTimestamps::MergeFrom(from._internal_market_timestamps());
  }
  if (from.decimal_places() != 0) {
    _internal_set_decimal_places(from._internal_decimal_places());
  }
  if (from.trading_mode() != 0) {
    _internal_set_trading_mode(from._internal_trading_mode());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  switch (from.trading_mode_config_case()) {
    case kContinuous: {
      _internal_mutable_continuous()->::vega::ContinuousTrading::MergeFrom(from._internal_continuous());
      break;
    }
    case kDiscrete: {
      _internal_mutable_discrete()->::vega::DiscreteTrading::MergeFrom(from._internal_discrete());
      break;
    }
    case TRADING_MODE_CONFIG_NOT_SET: {
      break;
    }
  }
}

void Market::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Market)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market::CopyFrom(const Market& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Market)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market::IsInitialized() const {
  return true;
}

void Market::InternalSwap(Market* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Market, state_)
      + sizeof(Market::state_)
      - PROTOBUF_FIELD_OFFSET(Market, tradable_instrument_)>(
          reinterpret_cast<char*>(&tradable_instrument_),
          reinterpret_cast<char*>(&other->tradable_instrument_));
  swap(trading_mode_config_, other->trading_mode_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Market::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketTimestamps::_Internal {
 public:
};

MarketTimestamps::MarketTimestamps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarketTimestamps)
}
MarketTimestamps::MarketTimestamps(const MarketTimestamps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&proposed_, &from.proposed_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&proposed_)) + sizeof(close_));
  // @@protoc_insertion_point(copy_constructor:vega.MarketTimestamps)
}

void MarketTimestamps::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&proposed_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&proposed_)) + sizeof(close_));
}

MarketTimestamps::~MarketTimestamps() {
  // @@protoc_insertion_point(destructor:vega.MarketTimestamps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketTimestamps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketTimestamps::ArenaDtor(void* object) {
  MarketTimestamps* _this = reinterpret_cast< MarketTimestamps* >(object);
  (void)_this;
}
void MarketTimestamps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketTimestamps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketTimestamps& MarketTimestamps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketTimestamps_markets_2eproto.base);
  return *internal_default_instance();
}


void MarketTimestamps::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketTimestamps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&proposed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&proposed_)) + sizeof(close_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketTimestamps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 proposed = 1 [json_name = "proposed"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          proposed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pending = 2 [json_name = "pending"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 open = 3 [json_name = "open"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 close = 4 [json_name = "close"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketTimestamps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketTimestamps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 proposed = 1 [json_name = "proposed"];
  if (this->proposed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_proposed(), target);
  }

  // int64 pending = 2 [json_name = "pending"];
  if (this->pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pending(), target);
  }

  // int64 open = 3 [json_name = "open"];
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_open(), target);
  }

  // int64 close = 4 [json_name = "close"];
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketTimestamps)
  return target;
}

size_t MarketTimestamps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketTimestamps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 proposed = 1 [json_name = "proposed"];
  if (this->proposed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_proposed());
  }

  // int64 pending = 2 [json_name = "pending"];
  if (this->pending() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pending());
  }

  // int64 open = 3 [json_name = "open"];
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_open());
  }

  // int64 close = 4 [json_name = "close"];
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_close());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketTimestamps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketTimestamps)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketTimestamps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketTimestamps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketTimestamps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketTimestamps)
    MergeFrom(*source);
  }
}

void MarketTimestamps::MergeFrom(const MarketTimestamps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketTimestamps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposed() != 0) {
    _internal_set_proposed(from._internal_proposed());
  }
  if (from.pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
}

void MarketTimestamps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketTimestamps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTimestamps::CopyFrom(const MarketTimestamps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketTimestamps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTimestamps::IsInitialized() const {
  return true;
}

void MarketTimestamps::InternalSwap(MarketTimestamps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketTimestamps, close_)
      + sizeof(MarketTimestamps::close_)
      - PROTOBUF_FIELD_OFFSET(MarketTimestamps, proposed_)>(
          reinterpret_cast<char*>(&proposed_),
          reinterpret_cast<char*>(&other->proposed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketTimestamps::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::AuctionDuration* Arena::CreateMaybeMessage< ::vega::AuctionDuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::AuctionDuration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ContinuousTrading* Arena::CreateMaybeMessage< ::vega::ContinuousTrading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ContinuousTrading >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::DiscreteTrading* Arena::CreateMaybeMessage< ::vega::DiscreteTrading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::DiscreteTrading >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Future* Arena::CreateMaybeMessage< ::vega::Future >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Future >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OracleSpecToFutureBinding* Arena::CreateMaybeMessage< ::vega::OracleSpecToFutureBinding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OracleSpecToFutureBinding >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::InstrumentMetadata* Arena::CreateMaybeMessage< ::vega::InstrumentMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::InstrumentMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Instrument* Arena::CreateMaybeMessage< ::vega::Instrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Instrument >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LogNormalRiskModel* Arena::CreateMaybeMessage< ::vega::LogNormalRiskModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LogNormalRiskModel >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LogNormalModelParams* Arena::CreateMaybeMessage< ::vega::LogNormalModelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LogNormalModelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::SimpleRiskModel* Arena::CreateMaybeMessage< ::vega::SimpleRiskModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::SimpleRiskModel >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::SimpleModelParams* Arena::CreateMaybeMessage< ::vega::SimpleModelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::SimpleModelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ScalingFactors* Arena::CreateMaybeMessage< ::vega::ScalingFactors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ScalingFactors >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarginCalculator* Arena::CreateMaybeMessage< ::vega::MarginCalculator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarginCalculator >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TradableInstrument* Arena::CreateMaybeMessage< ::vega::TradableInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TradableInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::FeeFactors* Arena::CreateMaybeMessage< ::vega::FeeFactors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::FeeFactors >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Fees* Arena::CreateMaybeMessage< ::vega::Fees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Fees >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceMonitoringTrigger* Arena::CreateMaybeMessage< ::vega::PriceMonitoringTrigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PriceMonitoringTrigger >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceMonitoringParameters* Arena::CreateMaybeMessage< ::vega::PriceMonitoringParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PriceMonitoringParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceMonitoringSettings* Arena::CreateMaybeMessage< ::vega::PriceMonitoringSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PriceMonitoringSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityMonitoringParameters* Arena::CreateMaybeMessage< ::vega::LiquidityMonitoringParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityMonitoringParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TargetStakeParameters* Arena::CreateMaybeMessage< ::vega::TargetStakeParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TargetStakeParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Market* Arena::CreateMaybeMessage< ::vega::Market >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Market >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketTimestamps* Arena::CreateMaybeMessage< ::vega::MarketTimestamps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarketTimestamps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
